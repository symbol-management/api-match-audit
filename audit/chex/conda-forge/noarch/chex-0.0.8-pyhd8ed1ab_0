{
 "bad": [
  "Base",
  "Derived",
  "DerivedFrozen",
  "SimpleClass",
  "SimpleDataclass",
  "SimpleDataclass.from_tuple",
  "_Dcls",
  "_InnerDcls",
  "assert_fn",
  "assert_fn.__name__",
  "chex._src.variants.ChexVariantType.WITHOUT_DEVICE",
  "chex._src.variants.ChexVariantType.WITHOUT_JIT",
  "chex._src.variants.ChexVariantType.WITH_DEVICE",
  "chex._src.variants.ChexVariantType.WITH_PMAP",
  "class_ctor",
  "collections.abc.Mapping",
  "collections.abc.Sequence",
  "collections.abc.Set",
  "dcls",
  "dcls.__dataclass_fields__.keys",
  "default_foo",
  "dummy_wrapper",
  "equality_comparator",
  "error_msg_fn",
  "exec_with_tracing_counter_checks",
  "f",
  "fails_for_without_device_variant",
  "fn",
  "fn_",
  "fn_0",
  "fn_1",
  "fn_jitted",
  "fn_static",
  "foo",
  "fu",
  "func",
  "generate",
  "get_val",
  "inner_fn",
  "inner_loss",
  "inner_loss_grad",
  "itertools",
  "itertools.chain",
  "itertools.product",
  "jax.api.FLAGS.experimental_cpp_jit",
  "jax.config.update",
  "jax.interpreters.xla._DeviceArray",
  "jax.interpreters.xla.type_is_device_array",
  "jax.lib.xla_bridge._backends.get",
  "jax.lib.xla_client._local_backends.get",
  "jax.lib.xla_extension.CpuDevice",
  "jax.lib.xla_extension.GpuDevice",
  "jax.lib.xla_extension.TpuDevice",
  "jax.lib.xla_extension.jax_jit.CompiledFunction",
  "jitted_outer_fn",
  "make_test",
  "map_cls",
  "nested_map_cls",
  "new_fn",
  "num_calls",
  "numpy.broadcast_to",
  "numpy.float32",
  "numpy.float64",
  "orig_init",
  "outer_fn",
  "overidden_foo",
  "pmapped_fn",
  "reduce_fn",
  "test_method",
  "variant_fn",
  "vmapped_fn",
  "wrapped_fn"
 ],
 "deps": {
  "Base": [],
  "Derived": [],
  "DerivedFrozen": [],
  "SimpleClass": [],
  "SimpleDataclass": [],
  "_Dcls": [],
  "_InnerDcls": [],
  "absl": [
   "absl-py/conda-forge/noarch/absl-py-0.12.0-pyhd8ed1ab_0"
  ],
  "assert_fn": [],
  "chex": [],
  "class_ctor": [],
  "collections": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "contextlib": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "copy": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "dataclasses": [
   "dataclasses/conda-forge/noarch/dataclasses-0.8-pyh787bdff_0",
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ],
  "dcls": [],
  "default_foo": [],
  "dummy_wrapper": [],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "equality_comparator": [],
  "error_msg_fn": [],
  "exec_with_tracing_counter_checks": [],
  "f": [],
  "fails_for_without_device_variant": [],
  "fn": [],
  "fn_": [],
  "fn_0": [],
  "fn_1": [],
  "fn_jitted": [],
  "fn_static": [],
  "foo": [],
  "fu": [],
  "func": [],
  "functools": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "generate": [],
  "get_val": [],
  "inner_fn": [],
  "inner_loss": [],
  "inner_loss_grad": [],
  "inspect": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "itertools": [],
  "jax": [
   "jax/conda-forge/noarch/jax-0.1.73-py_0"
  ],
  "jitted_outer_fn": [],
  "make_test": [],
  "map_cls": [],
  "nested_map_cls": [],
  "new_fn": [],
  "num_calls": [],
  "numpy": [
   "numpy/conda-forge/linux-64/numpy-1.9.3-py27_blas_openblashb06ca3d_7"
  ],
  "orig_init": [],
  "os": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "outer_fn": [],
  "overidden_foo": [],
  "pmapped_fn": [],
  "re": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "reduce_fn": [],
  "test_method": [],
  "toolz": [
   "toolz/conda-forge/noarch/toolz-0.8.2-py_3"
  ],
  "traceback": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "tree": [
   "dm-tree/conda-forge/linux-64/dm-tree-0.1.5-py37h10a2094_1"
  ],
  "typing": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "unittest": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "variant_fn": [],
  "vmapped_fn": [],
  "wrapped_fn": []
 }
}