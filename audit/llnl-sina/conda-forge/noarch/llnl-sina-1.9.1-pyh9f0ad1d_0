{
 "bad": [
  "DataRange",
  "ScalarListCriteria",
  "StringListCriteria",
  "_add_common_args",
  "_check_common_args",
  "_cross_populate_batch",
  "_get_guessed_database_type",
  "_make_factory",
  "_test_file_against_schema",
  "add_restriction",
  "assertRightValuesReturned",
  "cassandra.auth.PlainTextAuthProvider",
  "cassandra.cluster.Cluster",
  "cassandra.cqlengine.columns",
  "cassandra.cqlengine.columns.Double",
  "cassandra.cqlengine.columns.Set",
  "cassandra.cqlengine.columns.Text",
  "cassandra.cqlengine.connection",
  "cassandra.cqlengine.connection.set_session",
  "cassandra.cqlengine.connection.setup",
  "cassandra.cqlengine.management",
  "cassandra.cqlengine.management.create_keyspace_simple",
  "cassandra.cqlengine.management.drop_keyspace",
  "cassandra.cqlengine.management.sync_table",
  "cassandra.cqlengine.models.Model",
  "cassandra.cqlengine.query.AbstractQuerySet",
  "cassandra.cqlengine.query.AbstractQuerySet.__init__",
  "cassandra.cqlengine.query.BatchQuery",
  "cassandra.cqlengine.query.DoesNotExist",
  "cassandra.policies.DCAwareRoundRobinPolicy",
  "cassandra.policies.TokenAwarePolicy",
  "col_op",
  "collections.Sequence",
  "create",
  "create_meta",
  "data_type",
  "errno",
  "errno.EEXIST",
  "gen_test_exec",
  "gen_test_flake8",
  "get_diff_attribute",
  "get_list_rows_with_val",
  "id.setter",
  "itertools",
  "itertools.chain",
  "max_op",
  "min_op",
  "mock",
  "mock.MagicMock",
  "mock.Mock",
  "mock.patch",
  "mock.patch.object",
  "nose.plugins.attrib.attr",
  "orig_init",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.path.realpath",
  "os.path.split",
  "os.path.splitext",
  "os.remove",
  "range.min",
  "rec_from_x_create",
  "rec_from_x_max_create",
  "resolve_collision",
  "set.intersection",
  "set_func",
  "sina.__init__.__VERSION__",
  "sina.datastores.cass_schema.DocumentFromRecord.create",
  "sina.datastores.cass_schema.DocumentFromRecord.if_not_exists",
  "sina.datastores.cass_schema.DocumentFromRecord.objects",
  "sina.datastores.cass_schema.DocumentFromRecord.objects.allow_filtering",
  "sina.datastores.cass_schema.DocumentFromRecord.objects.filter",
  "sina.datastores.cass_schema.ObjectFromSubject.batch",
  "sina.datastores.cass_schema.ObjectFromSubject.objects",
  "sina.datastores.cass_schema.ObjectFromSubject.objects.filter",
  "sina.datastores.cass_schema.Record.create",
  "sina.datastores.cass_schema.Record.id.in_",
  "sina.datastores.cass_schema.Record.if_not_exists",
  "sina.datastores.cass_schema.Record.objects",
  "sina.datastores.cass_schema.Record.objects.filter",
  "sina.datastores.cass_schema.Record.objects.values_list",
  "sina.datastores.cass_schema.RecordFromCurveSetMeta.create",
  "sina.datastores.cass_schema.RecordFromCurveSetMeta.filter",
  "sina.datastores.cass_schema.RecordFromCurveSetMeta.if_not_exists",
  "sina.datastores.cass_schema.RecordFromScalarData.objects.filter",
  "sina.datastores.cass_schema.RecordFromStringListData.filter",
  "sina.datastores.cass_schema.ScalarDataFromRecord.objects.filter",
  "sina.datastores.cass_schema.SubjectFromObject.batch",
  "sina.datastores.cass_schema.SubjectFromObject.objects",
  "sina.datastores.sql_schema.CurveSetMeta.id",
  "sina.datastores.sql_schema.CurveSetMeta.name",
  "sina.datastores.sql_schema.Document.id",
  "sina.datastores.sql_schema.Document.id.in_",
  "sina.datastores.sql_schema.Document.mimetype",
  "sina.datastores.sql_schema.Document.uri",
  "sina.datastores.sql_schema.Document.uri.like",
  "sina.datastores.sql_schema.Record.id",
  "sina.datastores.sql_schema.Record.id.in_",
  "sina.datastores.sql_schema.Record.type",
  "sina.datastores.sql_schema.Relationship.object_id",
  "sina.datastores.sql_schema.Relationship.predicate",
  "sina.datastores.sql_schema.Relationship.subject_id",
  "sina.datastores.sql_schema.ScalarData.id",
  "sina.datastores.sql_schema.ScalarData.name",
  "sina.datastores.sql_schema.ScalarData.name.asc",
  "sina.datastores.sql_schema.ScalarData.name.in_",
  "sina.datastores.sql_schema.ScalarData.tags",
  "sina.datastores.sql_schema.ScalarData.units",
  "sina.datastores.sql_schema.ScalarData.value",
  "sina.datastores.sql_schema.ScalarData.value.asc",
  "sina.datastores.sql_schema.ScalarData.value.desc",
  "sina.utils.ListQueryOperation.ALL_IN",
  "sina.utils.ListQueryOperation.ANY_IN",
  "sina.utils.ListQueryOperation.HAS_ALL",
  "sina.utils.ListQueryOperation.HAS_ANY",
  "six.moves.cStringIO",
  "sqlalchemy.func.count",
  "sqlite3.connect",
  "sys",
  "sys.__stdout__",
  "sys.argv",
  "sys.stdout",
  "sys.stdout.getvalue",
  "time",
  "time.time",
  "type.__new__",
  "type.setter",
  "x_from_rec_create"
 ],
 "deps": {
  "DataRange": [],
  "ScalarListCriteria": [],
  "StringListCriteria": [],
  "__future__": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "_add_common_args": [],
  "_check_common_args": [],
  "_cross_populate_batch": [],
  "_get_guessed_database_type": [],
  "_make_factory": [],
  "_test_file_against_schema": [],
  "abc": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "add_restriction": [],
  "argparse": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "assertRightValuesReturned": [],
  "ast": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "cassandra": [],
  "col_op": [],
  "collections": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "create": [],
  "create_meta": [],
  "csv": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "data_type": [],
  "datetime": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "deepdiff": [
   "deepdiff/conda-forge/noarch/deepdiff-4.0.4-py_0"
  ],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "errno": [],
  "fnmatch": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "gen_test_exec": [],
  "gen_test_flake8": [],
  "get_diff_attribute": [],
  "get_list_rows_with_val": [],
  "getpass": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "id": [],
  "inspect": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "io": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "itertools": [],
  "json": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "jsonschema": [
   "jsonschema/conda-forge/noarch/jsonschema-3.2.0-py_2"
  ],
  "logging": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "max_op": [],
  "min_op": [],
  "mock": [],
  "multiprocessing": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "nbconvert": [
   "nbconvert/conda-forge/noarch/nbconvert-5.5.0-py_0"
  ],
  "nbformat": [
   "nbformat/conda-forge/noarch/nbformat-5.1.3-pyhd8ed1ab_0"
  ],
  "nose": [],
  "numbers": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "orig_init": [],
  "os": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "range": [],
  "rec_from_x_create": [],
  "rec_from_x_max_create": [],
  "resolve_collision": [],
  "set": [],
  "set_func": [],
  "shutil": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "sina": [],
  "six": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "six/conda-forge/linux-64/six-1.14.0-py36_0"
  ],
  "sqlalchemy": [
   "sqlalchemy/conda-forge/linux-64/sqlalchemy-1.3.15-py36h8c4c3a4_1",
   "sqlalchemy/conda-forge/linux-64/sqlalchemy-1.4.6-py37h6b43d8f_0"
  ],
  "sqlite3": [],
  "subprocess": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "sys": [],
  "tempfile": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "texttable": [
   "texttable/conda-forge/noarch/texttable-1.6.2-py_0"
  ],
  "time": [],
  "type": [],
  "types": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "unittest": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "uuid": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "warnings": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "x_from_rec_create": []
 }
}