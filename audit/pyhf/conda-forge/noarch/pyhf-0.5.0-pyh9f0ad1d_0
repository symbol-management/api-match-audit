{
 "bad": [
  "_modifier",
  "c",
  "calculators.AsymptoticCalculator",
  "click.Choice",
  "click.ParamType",
  "click.Path",
  "click.Tuple",
  "click.argument",
  "click.command",
  "click.echo",
  "click.group",
  "click.open_file",
  "click.option",
  "click.secho",
  "click.version_option",
  "code0._slow_code0",
  "code0.code0",
  "code1._slow_code1",
  "code1.code1",
  "code2._slow_code2",
  "code2.code2",
  "code4._slow_code4",
  "code4.code4",
  "code4p._slow_code4p",
  "code4p.code4p",
  "collections.Counter",
  "common.shim",
  "complete.cli",
  "constraints.gaussian_constraint_combined",
  "constraints.poisson_constraint_combined",
  "copy.deepcopy",
  "default_backend.astensor",
  "default_backend.concatenate",
  "default_backend.divide",
  "default_backend.einsum",
  "default_backend.log",
  "default_backend.ones",
  "default_backend.power",
  "default_backend.product",
  "default_backend.reshape",
  "default_backend.shape",
  "default_backend.sqrt",
  "default_backend.stack",
  "default_backend.sum",
  "default_backend.tile",
  "default_backend.tolist",
  "default_backend.where",
  "default_backend.zeros",
  "events.register",
  "events.subscribe",
  "events.trigger",
  "exceptions.FailedMinimization",
  "exceptions.ImportBackendError",
  "exceptions.InvalidBackend",
  "exceptions.InvalidInterpCode",
  "exceptions.InvalidMeasurement",
  "exceptions.InvalidModel",
  "exceptions.InvalidModifier",
  "exceptions.InvalidNameReuse",
  "exceptions.InvalidOptimizer",
  "exceptions.InvalidPatchLookup",
  "exceptions.InvalidPatchSet",
  "exceptions.InvalidPdfData",
  "exceptions.InvalidPdfParameters",
  "exceptions.InvalidSpecification",
  "exceptions.InvalidWorkspaceOperation",
  "exceptions.PatchSetVerificationError",
  "exceptions.UnspecifiedPOI",
  "exceptions.Unsupported",
  "f",
  "func",
  "hash_alg",
  "histosys.histosys",
  "histosys.histosys_combined",
  "iminuit.Minuit.from_array_func",
  "infer.cls",
  "infer.hypotest",
  "jax.config.config.update",
  "jax.jit",
  "jax.numpy.abs",
  "jax.numpy.asarray",
  "jax.numpy.bool_",
  "jax.numpy.broadcast_arrays",
  "jax.numpy.clip",
  "jax.numpy.concatenate",
  "jax.numpy.divide",
  "jax.numpy.einsum",
  "jax.numpy.exp",
  "jax.numpy.float32",
  "jax.numpy.float64",
  "jax.numpy.int32",
  "jax.numpy.int64",
  "jax.numpy.isfinite",
  "jax.numpy.log",
  "jax.numpy.ones",
  "jax.numpy.outer",
  "jax.numpy.pi",
  "jax.numpy.power",
  "jax.numpy.prod",
  "jax.numpy.reshape",
  "jax.numpy.sqrt",
  "jax.numpy.square",
  "jax.numpy.stack",
  "jax.numpy.sum",
  "jax.numpy.tile",
  "jax.numpy.where",
  "jax.numpy.zeros",
  "jax.scipy.special.gammaln",
  "jax.scipy.stats.norm.cdf",
  "jax.scipy.stats.norm.osp_stats.norm",
  "jax.scipy.stats.norm.pdf",
  "jax.scipy.stats.poisson.osp_stats.poisson",
  "jax.value_and_grad",
  "jax_backend.jax_backend",
  "json.dump",
  "json.dumps",
  "json.load",
  "json.loads",
  "jsonpatch.JsonPatch",
  "jsonpatch.JsonPatch.__eq__",
  "jsonschema.Draft6Validator",
  "jsonschema.RefResolver",
  "jsonschema.ValidationError",
  "list.__repr__",
  "logging.basicConfig",
  "logging.getLogger",
  "lumi.lumi",
  "lumi.lumi_combined",
  "math.log",
  "math.pow",
  "math.sqrt",
  "mixins.OptimizerMixin",
  "mixins._ChannelSummaryMixin",
  "mle.fit",
  "mle.fixed_poi_fit",
  "modifiers.combined.items",
  "modifiers.registry.keys",
  "modifiers.registry.required_parset",
  "modifiers.uncombined.items",
  "modifiers.uncombined.keys",
  "new_optimizer",
  "normfactor.normfactor",
  "normfactor.normfactor_combined",
  "normsys.normsys",
  "normsys.normsys_combined",
  "numpy.abs",
  "numpy.arange",
  "numpy.array",
  "numpy.asarray",
  "numpy.bool_",
  "numpy.broadcast_arrays",
  "numpy.clip",
  "numpy.concatenate",
  "numpy.divide",
  "numpy.einsum",
  "numpy.exp",
  "numpy.float32",
  "numpy.float64",
  "numpy.int32",
  "numpy.int64",
  "numpy.isfinite",
  "numpy.log",
  "numpy.multiply",
  "numpy.ones",
  "numpy.outer",
  "numpy.pi",
  "numpy.power",
  "numpy.product",
  "numpy.reshape",
  "numpy.sqrt",
  "numpy.square",
  "numpy.stack",
  "numpy.sum",
  "numpy.tile",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "numpy_backend.numpy_backend",
  "object.__repr__",
  "objective",
  "opt_jax.wrap_objective",
  "opt_minuit.minuit_optimizer",
  "opt_minuit.minuit_optimizer.__module__",
  "opt_numpy.wrap_objective",
  "opt_pytorch.wrap_objective",
  "opt_scipy.scipy_optimizer",
  "opt_scipy.scipy_optimizer.__module__",
  "opt_tflow.wrap_objective",
  "optimize.OptimizerRetriever",
  "optimize.OptimizerRetriever.scipy_optimizer",
  "os.makedirs",
  "parameters.ParamViewer",
  "parameters.constrained_by_normal",
  "parameters.constrained_by_poisson",
  "parameters.reduce_paramsets_requirements",
  "parameters.unconstrained",
  "paramset_type",
  "patchset.PatchSet",
  "patchset.cli",
  "pathlib.Path",
  "pathlib.Path.cwd",
  "pdf.Model",
  "pkg_resources.resource_filename",
  "probability.Independent",
  "probability.Normal",
  "probability.Poisson",
  "probability.Simultaneous",
  "pyhf.cli.cli.pyhf",
  "pyhf.cli.infer.cli",
  "pyhf.cli.infer.get_backend",
  "pyhf.cli.infer.log",
  "pyhf.cli.infer.optimize",
  "pyhf.cli.infer.set_backend",
  "pyhf.cli.patchset.cli",
  "pyhf.cli.patchset.log",
  "pyhf.cli.rootio.cli",
  "pyhf.cli.rootio.log",
  "pyhf.cli.rootio.uproot",
  "pyhf.cli.spec.cli",
  "pyhf.cli.spec.log",
  "pyhf.constraints.get_backend",
  "pyhf.events.Callables",
  "pyhf.events.__disabled_events",
  "pyhf.events.__events",
  "pyhf.events.noop",
  "pyhf.events.trigger",
  "pyhf.infer.calculators.AsymptoticTestStatDistribution",
  "pyhf.infer.calculators.generate_asimov_data",
  "pyhf.infer.calculators.get_backend",
  "pyhf.infer.get_backend",
  "pyhf.infer.mle.get_backend",
  "pyhf.infer.mle.twice_nll",
  "pyhf.infer.test_statistics.get_backend",
  "pyhf.interpolators.code0._slow_interpolator_looper",
  "pyhf.interpolators.code0.get_backend",
  "pyhf.interpolators.code1._slow_interpolator_looper",
  "pyhf.interpolators.code1.get_backend",
  "pyhf.interpolators.code2._slow_interpolator_looper",
  "pyhf.interpolators.code2.get_backend",
  "pyhf.interpolators.code4._slow_interpolator_looper",
  "pyhf.interpolators.code4.get_backend",
  "pyhf.interpolators.code4p._slow_interpolator_looper",
  "pyhf.interpolators.code4p.get_backend",
  "pyhf.mixins._ChannelSummaryMixin",
  "pyhf.modifiers.add_to_registry",
  "pyhf.modifiers.get_backend",
  "pyhf.modifiers.histosys.get_backend",
  "pyhf.modifiers.histosys.interpolators",
  "pyhf.modifiers.histosys.modifier",
  "pyhf.modifiers.lumi.get_backend",
  "pyhf.modifiers.lumi.modifier",
  "pyhf.modifiers.normfactor.get_backend",
  "pyhf.modifiers.normfactor.modifier",
  "pyhf.modifiers.normsys.get_backend",
  "pyhf.modifiers.normsys.interpolators",
  "pyhf.modifiers.normsys.modifier",
  "pyhf.modifiers.registry",
  "pyhf.modifiers.shapefactor.get_backend",
  "pyhf.modifiers.shapefactor.modifier",
  "pyhf.modifiers.shapesys.get_backend",
  "pyhf.modifiers.shapesys.modifier",
  "pyhf.modifiers.staterror.get_backend",
  "pyhf.modifiers.staterror.modifier",
  "pyhf.modifiers.validate_modifier_structure",
  "pyhf.optimize._OptimizerRetriever",
  "pyhf.optimize.common._get_tensor_shim",
  "pyhf.optimize.common.get_backend",
  "pyhf.optimize.mixins.get_backend",
  "pyhf.optimize.mixins.log",
  "pyhf.optimize.opt_jax._final_objective",
  "pyhf.optimize.opt_jax._jitted_objective",
  "pyhf.optimize.opt_jax.get_backend",
  "pyhf.optimize.opt_jax.log",
  "pyhf.optimize.opt_numpy.get_backend",
  "pyhf.optimize.opt_pytorch.get_backend",
  "pyhf.optimize.opt_tflow.get_backend",
  "pyhf.optimizer",
  "pyhf.parameters.paramsets.constrained_by_normal",
  "pyhf.parameters.paramsets.constrained_by_poisson",
  "pyhf.parameters.paramsets.constrained_paramset",
  "pyhf.parameters.paramsets.paramset",
  "pyhf.parameters.paramsets.unconstrained",
  "pyhf.parameters.paramview._tensorviewer_from_parmap",
  "pyhf.parameters.paramview.extract_index_access",
  "pyhf.parameters.paramview.get_backend",
  "pyhf.patchset.Patch",
  "pyhf.patchset.log",
  "pyhf.pdf._ConstraintModel",
  "pyhf.pdf._MainModel",
  "pyhf.pdf._ModelConfig",
  "pyhf.pdf._nominal_and_modifiers_from_spec",
  "pyhf.pdf._paramset_requirements_from_channelspec",
  "pyhf.pdf._paramset_requirements_from_modelspec",
  "pyhf.pdf.get_backend",
  "pyhf.pdf.log",
  "pyhf.probability.Independent",
  "pyhf.probability.Simultaneous",
  "pyhf.probability._SimpleDistributionMixin",
  "pyhf.probability.get_backend",
  "pyhf.readxml.__FILECACHE__",
  "pyhf.readxml.dedupe_parameters",
  "pyhf.readxml.extract_error",
  "pyhf.readxml.import_root_histogram",
  "pyhf.readxml.log",
  "pyhf.readxml.process_channel",
  "pyhf.readxml.process_data",
  "pyhf.readxml.process_measurements",
  "pyhf.readxml.process_sample",
  "pyhf.simplemodels.Model",
  "pyhf.tensor._BackendRetriever",
  "pyhf.tensor.common._TensorViewer",
  "pyhf.tensor.common._tensorviewer_from_slices",
  "pyhf.tensor.common.default_backend",
  "pyhf.tensor.common.get_backend",
  "pyhf.tensor.jax_backend._BasicNormal",
  "pyhf.tensor.jax_backend._BasicPoisson",
  "pyhf.tensor.jax_backend.jax_backend",
  "pyhf.tensor.jax_backend.log",
  "pyhf.tensor.numpy_backend._BasicNormal",
  "pyhf.tensor.numpy_backend._BasicPoisson",
  "pyhf.tensor.numpy_backend.log",
  "pyhf.tensor.numpy_backend.numpy_backend",
  "pyhf.tensor.pytorch_backend.log",
  "pyhf.tensor.tensorflow_backend.log",
  "pyhf.tensorlib",
  "pyhf.utils.SCHEMA_BASE",
  "pyhf.utils.SCHEMA_CACHE",
  "pyhf.utils.SCHEMA_VERSION",
  "pyhf.utils.hashlib",
  "pyhf.utils.load_schema",
  "pyhf.utils.options_from_eqdelimstring",
  "pyhf.workspace.Workspace",
  "pyhf.workspace._join_channels",
  "pyhf.workspace._join_items",
  "pyhf.workspace._join_measurements",
  "pyhf.workspace._join_observations",
  "pyhf.workspace._join_parameter_configs",
  "pyhf.workspace._join_versions",
  "pyhf.workspace.log",
  "pyhf.writexml._ROOT_DATA_FILE",
  "pyhf.writexml._export_root_histogram",
  "pyhf.writexml._make_hist_name",
  "pyhf.writexml.build_channel",
  "pyhf.writexml.build_data",
  "pyhf.writexml.build_measurement",
  "pyhf.writexml.build_modifier",
  "pyhf.writexml.build_sample",
  "pyhf.writexml.indent",
  "pyhf.writexml.log",
  "pytorch_backend.pytorch_backend",
  "readxml.parse",
  "rootio.json2xml",
  "rootio.xml2json",
  "scipy.optimize.OptimizeResult",
  "scipy.optimize.minimize",
  "scipy.special.gammaln",
  "scipy.stats.norm",
  "scipy.stats.norm.cdf",
  "scipy.stats.norm.pdf",
  "scipy.stats.poisson",
  "shapefactor.shapefactor",
  "shapefactor.shapefactor_combined",
  "shapesys.shapesys",
  "shapesys.shapesys_combined",
  "shutil.copyfile",
  "spec.combine",
  "spec.digest",
  "spec.inspect",
  "spec.prune",
  "spec.rename",
  "staterror.staterror",
  "staterror.staterror_combined",
  "stitch_pars",
  "sys.exc_info",
  "tensor.BackendRetriever",
  "tensor.BackendRetriever.numpy_backend",
  "tensor.common._TensorViewer",
  "tensor.common._tensorviewer_from_sizes",
  "tensor.common._tensorviewer_from_slices",
  "tensorflow.TensorShape",
  "tensorflow.abs",
  "tensorflow.bool",
  "tensorflow.boolean_mask",
  "tensorflow.broadcast_to",
  "tensorflow.cast",
  "tensorflow.clip_by_value",
  "tensorflow.compat.v2.gather",
  "tensorflow.concat",
  "tensorflow.cond",
  "tensorflow.convert_to_tensor",
  "tensorflow.divide",
  "tensorflow.einsum",
  "tensorflow.exp",
  "tensorflow.float32",
  "tensorflow.float64",
  "tensorflow.int32",
  "tensorflow.int64",
  "tensorflow.math.is_finite",
  "tensorflow.math.log",
  "tensorflow.ones",
  "tensorflow.pow",
  "tensorflow.reduce_max",
  "tensorflow.reduce_min",
  "tensorflow.reduce_prod",
  "tensorflow.reduce_sum",
  "tensorflow.reshape",
  "tensorflow.size",
  "tensorflow.sqrt",
  "tensorflow.stack",
  "tensorflow.tile",
  "tensorflow.where",
  "tensorflow.zeros",
  "tensorflow_backend.tensorflow_backend",
  "tensorflow_probability.distributions.Normal",
  "tensorflow_probability.distributions.Poisson",
  "test_statistics.qmu",
  "torch.LongTensor",
  "torch.Size",
  "torch.abs",
  "torch.as_tensor",
  "torch.bool",
  "torch.cat",
  "torch.clamp",
  "torch.distributions.Normal",
  "torch.distributions.Poisson",
  "torch.distributions.utils.broadcast_all",
  "torch.div",
  "torch.einsum",
  "torch.erfc",
  "torch.exp",
  "torch.float32",
  "torch.float64",
  "torch.ger",
  "torch.int32",
  "torch.int64",
  "torch.isfinite",
  "torch.log",
  "torch.masked_select",
  "torch.ones",
  "torch.pow",
  "torch.prod",
  "torch.reshape",
  "torch.set_default_dtype",
  "torch.sqrt",
  "torch.stack",
  "torch.sum",
  "torch.where",
  "torch.zeros",
  "tqdm.tqdm",
  "uproot.open",
  "uproot.recreate",
  "uproot_methods.classes.TH1.from_numpy",
  "utils.EqDelimStringParamType",
  "utils.SCHEMA_VERSION",
  "utils.digest",
  "utils.validate",
  "version.__version__",
  "workspace.Workspace",
  "workspace.Workspace.combine",
  "workspace.Workspace.valid_joins",
  "writexml.writexml",
  "xml.etree.ElementTree.parse",
  "xml.etree.cElementTree.Element",
  "xml.etree.cElementTree.tostring",
  "yaml.full_load"
 ],
 "deps": {
  "_modifier": [],
  "c": [],
  "calculators": [],
  "click": [],
  "code0": [],
  "code1": [],
  "code2": [],
  "code4": [],
  "code4p": [],
  "collections": [],
  "common": [],
  "complete": [],
  "constraints": [],
  "copy": [],
  "default_backend": [],
  "events": [],
  "exceptions": [],
  "f": [],
  "func": [],
  "hash_alg": [],
  "histosys": [],
  "iminuit": [],
  "infer": [],
  "jax": [],
  "jax_backend": [],
  "json": [],
  "jsonpatch": [],
  "jsonschema": [],
  "list": [],
  "logging": [],
  "lumi": [],
  "math": [],
  "mixins": [],
  "mle": [],
  "modifiers": [],
  "new_optimizer": [],
  "normfactor": [],
  "normsys": [],
  "numpy": [],
  "numpy_backend": [],
  "object": [],
  "objective": [],
  "opt_jax": [],
  "opt_minuit": [],
  "opt_numpy": [],
  "opt_pytorch": [],
  "opt_scipy": [],
  "opt_tflow": [],
  "optimize": [],
  "os": [],
  "parameters": [],
  "paramset_type": [],
  "patchset": [],
  "pathlib": [],
  "pdf": [],
  "pkg_resources": [],
  "probability": [],
  "pyhf": [],
  "pytorch_backend": [],
  "readxml": [],
  "rootio": [],
  "scipy": [],
  "shapefactor": [],
  "shapesys": [],
  "shutil": [],
  "spec": [],
  "staterror": [],
  "stitch_pars": [],
  "sys": [],
  "tensor": [],
  "tensorflow": [],
  "tensorflow_backend": [],
  "tensorflow_probability": [],
  "test_statistics": [],
  "torch": [],
  "tqdm": [],
  "uproot": [],
  "uproot_methods": [],
  "utils": [],
  "version": [],
  "workspace": [],
  "writexml": [],
  "xml": [],
  "yaml": []
 }
}