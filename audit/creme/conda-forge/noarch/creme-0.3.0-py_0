{
 "bad": [
  "abc.ABC",
  "abc.abstractmethod",
  "add_node",
  "base.BaseNB",
  "base.BinaryClassificationLoss",
  "base.BinaryClassifier",
  "base.BinaryMetric",
  "base.Bivariate",
  "base.Classifier",
  "base.Clusterer",
  "base.ContinuousDistribution",
  "base.DiscreteDistribution",
  "base.Label",
  "base.MultiClassMetric",
  "base.MultiClassificationLoss",
  "base.MultiClassifier",
  "base.MultiOutputClassificationMetric",
  "base.MultiOutputClassifier",
  "base.MultiOutputRegressionMetric",
  "base.MultiOutputRegressor",
  "base.Optimizer",
  "base.Probas",
  "base.Recommender",
  "base.RegressionLoss",
  "base.RegressionMetric",
  "base.Regressor",
  "base.Transformer",
  "base.Univariate",
  "bisect.bisect_left",
  "bisect.insort_left",
  "bokeh.io.output_notebook",
  "bokeh.io.push_notebook",
  "bokeh.io.show",
  "bokeh.models.CDSView",
  "bokeh.models.ColumnDataSource",
  "bokeh.models.GroupFilter",
  "bokeh.models.Range1d",
  "bokeh.palettes.Category10",
  "bokeh.plotting.figure",
  "branch.Branch",
  "branch.Split",
  "ce",
  "check",
  "collections.ChainMap",
  "collections.Counter",
  "collections.OrderedDict",
  "collections.UserDict",
  "collections.UserList",
  "collections.defaultdict",
  "collections.deque",
  "collections.namedtuple",
  "combiner",
  "compose.Pipeline",
  "compose.TransformerUnion",
  "confusion.ConfusionMatrix",
  "confusion.RollingConfusionMatrix",
  "copy.copy",
  "copy.deepcopy",
  "count.Count",
  "covariance.Covariance",
  "creme.__all__",
  "creme.base.BinaryClassifier",
  "creme.base.Classifier",
  "creme.base.Estimator",
  "creme.base.Label",
  "creme.base.MultiOutputEstimator",
  "creme.base.Proba",
  "creme.base.Probas",
  "creme.cluster.k_means.euclidean_distance",
  "creme.compat.sklearn.CremeBaseWrapper",
  "creme.compat.sklearn.PANDAS_INSTALLED",
  "creme.compat.sklearn.SKLBaseWrapper",
  "creme.compat.sklearn.SKLEARN_INPUT_X_PARAMS",
  "creme.compat.sklearn.SKLEARN_INPUT_Y_PARAMS",
  "creme.compat.sklearn.STREAM_METHODS",
  "creme.compose.pipeline.GRAPHVIZ_INSTALLED",
  "creme.compose.pipeline.Pipeline",
  "creme.compose.target_modifier.TargetModifierRegressor",
  "creme.datasets.fetch_csv_dataset",
  "creme.datasets.get_data_home",
  "creme.ensemble.bagging.BaseBagging",
  "creme.ensemble.hedging.BaseHedge",
  "creme.feature_extraction.differ.always_true",
  "creme.feature_extraction.vectorize.CountVectorizer",
  "creme.impute.stat.Constant",
  "creme.linear_model.lin_reg.bcolors",
  "creme.linear_model.pa.BasePA",
  "creme.metrics.accuracy.BaseAccuracy",
  "creme.metrics.base.BinaryMetric",
  "creme.metrics.base.ClassificationMetric",
  "creme.metrics.base.Metric",
  "creme.metrics.base.RegressionMetric",
  "creme.metrics.confusion.ConfusionMatrix",
  "creme.metrics.cross_entropy.BaseCrossEntropy",
  "creme.metrics.fbeta.BaseFBeta",
  "creme.metrics.fbeta.FBeta",
  "creme.metrics.fbeta.MacroFBeta",
  "creme.metrics.fbeta.MicroFBeta",
  "creme.metrics.fbeta.MultiFBeta",
  "creme.metrics.fbeta.RollingFBeta",
  "creme.metrics.fbeta.RollingMacroFBeta",
  "creme.metrics.fbeta.RollingMicroFBeta",
  "creme.metrics.log_loss.BaseLogLoss",
  "creme.metrics.mcc.MCC",
  "creme.metrics.precision.BasePrecision",
  "creme.metrics.precision.Precision",
  "creme.metrics.recall.BaseRecall",
  "creme.metrics.recall.MacroRecall",
  "creme.metrics.recall.Recall",
  "creme.multioutput.chain.BaseChain",
  "creme.optim.losses.base.ClassificationLoss",
  "creme.optim.losses.base.Loss",
  "creme.optim.lr_schedule.LRScheduler",
  "creme.plot.scatter.BOKEH_INSTALLED",
  "creme.preprocessing.poly.powerset",
  "creme.proba.base.Distribution",
  "creme.reco.compat.SURPRISE_INSTALLED",
  "creme.stats.base.Statistic",
  "creme.stats.mean.Mean",
  "creme.stats.n_unique.NUnique",
  "creme.stats.var.mean",
  "creme.stream.iter_numpy",
  "creme.tree.leaf.Leaf",
  "creme.tree.splitting.EQ",
  "creme.tree.splitting.LT",
  "creme.tree.splitting.Op",
  "creme.tree.splitting.SplitSearcher",
  "creme.tree.tree.CRITERIA_CLF",
  "creme.tree.tree.GRAPHVIZ_INSTALLED",
  "creme.utils.estimator_checks.check_a_better_than_b",
  "creme.utils.estimator_checks.check_better_than_dummy_binary",
  "creme.utils.estimator_checks.check_better_than_dummy_multi",
  "creme.utils.estimator_checks.check_better_than_dummy_regression",
  "creme.utils.estimator_checks.check_fit_one",
  "creme.utils.estimator_checks.check_predict_proba_one",
  "creme.utils.estimator_checks.check_predict_proba_one_binary",
  "creme.utils.estimator_checks.make_random_X_y",
  "creme.utils.estimator_checks.make_random_features",
  "creme.utils.estimator_checks.make_random_targets",
  "creme.utils.estimator_checks.yield_all_checks",
  "creme.utils.histogram.find_index",
  "creme.utils.histogram.is_in",
  "creme.utils.math.prod",
  "creme.utils.nlp.compose",
  "creme.utils.window.Window",
  "criteria.entropy",
  "criteria.gini",
  "csv.DictReader",
  "datetime.datetime.strptime",
  "defaultdict",
  "div_or_0",
  "draw_step",
  "draw_steps",
  "dummy.NoChangeClassifier",
  "dummy.PriorClassifier",
  "dummy.StatisticRegressor",
  "estimator",
  "ewmean.EWMean",
  "format_weight",
  "func.FuncTransformer",
  "functools.partial",
  "functools.reduce",
  "get_first_estimator",
  "itertools.chain.from_iterable",
  "itertools.combinations",
  "itertools.combinations_with_replacement",
  "itertools.cycle",
  "itertools.islice",
  "itertools.product",
  "itertools.zip_longest",
  "leaf.Leaf",
  "ll",
  "lr_schedule.ConstantLR",
  "lr_schedule.LRScheduler",
  "math.ceil",
  "math.copysign",
  "math.erf",
  "math.exp",
  "math.inf",
  "math.isclose",
  "math.log",
  "math.log2",
  "math.sqrt",
  "math.tau",
  "maximum.Max",
  "maximum.RollingMax",
  "mean.Mean",
  "mean.RollingMean",
  "metrics.Accuracy",
  "metrics.MSE",
  "minimum.Min",
  "minimum.RollingMin",
  "model_selection.online_score",
  "moments.CentralMoments",
  "mse.MSE",
  "mse.RollingMSE",
  "numbers.Number",
  "numpy.append",
  "numpy.array",
  "numpy.asarray",
  "numpy.cumsum",
  "numpy.dot",
  "numpy.empty",
  "numpy.exp",
  "numpy.fft.fft",
  "numpy.flip",
  "numpy.int32",
  "numpy.isscalar",
  "numpy.linalg.norm",
  "numpy.ndarray",
  "numpy.ones",
  "numpy.pi",
  "numpy.random.choice",
  "numpy.random.multinomial",
  "numpy.random.random",
  "numpy.sign",
  "numpy.sum",
  "numpy.unique",
  "numpy.zeros",
  "operator.eq",
  "operator.lt",
  "operator.mul",
  "operator.or_",
  "optim.CrossEntropy",
  "optim.EpsilonInsensitiveHingeLoss",
  "optim.HingeLoss",
  "optim.LogLoss",
  "optim.SquaredLoss",
  "optim.VanillaSGD",
  "os.environ.get",
  "os.makedirs",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.join",
  "os.remove",
  "pandas.DataFrame",
  "pearson.PearsonCorrelation",
  "precision.MicroPrecision",
  "precision.Precision",
  "precision.RollingMicroPrecision",
  "precision.RollingPrecision",
  "pred_func",
  "print_features",
  "print_title",
  "proba.Gaussian",
  "proba.Multinomial",
  "proba.base.ContinuousDistribution",
  "random.choice",
  "random.random",
  "random_func",
  "re.compile",
  "recall.MicroRecall",
  "recall.Recall",
  "recall.RollingMicroRecall",
  "recall.RollingRecall",
  "reshape_probas",
  "rmse.RMSE",
  "rmse.RollingRMSE",
  "safe_div",
  "scipy.integrate.simps",
  "scipy.ndimage.interpolation.shift",
  "scipy.special.logsumexp",
  "scipy.special.psi",
  "shutil.copyfileobj",
  "sklearn.base.BaseEstimator",
  "sklearn.base.ClassifierMixin",
  "sklearn.base.ClusterMixin",
  "sklearn.base.RegressorMixin",
  "sklearn.base.TransformerMixin",
  "sklearn.datasets.load_boston",
  "sklearn.datasets.load_breast_cancer",
  "sklearn.datasets.load_iris",
  "sklearn.exceptions.NotFittedError",
  "sklearn.feature_extraction.text.strip_accents_unicode",
  "sklearn.pipeline.Pipeline",
  "sklearn.preprocessing.LabelEncoder",
  "sklearn.utils.check_X_y",
  "sklearn.utils.check_array",
  "sklearn.utils.check_random_state",
  "sklearn.utils.metaestimators.if_delegate_has_method",
  "sklearn.utils.multiclass.check_classification_targets",
  "sklearn.utils.murmurhash3_32",
  "sklearn.utils.validation.check_is_fitted",
  "splitting.CategoricalSplitSearcher",
  "splitting.GaussianSplitSearcher",
  "stats.Max",
  "stats.Mean",
  "stats.Min",
  "stats.RollingMean",
  "stats.Univariate",
  "stats.Var",
  "stats.Variance",
  "str.lower",
  "stream.iter_csv",
  "stream.iter_numpy",
  "stream.iter_pandas",
  "stream.iter_sklearn_dataset",
  "stream.simulate_qa",
  "summing.RollingSum",
  "surprise.AlgoBase",
  "surprise.AlgoBase.fit",
  "t",
  "types.FunctionType",
  "typing.Dict",
  "typing.List",
  "typing.Tuple",
  "typing.Union",
  "union.TransformerUnion",
  "urllib.request.urlopen",
  "utils.SortedWindow",
  "utils.VectorizerMixin",
  "utils.Window",
  "utils.clamp",
  "utils.dot",
  "utils.norm",
  "utils.prod",
  "utils.sigmoid",
  "utils.softmax",
  "var.RollingVar",
  "var.Var",
  "window.Window",
  "wrapper",
  "zipfile.ZipFile"
 ],
 "deps": {
  "abc": [],
  "add_node": [],
  "base": [],
  "bisect": [],
  "bokeh": [],
  "branch": [],
  "ce": [],
  "check": [],
  "collections": [],
  "combiner": [],
  "compose": [],
  "confusion": [],
  "copy": [],
  "count": [],
  "covariance": [],
  "creme": [],
  "criteria": [],
  "csv": [],
  "datetime": [],
  "defaultdict": [],
  "div_or_0": [],
  "draw_step": [],
  "draw_steps": [],
  "dummy": [],
  "estimator": [],
  "ewmean": [],
  "format_weight": [],
  "func": [],
  "functools": [],
  "get_first_estimator": [],
  "graphviz": [
   "python-graphviz/conda-forge/noarch/python-graphviz-0.11.1-py_1"
  ],
  "itertools": [],
  "leaf": [],
  "ll": [],
  "lr_schedule": [],
  "math": [],
  "maximum": [],
  "mean": [],
  "metrics": [],
  "minimum": [],
  "model_selection": [],
  "moments": [],
  "mse": [],
  "numbers": [],
  "numpy": [],
  "operator": [],
  "optim": [],
  "os": [],
  "pandas": [],
  "pearson": [],
  "precision": [],
  "pred_func": [],
  "print_features": [],
  "print_title": [],
  "proba": [],
  "random": [],
  "random_func": [],
  "re": [],
  "recall": [],
  "reshape_probas": [],
  "rmse": [],
  "safe_div": [],
  "scipy": [],
  "shutil": [],
  "sklearn": [],
  "splitting": [],
  "statistics": [
   "statistics/conda-forge/noarch/statistics-1.0.3.5-py_1002"
  ],
  "stats": [],
  "str": [],
  "stream": [],
  "summing": [],
  "surprise": [],
  "t": [],
  "types": [],
  "typing": [],
  "union": [],
  "urllib": [],
  "utils": [],
  "var": [],
  "window": [],
  "wrapper": [],
  "zipfile": []
 }
}