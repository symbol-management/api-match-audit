{
 "bad": [
  "_error",
  "_get_result",
  "_git_cmd",
  "_make_entry",
  "_make_venv",
  "_need_installed",
  "_norm",
  "argparse.ArgumentParser",
  "aspy.yaml.ordered_dump",
  "aspy.yaml.ordered_load",
  "cached_property.cached_property",
  "cfgv.Array",
  "cfgv.Conditional",
  "cfgv.Map",
  "cfgv.NotIn",
  "cfgv.Optional",
  "cfgv.OptionalNoDefault",
  "cfgv.Required",
  "cfgv.RequiredRecurse",
  "cfgv.ValidationError",
  "cfgv.apply_defaults",
  "cfgv.check_and",
  "cfgv.check_array",
  "cfgv.check_bool",
  "cfgv.check_one_of",
  "cfgv.check_regex",
  "cfgv.check_string",
  "cfgv.load_from_filename",
  "cfgv.remove_defaults",
  "cfgv.validate",
  "collections.OrderedDict",
  "collections.namedtuple",
  "contextlib.closing",
  "contextlib.contextmanager",
  "ctypes.POINTER",
  "ctypes.WINFUNCTYPE",
  "ctypes.WinError",
  "ctypes.windll.kernel32",
  "ctypes.wintypes.BOOL",
  "ctypes.wintypes.DWORD",
  "ctypes.wintypes.HANDLE",
  "errno.EACCES",
  "fcntl.LOCK_EX",
  "fcntl.LOCK_NB",
  "fcntl.LOCK_UN",
  "fcntl.flock",
  "func",
  "functools.partial",
  "functools.wraps",
  "hashlib.md5",
  "help.add_argument",
  "identify.identify.ALL_TAGS",
  "identify.identify.parse_shebang_from_file",
  "identify.identify.tags_from_path",
  "in_env",
  "io.open",
  "json.dumps",
  "json.loads",
  "logging.Handler",
  "logging.INFO",
  "logging.getLogger",
  "os.environ",
  "os.environ.pop",
  "os.getcwd",
  "os.getgid",
  "os.getuid",
  "os.mkdir",
  "os.name",
  "os.path.abspath",
  "os.path.basename",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.join",
  "os.path.lexists",
  "os.path.normpath",
  "os.path.realpath",
  "os.path.relpath",
  "os.path.split",
  "os.pathsep",
  "os.rename",
  "pipes.quote",
  "pkg_resources.get_distribution",
  "pkg_resources.parse_version",
  "pkg_resources.resource_filename",
  "pre_commit.clientlib.CONFIG_HOOK_DICT",
  "pre_commit.clientlib.CONFIG_REPO_DICT",
  "pre_commit.clientlib.CONFIG_SCHEMA",
  "pre_commit.clientlib.InvalidConfigError",
  "pre_commit.clientlib.InvalidManifestError",
  "pre_commit.clientlib.MANIFEST_HOOK_DICT",
  "pre_commit.clientlib.MANIFEST_SCHEMA",
  "pre_commit.clientlib.MigrateShaToRev",
  "pre_commit.clientlib._LOCAL_SENTINEL",
  "pre_commit.clientlib._META_SENTINEL",
  "pre_commit.clientlib._make_argparser",
  "pre_commit.clientlib.check_type_tag",
  "pre_commit.clientlib.is_local_repo",
  "pre_commit.clientlib.is_meta_repo",
  "pre_commit.clientlib.load_config",
  "pre_commit.clientlib.load_manifest",
  "pre_commit.clientlib.ordered_load_normalize_legacy_config",
  "pre_commit.color.COLOR_CHOICES",
  "pre_commit.color.GREEN",
  "pre_commit.color.InvalidColorSetting",
  "pre_commit.color.NORMAL",
  "pre_commit.color.RED",
  "pre_commit.color.TURQUOISE",
  "pre_commit.color.YELLOW",
  "pre_commit.color.format_color",
  "pre_commit.color.use_color",
  "pre_commit.color_windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING",
  "pre_commit.color_windows.GetConsoleMode",
  "pre_commit.color_windows.GetStdHandle",
  "pre_commit.color_windows.STD_OUTPUT_HANDLE",
  "pre_commit.color_windows.SetConsoleMode",
  "pre_commit.color_windows.bool_errcheck",
  "pre_commit.color_windows.enable_virtual_terminal_processing",
  "pre_commit.commands.autoupdate.REV_LINE_FMT",
  "pre_commit.commands.autoupdate.REV_LINE_RE",
  "pre_commit.commands.autoupdate.RepositoryCannotBeUpdatedError",
  "pre_commit.commands.autoupdate._update_repo",
  "pre_commit.commands.autoupdate._write_new_config_file",
  "pre_commit.commands.autoupdate.autoupdate",
  "pre_commit.commands.clean.clean",
  "pre_commit.commands.install_uninstall.CURRENT_HASH",
  "pre_commit.commands.install_uninstall.PRIOR_HASHES",
  "pre_commit.commands.install_uninstall.TEMPLATE_END",
  "pre_commit.commands.install_uninstall.TEMPLATE_START",
  "pre_commit.commands.install_uninstall._hook_paths",
  "pre_commit.commands.install_uninstall.install",
  "pre_commit.commands.install_uninstall.install_hooks",
  "pre_commit.commands.install_uninstall.is_our_script",
  "pre_commit.commands.install_uninstall.logger",
  "pre_commit.commands.install_uninstall.uninstall",
  "pre_commit.commands.migrate_config._indent",
  "pre_commit.commands.migrate_config._is_header_line",
  "pre_commit.commands.migrate_config._migrate_map",
  "pre_commit.commands.migrate_config._migrate_sha_to_rev",
  "pre_commit.commands.migrate_config.migrate_config",
  "pre_commit.commands.run.NO_FILES",
  "pre_commit.commands.run.SKIPPED",
  "pre_commit.commands.run._all_filenames",
  "pre_commit.commands.run._compute_cols",
  "pre_commit.commands.run._filter_by_include_exclude",
  "pre_commit.commands.run._filter_by_types",
  "pre_commit.commands.run._get_skips",
  "pre_commit.commands.run._has_unmerged_paths",
  "pre_commit.commands.run._has_unstaged_config",
  "pre_commit.commands.run._hook_msg_start",
  "pre_commit.commands.run._run_hooks",
  "pre_commit.commands.run._run_single_hook",
  "pre_commit.commands.run.logger",
  "pre_commit.commands.run.run",
  "pre_commit.commands.sample_config.SAMPLE_CONFIG",
  "pre_commit.commands.sample_config.sample_config",
  "pre_commit.commands.try_repo.try_repo",
  "pre_commit.constants.CONFIG_FILE",
  "pre_commit.constants.INSTALLED_STATE_VERSION",
  "pre_commit.constants.LOCAL_REPO_VERSION",
  "pre_commit.constants.MANIFEST_FILE",
  "pre_commit.constants.STAGES",
  "pre_commit.constants.VERSION",
  "pre_commit.constants.VERSION_PARSED",
  "pre_commit.constants.YAML_DUMP_KWARGS",
  "pre_commit.envcontext.UNSET",
  "pre_commit.envcontext.Var",
  "pre_commit.envcontext.envcontext",
  "pre_commit.envcontext.format_env",
  "pre_commit.error_handler.FatalError",
  "pre_commit.error_handler._log_and_exit",
  "pre_commit.error_handler._to_bytes",
  "pre_commit.error_handler.error_handler",
  "pre_commit.file_lock._locked",
  "pre_commit.file_lock.lock",
  "pre_commit.five.n",
  "pre_commit.five.to_bytes",
  "pre_commit.five.to_text",
  "pre_commit.git.check_for_cygwin_mismatch",
  "pre_commit.git.get_all_files",
  "pre_commit.git.get_changed_files",
  "pre_commit.git.get_conflicted_files",
  "pre_commit.git.get_git_dir",
  "pre_commit.git.get_remote_url",
  "pre_commit.git.get_root",
  "pre_commit.git.get_staged_files",
  "pre_commit.git.head_rev",
  "pre_commit.git.is_in_merge_conflict",
  "pre_commit.git.logger",
  "pre_commit.git.parse_merge_msg_for_conflicts",
  "pre_commit.git.zsplit",
  "pre_commit.languages.all.all_languages",
  "pre_commit.languages.all.languages",
  "pre_commit.languages.all.languages.run_hook",
  "pre_commit.languages.docker",
  "pre_commit.languages.docker.ENVIRONMENT_DIR",
  "pre_commit.languages.docker.PRE_COMMIT_LABEL",
  "pre_commit.languages.docker.assert_docker_available",
  "pre_commit.languages.docker.build_docker_image",
  "pre_commit.languages.docker.docker_cmd",
  "pre_commit.languages.docker.docker_is_running",
  "pre_commit.languages.docker.docker_tag",
  "pre_commit.languages.docker.md5",
  "pre_commit.languages.docker_image",
  "pre_commit.languages.golang",
  "pre_commit.languages.golang.ENVIRONMENT_DIR",
  "pre_commit.languages.golang.get_env_patch",
  "pre_commit.languages.golang.guess_go_dir",
  "pre_commit.languages.golang.in_env",
  "pre_commit.languages.helpers.assert_no_additional_deps",
  "pre_commit.languages.helpers.assert_version_default",
  "pre_commit.languages.helpers.basic_get_default_version",
  "pre_commit.languages.helpers.basic_healthy",
  "pre_commit.languages.helpers.environment_dir",
  "pre_commit.languages.helpers.no_install",
  "pre_commit.languages.helpers.run_setup_cmd",
  "pre_commit.languages.helpers.to_cmd",
  "pre_commit.languages.node",
  "pre_commit.languages.node.ENVIRONMENT_DIR",
  "pre_commit.languages.node._envdir",
  "pre_commit.languages.node.get_env_patch",
  "pre_commit.languages.node.in_env",
  "pre_commit.languages.pcre",
  "pre_commit.languages.pcre.GREP",
  "pre_commit.languages.pygrep",
  "pre_commit.languages.pygrep._process_filename_at_once",
  "pre_commit.languages.pygrep._process_filename_by_line",
  "pre_commit.languages.pygrep.main",
  "pre_commit.languages.python",
  "pre_commit.languages.python.ENVIRONMENT_DIR",
  "pre_commit.languages.python._find_by_py_launcher",
  "pre_commit.languages.python._get_default_version",
  "pre_commit.languages.python._interface",
  "pre_commit.languages.python.bin_dir",
  "pre_commit.languages.python.get_default_version",
  "pre_commit.languages.python.get_env_patch",
  "pre_commit.languages.python.make_venv",
  "pre_commit.languages.python.norm_version",
  "pre_commit.languages.python.py_interface",
  "pre_commit.languages.python_venv",
  "pre_commit.languages.python_venv.ENVIRONMENT_DIR",
  "pre_commit.languages.python_venv._interface",
  "pre_commit.languages.python_venv.make_venv",
  "pre_commit.languages.python_venv.orig_py_exe",
  "pre_commit.languages.ruby",
  "pre_commit.languages.ruby.ENVIRONMENT_DIR",
  "pre_commit.languages.ruby._install_rbenv",
  "pre_commit.languages.ruby._install_ruby",
  "pre_commit.languages.ruby.get_env_patch",
  "pre_commit.languages.ruby.in_env",
  "pre_commit.languages.rust",
  "pre_commit.languages.rust.ENVIRONMENT_DIR",
  "pre_commit.languages.rust._add_dependencies",
  "pre_commit.languages.rust.get_env_patch",
  "pre_commit.languages.rust.in_env",
  "pre_commit.languages.script",
  "pre_commit.languages.swift",
  "pre_commit.languages.swift.BUILD_CONFIG",
  "pre_commit.languages.swift.BUILD_DIR",
  "pre_commit.languages.swift.ENVIRONMENT_DIR",
  "pre_commit.languages.swift.get_env_patch",
  "pre_commit.languages.swift.in_env",
  "pre_commit.languages.system",
  "pre_commit.logging_handler.LOG_LEVEL_COLORS",
  "pre_commit.logging_handler.LoggingHandler",
  "pre_commit.logging_handler.add_logging_handler",
  "pre_commit.logging_handler.logger",
  "pre_commit.main._add_color_option",
  "pre_commit.main._add_config_option",
  "pre_commit.main._add_hook_type_option",
  "pre_commit.main._add_run_options",
  "pre_commit.main.logger",
  "pre_commit.main.main",
  "pre_commit.make_archives.REPOS",
  "pre_commit.make_archives.main",
  "pre_commit.make_archives.make_archive",
  "pre_commit.meta_hooks.check_hooks_apply",
  "pre_commit.meta_hooks.check_hooks_apply.check_all_hooks_match_files",
  "pre_commit.meta_hooks.check_hooks_apply.main",
  "pre_commit.meta_hooks.check_useless_excludes",
  "pre_commit.meta_hooks.check_useless_excludes.check_useless_excludes",
  "pre_commit.meta_hooks.check_useless_excludes.exclude_matches_any",
  "pre_commit.meta_hooks.check_useless_excludes.main",
  "pre_commit.output",
  "pre_commit.output.get_hook_message",
  "pre_commit.output.stdout_byte_stream",
  "pre_commit.output.write",
  "pre_commit.output.write_line",
  "pre_commit.parse_shebang.ExecutableNotFoundError",
  "pre_commit.parse_shebang.find_executable",
  "pre_commit.parse_shebang.normalize_cmd",
  "pre_commit.parse_shebang.normexe",
  "pre_commit.parse_shebang.parse_filename",
  "pre_commit.prefix.Prefix",
  "pre_commit.repository.LocalRepository",
  "pre_commit.repository.MetaRepository",
  "pre_commit.repository.Repository",
  "pre_commit.repository.Repository.create",
  "pre_commit.repository._hook",
  "pre_commit.repository._hook_from_manifest_dct",
  "pre_commit.repository._install_all",
  "pre_commit.repository._installed",
  "pre_commit.repository._read_state",
  "pre_commit.repository._state",
  "pre_commit.repository._state_filename",
  "pre_commit.repository._write_state",
  "pre_commit.repository.logger",
  "pre_commit.repository.repositories",
  "pre_commit.runner.Runner",
  "pre_commit.runner.Runner.create",
  "pre_commit.staged_files_only._git_apply",
  "pre_commit.staged_files_only.logger",
  "pre_commit.staged_files_only.staged_files_only",
  "pre_commit.store.Store",
  "pre_commit.store._get_default_directory",
  "pre_commit.store.logger",
  "pre_commit.util.CalledProcessError",
  "pre_commit.util.clean_path_on_failure",
  "pre_commit.util.cmd_output",
  "pre_commit.util.copy_tree_to_path",
  "pre_commit.util.make_executable",
  "pre_commit.util.memoize_by_cwd",
  "pre_commit.util.mkdirp",
  "pre_commit.util.no_git_env",
  "pre_commit.util.noop_context",
  "pre_commit.util.resource_filename",
  "pre_commit.util.rmtree",
  "pre_commit.util.tmpdir",
  "pre_commit.xargs.ArgumentTooLongError",
  "pre_commit.xargs.MAX_LENGTH",
  "pre_commit.xargs.partition",
  "pre_commit.xargs.xargs",
  "print_color",
  "re.DOTALL",
  "re.IGNORECASE",
  "re.MULTILINE",
  "re.compile",
  "setuptools.setup",
  "shlex.split",
  "shutil.copy",
  "shutil.copytree",
  "shutil.move",
  "shutil.rmtree",
  "six.PY2",
  "six.text_type",
  "sqlite3.connect",
  "stat.S_IRWXG",
  "stat.S_IRWXO",
  "stat.S_IRWXU",
  "stat.S_IXGRP",
  "stat.S_IXOTH",
  "stat.S_IXUSR",
  "subprocess.PIPE",
  "subprocess.Popen",
  "subprocess.call",
  "sys.argv",
  "sys.executable",
  "sys.platform",
  "sys.stdout",
  "sys.stdout.flush",
  "sys.stdout.isatty",
  "sys.version_info",
  "tarfile.open",
  "tempfile.mkdtemp",
  "tempfile.mkstemp",
  "time.time",
  "toml.dump",
  "toml.load",
  "traceback.format_exc",
  "yaml.YAMLError"
 ],
 "deps": {
  "_error": [],
  "_get_result": [],
  "_git_cmd": [],
  "_make_entry": [],
  "_make_venv": [],
  "_need_installed": [],
  "_norm": [],
  "argparse": [],
  "aspy": [],
  "cached_property": [],
  "cfgv": [],
  "collections": [],
  "contextlib": [],
  "ctypes": [],
  "errno": [],
  "fcntl": [],
  "func": [],
  "functools": [],
  "hashlib": [],
  "help": [],
  "identify": [],
  "in_env": [],
  "io": [],
  "json": [],
  "logging": [],
  "os": [],
  "pipes": [],
  "pkg_resources": [],
  "pre_commit": [],
  "print_color": [],
  "re": [],
  "setuptools": [],
  "shlex": [],
  "shutil": [],
  "six": [],
  "sqlite3": [],
  "stat": [],
  "subprocess": [],
  "sys": [],
  "tarfile": [],
  "tempfile": [],
  "time": [],
  "toml": [],
  "traceback": [],
  "yaml": []
 }
}