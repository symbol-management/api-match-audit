{
 "bad": [
  "abc.ABC",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "click.command",
  "click.group",
  "cloudpickle.DEFAULT_PROTOCOL",
  "cloudpickle.dump",
  "cloudpickle.load",
  "collections.OrderedDict",
  "collections.defaultdict",
  "collections.namedtuple",
  "copy.copy",
  "copy.deepcopy",
  "enum.Enum",
  "evalml.AutoMLSearch",
  "evalml.__file__",
  "evalml.__version__",
  "evalml.automl.TimeSeriesSplit",
  "evalml.automl.TrainingValidationSplit",
  "evalml.automl.automl_algorithm.AutoMLAlgorithm",
  "evalml.automl.automl_algorithm.AutoMLAlgorithmException",
  "evalml.automl.automl_algorithm.IterativeAlgorithm",
  "evalml.automl.data_splitters.TimeSeriesSplit",
  "evalml.automl.data_splitters.TrainingValidationSplit",
  "evalml.automl.get_default_primary_search_objective",
  "evalml.data_checks.AutoMLDataChecks",
  "evalml.data_checks.ClassImbalanceDataCheck",
  "evalml.data_checks.ClassImbalanceDataCheck.name",
  "evalml.data_checks.DataCheck",
  "evalml.data_checks.DataCheck._add_message",
  "evalml.data_checks.DataCheckError",
  "evalml.data_checks.DataCheckMessage",
  "evalml.data_checks.DataCheckMessageCode.CLASS_IMBALANCE_BELOW_FOLDS",
  "evalml.data_checks.DataCheckMessageCode.CLASS_IMBALANCE_BELOW_THRESHOLD",
  "evalml.data_checks.DataCheckMessageCode.HAS_ID_COLUMN",
  "evalml.data_checks.DataCheckMessageCode.HAS_OUTLIERS",
  "evalml.data_checks.DataCheckMessageCode.HIGHLY_NULL",
  "evalml.data_checks.DataCheckMessageCode.HIGHLY_NULL.name",
  "evalml.data_checks.DataCheckMessageCode.HIGH_VARIANCE",
  "evalml.data_checks.DataCheckMessageCode.NO_VARIANCE",
  "evalml.data_checks.DataCheckMessageCode.NO_VARIANCE_WITH_NULL",
  "evalml.data_checks.DataCheckMessageCode.TARGET_BINARY_INVALID_VALUES",
  "evalml.data_checks.DataCheckMessageCode.TARGET_BINARY_NOT_TWO_UNIQUE_VALUES",
  "evalml.data_checks.DataCheckMessageCode.TARGET_HAS_NULL",
  "evalml.data_checks.DataCheckMessageCode.TARGET_LEAKAGE",
  "evalml.data_checks.DataCheckMessageCode.TARGET_UNSUPPORTED_TYPE",
  "evalml.data_checks.DataCheckMessageType.ERROR",
  "evalml.data_checks.DataCheckMessageType.WARNING",
  "evalml.data_checks.DataCheckWarning",
  "evalml.data_checks.DataChecks",
  "evalml.data_checks.DefaultDataChecks",
  "evalml.data_checks.DefaultDataChecks._DEFAULT_DATA_CHECK_CLASSES",
  "evalml.data_checks.EmptyDataChecks",
  "evalml.data_checks.HighVarianceCVDataCheck",
  "evalml.data_checks.HighVarianceCVDataCheck.name",
  "evalml.data_checks.HighlyNullDataCheck",
  "evalml.data_checks.HighlyNullDataCheck.name",
  "evalml.data_checks.IDColumnsDataCheck",
  "evalml.data_checks.IDColumnsDataCheck.name",
  "evalml.data_checks.InvalidTargetDataCheck",
  "evalml.data_checks.InvalidTargetDataCheck.name",
  "evalml.data_checks.NoVarianceDataCheck",
  "evalml.data_checks.NoVarianceDataCheck.name",
  "evalml.data_checks.OutliersDataCheck",
  "evalml.data_checks.OutliersDataCheck.name",
  "evalml.data_checks.TargetLeakageDataCheck",
  "evalml.data_checks.TargetLeakageDataCheck.name",
  "evalml.data_checks.data_check_message_type.DataCheckMessageType.ERROR",
  "evalml.data_checks.data_check_message_type.DataCheckMessageType.WARNING",
  "evalml.demos.load_breast_cancer",
  "evalml.demos.load_churn",
  "evalml.demos.load_diabetes",
  "evalml.demos.load_fraud",
  "evalml.demos.load_wine",
  "evalml.exceptions.AutoMLSearchException",
  "evalml.exceptions.ComponentNotYetFittedError",
  "evalml.exceptions.DataCheckInitError",
  "evalml.exceptions.EnsembleMissingPipelinesError",
  "evalml.exceptions.IllFormattedClassNameError",
  "evalml.exceptions.MethodPropertyNotFoundError",
  "evalml.exceptions.MissingComponentError",
  "evalml.exceptions.NullsInColumnWarning",
  "evalml.exceptions.ObjectiveNotFoundError",
  "evalml.exceptions.PipelineNotFoundError",
  "evalml.exceptions.PipelineNotYetFittedError",
  "evalml.exceptions.PipelineScoreError",
  "evalml.model_family.ModelFamily",
  "evalml.model_family.ModelFamily.BASELINE",
  "evalml.model_family.ModelFamily.CATBOOST",
  "evalml.model_family.ModelFamily.DECISION_TREE",
  "evalml.model_family.ModelFamily.ENSEMBLE",
  "evalml.model_family.ModelFamily.EXTRA_TREES",
  "evalml.model_family.ModelFamily.LIGHTGBM",
  "evalml.model_family.ModelFamily.LINEAR_MODEL",
  "evalml.model_family.ModelFamily.NONE",
  "evalml.model_family.ModelFamily.RANDOM_FOREST",
  "evalml.model_family.ModelFamily.XGBOOST",
  "evalml.model_family.handle_model_family",
  "evalml.model_family.model_family.ModelFamily.BASELINE",
  "evalml.model_family.model_family.ModelFamily.CATBOOST",
  "evalml.model_family.model_family.ModelFamily.XGBOOST",
  "evalml.objectives.AccuracyBinary",
  "evalml.objectives.AccuracyMulticlass",
  "evalml.objectives.BalancedAccuracyBinary",
  "evalml.objectives.BalancedAccuracyMulticlass",
  "evalml.objectives.BinaryClassificationObjective",
  "evalml.objectives.CostBenefitMatrix",
  "evalml.objectives.CostBenefitMatrix.calculate_percent_difference",
  "evalml.objectives.ExpVariance.calculate_percent_difference",
  "evalml.objectives.F1",
  "evalml.objectives.F1Macro",
  "evalml.objectives.F1Micro",
  "evalml.objectives.F1Weighted",
  "evalml.objectives.FraudCost",
  "evalml.objectives.LeadScoring",
  "evalml.objectives.LogLossBinary",
  "evalml.objectives.LogLossBinary.calculate_percent_difference",
  "evalml.objectives.LogLossMulticlass",
  "evalml.objectives.MCCBinary",
  "evalml.objectives.MCCMulticlass",
  "evalml.objectives.MSE",
  "evalml.objectives.MeanSquaredLogError",
  "evalml.objectives.MulticlassClassificationObjective",
  "evalml.objectives.Precision",
  "evalml.objectives.PrecisionMacro",
  "evalml.objectives.PrecisionMicro",
  "evalml.objectives.PrecisionWeighted",
  "evalml.objectives.R2",
  "evalml.objectives.Recall",
  "evalml.objectives.RecallMacro",
  "evalml.objectives.RecallMicro",
  "evalml.objectives.RecallWeighted",
  "evalml.objectives.RegressionObjective",
  "evalml.objectives.RootMeanSquaredError",
  "evalml.objectives.RootMeanSquaredLogError",
  "evalml.objectives.get_all_objective_names",
  "evalml.objectives.get_core_objective_names",
  "evalml.objectives.get_core_objectives",
  "evalml.objectives.get_non_core_objectives",
  "evalml.objectives.get_objective",
  "evalml.pipelines.BaselineBinaryPipeline",
  "evalml.pipelines.BaselineMulticlassPipeline",
  "evalml.pipelines.BaselineRegressionPipeline",
  "evalml.pipelines.BinaryClassificationPipeline",
  "evalml.pipelines.ClassificationPipeline",
  "evalml.pipelines.DecisionTreeClassifier",
  "evalml.pipelines.DecisionTreeClassifier.model_family",
  "evalml.pipelines.DecisionTreeClassifier.supported_problem_types",
  "evalml.pipelines.DecisionTreeRegressor",
  "evalml.pipelines.DecisionTreeRegressor.model_family",
  "evalml.pipelines.DecisionTreeRegressor.supported_problem_types",
  "evalml.pipelines.DelayedFeatureTransformer",
  "evalml.pipelines.ExtraTreesClassifier",
  "evalml.pipelines.ExtraTreesClassifier.model_family",
  "evalml.pipelines.ExtraTreesClassifier.supported_problem_types",
  "evalml.pipelines.ExtraTreesRegressor",
  "evalml.pipelines.ExtraTreesRegressor.model_family",
  "evalml.pipelines.ExtraTreesRegressor.supported_problem_types",
  "evalml.pipelines.LightGBMClassifier",
  "evalml.pipelines.LightGBMClassifier.SEED_MAX",
  "evalml.pipelines.LightGBMClassifier.SEED_MIN",
  "evalml.pipelines.LightGBMClassifier.model_family",
  "evalml.pipelines.LightGBMClassifier.supported_problem_types",
  "evalml.pipelines.MeanBaselineRegressionPipeline",
  "evalml.pipelines.ModeBaselineBinaryPipeline",
  "evalml.pipelines.ModeBaselineMulticlassPipeline",
  "evalml.pipelines.MulticlassClassificationPipeline",
  "evalml.pipelines.PipelineBase",
  "evalml.pipelines.PipelineBase.load",
  "evalml.pipelines.RegressionPipeline",
  "evalml.pipelines.TimeSeriesRegressionPipeline",
  "evalml.pipelines.classification_pipeline.ClassificationPipeline._score",
  "evalml.pipelines.components.BaselineClassifier",
  "evalml.pipelines.components.BaselineRegressor",
  "evalml.pipelines.components.CatBoostClassifier",
  "evalml.pipelines.components.CatBoostClassifier.SEED_MAX",
  "evalml.pipelines.components.CatBoostClassifier.SEED_MIN",
  "evalml.pipelines.components.CatBoostRegressor",
  "evalml.pipelines.components.CatBoostRegressor.SEED_MAX",
  "evalml.pipelines.components.CatBoostRegressor.SEED_MIN",
  "evalml.pipelines.components.ComponentBase",
  "evalml.pipelines.components.ComponentBase.load",
  "evalml.pipelines.components.ComponentBaseMeta",
  "evalml.pipelines.components.ComponentBaseMeta.METHODS_TO_CHECK",
  "evalml.pipelines.components.DateTimeFeaturizer",
  "evalml.pipelines.components.DelayedFeatureTransformer",
  "evalml.pipelines.components.DropColumns",
  "evalml.pipelines.components.DropNullColumns",
  "evalml.pipelines.components.ElasticNetClassifier",
  "evalml.pipelines.components.ElasticNetRegressor",
  "evalml.pipelines.components.Estimator",
  "evalml.pipelines.components.ExtraTreesClassifier",
  "evalml.pipelines.components.ExtraTreesRegressor",
  "evalml.pipelines.components.FeatureSelector",
  "evalml.pipelines.components.Imputer",
  "evalml.pipelines.components.LSA",
  "evalml.pipelines.components.LightGBMClassifier",
  "evalml.pipelines.components.LinearRegressor",
  "evalml.pipelines.components.LinearRegressor.name",
  "evalml.pipelines.components.LogisticRegressionClassifier",
  "evalml.pipelines.components.LogisticRegressionClassifier.name",
  "evalml.pipelines.components.OneHotEncoder",
  "evalml.pipelines.components.PCA",
  "evalml.pipelines.components.PerColumnImputer",
  "evalml.pipelines.components.RFClassifierSelectFromModel",
  "evalml.pipelines.components.RFRegressorSelectFromModel",
  "evalml.pipelines.components.RandomForestClassifier",
  "evalml.pipelines.components.RandomForestRegressor",
  "evalml.pipelines.components.SelectColumns",
  "evalml.pipelines.components.SimpleImputer",
  "evalml.pipelines.components.StackedEnsembleClassifier",
  "evalml.pipelines.components.StackedEnsembleClassifier.name",
  "evalml.pipelines.components.StackedEnsembleRegressor",
  "evalml.pipelines.components.StackedEnsembleRegressor.name",
  "evalml.pipelines.components.StandardScaler",
  "evalml.pipelines.components.TargetEncoder",
  "evalml.pipelines.components.TextFeaturizer",
  "evalml.pipelines.components.Transformer",
  "evalml.pipelines.components.Transformer.name",
  "evalml.pipelines.components.XGBoostClassifier",
  "evalml.pipelines.components.XGBoostClassifier.SEED_MAX",
  "evalml.pipelines.components.XGBoostClassifier.SEED_MIN",
  "evalml.pipelines.components.XGBoostRegressor",
  "evalml.pipelines.components.XGBoostRegressor.SEED_MAX",
  "evalml.pipelines.components.XGBoostRegressor.SEED_MIN",
  "evalml.pipelines.components.ensemble.StackedEnsembleBase",
  "evalml.pipelines.components.ensemble.StackedEnsembleClassifier",
  "evalml.pipelines.components.ensemble.StackedEnsembleClassifier.default_parameters",
  "evalml.pipelines.components.ensemble.StackedEnsembleClassifier.model_family",
  "evalml.pipelines.components.ensemble.StackedEnsembleClassifier.supported_problem_types",
  "evalml.pipelines.components.ensemble.StackedEnsembleRegressor",
  "evalml.pipelines.components.ensemble.StackedEnsembleRegressor.default_parameters",
  "evalml.pipelines.components.ensemble.StackedEnsembleRegressor.model_family",
  "evalml.pipelines.components.ensemble.StackedEnsembleRegressor.supported_problem_types",
  "evalml.pipelines.components.ensemble.stacked_ensemble_base._nonstackable_model_families",
  "evalml.pipelines.components.estimators.Estimator",
  "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier",
  "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier.model_family",
  "evalml.pipelines.components.estimators.classifiers.ElasticNetClassifier.supported_problem_types",
  "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor",
  "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor.model_family",
  "evalml.pipelines.components.estimators.regressors.ElasticNetRegressor.supported_problem_types",
  "evalml.pipelines.components.transformers.TextFeaturizer",
  "evalml.pipelines.components.transformers.Transformer",
  "evalml.pipelines.components.transformers.imputers.SimpleImputer",
  "evalml.pipelines.components.transformers.preprocessing.LSA",
  "evalml.pipelines.components.transformers.preprocessing.TextTransformer",
  "evalml.pipelines.utils.get_estimators",
  "evalml.preprocessing.load_data",
  "evalml.preprocessing.split_data",
  "evalml.problem_types.ProblemTypes.BINARY",
  "evalml.problem_types.ProblemTypes.BINARY.__str__",
  "evalml.problem_types.ProblemTypes.BINARY.value",
  "evalml.problem_types.ProblemTypes.MULTICLASS",
  "evalml.problem_types.ProblemTypes.MULTICLASS.__str__",
  "evalml.problem_types.ProblemTypes.MULTICLASS.value",
  "evalml.problem_types.ProblemTypes.REGRESSION",
  "evalml.problem_types.ProblemTypes.REGRESSION.__str__",
  "evalml.problem_types.ProblemTypes.REGRESSION.value",
  "evalml.problem_types.ProblemTypes.TIME_SERIES_REGRESSION",
  "evalml.problem_types.ProblemTypes.all_problem_types",
  "evalml.problem_types.detect_problem_type",
  "evalml.problem_types.handle_problem_types",
  "evalml.problem_types.problem_types.ProblemTypes.BINARY",
  "evalml.problem_types.problem_types.ProblemTypes.MULTICLASS",
  "evalml.problem_types.problem_types.ProblemTypes.REGRESSION",
  "evalml.tuners.GridSearchTuner",
  "evalml.tuners.NoParamsException",
  "evalml.tuners.ParameterError",
  "evalml.tuners.RandomSearchTuner",
  "evalml.tuners.SKOptTuner",
  "evalml.tuners.Tuner",
  "evalml.utils.SEED_BOUNDS.max_bound",
  "evalml.utils.SEED_BOUNDS.min_bound",
  "evalml.utils._convert_to_woodwork_structure",
  "evalml.utils._convert_woodwork_types_wrapper",
  "evalml.utils.check_random_state_equality",
  "evalml.utils.classproperty",
  "evalml.utils.convert_to_seconds",
  "evalml.utils.gen_utils.SEED_BOUNDS.max_bound",
  "evalml.utils.gen_utils.SEED_BOUNDS.min_bound",
  "evalml.utils.gen_utils.categorical_dtypes",
  "evalml.utils.gen_utils.datetime_dtypes",
  "evalml.utils.gen_utils.numeric_and_boolean_dtypes",
  "evalml.utils.gen_utils.numeric_dtypes",
  "evalml.utils.get_logger",
  "evalml.utils.get_random_seed",
  "evalml.utils.get_random_state",
  "evalml.utils.import_or_raise",
  "evalml.utils.jupyter_check",
  "evalml.utils.log_subtitle",
  "evalml.utils.log_title",
  "evalml.utils.safe_repr",
  "featuretools.EntitySet",
  "featuretools.calculate_feature_matrix",
  "featuretools.dfs",
  "functools.wraps",
  "inspect.getfullargspec",
  "inspect.isclass",
  "inspect.signature",
  "itertools.product",
  "json.dumps",
  "json.loads",
  "locale.getlocale",
  "logging.DEBUG",
  "logging.Formatter",
  "logging.INFO",
  "logging.Logger",
  "logging.Logger.manager.loggerDict",
  "logging.StreamHandler",
  "logging.WARNING",
  "logging.getLogger",
  "logging.handlers.RotatingFileHandler",
  "math.inf",
  "nlp_primitives.DiversityScore",
  "nlp_primitives.MeanCharactersPerWord",
  "nlp_primitives.PolarityScore",
  "numpy.abs",
  "numpy.all",
  "numpy.allclose",
  "numpy.any",
  "numpy.append",
  "numpy.arange",
  "numpy.array",
  "numpy.array_equal",
  "numpy.atleast_2d",
  "numpy.bool_",
  "numpy.concatenate",
  "numpy.datetime64",
  "numpy.delete",
  "numpy.dtype",
  "numpy.float32",
  "numpy.float64",
  "numpy.identity",
  "numpy.inf",
  "numpy.int64",
  "numpy.integer",
  "numpy.isclose",
  "numpy.isinf",
  "numpy.isnan",
  "numpy.linalg.norm",
  "numpy.linspace",
  "numpy.log",
  "numpy.logical_and",
  "numpy.logical_or",
  "numpy.median",
  "numpy.multiply",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.newaxis",
  "numpy.object",
  "numpy.ones",
  "numpy.random.RandomState",
  "numpy.random.rand",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.repeat",
  "numpy.round",
  "numpy.setdiff1d",
  "numpy.sort",
  "numpy.sqrt",
  "numpy.stack",
  "numpy.str_",
  "numpy.testing.assert_allclose",
  "numpy.testing.assert_almost_equal",
  "numpy.testing.assert_array_equal",
  "numpy.testing.assert_equal",
  "numpy.tile",
  "numpy.unique",
  "numpy.vectorize",
  "numpy.where",
  "numpy.zeros",
  "operator.itemgetter",
  "os.W_OK",
  "os.access",
  "os.environ.get",
  "os.path.abspath",
  "os.path.dirname",
  "os.path.exists",
  "os.path.isfile",
  "os.path.join",
  "os.path.split",
  "os.path.splitext",
  "os.walk",
  "pandas.BooleanDtype",
  "pandas.Categorical",
  "pandas.DataFrame",
  "pandas.DataFrame.from_dict",
  "pandas.Index",
  "pandas.Int64Dtype",
  "pandas.Int64Index",
  "pandas.NA",
  "pandas.RangeIndex",
  "pandas.Series",
  "pandas.StringDtype",
  "pandas.api.extensions.ExtensionArray",
  "pandas.api.types.is_bool",
  "pandas.api.types.is_categorical_dtype",
  "pandas.api.types.is_integer",
  "pandas.api.types.is_integer_dtype",
  "pandas.api.types.is_number",
  "pandas.api.types.is_numeric_dtype",
  "pandas.array",
  "pandas.concat",
  "pandas.date_range",
  "pandas.isna",
  "pandas.isnull",
  "pandas.option_context",
  "pandas.read_csv",
  "pandas.testing.assert_frame_equal",
  "pandas.testing.assert_index_equal",
  "pandas.testing.assert_series_equal",
  "pandas.to_datetime",
  "pkg_resources.working_set",
  "platform.uname",
  "pytest.approx",
  "pytest.fixture",
  "pytest.importorskip",
  "pytest.mark.parametrize",
  "pytest.raises",
  "pytest.skip",
  "pytest.warns",
  "re.compile",
  "requirements.parse",
  "scipy.optimize.minimize_scalar",
  "setuptools.find_packages",
  "shap.KernelExplainer",
  "shap.TreeExplainer",
  "shap.sample",
  "sklearn.datasets.load_breast_cancer",
  "sklearn.datasets.load_diabetes",
  "sklearn.datasets.load_wine",
  "sklearn.datasets.make_classification",
  "sklearn.datasets.make_regression",
  "sklearn.decomposition.PCA",
  "sklearn.decomposition.TruncatedSVD",
  "sklearn.ensemble.ExtraTreesClassifier",
  "sklearn.ensemble.ExtraTreesRegressor",
  "sklearn.ensemble.RandomForestClassifier",
  "sklearn.ensemble.RandomForestRegressor",
  "sklearn.ensemble.StackingClassifier",
  "sklearn.ensemble.StackingRegressor",
  "sklearn.feature_selection.SelectFromModel",
  "sklearn.inspection.permutation_importance",
  "sklearn.linear_model.ElasticNet",
  "sklearn.linear_model.LinearRegression",
  "sklearn.linear_model.LogisticRegression",
  "sklearn.linear_model.SGDClassifier",
  "sklearn.metrics.accuracy_score",
  "sklearn.metrics.auc",
  "sklearn.metrics.balanced_accuracy_score",
  "sklearn.metrics.confusion_matrix",
  "sklearn.metrics.explained_variance_score",
  "sklearn.metrics.f1_score",
  "sklearn.metrics.log_loss",
  "sklearn.metrics.matthews_corrcoef",
  "sklearn.metrics.max_error",
  "sklearn.metrics.mean_absolute_error",
  "sklearn.metrics.mean_squared_error",
  "sklearn.metrics.mean_squared_log_error",
  "sklearn.metrics.median_absolute_error",
  "sklearn.metrics.precision_recall_curve",
  "sklearn.metrics.precision_score",
  "sklearn.metrics.r2_score",
  "sklearn.metrics.recall_score",
  "sklearn.metrics.roc_auc_score",
  "sklearn.metrics.roc_curve",
  "sklearn.model_selection.BaseCrossValidator",
  "sklearn.model_selection.KFold",
  "sklearn.model_selection.ShuffleSplit",
  "sklearn.model_selection.StratifiedKFold",
  "sklearn.model_selection.StratifiedShuffleSplit",
  "sklearn.model_selection.TimeSeriesSplit",
  "sklearn.model_selection.train_test_split",
  "sklearn.preprocessing.LabelBinarizer",
  "sklearn.preprocessing.LabelEncoder",
  "sklearn.preprocessing.OneHotEncoder",
  "sklearn.preprocessing.OrdinalEncoder",
  "sklearn.preprocessing.StandardScaler",
  "sklearn.preprocessing.label_binarize",
  "sklearn.tree.DecisionTreeClassifier",
  "sklearn.tree.DecisionTreeRegressor",
  "sklearn.utils.check_array",
  "sklearn.utils.check_random_state",
  "skopt.Optimizer",
  "skopt.Space",
  "skopt.space.Categorical",
  "skopt.space.Integer",
  "skopt.space.Real",
  "string.ascii_lowercase",
  "string.printable",
  "string.punctuation",
  "struct.calcsize",
  "sys.byteorder",
  "sys.exc_info",
  "sys.stdout",
  "sys.version_info",
  "tempfile.TemporaryDirectory",
  "texttable.Texttable.HEADER",
  "time.time",
  "traceback.format_tb",
  "unittest.mock.MagicMock",
  "unittest.mock.call",
  "unittest.mock.patch",
  "warnings.catch_warnings",
  "warnings.filterwarnings",
  "warnings.simplefilter",
  "warnings.warn",
  "woodwork.DataColumn",
  "woodwork.DataTable"
 ],
 "deps": [
  [
   "click-5.1-py_0",
   "click-6.6-py35_0",
   "click-6.6-py35_1",
   "click-6.6-py36_1",
   "click-6.7-py27_0",
   "click-6.7-py35_0",
   "click-6.7-py36_0",
   "click-6.7-py_1",
   "click-7.0-py_0",
   "click-7.1-pyh8c360ce_0",
   "click-7.1.1-pyh8c360ce_0",
   "click-7.1.2-pyh9f0ad1d_0"
  ],
  [
   "evalml-core-0.16.0-pyha770c72_0",
   "evalml-core-0.16.1-pyha770c72_0",
   "evalml-core-0.16.1-pyha770c72_1",
   "evalml-core-0.16.1-pyha770c72_2",
   "evalml-core-0.16.1-pyha770c72_3",
   "evalml-core-0.16.1-pyha770c72_4",
   "evalml-core-0.16.1-pyha770c72_5",
   "evalml-core-0.17.0-pyha770c72_0",
   "evalml-core-0.17.0-pyha770c72_1"
  ],
  [
   "importlib-1.0.3-py26_0",
   "importlib-1.0.4-py26_0"
  ],
  [
   "pathlib-1.0.1-py27h8c360ce_2",
   "pathlib-1.0.1-py34_0",
   "pathlib-1.0.1-py36_0",
   "pathlib-1.0.1-py_1"
  ],
  [
   "psutil-5.6.3-py36h516909a_0",
   "psutil-5.6.3-py37h516909a_0",
   "psutil-5.6.4-py27h516909a_0",
   "psutil-5.6.4-py36h516909a_0",
   "psutil-5.6.4-py37h516909a_0",
   "psutil-5.6.5-py27h516909a_0",
   "psutil-5.6.5-py38h516909a_0",
   "psutil-5.7.0-py27h516909a_0",
   "psutil-5.7.0-py27hdf8410d_1",
   "psutil-5.7.0-py36h516909a_0",
   "psutil-5.7.0-py36h8c4c3a4_1",
   "psutil-5.7.0-py36h97a6639_1",
   "psutil-5.7.0-py37h516909a_0",
   "psutil-5.7.0-py38h1e0a361_1",
   "psutil-5.7.2-py36h8c4c3a4_0",
   "psutil-5.7.2-py36hd7bf43e_1",
   "psutil-5.7.2-py37h8f50634_0",
   "psutil-5.7.2-py38h1e0a361_0",
   "psutil-5.7.2-py38h8df0ef7_1",
   "psutil-5.7.2-py39h38d8fee_1",
   "psutil-5.8.0-py36h8f6f2f9_0",
   "psutil-5.8.0-py37h5e8e339_1",
   "psutil-5.8.0-py38h497a2fe_0",
   "psutil-5.8.0-py39h3811e60_0",
   "psutil-5.8.0-py39h3811e60_1"
  ],
  [],
  [
   "texttable-0.9.1-py_0",
   "texttable-1.1.0-py_0",
   "texttable-1.2.1-py_0",
   "texttable-1.3.0-py_0",
   "texttable-1.3.1-py_0",
   "texttable-1.4.0-py_0",
   "texttable-1.5.0-py_0",
   "texttable-1.6.0-py_0",
   "texttable-1.6.1-py_0",
   "texttable-1.6.2-py_0",
   "texttable-1.6.3-pyh9f0ad1d_0"
  ],
  [
   "woodwork-0.0.3-py_0",
   "woodwork-0.0.4-py_0",
   "woodwork-0.0.5-pyhd8ed1ab_0",
   "woodwork-0.0.6-pyhd8ed1ab_0",
   "woodwork-0.0.7-pyhd8ed1ab_0",
   "woodwork-0.0.8-pyhd8ed1ab_0",
   "woodwork-0.0.9-pyhd8ed1ab_0"
  ]
 ]
}