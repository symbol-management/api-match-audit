{
 "bad": [
  "ALBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "AlbertConfig",
  "AlbertForPreTraining",
  "BART_PRETRAINED_MODEL_ARCHIVE_LIST",
  "BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "BartConfig",
  "BartForConditionalGeneration",
  "BaseTransformersCLICommand",
  "BertConfig",
  "BertConfig.from_pretrained",
  "BertForPreTraining",
  "BertForQuestionAnswering",
  "BertForSequenceClassification",
  "BertGenerationConfig",
  "BertGenerationDecoder",
  "BertGenerationEncoder",
  "CAMEMBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "CTRLConfig",
  "CTRLLMHeadModel",
  "CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "CamembertConfig",
  "CamembertForMaskedLM",
  "DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "DPRConfig",
  "DPRContextEncoder",
  "DPRQuestionEncoder",
  "DPRReader",
  "DPR_CONTEXT_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST",
  "DPR_QUESTION_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST",
  "DPR_READER_PRETRAINED_MODEL_ARCHIVE_LIST",
  "DeiTConfig",
  "DetrHungarianMatcher",
  "DetrLoss",
  "DistilBertConfig",
  "DistilBertForMaskedLM",
  "DistilBertForQuestionAnswering",
  "ELECTRA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "ElectraConfig",
  "ElectraForPreTraining",
  "FLAUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "FlaubertConfig",
  "FlaubertWithLMHeadModel",
  "GPT2Config",
  "GPT2DoubleHeadsModel",
  "GPT2LMHeadModel",
  "GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "GPTNeoConfig",
  "IPython.display.HTML",
  "IPython.display.display",
  "IndexMap",
  "LAYOUTLM_PRETRAINED_MODEL_ARCHIVE_LIST",
  "LXMERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "LayoutLMConfig",
  "LayoutLMForMaskedLM",
  "LxmertConfig",
  "LxmertForPreTraining",
  "LxmertVisualFeatureEncoder",
  "MODEL_FOR_CAUSAL_LM_MAPPING",
  "MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING",
  "MODEL_FOR_MASKED_LM_MAPPING",
  "MODEL_FOR_MULTIPLE_CHOICE_MAPPING",
  "MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING",
  "MODEL_FOR_PRETRAINING_MAPPING",
  "MODEL_FOR_QUESTION_ANSWERING_MAPPING",
  "MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING",
  "MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING",
  "MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING",
  "MecabTokenizer",
  "MemoryMeasureProcess",
  "Mykytea",
  "Mykytea.Mykytea",
  "OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "OpenAIGPTConfig",
  "OpenAIGPTLMHeadModel",
  "PIL.Image.BICUBIC",
  "PIL.Image.NEAREST",
  "PreTrainedModel",
  "PretrainedConfig",
  "ProductIndexMap",
  "ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "RobertaConfig",
  "RobertaForMaskedLM",
  "RobertaForSequenceClassification",
  "RobertaTokenizer",
  "Speech2TextConfig",
  "SquadExample",
  "T5Config",
  "T5ForConditionalGeneration",
  "T5_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "TFAlbertForPreTraining",
  "TFBartForConditionalGeneration",
  "TFBertForPreTraining",
  "TFBertForQuestionAnswering",
  "TFBertForSequenceClassification",
  "TFCTRLLMHeadModel",
  "TFCamembertForMaskedLM",
  "TFDPRContextEncoder",
  "TFDPRQuestionEncoder",
  "TFDPRReader",
  "TFDistilBertForMaskedLM",
  "TFDistilBertForQuestionAnswering",
  "TFElectraForPreTraining",
  "TFFlaubertWithLMHeadModel",
  "TFGPT2LMHeadModel",
  "TFLayoutLMForMaskedLM",
  "TFLxmertForPreTraining",
  "TFLxmertVisualFeatureEncoder",
  "TFOpenAIGPTLMHeadModel",
  "TFRobertaForMaskedLM",
  "TFRobertaForSequenceClassification",
  "TFT5ForConditionalGeneration",
  "TFTransfoXLLMHeadModel",
  "TFWav2Vec2Model",
  "TFXLMRobertaForMaskedLM",
  "TFXLMWithLMHeadModel",
  "TFXLNetLMHeadModel",
  "TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "TransfoXLConfig",
  "TransfoXLLMHeadModel",
  "ViTConfig",
  "WAV_2_VEC_2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "WEIGHTS_NAME",
  "Wav2Vec2Config",
  "Wav2Vec2Model",
  "XLMConfig",
  "XLMRobertaConfig",
  "XLMRobertaForMaskedLM",
  "XLMWithLMHeadModel",
  "XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "XLM_ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "XLNetConfig",
  "XLNetLMHeadModel",
  "_NbestPrediction",
  "_PrelimPrediction",
  "__name__.split",
  "__version__",
  "_conv_out_length",
  "_convert_sub_string",
  "_create_next_token_logits_penalties",
  "_get_generated_ngrams",
  "_is_punctuation",
  "_is_valid_text_input",
  "_jax_gather",
  "_mask_pads",
  "_norm",
  "_read_stream",
  "_reorder_stacked",
  "_stream_subprocess",
  "_strip_spaces",
  "_sub_tokenize",
  "_to_coordinates",
  "_tokens_match",
  "activations.ACT2FN",
  "activations.gelu",
  "activations.gelu_new",
  "activations.get_activation",
  "activations.silu",
  "activations_tf.get_tf_activation",
  "add_new_model.AddNewModelCommand.register_subcommand",
  "albert.configuration_albert.ALBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "albert.configuration_albert.AlbertConfig",
  "albert.modeling_albert.AlbertForMaskedLM",
  "albert.modeling_albert.AlbertForMultipleChoice",
  "albert.modeling_albert.AlbertForPreTraining",
  "albert.modeling_albert.AlbertForQuestionAnswering",
  "albert.modeling_albert.AlbertForSequenceClassification",
  "albert.modeling_albert.AlbertForTokenClassification",
  "albert.modeling_albert.AlbertModel",
  "albert.modeling_tf_albert.TFAlbertForMaskedLM",
  "albert.modeling_tf_albert.TFAlbertForMultipleChoice",
  "albert.modeling_tf_albert.TFAlbertForPreTraining",
  "albert.modeling_tf_albert.TFAlbertForQuestionAnswering",
  "albert.modeling_tf_albert.TFAlbertForSequenceClassification",
  "albert.modeling_tf_albert.TFAlbertForTokenClassification",
  "albert.modeling_tf_albert.TFAlbertModel",
  "albert.tokenization_albert.AlbertTokenizer",
  "albert.tokenization_albert_fast.AlbertTokenizerFast",
  "albert_layer",
  "approx",
  "as_tensor",
  "auto.configuration_auto.AutoConfig.from_pretrained",
  "auto.modeling_auto.AutoModel.from_pretrained",
  "auto.modeling_auto.AutoModelForCausalLM.from_pretrained",
  "auto.modeling_auto.AutoModelForSeq2SeqLM.from_pretrained",
  "auto.modeling_tf_auto.TFAutoModel.from_pretrained",
  "auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM.from_pretrained",
  "auto.tokenization_auto.AutoTokenizer.from_pretrained",
  "auto_factory.auto_class_factory",
  "azureml.core.run.Run",
  "azureml.core.run.Run.get_context",
  "bart.configuration_bart.BART_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "bart.configuration_bart.BartConfig",
  "bart.modeling_bart.BartForCausalLM",
  "bart.modeling_bart.BartForConditionalGeneration",
  "bart.modeling_bart.BartForQuestionAnswering",
  "bart.modeling_bart.BartForSequenceClassification",
  "bart.modeling_bart.BartModel",
  "bart.modeling_flax_bart.FlaxBartForConditionalGeneration",
  "bart.modeling_flax_bart.FlaxBartForQuestionAnswering",
  "bart.modeling_flax_bart.FlaxBartForSequenceClassification",
  "bart.modeling_flax_bart.FlaxBartModel",
  "bart.modeling_tf_bart.TFBartForConditionalGeneration",
  "bart.modeling_tf_bart.TFBartModel",
  "bart.tokenization_bart.BartTokenizer",
  "bart.tokenization_bart_fast.BartTokenizerFast",
  "barthez.tokenization_barthez.BarthezTokenizer",
  "barthez.tokenization_barthez_fast.BarthezTokenizerFast",
  "base.ArgumentHandler",
  "base.PIPELINE_INIT_ARGS",
  "base.Pipeline",
  "base.PipelineException",
  "base.get_default_model",
  "base.infer_framework_load_model",
  "beam_search_body_fn",
  "benchmark_args.PyTorchBenchmarkArguments",
  "benchmark_args_tf.TensorFlowBenchmarkArguments",
  "benchmark_args_utils.BenchmarkArguments",
  "benchmark_utils.Benchmark",
  "benchmark_utils.Memory",
  "benchmark_utils.MemorySummary",
  "benchmark_utils.measure_peak_memory_cpu",
  "benchmark_utils.start_memory_tracing",
  "benchmark_utils.stop_memory_tracing",
  "bert.configuration_bert.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "bert.configuration_bert.BertConfig",
  "bert.modeling_bert.BertForMaskedLM",
  "bert.modeling_bert.BertForMultipleChoice",
  "bert.modeling_bert.BertForNextSentencePrediction",
  "bert.modeling_bert.BertForPreTraining",
  "bert.modeling_bert.BertForQuestionAnswering",
  "bert.modeling_bert.BertForSequenceClassification",
  "bert.modeling_bert.BertForTokenClassification",
  "bert.modeling_bert.BertLMHeadModel",
  "bert.modeling_bert.BertModel",
  "bert.modeling_flax_bert.FlaxBertForMaskedLM",
  "bert.modeling_flax_bert.FlaxBertForMultipleChoice",
  "bert.modeling_flax_bert.FlaxBertForNextSentencePrediction",
  "bert.modeling_flax_bert.FlaxBertForPreTraining",
  "bert.modeling_flax_bert.FlaxBertForQuestionAnswering",
  "bert.modeling_flax_bert.FlaxBertForSequenceClassification",
  "bert.modeling_flax_bert.FlaxBertForTokenClassification",
  "bert.modeling_flax_bert.FlaxBertModel",
  "bert.modeling_tf_bert.TFBertForMaskedLM",
  "bert.modeling_tf_bert.TFBertForMultipleChoice",
  "bert.modeling_tf_bert.TFBertForNextSentencePrediction",
  "bert.modeling_tf_bert.TFBertForPreTraining",
  "bert.modeling_tf_bert.TFBertForQuestionAnswering",
  "bert.modeling_tf_bert.TFBertForSequenceClassification",
  "bert.modeling_tf_bert.TFBertForTokenClassification",
  "bert.modeling_tf_bert.TFBertLMHeadModel",
  "bert.modeling_tf_bert.TFBertModel",
  "bert.tokenization_bert.BertTokenizer",
  "bert.tokenization_bert_fast.BertTokenizerFast",
  "bert_generation.configuration_bert_generation.BertGenerationConfig",
  "bert_generation.modeling_bert_generation.BertGenerationDecoder",
  "bert_generation.modeling_bert_generation.BertGenerationEncoder",
  "bert_generation.tokenization_bert_generation.BertGenerationTokenizer",
  "bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer",
  "bertweet.tokenization_bertweet.BertweetTokenizer",
  "big_bird.configuration_big_bird.BIG_BIRD_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "big_bird.configuration_big_bird.BigBirdConfig",
  "big_bird.modeling_big_bird.BigBirdForCausalLM",
  "big_bird.modeling_big_bird.BigBirdForMaskedLM",
  "big_bird.modeling_big_bird.BigBirdForMultipleChoice",
  "big_bird.modeling_big_bird.BigBirdForPreTraining",
  "big_bird.modeling_big_bird.BigBirdForQuestionAnswering",
  "big_bird.modeling_big_bird.BigBirdForSequenceClassification",
  "big_bird.modeling_big_bird.BigBirdForTokenClassification",
  "big_bird.modeling_big_bird.BigBirdModel",
  "big_bird.modeling_flax_big_bird.FlaxBigBirdForMaskedLM",
  "big_bird.modeling_flax_big_bird.FlaxBigBirdForMultipleChoice",
  "big_bird.modeling_flax_big_bird.FlaxBigBirdForPreTraining",
  "big_bird.modeling_flax_big_bird.FlaxBigBirdForQuestionAnswering",
  "big_bird.modeling_flax_big_bird.FlaxBigBirdForSequenceClassification",
  "big_bird.modeling_flax_big_bird.FlaxBigBirdForTokenClassification",
  "big_bird.modeling_flax_big_bird.FlaxBigBirdModel",
  "big_bird.tokenization_big_bird.BigBirdTokenizer",
  "big_bird.tokenization_big_bird_fast.BigBirdTokenizerFast",
  "bigbird_pegasus.configuration_bigbird_pegasus.BIGBIRD_PEGASUS_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "bigbird_pegasus.configuration_bigbird_pegasus.BigBirdPegasusConfig",
  "bigbird_pegasus.modeling_bigbird_pegasus.BigBirdPegasusForCausalLM",
  "bigbird_pegasus.modeling_bigbird_pegasus.BigBirdPegasusForConditionalGeneration",
  "bigbird_pegasus.modeling_bigbird_pegasus.BigBirdPegasusForQuestionAnswering",
  "bigbird_pegasus.modeling_bigbird_pegasus.BigBirdPegasusForSequenceClassification",
  "bigbird_pegasus.modeling_bigbird_pegasus.BigBirdPegasusModel",
  "blenderbot.configuration_blenderbot.BLENDERBOT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "blenderbot.configuration_blenderbot.BlenderbotConfig",
  "blenderbot.modeling_blenderbot.BlenderbotForCausalLM",
  "blenderbot.modeling_blenderbot.BlenderbotForConditionalGeneration",
  "blenderbot.modeling_blenderbot.BlenderbotModel",
  "blenderbot.modeling_tf_blenderbot.TFBlenderbotForConditionalGeneration",
  "blenderbot.modeling_tf_blenderbot.TFBlenderbotModel",
  "blenderbot.tokenization_blenderbot.BlenderbotTokenizer",
  "blenderbot_small.BlenderbotSmallForConditionalGeneration.from_pretrained",
  "blenderbot_small.BlenderbotSmallModel.from_pretrained",
  "blenderbot_small.TFBlenderbotSmallForConditionalGeneration.from_pretrained",
  "blenderbot_small.TFBlenderbotSmallModel.from_pretrained",
  "blenderbot_small.configuration_blenderbot_small.BLENDERBOT_SMALL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "blenderbot_small.configuration_blenderbot_small.BlenderbotSmallConfig",
  "blenderbot_small.modeling_blenderbot_small.BlenderbotSmallForCausalLM",
  "blenderbot_small.modeling_blenderbot_small.BlenderbotSmallForConditionalGeneration",
  "blenderbot_small.modeling_blenderbot_small.BlenderbotSmallModel",
  "blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallForConditionalGeneration",
  "blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallModel",
  "blenderbot_small.tokenization_blenderbot_small.BlenderbotSmallTokenizer",
  "block",
  "build_shape_dict",
  "byt5.tokenization_byt5.ByT5Tokenizer",
  "cached_path",
  "calc_banned_bad_words_ids",
  "calc_banned_ngram_tokens",
  "callback",
  "camembert.configuration_camembert.CAMEMBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "camembert.configuration_camembert.CamembertConfig",
  "camembert.modeling_camembert.CamembertForCausalLM",
  "camembert.modeling_camembert.CamembertForMaskedLM",
  "camembert.modeling_camembert.CamembertForMultipleChoice",
  "camembert.modeling_camembert.CamembertForQuestionAnswering",
  "camembert.modeling_camembert.CamembertForSequenceClassification",
  "camembert.modeling_camembert.CamembertForTokenClassification",
  "camembert.modeling_camembert.CamembertModel",
  "camembert.modeling_tf_camembert.TFCamembertForMaskedLM",
  "camembert.modeling_tf_camembert.TFCamembertForMultipleChoice",
  "camembert.modeling_tf_camembert.TFCamembertForQuestionAnswering",
  "camembert.modeling_tf_camembert.TFCamembertForSequenceClassification",
  "camembert.modeling_tf_camembert.TFCamembertForTokenClassification",
  "camembert.modeling_tf_camembert.TFCamembertModel",
  "camembert.tokenization_camembert.CamembertTokenizer",
  "camembert.tokenization_camembert_fast.CamembertTokenizerFast",
  "cat_input_and_doc",
  "clip.configuration_clip.CLIPConfig",
  "clip.configuration_clip.CLIP_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "clip.load",
  "clip.modeling_clip.CLIPModel",
  "clip.modeling_flax_clip.FlaxCLIPModel",
  "clone",
  "collections.abc.Iterable",
  "collections.abc.Sequence",
  "collections.abc.Sized",
  "comet_ml",
  "comet_ml.Experiment",
  "comet_ml.OfflineExperiment",
  "comet_ml.config.get_config",
  "comet_ml.config.get_global_experiment",
  "config_class",
  "config_class.from_dict",
  "configuration_albert.AlbertConfig",
  "configuration_auto.AlbertConfig",
  "configuration_auto.AutoConfig.from_pretrained",
  "configuration_auto.BartConfig",
  "configuration_auto.BertConfig",
  "configuration_auto.BertGenerationConfig",
  "configuration_auto.BigBirdConfig",
  "configuration_auto.BigBirdPegasusConfig",
  "configuration_auto.BlenderbotConfig",
  "configuration_auto.BlenderbotSmallConfig",
  "configuration_auto.CLIPConfig",
  "configuration_auto.CTRLConfig",
  "configuration_auto.CamembertConfig",
  "configuration_auto.ConvBertConfig",
  "configuration_auto.DPRConfig",
  "configuration_auto.DebertaConfig",
  "configuration_auto.DebertaV2Config",
  "configuration_auto.DeiTConfig",
  "configuration_auto.DetrConfig",
  "configuration_auto.DistilBertConfig",
  "configuration_auto.ElectraConfig",
  "configuration_auto.EncoderDecoderConfig",
  "configuration_auto.FSMTConfig",
  "configuration_auto.FlaubertConfig",
  "configuration_auto.FunnelConfig",
  "configuration_auto.GPT2Config",
  "configuration_auto.GPTNeoConfig",
  "configuration_auto.HubertConfig",
  "configuration_auto.IBertConfig",
  "configuration_auto.LEDConfig",
  "configuration_auto.LayoutLMConfig",
  "configuration_auto.LongformerConfig",
  "configuration_auto.LukeConfig",
  "configuration_auto.LxmertConfig",
  "configuration_auto.M2M100Config",
  "configuration_auto.MBartConfig",
  "configuration_auto.MPNetConfig",
  "configuration_auto.MT5Config",
  "configuration_auto.MarianConfig",
  "configuration_auto.MegatronBertConfig",
  "configuration_auto.MobileBertConfig",
  "configuration_auto.OpenAIGPTConfig",
  "configuration_auto.PegasusConfig",
  "configuration_auto.ProphetNetConfig",
  "configuration_auto.RagConfig",
  "configuration_auto.ReformerConfig",
  "configuration_auto.RetriBertConfig",
  "configuration_auto.RoFormerConfig",
  "configuration_auto.RobertaConfig",
  "configuration_auto.Speech2TextConfig",
  "configuration_auto.SqueezeBertConfig",
  "configuration_auto.T5Config",
  "configuration_auto.TapasConfig",
  "configuration_auto.TransfoXLConfig",
  "configuration_auto.ViTConfig",
  "configuration_auto.VisualBertConfig",
  "configuration_auto.Wav2Vec2Config",
  "configuration_auto.XLMConfig",
  "configuration_auto.XLMProphetNetConfig",
  "configuration_auto.XLMRobertaConfig",
  "configuration_auto.XLNetConfig",
  "configuration_auto.replace_list_option_in_docstrings",
  "configuration_bart.BartConfig",
  "configuration_bert.BertConfig",
  "configuration_bert_generation.BertGenerationConfig",
  "configuration_big_bird.BigBirdConfig",
  "configuration_bigbird_pegasus.BigBirdPegasusConfig",
  "configuration_blenderbot.BlenderbotConfig",
  "configuration_blenderbot_small.BlenderbotSmallConfig",
  "configuration_camembert.CamembertConfig",
  "configuration_clip.CLIPConfig",
  "configuration_clip.CLIPTextConfig",
  "configuration_clip.CLIPVisionConfig",
  "configuration_convbert.ConvBertConfig",
  "configuration_ctrl.CTRLConfig",
  "configuration_deberta.DebertaConfig",
  "configuration_deberta_v2.DebertaV2Config",
  "configuration_deit.DeiTConfig",
  "configuration_detr.DetrConfig",
  "configuration_distilbert.DistilBertConfig",
  "configuration_dpr.DPRConfig",
  "configuration_electra.ElectraConfig",
  "configuration_encoder_decoder.EncoderDecoderConfig",
  "configuration_encoder_decoder.EncoderDecoderConfig.from_encoder_decoder_configs",
  "configuration_flaubert.FlaubertConfig",
  "configuration_fsmt.FSMTConfig",
  "configuration_funnel.FunnelConfig",
  "configuration_gpt2.GPT2Config",
  "configuration_gpt_neo.GPTNeoConfig",
  "configuration_hubert.HubertConfig",
  "configuration_ibert.IBertConfig",
  "configuration_layoutlm.LayoutLMConfig",
  "configuration_led.LEDConfig",
  "configuration_longformer.LongformerConfig",
  "configuration_luke.LukeConfig",
  "configuration_lxmert.LxmertConfig",
  "configuration_m2m_100.M2M100Config",
  "configuration_marian.MarianConfig",
  "configuration_mbart.MBartConfig",
  "configuration_megatron_bert.MegatronBertConfig",
  "configuration_mobilebert.MobileBertConfig",
  "configuration_mpnet.MPNetConfig",
  "configuration_mt5.MT5Config",
  "configuration_openai.OpenAIGPTConfig",
  "configuration_pegasus.PegasusConfig",
  "configuration_prophetnet.ProphetNetConfig",
  "configuration_rag.RagConfig",
  "configuration_rag.RagConfig.from_pretrained",
  "configuration_rag.RagConfig.from_question_encoder_generator_configs",
  "configuration_reformer.ReformerConfig",
  "configuration_retribert.RetriBertConfig",
  "configuration_roberta.RobertaConfig",
  "configuration_roformer.RoFormerConfig",
  "configuration_speech_to_text.Speech2TextConfig",
  "configuration_squeezebert.SqueezeBertConfig",
  "configuration_t5.T5Config",
  "configuration_tapas.TapasConfig",
  "configuration_transfo_xl.TransfoXLConfig",
  "configuration_utils.PretrainedConfig",
  "configuration_utils.PretrainedConfig.from_json_file",
  "configuration_utils.PretrainedConfig.get_config_dict",
  "configuration_visual_bert.VisualBertConfig",
  "configuration_vit.ViTConfig",
  "configuration_wav2vec2.Wav2Vec2Config",
  "configuration_xlm.XLMConfig",
  "configuration_xlm_prophetnet.XLMProphetNetConfig",
  "configuration_xlm_roberta.XLMRobertaConfig",
  "configuration_xlnet.XLNetConfig",
  "conv",
  "conv_layer",
  "convbert.configuration_convbert.CONVBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "convbert.configuration_convbert.ConvBertConfig",
  "convbert.modeling_convbert.ConvBertForMaskedLM",
  "convbert.modeling_convbert.ConvBertForMultipleChoice",
  "convbert.modeling_convbert.ConvBertForQuestionAnswering",
  "convbert.modeling_convbert.ConvBertForSequenceClassification",
  "convbert.modeling_convbert.ConvBertForTokenClassification",
  "convbert.modeling_convbert.ConvBertModel",
  "convbert.modeling_tf_convbert.TFConvBertForMaskedLM",
  "convbert.modeling_tf_convbert.TFConvBertForMultipleChoice",
  "convbert.modeling_tf_convbert.TFConvBertForQuestionAnswering",
  "convbert.modeling_tf_convbert.TFConvBertForSequenceClassification",
  "convbert.modeling_tf_convbert.TFConvBertForTokenClassification",
  "convbert.modeling_tf_convbert.TFConvBertModel",
  "convbert.tokenization_convbert.ConvBertTokenizer",
  "convbert.tokenization_convbert_fast.ConvBertTokenizerFast",
  "conversational.ConversationalPipeline",
  "convert",
  "convert.ConvertCommand.register_subcommand",
  "convert_added_tokens",
  "convert_slow_tokenizer.SLOW_TO_FAST_CONVERTERS",
  "converter_class",
  "cpm.tokenization_cpm.CpmTokenizer",
  "create_band_mask_from_inputs",
  "create_custom_forward",
  "create_tf_var",
  "criteria",
  "criterion",
  "criterion.to",
  "ctrl.configuration_ctrl.CTRLConfig",
  "ctrl.configuration_ctrl.CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "ctrl.modeling_ctrl.CTRLForSequenceClassification",
  "ctrl.modeling_ctrl.CTRLLMHeadModel",
  "ctrl.modeling_ctrl.CTRLModel",
  "ctrl.modeling_tf_ctrl.TFCTRLForSequenceClassification",
  "ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel",
  "ctrl.modeling_tf_ctrl.TFCTRLModel",
  "ctrl.tokenization_ctrl.CTRLTokenizer",
  "data.SquadExample",
  "data.SquadFeatures",
  "data.squad_convert_examples_to_features",
  "deberta.configuration_deberta.DEBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "deberta.configuration_deberta.DebertaConfig",
  "deberta.modeling_deberta.DebertaForMaskedLM",
  "deberta.modeling_deberta.DebertaForQuestionAnswering",
  "deberta.modeling_deberta.DebertaForSequenceClassification",
  "deberta.modeling_deberta.DebertaForTokenClassification",
  "deberta.modeling_deberta.DebertaModel",
  "deberta.tokenization_deberta.DebertaTokenizer",
  "deberta.tokenization_deberta_fast.DebertaTokenizerFast",
  "deberta_v2.configuration_deberta_v2.DEBERTA_V2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "deberta_v2.configuration_deberta_v2.DebertaV2Config",
  "deberta_v2.modeling_deberta_v2.DebertaV2ForMaskedLM",
  "deberta_v2.modeling_deberta_v2.DebertaV2ForQuestionAnswering",
  "deberta_v2.modeling_deberta_v2.DebertaV2ForSequenceClassification",
  "deberta_v2.modeling_deberta_v2.DebertaV2ForTokenClassification",
  "deberta_v2.modeling_deberta_v2.DebertaV2Model",
  "deberta_v2.tokenization_deberta_v2.DebertaV2Tokenizer",
  "debug_utils.DebugOption",
  "debug_utils.DebugOption.TPU_METRICS_DEBUG",
  "debug_utils.DebugOption.UNDERFLOW_OVERFLOW",
  "debug_utils.DebugUnderflowOverflow",
  "decimal.ROUND_HALF_UP",
  "decoder_layer",
  "decoder_module",
  "deepspeed",
  "deepspeed.deepspeed_config",
  "deepspeed.deepspeed_init",
  "deepspeed.init_distributed",
  "deepspeed.initialize",
  "deepspeed.is_deepspeed_available",
  "deepspeed.is_deepspeed_zero3_enabled",
  "deepspeed.zero.GatheredParameters",
  "deepspeed.zero.Init",
  "deit.configuration_deit.DEIT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "deit.configuration_deit.DeiTConfig",
  "deit.modeling_deit.DeiTForImageClassification",
  "deit.modeling_deit.DeiTForImageClassificationWithTeacher",
  "deit.modeling_deit.DeiTModel",
  "dense",
  "dependency_versions_check.dep_version_check",
  "dependency_versions_table.deps",
  "dependency_versions_table.deps.keys",
  "detr",
  "detr.configuration_detr.DETR_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "detr.configuration_detr.DetrConfig",
  "detr.modeling_detr.DetrForObjectDetection",
  "detr.modeling_detr.DetrModel",
  "distilbert.configuration_distilbert.DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "distilbert.configuration_distilbert.DistilBertConfig",
  "distilbert.modeling_distilbert.DistilBertForMaskedLM",
  "distilbert.modeling_distilbert.DistilBertForMultipleChoice",
  "distilbert.modeling_distilbert.DistilBertForQuestionAnswering",
  "distilbert.modeling_distilbert.DistilBertForSequenceClassification",
  "distilbert.modeling_distilbert.DistilBertForTokenClassification",
  "distilbert.modeling_distilbert.DistilBertModel",
  "distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM",
  "distilbert.modeling_tf_distilbert.TFDistilBertForMultipleChoice",
  "distilbert.modeling_tf_distilbert.TFDistilBertForQuestionAnswering",
  "distilbert.modeling_tf_distilbert.TFDistilBertForSequenceClassification",
  "distilbert.modeling_tf_distilbert.TFDistilBertForTokenClassification",
  "distilbert.modeling_tf_distilbert.TFDistilBertModel",
  "distilbert.tokenization_distilbert.DistilBertTokenizer",
  "distilbert.tokenization_distilbert_fast.DistilBertTokenizerFast",
  "download.DownloadCommand.register_subcommand",
  "dpr.configuration_dpr.DPRConfig",
  "dpr.configuration_dpr.DPR_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "dpr.modeling_dpr.DPRQuestionEncoder",
  "dpr.modeling_tf_dpr.TFDPRQuestionEncoder",
  "dpr.tokenization_dpr.DPRQuestionEncoderTokenizer",
  "dpr.tokenization_dpr_fast.DPRQuestionEncoderTokenizerFast",
  "dtype",
  "electra.configuration_electra.ELECTRA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "electra.configuration_electra.ElectraConfig",
  "electra.modeling_electra.ElectraForMaskedLM",
  "electra.modeling_electra.ElectraForMultipleChoice",
  "electra.modeling_electra.ElectraForPreTraining",
  "electra.modeling_electra.ElectraForQuestionAnswering",
  "electra.modeling_electra.ElectraForSequenceClassification",
  "electra.modeling_electra.ElectraForTokenClassification",
  "electra.modeling_electra.ElectraModel",
  "electra.modeling_flax_electra.FlaxElectraForMaskedLM",
  "electra.modeling_flax_electra.FlaxElectraForMultipleChoice",
  "electra.modeling_flax_electra.FlaxElectraForPreTraining",
  "electra.modeling_flax_electra.FlaxElectraForQuestionAnswering",
  "electra.modeling_flax_electra.FlaxElectraForSequenceClassification",
  "electra.modeling_flax_electra.FlaxElectraForTokenClassification",
  "electra.modeling_flax_electra.FlaxElectraModel",
  "electra.modeling_tf_electra.TFElectraForMaskedLM",
  "electra.modeling_tf_electra.TFElectraForMultipleChoice",
  "electra.modeling_tf_electra.TFElectraForPreTraining",
  "electra.modeling_tf_electra.TFElectraForQuestionAnswering",
  "electra.modeling_tf_electra.TFElectraForSequenceClassification",
  "electra.modeling_tf_electra.TFElectraForTokenClassification",
  "electra.modeling_tf_electra.TFElectraModel",
  "electra.tokenization_electra.ElectraTokenizer",
  "electra.tokenization_electra_fast.ElectraTokenizerFast",
  "encode_module",
  "encoder",
  "encoder_decoder.configuration_encoder_decoder.EncoderDecoderConfig",
  "encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel",
  "encoder_layer",
  "env.EnvironmentCommand.register_subcommand",
  "eval_loop",
  "extend_enc_output",
  "fairscale",
  "fairscale.nn.data_parallel.FullyShardedDataParallel",
  "fairscale.nn.data_parallel.ShardedDataParallel",
  "fairscale.nn.wrap.auto_wrap",
  "fairscale.optim.OSS",
  "fairscale.optim.grad_scaler.ShardedGradScaler",
  "fairseq.data.Dictionary.load",
  "fairseq.models.roberta.RobertaModel.from_pretrained",
  "feature_extraction.FeatureExtractionPipeline",
  "feature_extraction_clip.CLIPFeatureExtractor.from_pretrained",
  "feature_extraction_detr.center_to_corners_format",
  "feature_extraction_sequence_utils.SequenceFeatureExtractor",
  "feature_extraction_speech_to_text.Speech2TextFeatureExtractor.from_pretrained",
  "feature_extraction_utils.BatchFeature",
  "feature_extraction_utils.FeatureExtractionMixin",
  "feature_extraction_utils.FeatureExtractionMixin.get_feature_extractor_dict",
  "feature_extraction_utils.PreTrainedFeatureExtractor",
  "feature_extraction_wav2vec2.Wav2Vec2FeatureExtractor.from_pretrained",
  "feature_extractor",
  "feature_extractor.save_pretrained",
  "ffn_module",
  "file_utils.CONFIG_NAME",
  "file_utils.DUMMY_INPUTS",
  "file_utils.DUMMY_MASK",
  "file_utils.ENV_VARS_TRUE_VALUES",
  "file_utils.ExplicitEnum",
  "file_utils.FEATURE_EXTRACTOR_NAME",
  "file_utils.FLAX_WEIGHTS_NAME",
  "file_utils.MODEL_CARD_NAME",
  "file_utils.MULTIPLE_CHOICE_DUMMY_INPUTS",
  "file_utils.ModelOutput",
  "file_utils.PaddingStrategy",
  "file_utils.PaddingStrategy.DO_NOT_PAD",
  "file_utils.PaddingStrategy.DO_NOT_PAD.value",
  "file_utils.PaddingStrategy.LONGEST",
  "file_utils.PaddingStrategy.MAX_LENGTH",
  "file_utils.PaddingStrategy.MAX_LENGTH.value",
  "file_utils.PushToHubMixin",
  "file_utils.PushToHubMixin._create_or_get_repo",
  "file_utils.PushToHubMixin._get_repo_url_from_name",
  "file_utils.SPIECE_UNDERLINE",
  "file_utils.TF2_WEIGHTS_NAME",
  "file_utils.TF_WEIGHTS_NAME",
  "file_utils.TensorType",
  "file_utils.TensorType.JAX",
  "file_utils.TensorType.PYTORCH",
  "file_utils.TensorType.TENSORFLOW",
  "file_utils.WEIGHTS_NAME",
  "file_utils._BaseLazyModule",
  "file_utils._is_jax",
  "file_utils._is_numpy",
  "file_utils._is_tensorflow",
  "file_utils._is_torch",
  "file_utils._is_torch_device",
  "file_utils.add_code_sample_docstrings",
  "file_utils.add_end_docstrings",
  "file_utils.add_start_docstrings",
  "file_utils.add_start_docstrings_to_model_forward",
  "file_utils.cached_path",
  "file_utils.cached_property",
  "file_utils.copy_func",
  "file_utils.hf_bucket_url",
  "file_utils.is_apex_available",
  "file_utils.is_datasets_available",
  "file_utils.is_faiss_available",
  "file_utils.is_flax_available",
  "file_utils.is_in_notebook",
  "file_utils.is_offline_mode",
  "file_utils.is_onnx_available",
  "file_utils.is_pandas_available",
  "file_utils.is_psutil_available",
  "file_utils.is_py3nvml_available",
  "file_utils.is_remote_url",
  "file_utils.is_sagemaker_dp_enabled",
  "file_utils.is_sagemaker_mp_enabled",
  "file_utils.is_scatter_available",
  "file_utils.is_scipy_available",
  "file_utils.is_sentencepiece_available",
  "file_utils.is_sklearn_available",
  "file_utils.is_soundfile_availble",
  "file_utils.is_speech_available",
  "file_utils.is_tf_available",
  "file_utils.is_timm_available",
  "file_utils.is_tokenizers_available",
  "file_utils.is_torch_available",
  "file_utils.is_torch_fx_proxy",
  "file_utils.is_torch_tpu_available",
  "file_utils.is_torchaudio_available",
  "file_utils.is_training_run_on_sagemaker",
  "file_utils.is_vision_available",
  "file_utils.replace_return_docstrings",
  "file_utils.requires_backends",
  "file_utils.tf_required",
  "file_utils.to_py_obj",
  "file_utils.torch_only_method",
  "file_utils.torch_required",
  "fill_mask.FillMaskPipeline",
  "flatten_beam_dim",
  "flaubert.configuration_flaubert.FLAUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "flaubert.configuration_flaubert.FlaubertConfig",
  "flaubert.modeling_flaubert.FlaubertForMultipleChoice",
  "flaubert.modeling_flaubert.FlaubertForQuestionAnsweringSimple",
  "flaubert.modeling_flaubert.FlaubertForSequenceClassification",
  "flaubert.modeling_flaubert.FlaubertForTokenClassification",
  "flaubert.modeling_flaubert.FlaubertModel",
  "flaubert.modeling_flaubert.FlaubertWithLMHeadModel",
  "flaubert.modeling_tf_flaubert.TFFlaubertForMultipleChoice",
  "flaubert.modeling_tf_flaubert.TFFlaubertForQuestionAnsweringSimple",
  "flaubert.modeling_tf_flaubert.TFFlaubertForSequenceClassification",
  "flaubert.modeling_tf_flaubert.TFFlaubertForTokenClassification",
  "flaubert.modeling_tf_flaubert.TFFlaubertModel",
  "flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel",
  "flaubert.tokenization_flaubert.FlaubertTokenizer",
  "fn",
  "fn.__doc__",
  "fn.__qualname__.split",
  "fsmt.configuration_fsmt.FSMTConfig",
  "fsmt.configuration_fsmt.FSMT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "fsmt.modeling_fsmt.FSMTForConditionalGeneration",
  "fsmt.modeling_fsmt.FSMTModel",
  "fsmt.tokenization_fsmt.FSMTTokenizer",
  "func",
  "func.__name__",
  "funnel.configuration_funnel.FUNNEL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "funnel.configuration_funnel.FunnelConfig",
  "funnel.modeling_funnel.FunnelBaseModel",
  "funnel.modeling_funnel.FunnelForMaskedLM",
  "funnel.modeling_funnel.FunnelForMultipleChoice",
  "funnel.modeling_funnel.FunnelForPreTraining",
  "funnel.modeling_funnel.FunnelForQuestionAnswering",
  "funnel.modeling_funnel.FunnelForSequenceClassification",
  "funnel.modeling_funnel.FunnelForTokenClassification",
  "funnel.modeling_funnel.FunnelModel",
  "funnel.modeling_tf_funnel.TFFunnelBaseModel",
  "funnel.modeling_tf_funnel.TFFunnelForMaskedLM",
  "funnel.modeling_tf_funnel.TFFunnelForMultipleChoice",
  "funnel.modeling_tf_funnel.TFFunnelForPreTraining",
  "funnel.modeling_tf_funnel.TFFunnelForQuestionAnswering",
  "funnel.modeling_tf_funnel.TFFunnelForSequenceClassification",
  "funnel.modeling_tf_funnel.TFFunnelForTokenClassification",
  "funnel.modeling_tf_funnel.TFFunnelModel",
  "funnel.tokenization_funnel.FunnelTokenizer",
  "funnel.tokenization_funnel_fast.FunnelTokenizerFast",
  "gather",
  "gather2d",
  "gather_beams",
  "gc",
  "gc.collect",
  "generalized_box_iou",
  "generation_beam_search.BeamScorer",
  "generation_beam_search.BeamSearchScorer",
  "generation_flax_logits_process.FlaxForcedBOSTokenLogitsProcessor",
  "generation_flax_logits_process.FlaxForcedEOSTokenLogitsProcessor",
  "generation_flax_logits_process.FlaxLogitsProcessorList",
  "generation_flax_logits_process.FlaxMinLengthLogitsProcessor",
  "generation_flax_logits_process.FlaxTemperatureLogitsWarper",
  "generation_flax_logits_process.FlaxTopKLogitsWarper",
  "generation_flax_logits_process.FlaxTopPLogitsWarper",
  "generation_flax_utils.FlaxGenerationMixin",
  "generation_logits_process.EncoderNoRepeatNGramLogitsProcessor",
  "generation_logits_process.ForcedBOSTokenLogitsProcessor",
  "generation_logits_process.ForcedEOSTokenLogitsProcessor",
  "generation_logits_process.HammingDiversityLogitsProcessor",
  "generation_logits_process.InfNanRemoveLogitsProcessor",
  "generation_logits_process.LogitsProcessorList",
  "generation_logits_process.MinLengthLogitsProcessor",
  "generation_logits_process.NoBadWordsLogitsProcessor",
  "generation_logits_process.NoRepeatNGramLogitsProcessor",
  "generation_logits_process.PrefixConstrainedLogitsProcessor",
  "generation_logits_process.RepetitionPenaltyLogitsProcessor",
  "generation_logits_process.TemperatureLogitsWarper",
  "generation_logits_process.TopKLogitsWarper",
  "generation_logits_process.TopPLogitsWarper",
  "generation_stopping_criteria.MaxLengthCriteria",
  "generation_stopping_criteria.MaxNewTokensCriteria",
  "generation_stopping_criteria.MaxTimeCriteria",
  "generation_stopping_criteria.StoppingCriteriaList",
  "generation_stopping_criteria.validate_stopping_criteria",
  "generation_tf_utils.TFGenerationMixin",
  "generation_utils.GenerationMixin",
  "get_cpu_memory",
  "get_ids_area",
  "get_initializer",
  "get_input_ids",
  "get_input_ids_and_entity_token_spans",
  "get_ipython",
  "get_numeric_sort_key_fn",
  "get_size",
  "get_size_with_aspect_ratio",
  "google.protobuf.descriptor",
  "google.protobuf.descriptor.Descriptor",
  "google.protobuf.descriptor.EnumDescriptor",
  "google.protobuf.descriptor.EnumValueDescriptor",
  "google.protobuf.descriptor.FieldDescriptor",
  "google.protobuf.descriptor.FileDescriptor",
  "google.protobuf.descriptor._ParseOptions",
  "google.protobuf.descriptor_pb2",
  "google.protobuf.descriptor_pb2.FieldOptions",
  "google.protobuf.descriptor_pb2.FileOptions",
  "google.protobuf.message",
  "google.protobuf.message.Message",
  "google.protobuf.reflection",
  "google.protobuf.reflection.GeneratedProtocolMessageType",
  "google.protobuf.symbol_database",
  "google.protobuf.symbol_database.Default",
  "gpt2.configuration_gpt2.GPT2Config",
  "gpt2.configuration_gpt2.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "gpt2.modeling_flax_gpt2.FlaxGPT2LMHeadModel",
  "gpt2.modeling_flax_gpt2.FlaxGPT2Model",
  "gpt2.modeling_gpt2.GPT2ForSequenceClassification",
  "gpt2.modeling_gpt2.GPT2LMHeadModel",
  "gpt2.modeling_gpt2.GPT2Model",
  "gpt2.modeling_tf_gpt2.TFGPT2ForSequenceClassification",
  "gpt2.modeling_tf_gpt2.TFGPT2LMHeadModel",
  "gpt2.modeling_tf_gpt2.TFGPT2Model",
  "gpt2.tokenization_gpt2.GPT2Tokenizer",
  "gpt2.tokenization_gpt2_fast.GPT2TokenizerFast",
  "gpt_neo.configuration_gpt_neo.GPTNeoConfig",
  "gpt_neo.configuration_gpt_neo.GPT_NEO_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "gpt_neo.modeling_gpt_neo.GPTNeoForCausalLM",
  "gpt_neo.modeling_gpt_neo.GPTNeoForSequenceClassification",
  "gpt_neo.modeling_gpt_neo.GPTNeoModel",
  "greedy_search_body_fn",
  "h",
  "hashlib.sha256",
  "herbert.tokenization_herbert.HerbertTokenizer",
  "herbert.tokenization_herbert_fast.HerbertTokenizerFast",
  "hf_api.HfFolder.delete_token",
  "hf_api.HfFolder.get_token",
  "hf_api.HfFolder.path_token",
  "hf_api.HfFolder.save_token",
  "hf_model",
  "hf_model.save_pretrained",
  "html.entities.name2codepoint.get",
  "hubert.configuration_hubert.HUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "hubert.configuration_hubert.HubertConfig",
  "hubert.modeling_hubert.HubertModel",
  "huggingface_hub.HfFolder.get_token",
  "ibert.configuration_ibert.IBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "ibert.configuration_ibert.IBertConfig",
  "ibert.modeling_ibert.IBertForMaskedLM",
  "ibert.modeling_ibert.IBertForMultipleChoice",
  "ibert.modeling_ibert.IBertForQuestionAnswering",
  "ibert.modeling_ibert.IBertForSequenceClassification",
  "ibert.modeling_ibert.IBertForTokenClassification",
  "ibert.modeling_ibert.IBertModel",
  "image_classification.ImageClassificationPipeline",
  "image_utils.ImageFeatureExtractionMixin",
  "image_utils.is_torch_tensor",
  "inference_model",
  "initializer",
  "input.masked_fill",
  "input.mul_",
  "input.name.split",
  "input.shape",
  "input.size",
  "int_to_alphabetic",
  "integrations.default_hp_search_backend",
  "integrations.get_available_reporting_integrations",
  "integrations.hp_params",
  "integrations.is_comet_available",
  "integrations.is_fairscale_available",
  "integrations.is_optuna_available",
  "integrations.is_ray_available",
  "integrations.is_ray_tune_available",
  "integrations.is_wandb_available",
  "integrations.run_hp_search_optuna",
  "integrations.run_hp_search_ray",
  "is_tensor",
  "is_torch_available",
  "itertools",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "itertools.count",
  "itertools.groupby",
  "jaxlib.xla_extension",
  "jaxlib.xla_extension.DeviceArray",
  "key_fn",
  "label_from_example",
  "layer",
  "layer.attention.prune_heads",
  "layer.backward_pass",
  "layer_module",
  "layoutlm.configuration_layoutlm.LAYOUTLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "layoutlm.configuration_layoutlm.LayoutLMConfig",
  "layoutlm.modeling_layoutlm.LayoutLMForMaskedLM",
  "layoutlm.modeling_layoutlm.LayoutLMForSequenceClassification",
  "layoutlm.modeling_layoutlm.LayoutLMForTokenClassification",
  "layoutlm.modeling_layoutlm.LayoutLMModel",
  "layoutlm.modeling_tf_layoutlm.TFLayoutLMForMaskedLM",
  "layoutlm.modeling_tf_layoutlm.TFLayoutLMForSequenceClassification",
  "layoutlm.modeling_tf_layoutlm.TFLayoutLMForTokenClassification",
  "layoutlm.modeling_tf_layoutlm.TFLayoutLMModel",
  "layoutlm.tokenization_layoutlm.LayoutLMTokenizer",
  "layoutlm.tokenization_layoutlm_fast.LayoutLMTokenizerFast",
  "led.configuration_led.LEDConfig",
  "led.configuration_led.LED_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "led.modeling_led.LEDForConditionalGeneration",
  "led.modeling_led.LEDForQuestionAnswering",
  "led.modeling_led.LEDForSequenceClassification",
  "led.modeling_led.LEDModel",
  "led.modeling_tf_led.TFLEDForConditionalGeneration",
  "led.modeling_tf_led.TFLEDModel",
  "led.tokenization_led.LEDTokenizer",
  "led.tokenization_led_fast.LEDTokenizerFast",
  "lfs.LfsCommands.register_subcommand",
  "linear",
  "load",
  "load_pytorch_checkpoint_in_tf2_model",
  "load_pytorch_weights_in_tf2_model",
  "load_spm",
  "load_tf_weights_bert",
  "load_tf_weights_in_bert_generation",
  "load_tf_weights_trivia_qa",
  "log_softmax",
  "logging.get_logger",
  "logging.set_verbosity_info",
  "logits_processor",
  "logits_warper",
  "longformer.configuration_longformer.LONGFORMER_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "longformer.configuration_longformer.LongformerConfig",
  "longformer.modeling_longformer.LongformerForMaskedLM",
  "longformer.modeling_longformer.LongformerForMultipleChoice",
  "longformer.modeling_longformer.LongformerForQuestionAnswering",
  "longformer.modeling_longformer.LongformerForSequenceClassification",
  "longformer.modeling_longformer.LongformerForTokenClassification",
  "longformer.modeling_longformer.LongformerModel",
  "longformer.modeling_tf_longformer.TFLongformerForMaskedLM",
  "longformer.modeling_tf_longformer.TFLongformerForMultipleChoice",
  "longformer.modeling_tf_longformer.TFLongformerForQuestionAnswering",
  "longformer.modeling_tf_longformer.TFLongformerForSequenceClassification",
  "longformer.modeling_tf_longformer.TFLongformerForTokenClassification",
  "longformer.modeling_tf_longformer.TFLongformerModel",
  "longformer.tokenization_longformer.LongformerTokenizer",
  "longformer.tokenization_longformer_fast.LongformerTokenizerFast",
  "loss_fct",
  "loss_fct.ignore_index",
  "loss_fct_cls",
  "loss_fn",
  "lower",
  "luke.configuration_luke.LUKE_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "luke.configuration_luke.LukeConfig",
  "luke.modeling_luke.LukeModel",
  "luke.tokenization_luke.LukeTokenizer",
  "lxmert.configuration_lxmert.LXMERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "lxmert.configuration_lxmert.LxmertConfig",
  "lxmert.modeling_lxmert.LxmertForPreTraining",
  "lxmert.modeling_lxmert.LxmertForQuestionAnswering",
  "lxmert.modeling_lxmert.LxmertModel",
  "lxmert.modeling_tf_lxmert.TFLxmertForPreTraining",
  "lxmert.modeling_tf_lxmert.TFLxmertModel",
  "lxmert.tokenization_lxmert.LxmertTokenizer",
  "lxmert.tokenization_lxmert_fast.LxmertTokenizerFast",
  "m2m_100.M2M100Tokenizer",
  "m2m_100.configuration_m2m_100.M2M100Config",
  "m2m_100.configuration_m2m_100.M2M_100_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "m2m_100.modeling_m2m_100.M2M100ForConditionalGeneration",
  "m2m_100.modeling_m2m_100.M2M100Model",
  "marian.configuration_marian.MarianConfig",
  "marian.modeling_marian.MarianForCausalLM",
  "marian.modeling_marian.MarianMTModel",
  "marian.modeling_marian.MarianModel",
  "marian.modeling_tf_marian.TFMarianMTModel",
  "marian.modeling_tf_marian.TFMarianModel",
  "marian.tokenization_marian.MarianTokenizer",
  "mbart.configuration_mbart.MBART_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "mbart.configuration_mbart.MBartConfig",
  "mbart.modeling_mbart.MBartForCausalLM",
  "mbart.modeling_mbart.MBartForConditionalGeneration",
  "mbart.modeling_mbart.MBartForQuestionAnswering",
  "mbart.modeling_mbart.MBartForSequenceClassification",
  "mbart.modeling_mbart.MBartModel",
  "mbart.modeling_tf_mbart.TFMBartForConditionalGeneration",
  "mbart.modeling_tf_mbart.TFMBartModel",
  "mbart.tokenization_mbart.MBartTokenizer",
  "mbart.tokenization_mbart50.MBart50Tokenizer",
  "mbart.tokenization_mbart50_fast.MBart50TokenizerFast",
  "mbart.tokenization_mbart_fast.MBartTokenizerFast",
  "megatron_bert.configuration_megatron_bert.MEGATRON_BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "megatron_bert.configuration_megatron_bert.MegatronBertConfig",
  "megatron_bert.modeling_megatron_bert.MegatronBertForCausalLM",
  "megatron_bert.modeling_megatron_bert.MegatronBertForMaskedLM",
  "megatron_bert.modeling_megatron_bert.MegatronBertForMultipleChoice",
  "megatron_bert.modeling_megatron_bert.MegatronBertForNextSentencePrediction",
  "megatron_bert.modeling_megatron_bert.MegatronBertForPreTraining",
  "megatron_bert.modeling_megatron_bert.MegatronBertForQuestionAnswering",
  "megatron_bert.modeling_megatron_bert.MegatronBertForSequenceClassification",
  "megatron_bert.modeling_megatron_bert.MegatronBertForTokenClassification",
  "megatron_bert.modeling_megatron_bert.MegatronBertModel",
  "method",
  "method.__get__",
  "method.__name__",
  "mobilebert.configuration_mobilebert.MobileBertConfig",
  "mobilebert.modeling_mobilebert.MobileBertForMaskedLM",
  "mobilebert.modeling_mobilebert.MobileBertForMultipleChoice",
  "mobilebert.modeling_mobilebert.MobileBertForNextSentencePrediction",
  "mobilebert.modeling_mobilebert.MobileBertForPreTraining",
  "mobilebert.modeling_mobilebert.MobileBertForQuestionAnswering",
  "mobilebert.modeling_mobilebert.MobileBertForSequenceClassification",
  "mobilebert.modeling_mobilebert.MobileBertForTokenClassification",
  "mobilebert.modeling_mobilebert.MobileBertModel",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForMultipleChoice",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForNextSentencePrediction",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForQuestionAnswering",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForSequenceClassification",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForTokenClassification",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertModel",
  "mobilebert.tokenization_mobilebert.MobileBertTokenizer",
  "mobilebert.tokenization_mobilebert_fast.MobileBertTokenizerFast",
  "model",
  "model.__class__.__name__",
  "model.dummy_inputs",
  "model.lm_head",
  "model.load_state_dict",
  "model.model",
  "model.model.load_state_dict",
  "model.model.shared",
  "model.save_pretrained",
  "model.trainable_variables",
  "model_class",
  "model_class.from_pretrained",
  "model_cls",
  "modelcard.TrainingSummary.from_trainer",
  "modeling_flax_outputs.FlaxBaseModelOutput",
  "modeling_flax_outputs.FlaxBaseModelOutputWithPast",
  "modeling_flax_outputs.FlaxBaseModelOutputWithPastAndCrossAttentions",
  "modeling_flax_outputs.FlaxBaseModelOutputWithPooling",
  "modeling_flax_outputs.FlaxCausalLMOutput",
  "modeling_flax_outputs.FlaxCausalLMOutputWithCrossAttentions",
  "modeling_flax_outputs.FlaxMaskedLMOutput",
  "modeling_flax_outputs.FlaxMultipleChoiceModelOutput",
  "modeling_flax_outputs.FlaxNextSentencePredictorOutput",
  "modeling_flax_outputs.FlaxQuestionAnsweringModelOutput",
  "modeling_flax_outputs.FlaxSeq2SeqLMOutput",
  "modeling_flax_outputs.FlaxSeq2SeqModelOutput",
  "modeling_flax_outputs.FlaxSeq2SeqQuestionAnsweringModelOutput",
  "modeling_flax_outputs.FlaxSeq2SeqSequenceClassifierOutput",
  "modeling_flax_outputs.FlaxSequenceClassifierOutput",
  "modeling_flax_outputs.FlaxTokenClassifierOutput",
  "modeling_flax_pytorch_utils.load_flax_checkpoint_in_pytorch_model",
  "modeling_flax_pytorch_utils.load_pytorch_checkpoint_in_flax_state_dict",
  "modeling_flax_utils.ACT2FN",
  "modeling_flax_utils.FlaxPreTrainedModel",
  "modeling_flax_utils.append_call_sample_docstring",
  "modeling_flax_utils.append_replace_return_docstrings",
  "modeling_flax_utils.overwrite_call_docstring",
  "modeling_outputs.BaseModelOutput",
  "modeling_outputs.BaseModelOutputWithCrossAttentions",
  "modeling_outputs.BaseModelOutputWithPast",
  "modeling_outputs.BaseModelOutputWithPastAndCrossAttentions",
  "modeling_outputs.BaseModelOutputWithPooling",
  "modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions",
  "modeling_outputs.CausalLMOutput",
  "modeling_outputs.CausalLMOutputWithCrossAttentions",
  "modeling_outputs.CausalLMOutputWithPast",
  "modeling_outputs.MaskedLMOutput",
  "modeling_outputs.ModelOutput",
  "modeling_outputs.MultipleChoiceModelOutput",
  "modeling_outputs.NextSentencePredictorOutput",
  "modeling_outputs.QuestionAnsweringModelOutput",
  "modeling_outputs.Seq2SeqLMOutput",
  "modeling_outputs.Seq2SeqModelOutput",
  "modeling_outputs.Seq2SeqQuestionAnsweringModelOutput",
  "modeling_outputs.Seq2SeqSequenceClassifierOutput",
  "modeling_outputs.SequenceClassifierOutput",
  "modeling_outputs.SequenceClassifierOutputWithPast",
  "modeling_outputs.TokenClassifierOutput",
  "modeling_tf_outputs.TFBaseModelOutput",
  "modeling_tf_outputs.TFBaseModelOutputWithPast",
  "modeling_tf_outputs.TFBaseModelOutputWithPastAndCrossAttentions",
  "modeling_tf_outputs.TFBaseModelOutputWithPooling",
  "modeling_tf_outputs.TFCausalLMOutput",
  "modeling_tf_outputs.TFCausalLMOutputWithPast",
  "modeling_tf_outputs.TFMaskedLMOutput",
  "modeling_tf_outputs.TFMultipleChoiceModelOutput",
  "modeling_tf_outputs.TFNextSentencePredictorOutput",
  "modeling_tf_outputs.TFQuestionAnsweringModelOutput",
  "modeling_tf_outputs.TFSeq2SeqLMOutput",
  "modeling_tf_outputs.TFSeq2SeqModelOutput",
  "modeling_tf_outputs.TFSequenceClassifierOutput",
  "modeling_tf_outputs.TFSequenceClassifierOutputWithPast",
  "modeling_tf_outputs.TFTokenClassifierOutput",
  "modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model",
  "modeling_tf_pytorch_utils.load_tf2_checkpoint_in_pytorch_model",
  "modeling_tf_utils.DUMMY_INPUTS",
  "modeling_tf_utils.TFCausalLanguageModelingLoss",
  "modeling_tf_utils.TFMaskedLanguageModelingLoss",
  "modeling_tf_utils.TFModelInputType",
  "modeling_tf_utils.TFMultipleChoiceLoss",
  "modeling_tf_utils.TFNextSentencePredictionLoss",
  "modeling_tf_utils.TFPreTrainedModel",
  "modeling_tf_utils.TFQuestionAnsweringLoss",
  "modeling_tf_utils.TFSequenceClassificationLoss",
  "modeling_tf_utils.TFSharedEmbeddings",
  "modeling_tf_utils.TFTokenClassificationLoss",
  "modeling_tf_utils.TFWrappedEmbeddings",
  "modeling_tf_utils.booleans_processing",
  "modeling_tf_utils.get_initializer",
  "modeling_tf_utils.input_processing",
  "modeling_tf_utils.keras_serializable",
  "modeling_tf_utils.load_tf_weights",
  "modeling_tf_utils.shape_list",
  "modeling_utils.Conv1D",
  "modeling_utils.ModuleUtilsMixin",
  "modeling_utils.PreTrainedModel",
  "modeling_utils.apply_chunking_to_forward",
  "modeling_utils.find_pruneable_heads_and_indices",
  "modeling_utils.prune_conv1d_layer",
  "modeling_utils.prune_linear_layer",
  "modeling_utils.unwrap_model",
  "models.albert.convert_albert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.auto.AutoModel.from_pretrained",
  "models.auto.AutoTokenizer.from_pretrained",
  "models.auto.configuration_auto.AutoConfig",
  "models.auto.configuration_auto.AutoConfig.from_pretrained",
  "models.auto.feature_extraction_auto.AutoFeatureExtractor.from_pretrained",
  "models.auto.feature_extraction_auto.FEATURE_EXTRACTOR_MAPPING",
  "models.auto.get_values",
  "models.auto.modeling_auto.AutoModel",
  "models.auto.modeling_auto.AutoModel.from_pretrained",
  "models.auto.modeling_auto.AutoModelForCausalLM",
  "models.auto.modeling_auto.AutoModelForImageClassification",
  "models.auto.modeling_auto.AutoModelForMaskedLM",
  "models.auto.modeling_auto.AutoModelForQuestionAnswering",
  "models.auto.modeling_auto.AutoModelForSeq2SeqLM",
  "models.auto.modeling_auto.AutoModelForSequenceClassification",
  "models.auto.modeling_auto.AutoModelForTableQuestionAnswering",
  "models.auto.modeling_auto.AutoModelForTokenClassification",
  "models.auto.modeling_auto.MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys",
  "models.auto.modeling_auto.MODEL_MAPPING",
  "models.auto.modeling_auto.MODEL_WITH_LM_HEAD_MAPPING",
  "models.auto.modeling_tf_auto.TFAutoModel",
  "models.auto.modeling_tf_auto.TFAutoModel.from_pretrained",
  "models.auto.modeling_tf_auto.TFAutoModelForCausalLM",
  "models.auto.modeling_tf_auto.TFAutoModelForMaskedLM",
  "models.auto.modeling_tf_auto.TFAutoModelForQuestionAnswering",
  "models.auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM",
  "models.auto.modeling_tf_auto.TFAutoModelForSequenceClassification",
  "models.auto.modeling_tf_auto.TFAutoModelForTokenClassification",
  "models.auto.modeling_tf_auto.TF_MODEL_MAPPING",
  "models.auto.modeling_tf_auto.TF_MODEL_WITH_LM_HEAD_MAPPING",
  "models.auto.tokenization_auto.AutoTokenizer.from_pretrained",
  "models.auto.tokenization_auto.TOKENIZER_MAPPING",
  "models.bert.BasicTokenizer",
  "models.bert.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.bert.tokenization_bert.whitespace_tokenize",
  "models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch",
  "models.lxmert.convert_lxmert_original_pytorch_checkpoint_to_pytorch.convert_lxmert_checkpoint_to_pytorch",
  "models.marian.MarianConfig.from_pretrained",
  "models.marian.MarianMTModel",
  "models.openai.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch",
  "models.roformer.tokenization_utils.JiebaPreTokenizer",
  "models.t5.convert_t5_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch",
  "models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch",
  "models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch",
  "module",
  "module.bias",
  "module.bias.data.zero_",
  "module.codevectors",
  "module.embedding_dim",
  "module.padding_idx",
  "module.padding_idx.zero_",
  "module.weight",
  "module.weight.data",
  "module.weight.data.fill_",
  "module.weight.data.normal_",
  "module.weight.data.zero_",
  "module.weight_g",
  "module.weight_proj.bias.data.zero_",
  "module.weight_proj.weight.data.normal_",
  "module.weight_v",
  "mpnet.configuration_mpnet.MPNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "mpnet.configuration_mpnet.MPNetConfig",
  "mpnet.modeling_mpnet.MPNetForMaskedLM",
  "mpnet.modeling_mpnet.MPNetForMultipleChoice",
  "mpnet.modeling_mpnet.MPNetForQuestionAnswering",
  "mpnet.modeling_mpnet.MPNetForSequenceClassification",
  "mpnet.modeling_mpnet.MPNetForTokenClassification",
  "mpnet.modeling_mpnet.MPNetModel",
  "mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM",
  "mpnet.modeling_tf_mpnet.TFMPNetForMultipleChoice",
  "mpnet.modeling_tf_mpnet.TFMPNetForQuestionAnswering",
  "mpnet.modeling_tf_mpnet.TFMPNetForSequenceClassification",
  "mpnet.modeling_tf_mpnet.TFMPNetForTokenClassification",
  "mpnet.modeling_tf_mpnet.TFMPNetModel",
  "mpnet.tokenization_mpnet.MPNetTokenizer",
  "mpnet.tokenization_mpnet_fast.MPNetTokenizerFast",
  "mt5.MT5Tokenizer",
  "mt5.MT5TokenizerFast",
  "mt5.configuration_mt5.MT5Config",
  "mt5.modeling_mt5.MT5ForConditionalGeneration",
  "mt5.modeling_mt5.MT5Model",
  "mt5.modeling_tf_mt5.TFMT5ForConditionalGeneration",
  "mt5.modeling_tf_mt5.TFMT5Model",
  "numpy.divide",
  "numpy.float32",
  "numpy.floating",
  "numpy.frexp",
  "numpy.greater",
  "numpy.lcm",
  "numpy.less",
  "numpy.log",
  "numpy.maximum",
  "numpy.power",
  "numpy.random.get_state",
  "numpy.random.normal",
  "numpy.random.permutation",
  "numpy.random.rand",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.random.set_state",
  "numpy.random.shuffle",
  "numpy.random.uniform",
  "numpy.sign",
  "numpy.uint32",
  "onnxruntime.capi.onnxruntime_pybind11_state.RuntimeException",
  "onnxruntime.quantization.QuantizationMode.IntegerOps",
  "openai.configuration_openai.OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "openai.configuration_openai.OpenAIGPTConfig",
  "openai.modeling_openai.OpenAIGPTForSequenceClassification",
  "openai.modeling_openai.OpenAIGPTLMHeadModel",
  "openai.modeling_openai.OpenAIGPTModel",
  "openai.modeling_tf_openai.TFOpenAIGPTForSequenceClassification",
  "openai.modeling_tf_openai.TFOpenAIGPTLMHeadModel",
  "openai.modeling_tf_openai.TFOpenAIGPTModel",
  "openai.tokenization_openai.OpenAIGPTTokenizer",
  "openai.tokenization_openai_fast.OpenAIGPTTokenizerFast",
  "optimization.Adafactor",
  "optimization.AdamW",
  "optimization.get_scheduler",
  "optimization_tf.create_optimizer",
  "optimizer_cls",
  "os.DirEntry",
  "os.chmod",
  "os.environ.copy",
  "os.environ.get",
  "os.fstat",
  "os.getcwd",
  "os.getpid",
  "os.kill",
  "os.listdir",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.extsep.join",
  "os.path.getmtime",
  "os.path.getsize",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.path.split",
  "os.path.splitext",
  "os.remove",
  "os.rename",
  "os.replace",
  "os.rmdir",
  "os.scandir",
  "os.stat",
  "os.umask",
  "pegasus.configuration_pegasus.PegasusConfig",
  "pegasus.modeling_pegasus.PegasusForCausalLM",
  "pegasus.modeling_pegasus.PegasusForConditionalGeneration",
  "pegasus.modeling_pegasus.PegasusModel",
  "pegasus.modeling_tf_pegasus.TFPegasusForConditionalGeneration",
  "pegasus.modeling_tf_pegasus.TFPegasusModel",
  "pegasus.tokenization_pegasus.PegasusTokenizer",
  "pegasus.tokenization_pegasus_fast.PegasusTokenizerFast",
  "phobert.tokenization_phobert.PhobertTokenizer",
  "pipelines.PipelineDataFormat.SUPPORTED_FORMATS",
  "pipelines.PipelineDataFormat.from_str",
  "pipelines.SUPPORTED_TASKS.keys",
  "pipelines.TASK_ALIASES.keys",
  "pipelines.pipeline",
  "processor",
  "processors.glue.glue_processors.keys",
  "processors.squad.SquadFeatures",
  "processors.utils.InputFeatures",
  "project",
  "prophetnet.configuration_prophetnet.PROPHETNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "prophetnet.configuration_prophetnet.ProphetNetConfig",
  "prophetnet.modeling_prophetnet.ProphetNetDecoder",
  "prophetnet.modeling_prophetnet.ProphetNetEncoder",
  "prophetnet.modeling_prophetnet.ProphetNetForCausalLM",
  "prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration",
  "prophetnet.modeling_prophetnet.ProphetNetModel",
  "prophetnet.tokenization_prophetnet.ProphetNetTokenizer",
  "pt_model",
  "pt_model.dummy_inputs",
  "pycocotools.mask.shape",
  "pytest.mark.is_pipeline_test",
  "pytest.mark.is_pt_flax_cross_test",
  "pytest.mark.is_pt_tf_cross_test",
  "pytest.mark.is_staging_test",
  "pythainlp.tokenize.word_tokenize",
  "quant_modules.IntLayerNorm",
  "quant_modules.QuantEmbedding",
  "quant_modules.QuantLinear",
  "question_answering.QuestionAnsweringPipeline",
  "rag.configuration_rag.RagConfig",
  "rag.tokenization_rag.RagTokenizer",
  "re.M",
  "re.S",
  "re.UNICODE",
  "reformer.configuration_reformer.ReformerConfig",
  "reformer.modeling_reformer.ReformerForMaskedLM",
  "reformer.modeling_reformer.ReformerForQuestionAnswering",
  "reformer.modeling_reformer.ReformerForSequenceClassification",
  "reformer.modeling_reformer.ReformerModel",
  "reformer.modeling_reformer.ReformerModelWithLMHead",
  "reformer.tokenization_reformer.ReformerTokenizer",
  "reformer.tokenization_reformer_fast.ReformerTokenizerFast",
  "regex.I",
  "regex.UNICODE",
  "regex.VERBOSE",
  "remove_articles",
  "remove_copy_lines",
  "remove_punc",
  "replace",
  "replace_in_files",
  "repr.split",
  "reshape",
  "retribert.configuration_retribert.RETRIBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "retribert.configuration_retribert.RetriBertConfig",
  "retribert.modeling_retribert.RetriBertModel",
  "retribert.tokenization_retribert.RetriBertTokenizer",
  "retribert.tokenization_retribert_fast.RetriBertTokenizerFast",
  "retrieval_rag.RagRetriever",
  "rjieba",
  "roberta.configuration_roberta.ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "roberta.configuration_roberta.RobertaConfig",
  "roberta.modeling_flax_roberta.FlaxRobertaForMaskedLM",
  "roberta.modeling_flax_roberta.FlaxRobertaForMultipleChoice",
  "roberta.modeling_flax_roberta.FlaxRobertaForQuestionAnswering",
  "roberta.modeling_flax_roberta.FlaxRobertaForSequenceClassification",
  "roberta.modeling_flax_roberta.FlaxRobertaForTokenClassification",
  "roberta.modeling_flax_roberta.FlaxRobertaModel",
  "roberta.modeling_roberta.RobertaForCausalLM",
  "roberta.modeling_roberta.RobertaForMaskedLM",
  "roberta.modeling_roberta.RobertaForMultipleChoice",
  "roberta.modeling_roberta.RobertaForQuestionAnswering",
  "roberta.modeling_roberta.RobertaForSequenceClassification",
  "roberta.modeling_roberta.RobertaForTokenClassification",
  "roberta.modeling_roberta.RobertaModel",
  "roberta.modeling_tf_roberta.TFRobertaForMaskedLM",
  "roberta.modeling_tf_roberta.TFRobertaForMultipleChoice",
  "roberta.modeling_tf_roberta.TFRobertaForQuestionAnswering",
  "roberta.modeling_tf_roberta.TFRobertaForSequenceClassification",
  "roberta.modeling_tf_roberta.TFRobertaForTokenClassification",
  "roberta.modeling_tf_roberta.TFRobertaModel",
  "roberta.tokenization_roberta.RobertaTokenizer",
  "roberta.tokenization_roberta_fast.RobertaTokenizerFast",
  "roformer.configuration_roformer.ROFORMER_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "roformer.configuration_roformer.RoFormerConfig",
  "roformer.modeling_roformer.RoFormerForCausalLM",
  "roformer.modeling_roformer.RoFormerForMaskedLM",
  "roformer.modeling_roformer.RoFormerForMultipleChoice",
  "roformer.modeling_roformer.RoFormerForQuestionAnswering",
  "roformer.modeling_roformer.RoFormerForSequenceClassification",
  "roformer.modeling_roformer.RoFormerForTokenClassification",
  "roformer.modeling_roformer.RoFormerModel",
  "roformer.modeling_tf_roformer.TFRoFormerForCausalLM",
  "roformer.modeling_tf_roformer.TFRoFormerForMaskedLM",
  "roformer.modeling_tf_roformer.TFRoFormerForMultipleChoice",
  "roformer.modeling_tf_roformer.TFRoFormerForQuestionAnswering",
  "roformer.modeling_tf_roformer.TFRoFormerForSequenceClassification",
  "roformer.modeling_tf_roformer.TFRoFormerForTokenClassification",
  "roformer.modeling_tf_roformer.TFRoFormerModel",
  "roformer.tokenization_roformer.RoFormerTokenizer",
  "run.RunCommand.register_subcommand",
  "run_hp_search",
  "sacremoses.MosesDetokenizer",
  "sacremoses.MosesPunctNormalizer",
  "sacremoses.MosesTokenizer",
  "sample_search_body_fn",
  "save_json",
  "schedule_func",
  "serving.ServeCommand.register_subcommand",
  "set_tensor_by_indices_to_value",
  "shape",
  "shape_list",
  "signal.CTRL_C_EVENT",
  "signal.SIGKILL",
  "six_ensure_text",
  "skip_units",
  "smdistributed.dataparallel.torch.distributed",
  "smdistributed.dataparallel.torch.distributed.get_local_rank",
  "smdistributed.dataparallel.torch.distributed.get_rank",
  "smdistributed.dataparallel.torch.distributed.get_world_size",
  "smdistributed.dataparallel.torch.distributed.init_process_group",
  "smdistributed.dataparallel.torch.parallel.distributed.DistributedDataParallel",
  "smdistributed.modelparallel.torch",
  "smdistributed.modelparallel.torch.CommGroup.DP_GROUP",
  "smdistributed.modelparallel.torch.DistributedModel",
  "smdistributed.modelparallel.torch.DistributedOptimizer",
  "smdistributed.modelparallel.torch.allgather",
  "smdistributed.modelparallel.torch.dp_rank",
  "smdistributed.modelparallel.torch.dp_size",
  "smdistributed.modelparallel.torch.init",
  "smdistributed.modelparallel.torch.local_rank",
  "smdistributed.modelparallel.torch.model.DistributedModel",
  "smdistributed.modelparallel.torch.rank",
  "smdistributed.modelparallel.torch.step",
  "socket.gethostname",
  "speech_to_text.Speech2TextTokenizer",
  "speech_to_text.configuration_speech_to_text.SPEECH_TO_TEXT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "speech_to_text.configuration_speech_to_text.Speech2TextConfig",
  "speech_to_text.modeling_speech_to_text.Speech2TextForConditionalGeneration",
  "speech_to_text.modeling_speech_to_text.Speech2TextModel",
  "split_on_token",
  "split_on_tokens",
  "squeezebert.configuration_squeezebert.SQUEEZEBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "squeezebert.configuration_squeezebert.SqueezeBertConfig",
  "squeezebert.modeling_squeezebert.SqueezeBertForMaskedLM",
  "squeezebert.modeling_squeezebert.SqueezeBertForMultipleChoice",
  "squeezebert.modeling_squeezebert.SqueezeBertForQuestionAnswering",
  "squeezebert.modeling_squeezebert.SqueezeBertForSequenceClassification",
  "squeezebert.modeling_squeezebert.SqueezeBertForTokenClassification",
  "squeezebert.modeling_squeezebert.SqueezeBertModel",
  "squeezebert.tokenization_squeezebert.SqueezeBertTokenizer",
  "squeezebert.tokenization_squeezebert_fast.SqueezeBertTokenizerFast",
  "str.strip",
  "summary_failures_short",
  "symmetric_linear_quantization_params",
  "sys",
  "sys.argv",
  "sys.exit",
  "sys.maxsize",
  "sys.modules",
  "sys.modules.get_ipython",
  "sys.modules.word_tokenize",
  "sys.path.insert",
  "sys.path.remove",
  "sys.platform",
  "sys.settrace",
  "sys.stderr",
  "sys.stderr.flush",
  "sys.stdin",
  "sys.stdin.readline",
  "sys.stdout",
  "sys.stdout.flush",
  "sys.stdout.write",
  "sys.version.split",
  "sys.version_info",
  "t5.configuration_t5.T5Config",
  "t5.configuration_t5.T5_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "t5.modeling_flax_t5.FlaxT5ForConditionalGeneration",
  "t5.modeling_flax_t5.FlaxT5Model",
  "t5.modeling_t5.T5EncoderModel",
  "t5.modeling_t5.T5ForConditionalGeneration",
  "t5.modeling_t5.T5Model",
  "t5.modeling_tf_t5.TFT5EncoderModel",
  "t5.modeling_tf_t5.TFT5ForConditionalGeneration",
  "t5.modeling_tf_t5.TFT5Model",
  "t5.tokenization_t5.T5Tokenizer",
  "t5.tokenization_t5_fast.T5TokenizerFast",
  "table_question_answering.TableQuestionAnsweringPipeline",
  "tapas.configuration_tapas.TAPAS_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "tapas.configuration_tapas.TapasConfig",
  "tapas.modeling_tapas.TapasForMaskedLM",
  "tapas.modeling_tapas.TapasForQuestionAnswering",
  "tapas.modeling_tapas.TapasForSequenceClassification",
  "tapas.modeling_tapas.TapasModel",
  "tapas.tokenization_tapas.TapasTokenizer",
  "task_class",
  "temp_file_manager",
  "tensorflow.VariableAggregation.ONLY_FIRST_REPLICA",
  "tensorflow.VariableSynchronization.ON_READ",
  "tensorflow.compat.v1",
  "tensorflow.compat.v1.Session",
  "tensorflow.compat.v1.disable_eager_execution",
  "tensorflow.compat.v1.global_variables_initializer",
  "tensorflow.compat.v1.variable_scope",
  "tensorflow.config.experimental.set_memory_growth",
  "tensorflow.config.experimental_connect_to_cluster",
  "tensorflow.config.list_physical_devices",
  "tensorflow.config.optimizer.set_jit",
  "tensorflow.config.set_visible_devices",
  "tensorflow.data.Dataset",
  "tensorflow.data.Dataset.from_generator",
  "tensorflow.data.experimental.AUTOTUNE",
  "tensorflow.debugging.assert_equal",
  "tensorflow.debugging.assert_greater_equal",
  "tensorflow.distribute.MirroredStrategy",
  "tensorflow.distribute.OneDeviceStrategy",
  "tensorflow.distribute.TPUStrategy",
  "tensorflow.distribute.cluster_resolver.TPUClusterResolver",
  "tensorflow.dtypes.as_dtype",
  "tensorflow.dtypes.cast",
  "tensorflow.dtypes.float32",
  "tensorflow.dtypes.int32",
  "tensorflow.function",
  "tensorflow.initializers.TruncatedNormal",
  "tensorflow.is_tensor",
  "tensorflow.keras.Model",
  "tensorflow.keras.activations.gelu",
  "tensorflow.keras.activations.relu",
  "tensorflow.keras.activations.swish",
  "tensorflow.keras.activations.tanh",
  "tensorflow.keras.backend.int_shape",
  "tensorflow.keras.backend.set_value",
  "tensorflow.keras.constraints.serialize",
  "tensorflow.keras.initializers.TruncatedNormal",
  "tensorflow.keras.initializers.serialize",
  "tensorflow.keras.layers.Conv1D",
  "tensorflow.keras.layers.Dense",
  "tensorflow.keras.layers.InputSpec",
  "tensorflow.keras.layers.Layer",
  "tensorflow.keras.layers.LayerNormalization",
  "tensorflow.keras.losses.MeanSquaredError",
  "tensorflow.keras.losses.Reduction.NONE",
  "tensorflow.keras.losses.Reduction.SUM",
  "tensorflow.keras.losses.SparseCategoricalCrossentropy",
  "tensorflow.keras.metrics.Sum",
  "tensorflow.keras.mixed_precision.experimental.Policy",
  "tensorflow.keras.mixed_precision.experimental.set_policy",
  "tensorflow.keras.optimizers.Adam",
  "tensorflow.keras.optimizers.schedules.LearningRateSchedule",
  "tensorflow.keras.optimizers.schedules.PolynomialDecay",
  "tensorflow.keras.regularizers.serialize",
  "tensorflow.keras.utils",
  "tensorflow.keras.utils.register_keras_serializable",
  "tensorflow.linalg.band_part",
  "tensorflow.math.abs",
  "tensorflow.math.argmax",
  "tensorflow.math.count_nonzero",
  "tensorflow.math.cumsum",
  "tensorflow.math.divide",
  "tensorflow.math.erf",
  "tensorflow.math.greater",
  "tensorflow.math.less",
  "tensorflow.math.log",
  "tensorflow.math.logical_not",
  "tensorflow.math.maximum",
  "tensorflow.math.minimum",
  "tensorflow.math.multiply",
  "tensorflow.math.not_equal",
  "tensorflow.math.pow",
  "tensorflow.math.reduce_any",
  "tensorflow.math.reduce_logsumexp",
  "tensorflow.math.reduce_max",
  "tensorflow.math.reduce_mean",
  "tensorflow.math.reduce_min",
  "tensorflow.math.rsqrt",
  "tensorflow.math.softplus",
  "tensorflow.math.sqrt",
  "tensorflow.math.square",
  "tensorflow.math.top_k",
  "tensorflow.nn.avg_pool1d",
  "tensorflow.nn.batch_normalization",
  "tensorflow.nn.bias_add",
  "tensorflow.nn.ctc_loss",
  "tensorflow.nn.l2_normalize",
  "tensorflow.nn.log_softmax",
  "tensorflow.nn.max_pool1d",
  "tensorflow.nn.moments",
  "tensorflow.nn.softmax",
  "tensorflow.nn.sparse_softmax_cross_entropy_with_logits",
  "tensorflow.nn.top_k",
  "tensorflow.python.keras.saving.hdf5_format",
  "tensorflow.python.keras.saving.hdf5_format.load_attributes_from_hdf5_group",
  "tensorflow.random.categorical",
  "tensorflow.random.set_seed",
  "tensorflow.random.uniform",
  "tensorflow.repeat",
  "tensorflow.saved_model.load",
  "tensorflow.signal.frame",
  "tensorflow.summary.experimental.set_step",
  "tensorflow.summary.scalar",
  "tensorflow.summary.text",
  "tensorflow.summary.trace_export",
  "tensorflow.summary.trace_on",
  "tensorflow.tensor_scatter_nd_update",
  "tensorflow.test.is_gpu_available",
  "tensorflow.tpu.experimental.initialize_tpu_system",
  "tensorflow.train.Checkpoint",
  "tensorflow.train.CheckpointManager",
  "tensorflow.train.Saver",
  "tensorflow.train.list_variables",
  "tensorflow.train.load_variable",
  "tensorflow.version.VERSION",
  "tensorflow_text",
  "testing_utils.require_torch",
  "text2text_generation.SummarizationPipeline",
  "text2text_generation.Text2TextGenerationPipeline",
  "text2text_generation.TranslationPipeline",
  "text_classification.TextClassificationPipeline",
  "text_generation.TextGenerationPipeline",
  "tf_index_select",
  "tf_model",
  "tf_model.dummy_inputs",
  "tf_model.save_weights",
  "tf_model.weights",
  "tf_model_class",
  "tf_top_k_top_p_filtering",
  "tie_encoder_to_decoder_recursively",
  "time",
  "time.strftime",
  "time.time",
  "timm_model",
  "to_tf_var_name",
  "to_tuple",
  "token_classification.TokenClassificationPipeline",
  "tokenization_albert.AlbertTokenizer",
  "tokenization_bart.BartTokenizer",
  "tokenization_barthez.BarthezTokenizer",
  "tokenization_bert.BertTokenizer",
  "tokenization_big_bird.BigBirdTokenizer",
  "tokenization_blenderbot_small.BlenderbotSmallTokenizer",
  "tokenization_camembert.CamembertTokenizer",
  "tokenization_clip.CLIPTokenizer",
  "tokenization_clip.CLIPTokenizer.from_pretrained",
  "tokenization_convbert.ConvBertTokenizer",
  "tokenization_deberta.DebertaTokenizer",
  "tokenization_distilbert.DistilBertTokenizer",
  "tokenization_dpr.DPRContextEncoderTokenizer",
  "tokenization_dpr.DPRQuestionEncoderTokenizer",
  "tokenization_dpr.DPRReaderTokenizer",
  "tokenization_electra.ElectraTokenizer",
  "tokenization_funnel.FunnelTokenizer",
  "tokenization_gpt2.GPT2Tokenizer",
  "tokenization_herbert.HerbertTokenizer",
  "tokenization_layoutlm.LayoutLMTokenizer",
  "tokenization_led.LEDTokenizer",
  "tokenization_longformer.LongformerTokenizer",
  "tokenization_lxmert.LxmertTokenizer",
  "tokenization_mbart.MBartTokenizer",
  "tokenization_mbart50.MBart50Tokenizer",
  "tokenization_mobilebert.MobileBertTokenizer",
  "tokenization_mpnet.MPNetTokenizer",
  "tokenization_openai.OpenAIGPTTokenizer",
  "tokenization_pegasus.PegasusTokenizer",
  "tokenization_rag.RagTokenizer",
  "tokenization_rag.RagTokenizer.from_pretrained",
  "tokenization_reformer.ReformerTokenizer",
  "tokenization_retribert.RetriBertTokenizer",
  "tokenization_roberta.RobertaTokenizer",
  "tokenization_roformer.RoFormerTokenizer",
  "tokenization_speech_to_text.Speech2TextTokenizer.from_pretrained",
  "tokenization_squeezebert.SqueezeBertTokenizer",
  "tokenization_t5.T5Tokenizer",
  "tokenization_utils.AddedToken",
  "tokenization_utils.BatchEncoding",
  "tokenization_utils.JiebaPreTokenizer",
  "tokenization_utils.PreTrainedTokenizer",
  "tokenization_utils.TruncationStrategy.DO_NOT_TRUNCATE",
  "tokenization_utils.TruncationStrategy.ONLY_FIRST",
  "tokenization_utils._insert_one_token_to_ordered_list",
  "tokenization_utils._is_control",
  "tokenization_utils._is_punctuation",
  "tokenization_utils._is_whitespace",
  "tokenization_utils_base.AddedToken",
  "tokenization_utils_base.BatchEncoding",
  "tokenization_utils_base.ENCODE_KWARGS_DOCSTRING",
  "tokenization_utils_base.ENCODE_PLUS_ADDITIONAL_KWARGS_DOCSTRING",
  "tokenization_utils_base.EncodedInput",
  "tokenization_utils_base.EncodedInputPair",
  "tokenization_utils_base.INIT_TOKENIZER_DOCSTRING",
  "tokenization_utils_base.PaddingStrategy",
  "tokenization_utils_base.PaddingStrategy.DO_NOT_PAD",
  "tokenization_utils_base.PaddingStrategy.DO_NOT_PAD.value",
  "tokenization_utils_base.PaddingStrategy.LONGEST",
  "tokenization_utils_base.PaddingStrategy.MAX_LENGTH",
  "tokenization_utils_base.PreTokenizedInput",
  "tokenization_utils_base.PreTokenizedInputPair",
  "tokenization_utils_base.PreTrainedTokenizerBase",
  "tokenization_utils_base.TOKENIZER_CONFIG_FILE",
  "tokenization_utils_base.TensorType",
  "tokenization_utils_base.TextInput",
  "tokenization_utils_base.TextInputPair",
  "tokenization_utils_base.TruncationStrategy",
  "tokenization_utils_base.TruncationStrategy.DO_NOT_TRUNCATE",
  "tokenization_utils_base.TruncationStrategy.ONLY_FIRST.value",
  "tokenization_utils_base.TruncationStrategy.ONLY_SECOND.value",
  "tokenization_utils_base._is_tensorflow",
  "tokenization_utils_base._is_torch",
  "tokenization_utils_base.to_py_obj",
  "tokenization_utils_fast.PreTrainedTokenizerFast",
  "tokenization_wav2vec2.Wav2Vec2CTCTokenizer.from_pretrained",
  "tokenization_xlm_roberta.XLMRobertaTokenizer",
  "tokenization_xlnet.XLNetTokenizer",
  "tokenizer",
  "tokenizers.pre_tokenizers.PreTokenizer.custom",
  "torch.ByteStorage.from_buffer",
  "torch.ByteTensor",
  "torch.FloatTensor",
  "torch.Generator",
  "torch.LongTensor",
  "torch.Size",
  "torch.Tensor.shape",
  "torch._softmax_backward_data",
  "torch.abs",
  "torch.addmm",
  "torch.all",
  "torch.allclose",
  "torch.arange",
  "torch.argmax",
  "torch.argsort",
  "torch.as_tensor",
  "torch.bernoulli",
  "torch.bfloat16",
  "torch.bincount",
  "torch.bmm",
  "torch.bool",
  "torch.cat",
  "torch.chunk",
  "torch.clamp",
  "torch.cos",
  "torch.cosine_similarity",
  "torch.cuda.default_generators",
  "torch.cuda.default_generators.seed",
  "torch.cumsum",
  "torch.device",
  "torch.diag",
  "torch.distributed.ReduceOp.SUM",
  "torch.distributed.get_local_rank",
  "torch.double",
  "torch.dtype",
  "torch.empty",
  "torch.empty_like",
  "torch.eq",
  "torch.erf",
  "torch.exp",
  "torch.eye",
  "torch.finfo",
  "torch.flatten",
  "torch.float",
  "torch.float16",
  "torch.float32",
  "torch.float64",
  "torch.floor",
  "torch.fmod",
  "torch.from_numpy",
  "torch.full",
  "torch.full_like",
  "torch.gather",
  "torch.ge",
  "torch.ger",
  "torch.gt",
  "torch.index_select",
  "torch.int",
  "torch.int32",
  "torch.int64",
  "torch.isinf",
  "torch.isnan",
  "torch.kthvalue",
  "torch.log",
  "torch.log2",
  "torch.log_softmax",
  "torch.logical_and",
  "torch.logical_not",
  "torch.logsumexp",
  "torch.long",
  "torch.lt",
  "torch.masked_fill",
  "torch.matmul",
  "torch.max",
  "torch.mean",
  "torch.min",
  "torch.minimum",
  "torch.mm",
  "torch.multinomial",
  "torch.multiply",
  "torch.ne",
  "torch.nn.LayerNorm.forward",
  "torch.nn.functional.mish",
  "torch.nonzero",
  "torch.ones",
  "torch.ones_like",
  "torch.pow",
  "torch.prod",
  "torch.rand",
  "torch.randint",
  "torch.randn",
  "torch.randperm",
  "torch.repeat_interleave",
  "torch.reshape",
  "torch.round",
  "torch.rsqrt",
  "torch.sigmoid",
  "torch.sign",
  "torch.sin",
  "torch.softmax",
  "torch.sort",
  "torch.sparse.LongTensor",
  "torch.sqrt",
  "torch.square",
  "torch.stack",
  "torch.sum",
  "torch.tanh",
  "torch.topk",
  "torch.transpose",
  "torch.tril",
  "torch.triu",
  "torch.uint8",
  "torch.unsqueeze",
  "torch.where",
  "torch.zeros",
  "torch.zeros_like",
  "torch_gather",
  "torch_xla.core.xla_model",
  "torch_xla.core.xla_model.get_local_ordinal",
  "torch_xla.core.xla_model.get_ordinal",
  "torch_xla.core.xla_model.get_rng_state",
  "torch_xla.core.xla_model.is_master_ordinal",
  "torch_xla.core.xla_model.master_print",
  "torch_xla.core.xla_model.mesh_reduce",
  "torch_xla.core.xla_model.optimizer_step",
  "torch_xla.core.xla_model.rendezvous",
  "torch_xla.core.xla_model.save",
  "torch_xla.core.xla_model.send_cpu_data_to_device",
  "torch_xla.core.xla_model.set_rng_state",
  "torch_xla.core.xla_model.xla_device",
  "torch_xla.core.xla_model.xrt_world_size",
  "torch_xla.debug.metrics",
  "torch_xla.debug.metrics.metrics_report",
  "torch_xla.distributed.parallel_loader",
  "torch_xla.distributed.parallel_loader.ParallelLoader",
  "torchaudio.compliance.kaldi",
  "torchaudio.compliance.kaldi.fbank",
  "train_model",
  "trainer.Trainer",
  "trainer_callback.DefaultFlowCallback",
  "trainer_callback.ProgressCallback",
  "trainer_callback.TrainerCallback",
  "trainer_callback.TrainerState",
  "trainer_callback.TrainerState.load_from_json",
  "trainer_pt_utils.DistributedLengthGroupedSampler",
  "trainer_pt_utils.DistributedSamplerWithLoop",
  "trainer_pt_utils.DistributedTensorGatherer",
  "trainer_pt_utils.IterableDatasetShard",
  "trainer_pt_utils.LengthGroupedSampler",
  "trainer_pt_utils.SequentialDistributedSampler",
  "trainer_pt_utils.ShardSampler",
  "trainer_pt_utils.distributed_broadcast_scalars",
  "trainer_pt_utils.distributed_concat",
  "trainer_pt_utils.find_batch_size",
  "trainer_pt_utils.get_parameter_names",
  "trainer_pt_utils.nested_concat",
  "trainer_pt_utils.nested_detach",
  "trainer_pt_utils.nested_numpify",
  "trainer_pt_utils.nested_truncate",
  "trainer_pt_utils.nested_xla_mesh_reduce",
  "trainer_pt_utils.reissue_pt_warnings",
  "trainer_pt_utils.smp_forward_backward",
  "trainer_pt_utils.smp_forward_only",
  "trainer_pt_utils.smp_gather",
  "trainer_pt_utils.smp_nested_concat",
  "trainer_utils.BestRun",
  "trainer_utils.EvalLoopOutput",
  "trainer_utils.EvalPrediction",
  "trainer_utils.EvaluationStrategy",
  "trainer_utils.HPSearchBackend",
  "trainer_utils.HPSearchBackend.OPTUNA",
  "trainer_utils.HPSearchBackend.RAY",
  "trainer_utils.IntervalStrategy",
  "trainer_utils.IntervalStrategy.EPOCH",
  "trainer_utils.IntervalStrategy.NO",
  "trainer_utils.IntervalStrategy.STEPS",
  "trainer_utils.PREFIX_CHECKPOINT_DIR",
  "trainer_utils.PredictionOutput",
  "trainer_utils.SchedulerType",
  "trainer_utils.SchedulerType.CONSTANT",
  "trainer_utils.SchedulerType.CONSTANT_WITH_WARMUP",
  "trainer_utils.SchedulerType.COSINE",
  "trainer_utils.SchedulerType.COSINE_WITH_RESTARTS",
  "trainer_utils.SchedulerType.LINEAR",
  "trainer_utils.SchedulerType.POLYNOMIAL",
  "trainer_utils.ShardedDDPOption",
  "trainer_utils.ShardedDDPOption.AUTO_WRAP",
  "trainer_utils.ShardedDDPOption.OFFLOAD",
  "trainer_utils.ShardedDDPOption.SIMPLE",
  "trainer_utils.ShardedDDPOption.ZERO_DP_2",
  "trainer_utils.ShardedDDPOption.ZERO_DP_3",
  "trainer_utils.TrainOutput",
  "trainer_utils.TrainerMemoryTracker",
  "trainer_utils.default_compute_objective",
  "trainer_utils.default_hp_space",
  "trainer_utils.denumpify_detensorize",
  "trainer_utils.get_last_checkpoint",
  "trainer_utils.set_seed",
  "trainer_utils.speed_metrics",
  "training_args.ParallelMode.DISTRIBUTED",
  "training_args.ParallelMode.NOT_DISTRIBUTED",
  "training_args.ParallelMode.NOT_PARALLEL",
  "training_args.ParallelMode.SAGEMAKER_MODEL_PARALLEL",
  "training_args.ParallelMode.TPU",
  "training_args.TrainingArguments",
  "training_args.TrainingArguments.__doc__",
  "transfo_xl.configuration_transfo_xl.TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transfo_xl.configuration_transfo_xl.TransfoXLConfig",
  "transfo_xl.modeling_tf_transfo_xl.TFTransfoXLForSequenceClassification",
  "transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel",
  "transfo_xl.modeling_tf_transfo_xl.TFTransfoXLModel",
  "transfo_xl.modeling_transfo_xl.TransfoXLForSequenceClassification",
  "transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel",
  "transfo_xl.modeling_transfo_xl.TransfoXLModel",
  "transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer",
  "transformers.AlbertConfig.from_json_file",
  "transformers.BartConfig.from_json_file",
  "transformers.BartConfig.from_pretrained",
  "transformers.BartTokenizer.from_pretrained",
  "transformers.BertConfig.from_json_file",
  "transformers.BertConfig.get_config_dict",
  "transformers.BertModel.from_pretrained",
  "transformers.BigBirdConfig.from_json_file",
  "transformers.CLIPConfig.from_pretrained",
  "transformers.ConvBertConfig.from_json_file",
  "transformers.ElectraConfig.from_json_file",
  "transformers.FSMTConfig.from_pretrained",
  "transformers.FunnelConfig.from_json_file",
  "transformers.GPT2Config.from_json_file",
  "transformers.HubertConfig.from_pretrained",
  "transformers.LongformerForQuestionAnswering.from_pretrained",
  "transformers.LongformerModel.from_pretrained",
  "transformers.LukeTokenizer.from_pretrained",
  "transformers.LukeTokenizer.vocab_files_names",
  "transformers.LxmertConfig.from_json_file",
  "transformers.MBartConfig.from_pretrained",
  "transformers.MarianTokenizer.from_pretrained",
  "transformers.MobileBertConfig.from_json_file",
  "transformers.OpenAIGPTConfig.from_json_file",
  "transformers.PegasusTokenizer.from_pretrained",
  "transformers.ReformerConfig.from_json_file",
  "transformers.RoFormerConfig.from_json_file",
  "transformers.RobertaTokenizer.from_pretrained",
  "transformers.T5Config.from_json_file",
  "transformers.TFConvBertModel.from_pretrained",
  "transformers.TapasConfig.from_json_file",
  "transformers.TransfoXLConfig.from_json_file",
  "transformers.Wav2Vec2Config.from_pretrained",
  "transformers.XLNetConfig.from_json_file",
  "transformers.__init__._LazyModule",
  "transformers.__init__.__version__",
  "transformers.__init__._import_structure",
  "transformers.__init__.logger",
  "transformers.data.metrics.__init__.DEPRECATION_WARNING",
  "transformers.data.metrics.__init__.acc_and_f1",
  "transformers.data.metrics.__init__.pearson_and_spearman",
  "transformers.data.metrics.__init__.simple_accuracy",
  "transformers.load_tf_weights_in_lxmert",
  "transformers.load_tf_weights_in_tapas",
  "transformers.logging.get_logger",
  "transformers.logging.get_verbosity",
  "transformers.logging.set_verbosity",
  "transformers.logging.set_verbosity_info",
  "transformers.models.albert.__init__._LazyModule",
  "transformers.models.albert.__init__._import_structure",
  "transformers.models.auto.__init__._LazyModule",
  "transformers.models.auto.__init__._import_structure",
  "transformers.models.bart.__init__._LazyModule",
  "transformers.models.bart.__init__._import_structure",
  "transformers.models.barthez.__init__._LazyModule",
  "transformers.models.barthez.__init__._import_structure",
  "transformers.models.bert.__init__._LazyModule",
  "transformers.models.bert.__init__._import_structure",
  "transformers.models.bert_generation.__init__._LazyModule",
  "transformers.models.bert_generation.__init__._import_structure",
  "transformers.models.bert_japanese.__init__._LazyModule",
  "transformers.models.bert_japanese.__init__._import_structure",
  "transformers.models.bertweet.__init__._LazyModule",
  "transformers.models.bertweet.__init__._import_structure",
  "transformers.models.big_bird.__init__._LazyModule",
  "transformers.models.big_bird.__init__._import_structure",
  "transformers.models.bigbird_pegasus.__init__._LazyModule",
  "transformers.models.bigbird_pegasus.__init__._import_structure",
  "transformers.models.blenderbot.__init__._LazyModule",
  "transformers.models.blenderbot.__init__._import_structure",
  "transformers.models.blenderbot_small.__init__._LazyModule",
  "transformers.models.blenderbot_small.__init__._import_structure",
  "transformers.models.byt5.__init__._LazyModule",
  "transformers.models.byt5.__init__._import_structure",
  "transformers.models.camembert.__init__._LazyModule",
  "transformers.models.camembert.__init__._import_structure",
  "transformers.models.clip.__init__._LazyModule",
  "transformers.models.clip.__init__._import_structure",
  "transformers.models.convbert.__init__._LazyModule",
  "transformers.models.convbert.__init__._import_structure",
  "transformers.models.cpm.__init__._LazyModule",
  "transformers.models.cpm.__init__._import_structure",
  "transformers.models.ctrl.__init__._LazyModule",
  "transformers.models.ctrl.__init__._import_structure",
  "transformers.models.deberta.__init__._LazyModule",
  "transformers.models.deberta.__init__._import_structure",
  "transformers.models.deberta_v2.__init__._LazyModule",
  "transformers.models.deberta_v2.__init__._import_structure",
  "transformers.models.deit.__init__._LazyModule",
  "transformers.models.deit.__init__._import_structure",
  "transformers.models.detr.__init__._LazyModule",
  "transformers.models.detr.__init__._import_structure",
  "transformers.models.distilbert.__init__._LazyModule",
  "transformers.models.distilbert.__init__._import_structure",
  "transformers.models.dpr.__init__._LazyModule",
  "transformers.models.dpr.__init__._import_structure",
  "transformers.models.electra.__init__._LazyModule",
  "transformers.models.electra.__init__._import_structure",
  "transformers.models.encoder_decoder.__init__._LazyModule",
  "transformers.models.encoder_decoder.__init__._import_structure",
  "transformers.models.flaubert.__init__._LazyModule",
  "transformers.models.flaubert.__init__._import_structure",
  "transformers.models.fsmt.__init__._LazyModule",
  "transformers.models.fsmt.__init__._import_structure",
  "transformers.models.funnel.__init__._LazyModule",
  "transformers.models.funnel.__init__._import_structure",
  "transformers.models.gpt2.__init__._LazyModule",
  "transformers.models.gpt2.__init__._import_structure",
  "transformers.models.gpt_neo.__init__._LazyModule",
  "transformers.models.gpt_neo.__init__._import_structure",
  "transformers.models.herbert.__init__._LazyModule",
  "transformers.models.herbert.__init__._import_structure",
  "transformers.models.hubert.__init__._LazyModule",
  "transformers.models.hubert.__init__._import_structure",
  "transformers.models.ibert.__init__._LazyModule",
  "transformers.models.ibert.__init__._import_structure",
  "transformers.models.layoutlm.__init__._LazyModule",
  "transformers.models.layoutlm.__init__._import_structure",
  "transformers.models.led.__init__._LazyModule",
  "transformers.models.led.__init__._import_structure",
  "transformers.models.longformer.__init__._LazyModule",
  "transformers.models.longformer.__init__._import_structure",
  "transformers.models.luke.__init__._LazyModule",
  "transformers.models.luke.__init__._import_structure",
  "transformers.models.lxmert.__init__._LazyModule",
  "transformers.models.lxmert.__init__._import_structure",
  "transformers.models.m2m_100.__init__._LazyModule",
  "transformers.models.m2m_100.__init__._import_structure",
  "transformers.models.marian.__init__._LazyModule",
  "transformers.models.marian.__init__._import_structure",
  "transformers.models.marian.convert_marian_to_pytorch.FRONT_MATTER_TEMPLATE.format",
  "transformers.models.mbart.__init__._LazyModule",
  "transformers.models.mbart.__init__._import_structure",
  "transformers.models.megatron_bert.__init__._LazyModule",
  "transformers.models.megatron_bert.__init__._import_structure",
  "transformers.models.mmbt.__init__._LazyModule",
  "transformers.models.mmbt.__init__._import_structure",
  "transformers.models.mobilebert.__init__._LazyModule",
  "transformers.models.mobilebert.__init__._import_structure",
  "transformers.models.mpnet.__init__._LazyModule",
  "transformers.models.mpnet.__init__._import_structure",
  "transformers.models.mt5.__init__.MT5Tokenizer",
  "transformers.models.mt5.__init__.MT5TokenizerFast",
  "transformers.models.mt5.__init__._LazyModule",
  "transformers.models.mt5.__init__._import_structure",
  "transformers.models.openai.__init__._LazyModule",
  "transformers.models.openai.__init__._import_structure",
  "transformers.models.pegasus.__init__._LazyModule",
  "transformers.models.pegasus.__init__._import_structure",
  "transformers.models.pegasus.configuration_pegasus.DEFAULTS.copy",
  "transformers.models.phobert.__init__._LazyModule",
  "transformers.models.phobert.__init__._import_structure",
  "transformers.models.prophetnet.__init__._LazyModule",
  "transformers.models.prophetnet.__init__._import_structure",
  "transformers.models.rag.__init__._LazyModule",
  "transformers.models.rag.__init__._import_structure",
  "transformers.models.reformer.__init__._LazyModule",
  "transformers.models.reformer.__init__._import_structure",
  "transformers.models.retribert.__init__._LazyModule",
  "transformers.models.retribert.__init__._import_structure",
  "transformers.models.roberta.__init__._LazyModule",
  "transformers.models.roberta.__init__._import_structure",
  "transformers.models.roformer.__init__._LazyModule",
  "transformers.models.roformer.__init__._import_structure",
  "transformers.models.speech_to_text.__init__._LazyModule",
  "transformers.models.speech_to_text.__init__._import_structure",
  "transformers.models.squeezebert.__init__._LazyModule",
  "transformers.models.squeezebert.__init__._import_structure",
  "transformers.models.t5.__init__._LazyModule",
  "transformers.models.t5.__init__._import_structure",
  "transformers.models.tapas.__init__._LazyModule",
  "transformers.models.tapas.__init__._import_structure",
  "transformers.models.transfo_xl.__init__._LazyModule",
  "transformers.models.transfo_xl.__init__._import_structure",
  "transformers.models.transfo_xl.tokenization_transfo_xl.Corpus",
  "transformers.models.transfo_xl.tokenization_transfo_xl.Vocab",
  "transformers.models.visual_bert.__init__._LazyModule",
  "transformers.models.visual_bert.__init__._import_structure",
  "transformers.models.vit.__init__._LazyModule",
  "transformers.models.vit.__init__._import_structure",
  "transformers.models.wav2vec2.__init__._LazyModule",
  "transformers.models.wav2vec2.__init__._import_structure",
  "transformers.models.xlm.__init__._LazyModule",
  "transformers.models.xlm.__init__._import_structure",
  "transformers.models.xlm_roberta.__init__._LazyModule",
  "transformers.models.xlm_roberta.__init__._import_structure",
  "transformers.models.xlnet.__init__._LazyModule",
  "transformers.models.xlnet.__init__._import_structure",
  "transformers.pipelines.__init__.SUPPORTED_TASKS",
  "transformers.pipelines.__init__.TASK_ALIASES",
  "transformers.pipelines.__init__.check_task",
  "transformers.utils.coco_classes.id2label.items",
  "transformers.utils.imagenet_classes.id2label.items",
  "transformers.utils.versions.importlib_metadata.PackageNotFoundError",
  "transformers.utils.versions.importlib_metadata.metadata",
  "transformers.utils.versions.importlib_metadata.version",
  "transformers_old.modeling_prophetnet.ProphetNetForConditionalGeneration",
  "transformers_old.modeling_prophetnet.ProphetNetForConditionalGeneration.from_pretrained",
  "transformers_old.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration",
  "transformers_old.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration.from_pretrained",
  "truncate_seq_pair",
  "unflatten_beam_dim",
  "unittest.mock.patch.dict",
  "unshape",
  "user.UserCommands.register_subcommand",
  "utils.DataProcessor",
  "utils.InputExample",
  "utils.InputFeatures",
  "utils.dummy_flax_objects",
  "utils.dummy_pt_objects",
  "utils.dummy_sentencepiece_and_speech_objects",
  "utils.dummy_sentencepiece_and_tokenizers_objects",
  "utils.dummy_sentencepiece_objects",
  "utils.dummy_speech_objects",
  "utils.dummy_tf_objects",
  "utils.dummy_timm_objects",
  "utils.dummy_tokenizers_objects",
  "utils.dummy_vision_objects",
  "utils.logging.INFO",
  "utils.logging.NOTSET",
  "utils.logging.WARN",
  "utils.logging.WARNING",
  "utils.logging.add_handler",
  "utils.logging.get_log_levels_dict",
  "utils.logging.get_logger",
  "utils.logging.get_verbosity",
  "utils.logging.info",
  "utils.logging.set_verbosity_info",
  "utils.logging.warning",
  "utils.model_parallel_utils.assert_device_map",
  "utils.model_parallel_utils.get_device_map",
  "utils.modeling_auto_mapping.MODEL_FOR_CAUSAL_LM_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_MASKED_LM_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_TABLE_QUESTION_ANSWERING_MAPPING_NAMES",
  "utils.modeling_auto_mapping.MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES",
  "utils.notebook.NotebookProgressCallback",
  "utils.versions.require_version",
  "utils.versions.require_version_core",
  "visn_loss_fct",
  "visual_bert.configuration_visual_bert.VISUAL_BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "visual_bert.configuration_visual_bert.VisualBertConfig",
  "visual_bert.modeling_visual_bert.VisualBertForPreTraining",
  "visual_bert.modeling_visual_bert.VisualBertModel",
  "visual_loss_fct",
  "vit.configuration_vit.VIT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "vit.configuration_vit.ViTConfig",
  "vit.modeling_flax_vit.FlaxViTForImageClassification",
  "vit.modeling_flax_vit.FlaxViTModel",
  "vit.modeling_vit.ViTForImageClassification",
  "vit.modeling_vit.ViTModel",
  "wav2vec2.configuration_wav2vec2.WAV_2_VEC_2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "wav2vec2.configuration_wav2vec2.Wav2Vec2Config",
  "wav2vec2.feature_extraction_wav2vec2.Wav2Vec2FeatureExtractor",
  "wav2vec2.modeling_tf_wav2vec2.TFWav2Vec2Model",
  "wav2vec2.modeling_wav2vec2.Wav2Vec2ForMaskedLM",
  "wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTraining",
  "wav2vec2.modeling_wav2vec2.Wav2Vec2Model",
  "wav2vec2.tokenization_wav2vec2.Wav2Vec2CTCTokenizer",
  "white_space_fix",
  "xlm.configuration_xlm.XLMConfig",
  "xlm.configuration_xlm.XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlm.modeling_tf_xlm.TFXLMForMultipleChoice",
  "xlm.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple",
  "xlm.modeling_tf_xlm.TFXLMForSequenceClassification",
  "xlm.modeling_tf_xlm.TFXLMForTokenClassification",
  "xlm.modeling_tf_xlm.TFXLMModel",
  "xlm.modeling_tf_xlm.TFXLMWithLMHeadModel",
  "xlm.modeling_xlm.XLMForMultipleChoice",
  "xlm.modeling_xlm.XLMForQuestionAnswering",
  "xlm.modeling_xlm.XLMForQuestionAnsweringSimple",
  "xlm.modeling_xlm.XLMForSequenceClassification",
  "xlm.modeling_xlm.XLMForTokenClassification",
  "xlm.modeling_xlm.XLMModel",
  "xlm.modeling_xlm.XLMWithLMHeadModel",
  "xlm.modeling_xlm.get_masks",
  "xlm.tokenization_xlm.XLMTokenizer",
  "xlm_prophetnet.configuration_xlm_prophetnet.XLMProphetNetConfig",
  "xlm_prophetnet.configuration_xlm_prophetnet.XLM_PROPHETNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetForCausalLM",
  "xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration",
  "xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetModel",
  "xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer",
  "xlm_roberta.configuration_xlm_roberta.XLMRobertaConfig",
  "xlm_roberta.configuration_xlm_roberta.XLM_ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForMaskedLM",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForMultipleChoice",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForQuestionAnswering",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForSequenceClassification",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForTokenClassification",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaModel",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForCausalLM",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForMaskedLM",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForMultipleChoice",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForQuestionAnswering",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForSequenceClassification",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForTokenClassification",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaModel",
  "xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer",
  "xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast",
  "xlnet.configuration_xlnet.XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlnet.configuration_xlnet.XLNetConfig",
  "xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoice",
  "xlnet.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple",
  "xlnet.modeling_tf_xlnet.TFXLNetForSequenceClassification",
  "xlnet.modeling_tf_xlnet.TFXLNetForTokenClassification",
  "xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel",
  "xlnet.modeling_tf_xlnet.TFXLNetModel",
  "xlnet.modeling_xlnet.XLNetForMultipleChoice",
  "xlnet.modeling_xlnet.XLNetForQuestionAnsweringSimple",
  "xlnet.modeling_xlnet.XLNetForSequenceClassification",
  "xlnet.modeling_xlnet.XLNetForTokenClassification",
  "xlnet.modeling_xlnet.XLNetLMHeadModel",
  "xlnet.modeling_xlnet.XLNetModel",
  "xlnet.tokenization_xlnet.XLNetTokenizer",
  "xlnet.tokenization_xlnet_fast.XLNetTokenizerFast",
  "zero_shot_classification.ZeroShotClassificationPipeline"
 ],
 "deps": {
  "ALBERT_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "AlbertConfig": [],
  "AlbertForPreTraining": [],
  "BART_PRETRAINED_MODEL_ARCHIVE_LIST": [],
  "BERT_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "BartConfig": [],
  "BartForConditionalGeneration": [],
  "BaseTransformersCLICommand": [],
  "BertConfig": [],
  "BertForPreTraining": [],
  "BertForQuestionAnswering": [],
  "BertForSequenceClassification": [],
  "BertGenerationConfig": [],
  "BertGenerationDecoder": [],
  "BertGenerationEncoder": [],
  "CAMEMBERT_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "CTRLConfig": [],
  "CTRLLMHeadModel": [],
  "CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "CamembertConfig": [],
  "CamembertForMaskedLM": [],
  "DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "DPRConfig": [],
  "DPRContextEncoder": [],
  "DPRQuestionEncoder": [],
  "DPRReader": [],
  "DPR_CONTEXT_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST": [],
  "DPR_QUESTION_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST": [],
  "DPR_READER_PRETRAINED_MODEL_ARCHIVE_LIST": [],
  "DeiTConfig": [],
  "DetrHungarianMatcher": [],
  "DetrLoss": [],
  "DistilBertConfig": [],
  "DistilBertForMaskedLM": [],
  "DistilBertForQuestionAnswering": [],
  "ELECTRA_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "ElectraConfig": [],
  "ElectraForPreTraining": [],
  "FLAUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "FlaubertConfig": [],
  "FlaubertWithLMHeadModel": [],
  "GPT2Config": [],
  "GPT2DoubleHeadsModel": [],
  "GPT2LMHeadModel": [],
  "GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "GPTNeoConfig": [],
  "IPython": [
   "ipython/conda-forge/linux-64/ipython-5.1.0-py27_2",
   "ipython/conda-forge/linux-64/ipython-5.2.2-py27_0",
   "ipython/conda-forge/linux-64/ipython-6.2.0-py36_0",
   "ipython/conda-forge/linux-64/ipython-6.3.1-py35_0",
   "ipython/conda-forge/linux-64/ipython-7.10.0-py36h5ca1d4c_0",
   "ipython/conda-forge/linux-64/ipython-7.11.0-py36h5ca1d4c_0",
   "ipython/conda-forge/linux-64/ipython-7.13.0-py37hc8dfbb8_2",
   "ipython/conda-forge/linux-64/ipython-7.13.0-py38h5ca1d4c_0",
   "ipython/conda-forge/linux-64/ipython-7.15.0-py36h9f0ad1d_0",
   "ipython/conda-forge/linux-64/ipython-7.23.0-py37h085eea5_0",
   "ipython/conda-forge/linux-64/ipython-7.23.0-py37h2b89940_0",
   "ipython/conda-forge/linux-64/ipython-7.9.0-py38h5ca1d4c_1"
  ],
  "IndexMap": [],
  "LAYOUTLM_PRETRAINED_MODEL_ARCHIVE_LIST": [],
  "LXMERT_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "LayoutLMConfig": [],
  "LayoutLMForMaskedLM": [],
  "LxmertConfig": [],
  "LxmertForPreTraining": [],
  "LxmertVisualFeatureEncoder": [],
  "MODEL_FOR_CAUSAL_LM_MAPPING": [],
  "MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING": [],
  "MODEL_FOR_MASKED_LM_MAPPING": [],
  "MODEL_FOR_MULTIPLE_CHOICE_MAPPING": [],
  "MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING": [],
  "MODEL_FOR_PRETRAINING_MAPPING": [],
  "MODEL_FOR_QUESTION_ANSWERING_MAPPING": [],
  "MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING": [],
  "MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING": [],
  "MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING": [],
  "MecabTokenizer": [],
  "MemoryMeasureProcess": [],
  "Mykytea": [],
  "OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "OpenAIGPTConfig": [],
  "OpenAIGPTLMHeadModel": [],
  "PIL": [
   "pillow/conda-forge/linux-64/pillow-4.1.0-py36_0",
   "pillow/conda-forge/linux-64/pillow-8.1.2-py38ha0e1e83_0"
  ],
  "PreTrainedModel": [],
  "PretrainedConfig": [],
  "ProductIndexMap": [],
  "ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "RobertaConfig": [],
  "RobertaForMaskedLM": [],
  "RobertaForSequenceClassification": [],
  "RobertaTokenizer": [],
  "Speech2TextConfig": [],
  "SquadExample": [],
  "T5Config": [],
  "T5ForConditionalGeneration": [],
  "T5_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "TFAlbertForPreTraining": [],
  "TFBartForConditionalGeneration": [],
  "TFBertForPreTraining": [],
  "TFBertForQuestionAnswering": [],
  "TFBertForSequenceClassification": [],
  "TFCTRLLMHeadModel": [],
  "TFCamembertForMaskedLM": [],
  "TFDPRContextEncoder": [],
  "TFDPRQuestionEncoder": [],
  "TFDPRReader": [],
  "TFDistilBertForMaskedLM": [],
  "TFDistilBertForQuestionAnswering": [],
  "TFElectraForPreTraining": [],
  "TFFlaubertWithLMHeadModel": [],
  "TFGPT2LMHeadModel": [],
  "TFLayoutLMForMaskedLM": [],
  "TFLxmertForPreTraining": [],
  "TFLxmertVisualFeatureEncoder": [],
  "TFOpenAIGPTLMHeadModel": [],
  "TFRobertaForMaskedLM": [],
  "TFRobertaForSequenceClassification": [],
  "TFT5ForConditionalGeneration": [],
  "TFTransfoXLLMHeadModel": [],
  "TFWav2Vec2Model": [],
  "TFXLMRobertaForMaskedLM": [],
  "TFXLMWithLMHeadModel": [],
  "TFXLNetLMHeadModel": [],
  "TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "TransfoXLConfig": [],
  "TransfoXLLMHeadModel": [],
  "ViTConfig": [],
  "WAV_2_VEC_2_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "WEIGHTS_NAME": [],
  "Wav2Vec2Config": [],
  "Wav2Vec2Model": [],
  "XLMConfig": [],
  "XLMRobertaConfig": [],
  "XLMRobertaForMaskedLM": [],
  "XLMWithLMHeadModel": [],
  "XLM_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "XLM_ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP": [],
  "XLNetConfig": [],
  "XLNetLMHeadModel": [],
  "_NbestPrediction": [],
  "_PrelimPrediction": [],
  "__name__": [],
  "__version__": [],
  "_conv_out_length": [],
  "_convert_sub_string": [],
  "_create_next_token_logits_penalties": [],
  "_get_generated_ngrams": [],
  "_is_punctuation": [],
  "_is_valid_text_input": [],
  "_jax_gather": [],
  "_mask_pads": [],
  "_norm": [],
  "_pytest": [
   "pytest/conda-forge/linux-64/pytest-3.0.5-py36_0",
   "pytest/conda-forge/linux-64/pytest-3.0.7-py35_0",
   "pytest/conda-forge/linux-64/pytest-3.1.1-py27_0",
   "pytest/conda-forge/linux-64/pytest-3.10.0-py37_1000",
   "pytest/conda-forge/linux-64/pytest-3.2.2-py36_1",
   "pytest/conda-forge/linux-64/pytest-3.7.2-py35_0",
   "pytest/conda-forge/linux-64/pytest-4.0.2-py38_1001",
   "pytest/conda-forge/linux-64/pytest-4.6.1-py27_0",
   "pytest/conda-forge/linux-64/pytest-4.6.2-py36_0",
   "pytest/conda-forge/linux-64/pytest-5.1.2-py37_0"
  ],
  "_read_stream": [],
  "_reorder_stacked": [],
  "_stream_subprocess": [],
  "_strip_spaces": [],
  "_sub_tokenize": [],
  "_to_coordinates": [],
  "_tokens_match": [],
  "abc": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "absl": [
   "absl-py/conda-forge/linux-64/absl-py-0.8.0-py27_0",
   "absl-py/conda-forge/noarch/absl-py-0.1.10-py_0",
   "absl-py/conda-forge/noarch/absl-py-0.11.0-pyhd8ed1ab_0",
   "absl-py/conda-forge/noarch/absl-py-0.13.0-pyhd8ed1ab_0",
   "absl-py/conda-forge/noarch/absl-py-0.2.2-py_0",
   "absl-py/conda-forge/noarch/absl-py-0.4.0-py_0",
   "absl-py/conda-forge/noarch/absl-py-0.5.0-py_0"
  ],
  "activations": [],
  "activations_tf": [],
  "add_new_model": [],
  "albert": [],
  "albert_layer": [],
  "apex": [
   "nvidia-apex/conda-forge/linux-64/nvidia-apex-0.1-py36h168ce2e_2",
   "nvidia-apex/conda-forge/linux-64/nvidia-apex-0.1-py36h3a04424_4",
   "nvidia-apex/conda-forge/linux-64/nvidia-apex-0.1-py37h06007e4_2",
   "nvidia-apex/conda-forge/linux-64/nvidia-apex-0.1-py37h5b20ac3_2",
   "nvidia-apex/conda-forge/linux-64/nvidia-apex-0.1-py38h0d1846a_2",
   "nvidia-apex/conda-forge/linux-64/nvidia-apex-0.1-py38h92f0514_3"
  ],
  "approx": [],
  "argparse": [
   "argparse/conda-forge/linux-64/argparse-1.4.0-py26_0",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython"
  ],
  "as_tensor": [],
  "asyncio": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0"
  ],
  "auto": [],
  "auto_factory": [],
  "azureml": [],
  "bart": [],
  "barthez": [],
  "base": [],
  "beam_search_body_fn": [],
  "benchmark_args": [],
  "benchmark_args_tf": [],
  "benchmark_args_utils": [],
  "benchmark_utils": [],
  "bert": [],
  "bert_generation": [],
  "bert_japanese": [],
  "bertweet": [],
  "big_bird": [],
  "bigbird_pegasus": [],
  "bisect": [
   "python/conda-forge/linux-64/python-2.7.14-0",
   "python/conda-forge/linux-64/python-2.7.15-h33da82c_4",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "blenderbot": [],
  "blenderbot_small": [],
  "block": [],
  "build_shape_dict": [],
  "byt5": [],
  "cached_path": [],
  "calc_banned_bad_words_ids": [],
  "calc_banned_ngram_tokens": [],
  "callback": [],
  "camembert": [],
  "cat_input_and_doc": [],
  "clip": [],
  "clone": [],
  "collections": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "comet_ml": [],
  "config_class": [],
  "configuration_albert": [],
  "configuration_auto": [],
  "configuration_bart": [],
  "configuration_bert": [],
  "configuration_bert_generation": [],
  "configuration_big_bird": [],
  "configuration_bigbird_pegasus": [],
  "configuration_blenderbot": [],
  "configuration_blenderbot_small": [],
  "configuration_camembert": [],
  "configuration_clip": [],
  "configuration_convbert": [],
  "configuration_ctrl": [],
  "configuration_deberta": [],
  "configuration_deberta_v2": [],
  "configuration_deit": [],
  "configuration_detr": [],
  "configuration_distilbert": [],
  "configuration_dpr": [],
  "configuration_electra": [],
  "configuration_encoder_decoder": [],
  "configuration_flaubert": [],
  "configuration_fsmt": [],
  "configuration_funnel": [],
  "configuration_gpt2": [],
  "configuration_gpt_neo": [],
  "configuration_hubert": [],
  "configuration_ibert": [],
  "configuration_layoutlm": [],
  "configuration_led": [],
  "configuration_longformer": [],
  "configuration_luke": [],
  "configuration_lxmert": [],
  "configuration_m2m_100": [],
  "configuration_marian": [],
  "configuration_mbart": [],
  "configuration_megatron_bert": [],
  "configuration_mobilebert": [],
  "configuration_mpnet": [],
  "configuration_mt5": [],
  "configuration_openai": [],
  "configuration_pegasus": [],
  "configuration_prophetnet": [],
  "configuration_rag": [],
  "configuration_reformer": [],
  "configuration_retribert": [],
  "configuration_roberta": [],
  "configuration_roformer": [],
  "configuration_speech_to_text": [],
  "configuration_squeezebert": [],
  "configuration_t5": [],
  "configuration_tapas": [],
  "configuration_transfo_xl": [],
  "configuration_utils": [],
  "configuration_visual_bert": [],
  "configuration_vit": [],
  "configuration_wav2vec2": [],
  "configuration_xlm": [],
  "configuration_xlm_prophetnet": [],
  "configuration_xlm_roberta": [],
  "configuration_xlnet": [],
  "contextlib": [
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "conv": [],
  "conv_layer": [],
  "convbert": [],
  "conversational": [],
  "convert": [],
  "convert_added_tokens": [],
  "convert_slow_tokenizer": [],
  "converter_class": [],
  "cookiecutter": [
   "cookiecutter/conda-forge/linux-64/cookiecutter-1.6.0-py27_1000",
   "cookiecutter/conda-forge/noarch/cookiecutter-1.7.0-py_0",
   "cookiecutter/conda-forge/noarch/cookiecutter-1.7.2-pyh9f0ad1d_0"
  ],
  "copy": [
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython"
  ],
  "cpm": [],
  "create_band_mask_from_inputs": [],
  "create_custom_forward": [],
  "create_tf_var": [],
  "criteria": [],
  "criterion": [],
  "csv": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "ctrl": [],
  "data": [],
  "dataclasses": [
   "dataclasses/conda-forge/noarch/dataclasses-0.5-py_0",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython"
  ],
  "datasets": [
   "datasets/conda-forge/noarch/datasets-1.2.0-pyhd3deb0d_0",
   "datasets/conda-forge/noarch/datasets-1.2.1-pyh44b312d_0"
  ],
  "datetime": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "deberta": [],
  "deberta_v2": [],
  "debug_utils": [],
  "decimal": [
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "decoder_layer": [],
  "decoder_module": [],
  "deepspeed": [],
  "deit": [],
  "dense": [],
  "dependency_versions_check": [],
  "dependency_versions_table": [],
  "detr": [],
  "distilbert": [],
  "distutils": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "download": [],
  "dpr": [],
  "dtype": [],
  "electra": [],
  "encode_module": [],
  "encoder": [],
  "encoder_decoder": [],
  "encoder_layer": [],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "env": [],
  "eval_loop": [],
  "extend_enc_output": [],
  "fairscale": [],
  "fairseq": [
   "fairseq/conda-forge/linux-64/fairseq-0.10.2-py36h284efc9_0"
  ],
  "faiss": [
   "faiss/conda-forge/linux-64/faiss-1.6.3-py36h13546fc_3_cuda",
   "faiss/conda-forge/linux-64/faiss-1.6.3-py37h5ca530c_1_cuda",
   "faiss/conda-forge/linux-64/faiss-1.7.0-py36cuda110h3ed3e99_5_cuda",
   "faiss/conda-forge/linux-64/faiss-1.7.0-py36cuda111he78042b_6_cuda",
   "faiss/conda-forge/linux-64/faiss-1.7.0-py36cuda112hd618730_6_cuda",
   "faiss/conda-forge/linux-64/faiss-1.7.0-py36h8921a3e_8_cpu",
   "faiss/conda-forge/linux-64/faiss-1.7.0-py37cuda101hc041386_0_cuda",
   "faiss/conda-forge/linux-64/faiss-1.7.0-py38cuda110hbc41160_6_cuda"
  ],
  "fastapi": [
   "fastapi/conda-forge/noarch/fastapi-0.43.0-py_0",
   "fastapi/conda-forge/noarch/fastapi-0.54.1-py_0",
   "fastapi/conda-forge/noarch/fastapi-0.56.0-py_0",
   "fastapi/conda-forge/noarch/fastapi-0.60.2-py_0",
   "fastapi/conda-forge/noarch/fastapi-0.61.2-pyhd8ed1ab_0",
   "fastapi/conda-forge/noarch/fastapi-0.61.2-pyhd8ed1ab_1",
   "fastapi/conda-forge/noarch/fastapi-0.62.0-pyhd8ed1ab_0",
   "fastapi/conda-forge/noarch/fastapi-0.64.0-pyhd8ed1ab_0",
   "fastapi/conda-forge/noarch/fastapi-0.65.0-pyhd8ed1ab_0"
  ],
  "feature_extraction": [],
  "feature_extraction_clip": [],
  "feature_extraction_detr": [],
  "feature_extraction_sequence_utils": [],
  "feature_extraction_speech_to_text": [],
  "feature_extraction_utils": [],
  "feature_extraction_wav2vec2": [],
  "feature_extractor": [],
  "ffn_module": [],
  "file_utils": [],
  "filelock": [
   "filelock/conda-forge/linux-64/filelock-3.0.4-py36_0",
   "filelock/conda-forge/noarch/filelock-3.0.10-py_0",
   "filelock/conda-forge/noarch/filelock-3.0.10-pyh9f0ad1d_1",
   "filelock/conda-forge/noarch/filelock-3.0.12-pyh9f0ad1d_0",
   "filelock/conda-forge/noarch/filelock-3.0.4-py_1"
  ],
  "fill_mask": [],
  "flatten_beam_dim": [],
  "flaubert": [],
  "flax": [
   "flax/conda-forge/noarch/flax-0.3.4-pyhd8ed1ab_0"
  ],
  "fn": [],
  "fnmatch": [
   "python/conda-forge/linux-64/python-2.7.14-0",
   "python/conda-forge/linux-64/python-2.7.15-h33da82c_4",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "fsmt": [],
  "func": [],
  "functools": [
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython"
  ],
  "funnel": [],
  "gather": [],
  "gather2d": [],
  "gather_beams": [],
  "gc": [],
  "generalized_box_iou": [],
  "generation_beam_search": [],
  "generation_flax_logits_process": [],
  "generation_flax_utils": [],
  "generation_logits_process": [],
  "generation_stopping_criteria": [],
  "generation_tf_utils": [],
  "generation_utils": [],
  "get_cpu_memory": [],
  "get_ids_area": [],
  "get_initializer": [],
  "get_input_ids": [],
  "get_input_ids_and_entity_token_spans": [],
  "get_ipython": [],
  "get_numeric_sort_key_fn": [],
  "get_size": [],
  "get_size_with_aspect_ratio": [],
  "getpass": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "git": [
   "gitpython/conda-forge/linux-64/gitpython-2.0.8-py27_0",
   "gitpython/conda-forge/linux-64/gitpython-2.0.8-py34_0",
   "gitpython/conda-forge/noarch/gitpython-2.1.13-py_0",
   "gitpython/conda-forge/noarch/gitpython-3.0.5-py_0",
   "gitpython/conda-forge/noarch/gitpython-3.1.10-py_0",
   "gitpython/conda-forge/noarch/gitpython-3.1.11-py_0",
   "gitpython/conda-forge/noarch/gitpython-3.1.12-pyhd8ed1ab_0",
   "gitpython/conda-forge/noarch/gitpython-3.1.17-pyhd8ed1ab_0",
   "gitpython/conda-forge/noarch/gitpython-3.1.3-py_0",
   "gitpython/conda-forge/noarch/gitpython-3.1.7-py_0",
   "gitpython/conda-forge/noarch/gitpython-3.1.8-py_0"
  ],
  "glob": [
   "python/conda-forge/linux-64/python-2.7.14-0",
   "python/conda-forge/linux-64/python-2.7.15-h33da82c_4",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "google": [],
  "gpt2": [],
  "gpt_neo": [],
  "greedy_search_body_fn": [],
  "h": [],
  "h5py": [
   "h5py/conda-forge/linux-64/h5py-2.10.0-mpi_mpich_py38haaae0f6_1",
   "h5py/conda-forge/linux-64/h5py-2.10.0-mpi_openmpi_py38h8f0990d_0",
   "h5py/conda-forge/linux-64/h5py-2.10.0-nompi_py27h513d04c_100",
   "h5py/conda-forge/linux-64/h5py-2.10.0-nompi_py37h90cd8ad_103",
   "h5py/conda-forge/linux-64/h5py-2.7.1-py36_2",
   "h5py/conda-forge/linux-64/h5py-2.8.0-py37hfb8609e_1004",
   "h5py/conda-forge/linux-64/h5py-2.9.0-mpi_openmpi_py37hc1ffa35_1002",
   "h5py/conda-forge/linux-64/h5py-2.9.0-nompi_py37h513d04c_1104"
  ],
  "hashlib": [],
  "herbert": [],
  "hf_api": [],
  "hf_model": [],
  "html": [
   "future/conda-forge/linux-64/future-0.16.0-py27_1002",
   "pies2overrides/conda-forge/linux-64/pies2overrides-2.6.7-py27_0",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "hubert": [],
  "huggingface_hub": [
   "huggingface_hub/conda-forge/noarch/huggingface_hub-0.0.10-pyhd8ed1ab_0",
   "huggingface_hub/conda-forge/noarch/huggingface_hub-0.0.5-pyhd8ed1ab_0",
   "huggingface_hub/conda-forge/noarch/huggingface_hub-0.0.7-pyhd8ed1ab_0",
   "huggingface_hub/conda-forge/noarch/huggingface_hub-0.0.8-pyhd8ed1ab_0",
   "huggingface_hub/conda-forge/noarch/huggingface_hub-0.0.9-pyhd8ed1ab_0"
  ],
  "ibert": [],
  "image_classification": [],
  "image_utils": [],
  "importlib": [
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "importlib_metadata": [
   "importlib-metadata/conda-forge/linux-64/importlib-metadata-1.1.3-py37hc8dfbb8_0",
   "importlib-metadata/conda-forge/linux-64/importlib-metadata-3.3.0-py38h578d9bd_3",
   "importlib-metadata/conda-forge/linux-64/importlib-metadata-3.4.0-py36hd000896_0",
   "importlib-metadata/conda-forge/linux-64/importlib-metadata-3.7.2-py39hf3d152e_0",
   "importlib-metadata/conda-forge/linux-64/importlib-metadata-3.7.3-py38h578d9bd_0",
   "importlib-metadata/conda-forge/noarch/importlib-metadata-1.7.0-pyhd8ed1ab_1",
   "importlib-metadata/conda-forge/noarch/importlib-metadata-3.0.0-pyhd8ed1ab_0",
   "importlib-metadata/conda-forge/noarch/importlib-metadata-3.1.0-pyhd8ed1ab_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-0.13-py36_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-0.17-py37_1",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-0.20-py27_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-0.23-py38_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-0.6-py37_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-0.8-py27_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-1.1.0-py36_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-1.4.0-py27_0",
   "importlib_metadata/conda-forge/linux-64/importlib_metadata-1.5.0-py38_0",
   "importlib_metadata/conda-forge/noarch/importlib_metadata-0.5-py_0"
  ],
  "inference_model": [],
  "initializer": [],
  "input": [],
  "inspect": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "int_to_alphabetic": [],
  "integrations": [],
  "io": [
   "python/conda-forge/linux-64/python-2.7.14-0",
   "python/conda-forge/linux-64/python-2.7.15-h33da82c_4",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "is_tensor": [],
  "is_torch_available": [],
  "itertools": [],
  "jax": [
   "jax/conda-forge/noarch/jax-0.2.10-pyhd8ed1ab_0",
   "jax/conda-forge/noarch/jax-0.2.11-pyhd8ed1ab_0",
   "jax/conda-forge/noarch/jax-0.2.13-pyhd8ed1ab_0",
   "jax/conda-forge/noarch/jax-0.2.3-py_0",
   "jax/conda-forge/noarch/jax-0.2.4-py_1"
  ],
  "jaxlib": [
   "jaxlib/conda-forge/linux-64/jaxlib-0.1.29-py37h5ca1d4c_0",
   "jaxlib/conda-forge/linux-64/jaxlib-0.1.50-py37hc8dfbb8_0",
   "jaxlib/conda-forge/linux-64/jaxlib-0.1.59-py36h5fab9bb_0",
   "jaxlib/conda-forge/linux-64/jaxlib-0.1.61-py37h89c1867_0",
   "jaxlib/conda-forge/linux-64/jaxlib-0.1.64-py37h89c1867_0",
   "jaxlib/conda-forge/linux-64/jaxlib-0.1.67-py37h89c1867_0"
  ],
  "jieba": [
   "jieba/conda-forge/noarch/jieba-0.39-py_1",
   "jieba/conda-forge/noarch/jieba-0.42.1-pyhd8ed1ab_0",
   "jieba3k/conda-forge/linux-64/jieba3k-0.35.1-py36h9f0ad1d_1003",
   "jieba3k/conda-forge/linux-64/jieba3k-0.35.1-py36hc560c46_1003",
   "jieba3k/conda-forge/linux-64/jieba3k-0.35.1-py37h89c1867_1004"
  ],
  "json": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "keras2onnx": [
   "keras2onnx/conda-forge/noarch/keras2onnx-1.6.5-pyhd8ed1ab_0",
   "keras2onnx/conda-forge/noarch/keras2onnx-1.7.0-pyhd8ed1ab_0"
  ],
  "key_fn": [],
  "label_from_example": [],
  "layer": [],
  "layer_module": [],
  "layoutlm": [],
  "led": [],
  "lfs": [],
  "linear": [],
  "linecache": [
   "python/conda-forge/linux-64/python-2.7.14-0",
   "python/conda-forge/linux-64/python-2.7.15-h33da82c_4",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "load": [],
  "load_pytorch_checkpoint_in_tf2_model": [],
  "load_pytorch_weights_in_tf2_model": [],
  "load_spm": [],
  "load_tf_weights_bert": [],
  "load_tf_weights_in_bert_generation": [],
  "load_tf_weights_trivia_qa": [],
  "log_softmax": [],
  "logging": [
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython"
  ],
  "logits_processor": [],
  "logits_warper": [],
  "longformer": [],
  "loss_fct": [],
  "loss_fct_cls": [],
  "loss_fn": [],
  "lower": [],
  "luke": [],
  "lxmert": [],
  "m2m_100": [],
  "marian": [],
  "math": [
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "mbart": [],
  "megatron_bert": [],
  "method": [],
  "mobilebert": [],
  "model": [],
  "model_class": [],
  "model_cls": [],
  "modelcard": [],
  "modeling_flax_outputs": [],
  "modeling_flax_pytorch_utils": [],
  "modeling_flax_utils": [],
  "modeling_outputs": [],
  "modeling_tf_outputs": [],
  "modeling_tf_pytorch_utils": [],
  "modeling_tf_utils": [],
  "modeling_utils": [],
  "models": [],
  "module": [],
  "mpnet": [],
  "mt5": [],
  "multiprocessing": [],
  "nlp": [
   "nlp/conda-forge/noarch/nlp-0.4.0-pyh9f0ad1d_0"
  ],
  "numbers": [
   "python/conda-forge/linux-64/python-2.7.14-0",
   "python/conda-forge/linux-64/python-2.7.15-h33da82c_4",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "numpy": [
   "numpy/conda-forge/linux-64/numpy-1.14.1-py35_blas_openblas_200",
   "numpy/conda-forge/linux-64/numpy-1.14.6-py35_blas_openblashd3ea46f_200",
   "numpy/conda-forge/linux-64/numpy-1.14.6-py36_blas_openblash1522bff_1000",
   "numpy/conda-forge/linux-64/numpy-1.19.2-py37h7ea13bd_1",
   "numpy/conda-forge/linux-64/numpy-1.19.5-py39hdbf815f_1"
  ],
  "onnx": [
   "onnx/conda-forge/linux-64/onnx-1.3.0-py37h351b657_1001",
   "onnx/conda-forge/linux-64/onnx-1.5.0-py36h5d53154_0",
   "onnx/conda-forge/linux-64/onnx-1.8.1-py37h8bb6d06_0",
   "onnx/conda-forge/linux-64/onnx-1.9.0-py37h290dd4a_1",
   "onnx/conda-forge/linux-64/onnx-1.9.0-py39h158dbce_0"
  ],
  "onnxruntime": [
   "onnxruntime/conda-forge/linux-64/onnxruntime-1.7.2-py36h5418eb9_0",
   "onnxruntime/conda-forge/linux-64/onnxruntime-1.7.2-py38hd23292e_2"
  ],
  "openai": [],
  "operator": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "optimization": [],
  "optimization_tf": [],
  "optimizer_cls": [],
  "optuna": [
   "optuna/conda-forge/noarch/optuna-2.2.0-py_0",
   "optuna/conda-forge/noarch/optuna-2.3.0-pyhd8ed1ab_0",
   "optuna/conda-forge/noarch/optuna-2.6.0-pyhd8ed1ab_0"
  ],
  "os": [
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "packaging": [
   "packaging/conda-forge/noarch/packaging-17.1-py_0",
   "packaging/conda-forge/noarch/packaging-19.0-py_0",
   "packaging/conda-forge/noarch/packaging-19.2-py_0",
   "packaging/conda-forge/noarch/packaging-20.0-py_0",
   "packaging/conda-forge/noarch/packaging-20.4-pyh9f0ad1d_0",
   "packaging/conda-forge/noarch/packaging-20.8-pyhd3deb0d_0",
   "packaging/conda-forge/noarch/packaging-20.9-pyh44b312d_0"
  ],
  "pandas": [
   "pandas/conda-forge/linux-64/pandas-1.1.3-py37hb33c840_2",
   "pandas/conda-forge/linux-64/pandas-1.2.2-py39hde0f152_0"
  ],
  "pathlib": [
   "pathlib/conda-forge/noarch/pathlib-1.0.1-py_1",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "pegasus": [],
  "phobert": [],
  "pickle": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "pipelines": [],
  "platform": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "processor": [],
  "processors": [],
  "project": [],
  "prophetnet": [],
  "psutil": [
   "psutil/conda-forge/linux-64/psutil-5.3.1-py35_0",
   "psutil/conda-forge/linux-64/psutil-5.3.1-py36_0",
   "psutil/conda-forge/linux-64/psutil-5.4.5-py35_0",
   "psutil/conda-forge/linux-64/psutil-5.5.0-py27h14c3975_0",
   "psutil/conda-forge/linux-64/psutil-5.5.1-py36h14c3975_0",
   "psutil/conda-forge/linux-64/psutil-5.6.5-py36h516909a_0"
  ],
  "pt_model": [],
  "py3nvml": [
   "py3nvml/conda-forge/linux-64/py3nvml-0.2.5-py27h8c360ce_1",
   "py3nvml/conda-forge/linux-64/py3nvml-0.2.5-py36hc560c46_2"
  ],
  "pycocotools": [
   "pycocotools/conda-forge/linux-64/pycocotools-2.0.0-py37h470a237_0",
   "pycocotools/conda-forge/linux-64/pycocotools-2.0.2-py36h8f6f2f9_1"
  ],
  "pydantic": [
   "pydantic/conda-forge/linux-64/pydantic-0.23-py36_0",
   "pydantic/conda-forge/linux-64/pydantic-0.28-py36_0",
   "pydantic/conda-forge/linux-64/pydantic-0.30.1-py36h516909a_0",
   "pydantic/conda-forge/linux-64/pydantic-1.1-py37h516909a_0",
   "pydantic/conda-forge/linux-64/pydantic-1.5-py38h1e0a361_0",
   "pydantic/conda-forge/linux-64/pydantic-1.6-py36h8c4c3a4_0"
  ],
  "pytest": [
   "pytest/conda-forge/linux-64/pytest-3.0.5-py36_0",
   "pytest/conda-forge/linux-64/pytest-3.0.7-py35_0",
   "pytest/conda-forge/linux-64/pytest-3.1.1-py27_0",
   "pytest/conda-forge/linux-64/pytest-3.10.0-py37_1000",
   "pytest/conda-forge/linux-64/pytest-3.2.2-py36_1",
   "pytest/conda-forge/linux-64/pytest-3.7.2-py35_0",
   "pytest/conda-forge/linux-64/pytest-4.0.2-py38_1001",
   "pytest/conda-forge/linux-64/pytest-4.6.1-py27_0",
   "pytest/conda-forge/linux-64/pytest-4.6.2-py36_0",
   "pytest/conda-forge/linux-64/pytest-5.1.2-py37_0"
  ],
  "pythainlp": [],
  "pytorch_lightning": [
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-0.8.5-py_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-0.9.0-py_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.0.0-py_1",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.0.2-py_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.0.7-pyhd8ed1ab_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.1.6-pyhd8ed1ab_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.2.0-pyhd8ed1ab_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.2.10-pyhd8ed1ab_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.2.3-pyhd8ed1ab_0",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.2.7-pyhd8ed1ab_1",
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.3.1-pyhd8ed1ab_0"
  ],
  "quant_modules": [],
  "question_answering": [],
  "rag": [],
  "random": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "ray": [
   "ray-core/conda-forge/linux-64/ray-core-1.1.0-py37hf931bba_0",
   "ray-core/conda-forge/linux-64/ray-core-1.2.0-py36hdf6fd44_0"
  ],
  "re": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "reformer": [],
  "regex": [
   "regex/conda-forge/linux-64/regex-2019.04.09-py37h516909a_0",
   "regex/conda-forge/linux-64/regex-2019.04.12-py37h516909a_0",
   "regex/conda-forge/linux-64/regex-2020.7.14-py36h97a6639_0",
   "regex/conda-forge/linux-64/regex-2021.4.4-py36h8f6f2f9_0"
  ],
  "remove_articles": [],
  "remove_copy_lines": [],
  "remove_punc": [],
  "replace": [],
  "replace_in_files": [],
  "repr": [],
  "requests": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.1-pyh9f0ad1d_0",
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.1.0-pyhd3deb0d_0",
   "requests/conda-forge/linux-64/requests-2.11.1-py35_0",
   "requests/conda-forge/linux-64/requests-2.19.0-py27_0",
   "requests/conda-forge/linux-64/requests-2.22.0-py27_0",
   "requests/conda-forge/linux-64/requests-2.23.0-py27_0",
   "requests/conda-forge/linux-64/requests-2.23.0-py27h8c360ce_1",
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2",
   "requests/conda-forge/noarch/requests-2.25.0-pyhd3deb0d_0",
   "requests/conda-forge/noarch/requests-2.25.1-pyhd3deb0d_0"
  ],
  "reshape": [],
  "retribert": [],
  "retrieval_rag": [],
  "retriever": [
   "retriever/conda-forge/linux-64/retriever-2.1.0-py27_0",
   "retriever/conda-forge/noarch/retriever-2.3.0-py_0",
   "retriever/conda-forge/noarch/retriever-2.3.1-py_0",
   "retriever/conda-forge/noarch/retriever-3.0.0-py_0"
  ],
  "rjieba": [],
  "roberta": [],
  "roformer": [],
  "run": [],
  "run_hp_search": [],
  "sacremoses": [
   "sacremoses/conda-forge/noarch/sacremoses-0.0.35-py_0",
   "sacremoses/conda-forge/noarch/sacremoses-0.0.38-py_0",
   "sacremoses/conda-forge/noarch/sacremoses-0.0.39-pyh9f0ad1d_0",
   "sacremoses/conda-forge/noarch/sacremoses-0.0.40-pyh9f0ad1d_0",
   "sacremoses/conda-forge/noarch/sacremoses-0.0.41-pyh9f0ad1d_0",
   "sacremoses/conda-forge/noarch/sacremoses-0.0.43-pyh9f0ad1d_0"
  ],
  "sample_search_body_fn": [],
  "save_json": [],
  "schedule_func": [],
  "scipy": [
   "scipy/conda-forge/linux-64/scipy-0.17.1-np111py27_blas_openblas_200",
   "scipy/conda-forge/linux-64/scipy-0.17.1-np111py35_blas_openblas_205",
   "scipy/conda-forge/linux-64/scipy-0.18.0-np111py27_blas_openblas_200",
   "scipy/conda-forge/linux-64/scipy-0.18.0-np111py34_blas_openblas_202",
   "scipy/conda-forge/linux-64/scipy-0.19.1-py35_blas_openblas_201",
   "scipy/conda-forge/linux-64/scipy-1.1.0-py37_blas_openblash1522bff_1202",
   "scipy/conda-forge/linux-64/scipy-1.5.3-py36he350d85_0",
   "scipy/conda-forge/linux-64/scipy-1.5.3-py38hb2138dd_0"
  ],
  "sentencepiece": [
   "sentencepiece/conda-forge/linux-64/sentencepiece-0.1.91-py36h4ea7e17_4",
   "sentencepiece/conda-forge/linux-64/sentencepiece-0.1.92-py37h99015e2_0",
   "sentencepiece/conda-forge/linux-64/sentencepiece-0.1.95-py38h1fd1430_0"
  ],
  "serving": [],
  "set_tensor_by_indices_to_value": [],
  "shape": [],
  "shape_list": [],
  "shutil": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "signal": [],
  "six": [
   "bleach/conda-forge/noarch/bleach-3.0.1-py_0",
   "bleach/conda-forge/noarch/bleach-3.0.2-py_0",
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.1-pyh9f0ad1d_0",
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.1.0-pyhd3deb0d_0",
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "six/conda-forge/linux-64/six-1.11.0-py27_1001",
   "six/conda-forge/noarch/six-1.14.0-py_1",
   "six/conda-forge/noarch/six-1.15.0-pyh9f0ad1d_0",
   "six/conda-forge/noarch/six-1.16.0-pyh6c4a22f_0"
  ],
  "six_ensure_text": [],
  "skip_units": [],
  "sklearn": [
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.18.1-np112py27_blas_openblas_200",
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.19.2-py36_blas_openblasha84fab4_201",
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.22-py36hcdab131_0",
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.22.2.post1-py38hcdab131_0",
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.23.0-py37h8a51577_0",
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.23.2-py36h4c8dc72_3",
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.23.2-py36hd0533df_1",
   "scikit-learn/conda-forge/linux-64/scikit-learn-0.23.2-py38hee58b96_0"
  ],
  "smdistributed": [],
  "socket": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "speech_to_text": [],
  "split_on_token": [],
  "split_on_tokens": [],
  "squeezebert": [],
  "starlette": [
   "starlette-base/conda-forge/noarch/starlette-base-0.13.5-py_2",
   "starlette-base/conda-forge/noarch/starlette-base-0.13.6-py_0",
   "starlette/conda-forge/noarch/starlette-0.10.2-py_0",
   "starlette/conda-forge/noarch/starlette-0.12.5-py_0",
   "starlette/conda-forge/noarch/starlette-0.12.8-py_0",
   "starlette/conda-forge/noarch/starlette-0.13.0-py_0",
   "starlette/conda-forge/noarch/starlette-0.13.1-py_0",
   "starlette/conda-forge/noarch/starlette-0.14.2-pyhd8ed1ab_0",
   "starlette/conda-forge/noarch/starlette-0.5.4-py_0",
   "starlette/conda-forge/noarch/starlette-0.6.3-py_0",
   "starlette/conda-forge/noarch/starlette-0.7.1-py_0",
   "starlette/conda-forge/noarch/starlette-0.8.0-py_0",
   "starlette/conda-forge/noarch/starlette-0.9.9-py_0"
  ],
  "str": [],
  "string": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "subprocess": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "summary_failures_short": [],
  "symmetric_linear_quantization_params": [],
  "sys": [],
  "t5": [],
  "table_question_answering": [],
  "tapas": [],
  "tarfile": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "task_class": [],
  "temp_file_manager": [],
  "tempfile": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "tensorflow": [
   "tensorflow-base/conda-forge/linux-64/tensorflow-base-1.13.1-py36h5ece82f_4",
   "tensorflow-base/conda-forge/linux-64/tensorflow-base-1.13.1-py37_2",
   "tensorflow-base/conda-forge/linux-64/tensorflow-base-1.13.2-py27h76b4ce7_0"
  ],
  "tensorflow_hub": [
   "tensorflow-hub/conda-forge/noarch/tensorflow-hub-0.1.0-py_0",
   "tensorflow-hub/conda-forge/noarch/tensorflow-hub-0.3.0-py_0",
   "tensorflow-hub/conda-forge/noarch/tensorflow-hub-0.5.0-py_0",
   "tensorflow-hub/conda-forge/noarch/tensorflow-hub-0.7.0-pyhe1b5a44_0",
   "tensorflow-hub/conda-forge/noarch/tensorflow-hub-0.9.0-pyh831f99a_0"
  ],
  "tensorflow_text": [],
  "testing_utils": [],
  "text2text_generation": [],
  "text_classification": [],
  "text_generation": [],
  "tf_index_select": [],
  "tf_model": [],
  "tf_model_class": [],
  "tf_top_k_top_p_filtering": [],
  "threading": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "tie_encoder_to_decoder_recursively": [],
  "time": [],
  "timeit": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "timeout_decorator": [
   "timeout-decorator/conda-forge/noarch/timeout-decorator-0.4.0-py_0",
   "timeout-decorator/conda-forge/noarch/timeout-decorator-0.4.1-py_0",
   "timeout-decorator/conda-forge/noarch/timeout-decorator-0.5.0-pyhd8ed1ab_0"
  ],
  "timm": [
   "timm/conda-forge/noarch/timm-0.1.30-py_0",
   "timm/conda-forge/noarch/timm-0.2.1-py_0",
   "timm/conda-forge/noarch/timm-0.3.1-pyhd8ed1ab_0",
   "timm/conda-forge/noarch/timm-0.3.2-pyhd8ed1ab_0",
   "timm/conda-forge/noarch/timm-0.3.3-pyhd8ed1ab_0"
  ],
  "timm_model": [],
  "to_tf_var_name": [],
  "to_tuple": [],
  "token_classification": [],
  "tokenization_albert": [],
  "tokenization_bart": [],
  "tokenization_barthez": [],
  "tokenization_bert": [],
  "tokenization_big_bird": [],
  "tokenization_blenderbot_small": [],
  "tokenization_camembert": [],
  "tokenization_clip": [],
  "tokenization_convbert": [],
  "tokenization_deberta": [],
  "tokenization_distilbert": [],
  "tokenization_dpr": [],
  "tokenization_electra": [],
  "tokenization_funnel": [],
  "tokenization_gpt2": [],
  "tokenization_herbert": [],
  "tokenization_layoutlm": [],
  "tokenization_led": [],
  "tokenization_longformer": [],
  "tokenization_lxmert": [],
  "tokenization_mbart": [],
  "tokenization_mbart50": [],
  "tokenization_mobilebert": [],
  "tokenization_mpnet": [],
  "tokenization_openai": [],
  "tokenization_pegasus": [],
  "tokenization_rag": [],
  "tokenization_reformer": [],
  "tokenization_retribert": [],
  "tokenization_roberta": [],
  "tokenization_roformer": [],
  "tokenization_speech_to_text": [],
  "tokenization_squeezebert": [],
  "tokenization_t5": [],
  "tokenization_utils": [],
  "tokenization_utils_base": [],
  "tokenization_utils_fast": [],
  "tokenization_wav2vec2": [],
  "tokenization_xlm_roberta": [],
  "tokenization_xlnet": [],
  "tokenizer": [],
  "tokenizers": [
   "tokenizers/conda-forge/linux-64/tokenizers-0.9.4-py37h17e0dd7_0",
   "tokenizers/conda-forge/linux-64/tokenizers-0.9.4-py38h781e378_0"
  ],
  "torch": [],
  "torch_gather": [],
  "torch_scatter": [
   "pytorch_scatter/conda-forge/linux-64/pytorch_scatter-2.0.4-py36h19c93c2_1",
   "pytorch_scatter/conda-forge/linux-64/pytorch_scatter-2.0.4-py37h474dff6_1",
   "pytorch_scatter/conda-forge/linux-64/pytorch_scatter-2.0.4-py37h474dff6_2",
   "pytorch_scatter/conda-forge/linux-64/pytorch_scatter-2.0.4-py38h3281d7e_0",
   "pytorch_scatter/conda-forge/linux-64/pytorch_scatter-2.0.6-py36hb4d8bac_0",
   "pytorch_scatter/conda-forge/linux-64/pytorch_scatter-2.0.6-py39h0bd148b_1"
  ],
  "torch_xla": [],
  "torchaudio": [],
  "tqdm": [
   "tqdm/conda-forge/noarch/tqdm-4.29.0-py_0",
   "tqdm/conda-forge/noarch/tqdm-4.32.2-py_0",
   "tqdm/conda-forge/noarch/tqdm-4.42.1-py_0",
   "tqdm/conda-forge/noarch/tqdm-4.46.0-pyh9f0ad1d_0",
   "tqdm/conda-forge/noarch/tqdm-4.48.0-pyh9f0ad1d_0",
   "tqdm/conda-forge/noarch/tqdm-4.50.1-pyh9f0ad1d_0",
   "tqdm/conda-forge/noarch/tqdm-4.54.1-pyhd8ed1ab_0",
   "tqdm/conda-forge/noarch/tqdm-4.54.1-pyhd8ed1ab_1",
   "tqdm/conda-forge/noarch/tqdm-4.56.0-pyhd8ed1ab_0",
   "tqdm/conda-forge/noarch/tqdm-4.60.0-pyhd8ed1ab_0"
  ],
  "train_model": [],
  "trainer": [],
  "trainer_callback": [],
  "trainer_pt_utils": [],
  "trainer_utils": [],
  "training_args": [],
  "transfo_xl": [],
  "transformers": [
   "transformers/conda-forge/noarch/transformers-4.0.0-pyhd8ed1ab_0"
  ],
  "transformers_old": [],
  "truncate_seq_pair": [],
  "types": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "typing": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython",
   "typing/conda-forge/linux-64/typing-3.6.2-py27_0",
   "typing/conda-forge/linux-64/typing-3.6.6-py35_0"
  ],
  "unflatten_beam_dim": [],
  "unicodedata": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "unittest": [
   "python/conda-forge/linux-64/python-2.7.14-0",
   "python/conda-forge/linux-64/python-2.7.15-h33da82c_4",
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "unshape": [],
  "urllib": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "user": [],
  "utils": [],
  "uuid": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "uvicorn": [
   "uvicorn/conda-forge/linux-64/uvicorn-0.10.9-py38_0",
   "uvicorn/conda-forge/linux-64/uvicorn-0.13.0-py38h578d9bd_0",
   "uvicorn/conda-forge/linux-64/uvicorn-0.13.2-py39hf3d152e_0",
   "uvicorn/conda-forge/linux-64/uvicorn-0.13.3-py37h89c1867_0",
   "uvicorn/conda-forge/linux-64/uvicorn-0.3.14-py36_0",
   "uvicorn/conda-forge/linux-64/uvicorn-0.3.23-py36_1000",
   "uvicorn/conda-forge/linux-64/uvicorn-0.3.23-py37_1000",
   "uvicorn/conda-forge/linux-64/uvicorn-0.7.2-py36_0"
  ],
  "visn_loss_fct": [],
  "visual_bert": [],
  "visual_loss_fct": [],
  "vit": [],
  "wandb": [
   "wandb/conda-forge/noarch/wandb-0.10.0-pyh9f0ad1d_0",
   "wandb/conda-forge/noarch/wandb-0.10.11-pyhd3deb0d_0",
   "wandb/conda-forge/noarch/wandb-0.10.2-pyh9f0ad1d_0",
   "wandb/conda-forge/noarch/wandb-0.10.28-pyhd8ed1ab_0",
   "wandb/conda-forge/noarch/wandb-0.10.29-pyhd8ed1ab_0",
   "wandb/conda-forge/noarch/wandb-0.10.31-pyhd8ed1ab_0",
   "wandb/conda-forge/noarch/wandb-0.10.32-pyhd8ed1ab_0",
   "wandb/conda-forge/noarch/wandb-0.9.3-pyh9f0ad1d_0",
   "wandb/conda-forge/noarch/wandb-0.9.5-pyh9f0ad1d_0",
   "wandb/conda-forge/noarch/wandb-0.9.7-pyh9f0ad1d_0"
  ],
  "warnings": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "wav2vec2": [],
  "weakref": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ],
  "wget": [
   "python-wget/conda-forge/noarch/python-wget-3.2-py_0"
  ],
  "white_space_fix": [],
  "xlm": [],
  "xlm_prophetnet": [],
  "xlm_roberta": [],
  "xlnet": [],
  "yaml": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.1-pyh9f0ad1d_0",
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.1.0-pyhd3deb0d_0",
   "pyyaml/conda-forge/linux-64/pyyaml-3.11-py35_0",
   "pyyaml/conda-forge/linux-64/pyyaml-3.12-py34_0",
   "pyyaml/conda-forge/linux-64/pyyaml-3.13-py36h470a237_1",
   "pyyaml/conda-forge/linux-64/pyyaml-5.3.1-py36h97a6639_0",
   "pyyaml/conda-forge/linux-64/pyyaml-5.4.1-py37h6b43d8f_0"
  ],
  "zero_shot_classification": [],
  "zipfile": [
   "python/conda-forge/linux-64/python-3.5.3-1",
   "python/conda-forge/linux-64/python-3.6.6-h5001a0f_0",
   "python/conda-forge/linux-64/python-3.7.0-h5001a0f_4",
   "python/conda-forge/linux-64/python-3.7.8-hffdb5ce_3_cpython",
   "python/conda-forge/linux-64/python-3.8.0-h357f687_1",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_4_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_5_cpython"
  ]
 }
}