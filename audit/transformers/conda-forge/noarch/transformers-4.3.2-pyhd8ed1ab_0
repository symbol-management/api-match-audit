{
 "bad": [
  "AutoConfig.from_pretrained",
  "BertConfig.from_pretrained",
  "IPython.display.HTML",
  "IPython.display.display",
  "MemoryMeasureProcess",
  "Mykytea.Mykytea",
  "_NbestPrediction",
  "_PrelimPrediction",
  "__name__.split",
  "__version__",
  "_get_generated_ngrams",
  "_mask_pads",
  "_pytest.config.create_terminal_writer",
  "_read_stream",
  "_reorder_cache",
  "_reorder_stacked",
  "_stream_subprocess",
  "_strip_spaces",
  "_to_coordinates",
  "_tokens_match",
  "abc.ABC",
  "abc.abstractmethod",
  "activations.ACT2FN",
  "activations.gelu",
  "activations.gelu_new",
  "activations.get_activation",
  "activations.silu",
  "activations_tf.get_tf_activation",
  "add_new_model.AddNewModelCommand.register_subcommand",
  "albert.configuration_albert.ALBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "albert.configuration_albert.AlbertConfig",
  "albert.modeling_albert.AlbertForMaskedLM",
  "albert.modeling_albert.AlbertForMultipleChoice",
  "albert.modeling_albert.AlbertForPreTraining",
  "albert.modeling_albert.AlbertForQuestionAnswering",
  "albert.modeling_albert.AlbertForSequenceClassification",
  "albert.modeling_albert.AlbertForTokenClassification",
  "albert.modeling_albert.AlbertModel",
  "albert.modeling_tf_albert.TFAlbertForMaskedLM",
  "albert.modeling_tf_albert.TFAlbertForMultipleChoice",
  "albert.modeling_tf_albert.TFAlbertForPreTraining",
  "albert.modeling_tf_albert.TFAlbertForQuestionAnswering",
  "albert.modeling_tf_albert.TFAlbertForSequenceClassification",
  "albert.modeling_tf_albert.TFAlbertForTokenClassification",
  "albert.modeling_tf_albert.TFAlbertModel",
  "albert.tokenization_albert.AlbertTokenizer",
  "albert.tokenization_albert_fast.AlbertTokenizerFast",
  "albert_layer",
  "apex.amp.initialize",
  "apex.amp.master_params",
  "apex.amp.scale_loss",
  "approx",
  "argparse.ArgumentParser",
  "argparse.ArgumentTypeError",
  "argparse.Namespace",
  "as_tensor",
  "asyncio.create_subprocess_exec",
  "asyncio.get_event_loop",
  "asyncio.subprocess.PIPE",
  "asyncio.wait",
  "auto.configuration_auto.AutoConfig.for_model",
  "auto.configuration_auto.AutoConfig.from_pretrained",
  "auto.modeling_auto.AutoModel.from_config",
  "auto.modeling_auto.AutoModel.from_pretrained",
  "auto.modeling_auto.AutoModelForCausalLM.from_config",
  "auto.modeling_auto.AutoModelForCausalLM.from_pretrained",
  "auto.modeling_auto.AutoModelForSeq2SeqLM.from_config",
  "auto.modeling_auto.AutoModelForSeq2SeqLM.from_pretrained",
  "auto.tokenization_auto.AutoTokenizer.from_pretrained",
  "azureml.core.run.Run.get_context",
  "bart.configuration_bart.BART_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "bart.configuration_bart.BartConfig",
  "bart.modeling_bart.BartForCausalLM",
  "bart.modeling_bart.BartForConditionalGeneration",
  "bart.modeling_bart.BartForQuestionAnswering",
  "bart.modeling_bart.BartForSequenceClassification",
  "bart.modeling_bart.BartModel",
  "bart.modeling_tf_bart.TFBartForConditionalGeneration",
  "bart.modeling_tf_bart.TFBartModel",
  "bart.tokenization_bart.BartTokenizer",
  "bart.tokenization_bart_fast.BartTokenizerFast",
  "barthez.tokenization_barthez.BarthezTokenizer",
  "barthez.tokenization_barthez_fast.BarthezTokenizerFast",
  "base.ArgumentHandler",
  "base.PIPELINE_INIT_ARGS",
  "base.Pipeline",
  "base.PipelineException",
  "base.get_default_model",
  "base.get_framework",
  "benchmark_args.PyTorchBenchmarkArguments",
  "benchmark_args_tf.TensorFlowBenchmarkArguments",
  "benchmark_args_utils.BenchmarkArguments",
  "benchmark_utils.Benchmark",
  "benchmark_utils.Memory",
  "benchmark_utils.MemorySummary",
  "benchmark_utils.measure_peak_memory_cpu",
  "benchmark_utils.start_memory_tracing",
  "benchmark_utils.stop_memory_tracing",
  "bert.configuration_bert.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "bert.configuration_bert.BertConfig",
  "bert.modeling_bert.BertEncoder",
  "bert.modeling_bert.BertForMaskedLM",
  "bert.modeling_bert.BertForMultipleChoice",
  "bert.modeling_bert.BertForNextSentencePrediction",
  "bert.modeling_bert.BertForPreTraining",
  "bert.modeling_bert.BertForQuestionAnswering",
  "bert.modeling_bert.BertForSequenceClassification",
  "bert.modeling_bert.BertForTokenClassification",
  "bert.modeling_bert.BertLMHeadModel",
  "bert.modeling_bert.BertModel",
  "bert.modeling_flax_bert.FlaxBertModel",
  "bert.modeling_tf_bert.TFBertForMaskedLM",
  "bert.modeling_tf_bert.TFBertForMultipleChoice",
  "bert.modeling_tf_bert.TFBertForNextSentencePrediction",
  "bert.modeling_tf_bert.TFBertForPreTraining",
  "bert.modeling_tf_bert.TFBertForQuestionAnswering",
  "bert.modeling_tf_bert.TFBertForSequenceClassification",
  "bert.modeling_tf_bert.TFBertForTokenClassification",
  "bert.modeling_tf_bert.TFBertLMHeadModel",
  "bert.modeling_tf_bert.TFBertMainLayer",
  "bert.modeling_tf_bert.TFBertModel",
  "bert.tokenization_bert.BasicTokenizer",
  "bert.tokenization_bert.BertTokenizer",
  "bert.tokenization_bert.WordpieceTokenizer",
  "bert.tokenization_bert.load_vocab",
  "bert.tokenization_bert_fast.BertTokenizerFast",
  "bert_generation.configuration_bert_generation.BertGenerationConfig",
  "bert_generation.modeling_bert_generation.BertGenerationDecoder",
  "bert_generation.modeling_bert_generation.BertGenerationEncoder",
  "bert_generation.tokenization_bert_generation.BertGenerationTokenizer",
  "bert_japanese.tokenization_bert_japanese.BertJapaneseTokenizer",
  "bertweet.tokenization_bertweet.BertweetTokenizer",
  "blenderbot.configuration_blenderbot.BLENDERBOT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "blenderbot.configuration_blenderbot.BlenderbotConfig",
  "blenderbot.modeling_blenderbot.BlenderbotForCausalLM",
  "blenderbot.modeling_blenderbot.BlenderbotForConditionalGeneration",
  "blenderbot.modeling_blenderbot.BlenderbotModel",
  "blenderbot.modeling_tf_blenderbot.TFBlenderbotForConditionalGeneration",
  "blenderbot.modeling_tf_blenderbot.TFBlenderbotModel",
  "blenderbot.tokenization_blenderbot.BlenderbotTokenizer",
  "blenderbot_small.BlenderbotSmallForConditionalGeneration.from_pretrained",
  "blenderbot_small.BlenderbotSmallModel.from_pretrained",
  "blenderbot_small.TFBlenderbotSmallForConditionalGeneration.from_pretrained",
  "blenderbot_small.TFBlenderbotSmallModel.from_pretrained",
  "blenderbot_small.configuration_blenderbot_small.BLENDERBOT_SMALL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "blenderbot_small.configuration_blenderbot_small.BlenderbotSmallConfig",
  "blenderbot_small.modeling_blenderbot_small.BlenderbotSmallForCausalLM",
  "blenderbot_small.modeling_blenderbot_small.BlenderbotSmallForConditionalGeneration",
  "blenderbot_small.modeling_blenderbot_small.BlenderbotSmallModel",
  "blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallForConditionalGeneration",
  "blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallModel",
  "blenderbot_small.tokenization_blenderbot_small.BlenderbotSmallTokenizer",
  "block",
  "build_shape_dict",
  "callback",
  "camembert.configuration_camembert.CAMEMBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "camembert.configuration_camembert.CamembertConfig",
  "camembert.modeling_camembert.CamembertForCausalLM",
  "camembert.modeling_camembert.CamembertForMaskedLM",
  "camembert.modeling_camembert.CamembertForMultipleChoice",
  "camembert.modeling_camembert.CamembertForQuestionAnswering",
  "camembert.modeling_camembert.CamembertForSequenceClassification",
  "camembert.modeling_camembert.CamembertForTokenClassification",
  "camembert.modeling_camembert.CamembertModel",
  "camembert.modeling_tf_camembert.TFCamembertForMaskedLM",
  "camembert.modeling_tf_camembert.TFCamembertForMultipleChoice",
  "camembert.modeling_tf_camembert.TFCamembertForQuestionAnswering",
  "camembert.modeling_tf_camembert.TFCamembertForSequenceClassification",
  "camembert.modeling_tf_camembert.TFCamembertForTokenClassification",
  "camembert.modeling_tf_camembert.TFCamembertModel",
  "camembert.tokenization_camembert.CamembertTokenizer",
  "camembert.tokenization_camembert_fast.CamembertTokenizerFast",
  "cat_input_and_doc",
  "collections.Counter",
  "collections.OrderedDict",
  "collections.OrderedDict.fromkeys",
  "collections.UserDict",
  "collections.abc.Iterable",
  "collections.abc.Sequence",
  "collections.abc.Sized",
  "collections.defaultdict",
  "collections.namedtuple",
  "comet_ml.Experiment",
  "comet_ml.OfflineExperiment",
  "comet_ml.config.get_config",
  "comet_ml.config.get_global_experiment",
  "config_class",
  "config_class.from_dict",
  "configuration_albert.AlbertConfig",
  "configuration_auto.AlbertConfig",
  "configuration_auto.AutoConfig.from_pretrained",
  "configuration_auto.BartConfig",
  "configuration_auto.BertConfig",
  "configuration_auto.BertGenerationConfig",
  "configuration_auto.BlenderbotConfig",
  "configuration_auto.BlenderbotSmallConfig",
  "configuration_auto.CTRLConfig",
  "configuration_auto.CamembertConfig",
  "configuration_auto.ConvBertConfig",
  "configuration_auto.DPRConfig",
  "configuration_auto.DebertaConfig",
  "configuration_auto.DistilBertConfig",
  "configuration_auto.ElectraConfig",
  "configuration_auto.EncoderDecoderConfig",
  "configuration_auto.FSMTConfig",
  "configuration_auto.FlaubertConfig",
  "configuration_auto.FunnelConfig",
  "configuration_auto.GPT2Config",
  "configuration_auto.LEDConfig",
  "configuration_auto.LayoutLMConfig",
  "configuration_auto.LongformerConfig",
  "configuration_auto.LxmertConfig",
  "configuration_auto.MBartConfig",
  "configuration_auto.MPNetConfig",
  "configuration_auto.MT5Config",
  "configuration_auto.MarianConfig",
  "configuration_auto.MobileBertConfig",
  "configuration_auto.OpenAIGPTConfig",
  "configuration_auto.PegasusConfig",
  "configuration_auto.ProphetNetConfig",
  "configuration_auto.RagConfig",
  "configuration_auto.ReformerConfig",
  "configuration_auto.RetriBertConfig",
  "configuration_auto.RobertaConfig",
  "configuration_auto.SqueezeBertConfig",
  "configuration_auto.T5Config",
  "configuration_auto.TapasConfig",
  "configuration_auto.TransfoXLConfig",
  "configuration_auto.Wav2Vec2Config",
  "configuration_auto.XLMConfig",
  "configuration_auto.XLMProphetNetConfig",
  "configuration_auto.XLMRobertaConfig",
  "configuration_auto.XLNetConfig",
  "configuration_auto.replace_list_option_in_docstrings",
  "configuration_bart.BartConfig",
  "configuration_bert.BertConfig",
  "configuration_bert_generation.BertGenerationConfig",
  "configuration_blenderbot.BlenderbotConfig",
  "configuration_blenderbot_small.BlenderbotSmallConfig",
  "configuration_camembert.CamembertConfig",
  "configuration_convbert.ConvBertConfig",
  "configuration_ctrl.CTRLConfig",
  "configuration_deberta.DebertaConfig",
  "configuration_distilbert.DistilBertConfig",
  "configuration_dpr.DPRConfig",
  "configuration_electra.ElectraConfig",
  "configuration_encoder_decoder.EncoderDecoderConfig",
  "configuration_encoder_decoder.EncoderDecoderConfig.from_encoder_decoder_configs",
  "configuration_flaubert.FlaubertConfig",
  "configuration_fsmt.FSMTConfig",
  "configuration_funnel.FunnelConfig",
  "configuration_gpt2.GPT2Config",
  "configuration_layoutlm.LayoutLMConfig",
  "configuration_led.LEDConfig",
  "configuration_longformer.LongformerConfig",
  "configuration_lxmert.LxmertConfig",
  "configuration_marian.MarianConfig",
  "configuration_mbart.MBartConfig",
  "configuration_mobilebert.MobileBertConfig",
  "configuration_mpnet.MPNetConfig",
  "configuration_mt5.MT5Config",
  "configuration_openai.OpenAIGPTConfig",
  "configuration_pegasus.PegasusConfig",
  "configuration_prophetnet.ProphetNetConfig",
  "configuration_rag.RagConfig",
  "configuration_rag.RagConfig.from_pretrained",
  "configuration_rag.RagConfig.from_question_encoder_generator_configs",
  "configuration_reformer.ReformerConfig",
  "configuration_retribert.RetriBertConfig",
  "configuration_roberta.RobertaConfig",
  "configuration_squeezebert.SqueezeBertConfig",
  "configuration_t5.T5Config",
  "configuration_tapas.TapasConfig",
  "configuration_transfo_xl.TransfoXLConfig",
  "configuration_utils.PretrainedConfig",
  "configuration_utils.PretrainedConfig.get_config_dict",
  "configuration_wav2vec2.Wav2Vec2Config",
  "configuration_xlm.XLMConfig",
  "configuration_xlm_prophetnet.XLMProphetNetConfig",
  "configuration_xlm_roberta.XLMRobertaConfig",
  "configuration_xlnet.XLNetConfig",
  "contextlib.AbstractContextManager",
  "contextlib.contextmanager",
  "conv_layer",
  "convbert.configuration_convbert.CONVBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "convbert.configuration_convbert.ConvBertConfig",
  "convbert.modeling_convbert.ConvBertForMaskedLM",
  "convbert.modeling_convbert.ConvBertForMultipleChoice",
  "convbert.modeling_convbert.ConvBertForQuestionAnswering",
  "convbert.modeling_convbert.ConvBertForSequenceClassification",
  "convbert.modeling_convbert.ConvBertForTokenClassification",
  "convbert.modeling_convbert.ConvBertModel",
  "convbert.modeling_tf_convbert.TFConvBertForMaskedLM",
  "convbert.modeling_tf_convbert.TFConvBertForMultipleChoice",
  "convbert.modeling_tf_convbert.TFConvBertForQuestionAnswering",
  "convbert.modeling_tf_convbert.TFConvBertForSequenceClassification",
  "convbert.modeling_tf_convbert.TFConvBertForTokenClassification",
  "convbert.modeling_tf_convbert.TFConvBertModel",
  "convbert.tokenization_convbert.ConvBertTokenizer",
  "convbert.tokenization_convbert_fast.ConvBertTokenizerFast",
  "conversational.ConversationalPipeline",
  "convert.ConvertCommand.register_subcommand",
  "convert_added_tokens",
  "convert_slow_tokenizer.SLOW_TO_FAST_CONVERTERS",
  "convert_slow_tokenizer.convert_slow_tokenizer",
  "converter_class",
  "cookiecutter.main.cookiecutter",
  "copy.copy",
  "copy.deepcopy",
  "create_custom_forward",
  "create_tf_var",
  "csv.DictReader",
  "csv.DictWriter",
  "csv.reader",
  "csv.writer",
  "ctrl.configuration_ctrl.CTRLConfig",
  "ctrl.configuration_ctrl.CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "ctrl.modeling_ctrl.CTRLForSequenceClassification",
  "ctrl.modeling_ctrl.CTRLLMHeadModel",
  "ctrl.modeling_ctrl.CTRLModel",
  "ctrl.modeling_tf_ctrl.TFCTRLForSequenceClassification",
  "ctrl.modeling_tf_ctrl.TFCTRLLMHeadModel",
  "ctrl.modeling_tf_ctrl.TFCTRLModel",
  "ctrl.tokenization_ctrl.CTRLTokenizer",
  "data.SingleSentenceClassificationProcessor.create_from_csv",
  "data.SquadExample",
  "data.SquadFeatures",
  "data.data_collator.DataCollator",
  "data.data_collator.DataCollatorWithPadding",
  "data.data_collator.default_data_collator",
  "data.squad_convert_examples_to_features",
  "dataclasses.MISSING",
  "dataclasses.asdict",
  "dataclasses.dataclass",
  "dataclasses.field",
  "dataclasses.fields",
  "dataclasses.is_dataclass",
  "datasets.Dataset",
  "datasets.load_dataset",
  "datasets.load_from_disk",
  "datetime.datetime.date",
  "datetime.datetime.now",
  "datetime.datetime.strptime",
  "datetime.datetime.time",
  "deberta.configuration_deberta.DEBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "deberta.configuration_deberta.DebertaConfig",
  "deberta.modeling_deberta.DebertaForMaskedLM",
  "deberta.modeling_deberta.DebertaForQuestionAnswering",
  "deberta.modeling_deberta.DebertaForSequenceClassification",
  "deberta.modeling_deberta.DebertaForTokenClassification",
  "deberta.modeling_deberta.DebertaModel",
  "deberta.tokenization_deberta.DebertaTokenizer",
  "decoder_layer",
  "deepspeed.init_distributed",
  "deepspeed.initialize",
  "dependency_versions_table.deps",
  "dependency_versions_table.deps.keys",
  "distilbert.configuration_distilbert.DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "distilbert.configuration_distilbert.DistilBertConfig",
  "distilbert.modeling_distilbert.DistilBertForMaskedLM",
  "distilbert.modeling_distilbert.DistilBertForMultipleChoice",
  "distilbert.modeling_distilbert.DistilBertForQuestionAnswering",
  "distilbert.modeling_distilbert.DistilBertForSequenceClassification",
  "distilbert.modeling_distilbert.DistilBertForTokenClassification",
  "distilbert.modeling_distilbert.DistilBertModel",
  "distilbert.modeling_tf_distilbert.TFDistilBertForMaskedLM",
  "distilbert.modeling_tf_distilbert.TFDistilBertForMultipleChoice",
  "distilbert.modeling_tf_distilbert.TFDistilBertForQuestionAnswering",
  "distilbert.modeling_tf_distilbert.TFDistilBertForSequenceClassification",
  "distilbert.modeling_tf_distilbert.TFDistilBertForTokenClassification",
  "distilbert.modeling_tf_distilbert.TFDistilBertModel",
  "distilbert.tokenization_distilbert.DistilBertTokenizer",
  "distilbert.tokenization_distilbert_fast.DistilBertTokenizerFast",
  "distutils.util.strtobool",
  "download.DownloadCommand.register_subcommand",
  "dpr.configuration_dpr.DPRConfig",
  "dpr.configuration_dpr.DPR_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "dpr.modeling_dpr.DPRQuestionEncoder",
  "dpr.modeling_tf_dpr.TFDPRQuestionEncoder",
  "dpr.tokenization_dpr.DPRQuestionEncoderTokenizer",
  "dpr.tokenization_dpr_fast.DPRQuestionEncoderTokenizerFast",
  "dtype",
  "electra.configuration_electra.ELECTRA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "electra.configuration_electra.ElectraConfig",
  "electra.modeling_electra.ElectraForMaskedLM",
  "electra.modeling_electra.ElectraForMultipleChoice",
  "electra.modeling_electra.ElectraForPreTraining",
  "electra.modeling_electra.ElectraForQuestionAnswering",
  "electra.modeling_electra.ElectraForSequenceClassification",
  "electra.modeling_electra.ElectraForTokenClassification",
  "electra.modeling_electra.ElectraModel",
  "electra.modeling_tf_electra.TFElectraForMaskedLM",
  "electra.modeling_tf_electra.TFElectraForMultipleChoice",
  "electra.modeling_tf_electra.TFElectraForPreTraining",
  "electra.modeling_tf_electra.TFElectraForQuestionAnswering",
  "electra.modeling_tf_electra.TFElectraForSequenceClassification",
  "electra.modeling_tf_electra.TFElectraForTokenClassification",
  "electra.modeling_tf_electra.TFElectraModel",
  "electra.tokenization_electra.ElectraTokenizer",
  "electra.tokenization_electra_fast.ElectraTokenizerFast",
  "emoji.demojize",
  "encoder",
  "encoder_decoder.configuration_encoder_decoder.EncoderDecoderConfig",
  "encoder_decoder.modeling_encoder_decoder.EncoderDecoderModel",
  "encoder_layer",
  "enum.Enum",
  "env.EnvironmentCommand.register_subcommand",
  "extend_enc_output",
  "fairscale.nn.data_parallel.ShardedDataParallel",
  "fairscale.optim.OSS",
  "fairscale.optim.grad_scaler.ShardedGradScaler",
  "fairseq.__version__",
  "fairseq.checkpoint_utils.load_model_ensemble_and_task",
  "fairseq.data.dictionary.Dictionary.load",
  "fairseq.hub_utils.from_pretrained",
  "fairseq.model_parallel.models.transformer.ModelParallelTransformerModel",
  "fairseq.models.roberta.RobertaModel.from_pretrained",
  "fairseq.modules.TransformerSentenceEncoderLayer",
  "faiss.IndexHNSWFlat",
  "faiss.read_index",
  "fastapi.Body",
  "fastapi.FastAPI",
  "fastapi.HTTPException",
  "fastapi.routing.APIRoute",
  "feature_extraction.FeatureExtractionPipeline",
  "ffn_module",
  "file_utils.CONFIG_NAME",
  "file_utils.DUMMY_INPUTS",
  "file_utils.DUMMY_MASK",
  "file_utils.ENV_VARS_TRUE_VALUES",
  "file_utils.ENV_VARS_TRUE_VALUES.union",
  "file_utils.FLAX_WEIGHTS_NAME",
  "file_utils.MODEL_CARD_NAME",
  "file_utils.MULTIPLE_CHOICE_DUMMY_INPUTS",
  "file_utils.ModelOutput",
  "file_utils.SPIECE_UNDERLINE",
  "file_utils.TF2_WEIGHTS_NAME",
  "file_utils.TF_WEIGHTS_NAME",
  "file_utils.WEIGHTS_NAME",
  "file_utils._BaseLazyModule",
  "file_utils.add_code_sample_docstrings",
  "file_utils.add_end_docstrings",
  "file_utils.add_start_docstrings",
  "file_utils.add_start_docstrings_to_model_forward",
  "file_utils.cached_path",
  "file_utils.cached_property",
  "file_utils.hf_bucket_url",
  "file_utils.is_apex_available",
  "file_utils.is_datasets_available",
  "file_utils.is_faiss_available",
  "file_utils.is_flax_available",
  "file_utils.is_in_notebook",
  "file_utils.is_pandas_available",
  "file_utils.is_psutil_available",
  "file_utils.is_py3nvml_available",
  "file_utils.is_remote_url",
  "file_utils.is_sagemaker_distributed_available",
  "file_utils.is_scatter_available",
  "file_utils.is_sentencepiece_available",
  "file_utils.is_sklearn_available",
  "file_utils.is_soundfile_availble",
  "file_utils.is_tf_available",
  "file_utils.is_tokenizers_available",
  "file_utils.is_torch_available",
  "file_utils.is_torch_tpu_available",
  "file_utils.replace_return_docstrings",
  "file_utils.requires_datasets",
  "file_utils.requires_faiss",
  "file_utils.requires_flax",
  "file_utils.requires_pandas",
  "file_utils.requires_protobuf",
  "file_utils.requires_pytorch",
  "file_utils.requires_scatter",
  "file_utils.requires_sentencepiece",
  "file_utils.requires_sklearn",
  "file_utils.requires_tf",
  "file_utils.requires_tokenizers",
  "file_utils.tf_required",
  "file_utils.torch_only_method",
  "file_utils.torch_required",
  "filelock.FileLock",
  "fill_mask.FillMaskPipeline",
  "flaubert.configuration_flaubert.FLAUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "flaubert.configuration_flaubert.FlaubertConfig",
  "flaubert.modeling_flaubert.FlaubertForMultipleChoice",
  "flaubert.modeling_flaubert.FlaubertForQuestionAnsweringSimple",
  "flaubert.modeling_flaubert.FlaubertForSequenceClassification",
  "flaubert.modeling_flaubert.FlaubertForTokenClassification",
  "flaubert.modeling_flaubert.FlaubertModel",
  "flaubert.modeling_flaubert.FlaubertWithLMHeadModel",
  "flaubert.modeling_tf_flaubert.TFFlaubertForMultipleChoice",
  "flaubert.modeling_tf_flaubert.TFFlaubertForQuestionAnsweringSimple",
  "flaubert.modeling_tf_flaubert.TFFlaubertForSequenceClassification",
  "flaubert.modeling_tf_flaubert.TFFlaubertForTokenClassification",
  "flaubert.modeling_tf_flaubert.TFFlaubertModel",
  "flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModel",
  "flaubert.tokenization_flaubert.FlaubertTokenizer",
  "flax.core.frozen_dict.FrozenDict",
  "flax.core.frozen_dict.freeze",
  "flax.core.frozen_dict.unfreeze",
  "flax.linen.Dense",
  "flax.linen.Dropout",
  "flax.linen.Module",
  "flax.linen.attention.SelfAttention",
  "flax.linen.compact",
  "flax.linen.gelu",
  "flax.linen.relu",
  "flax.linen.swish",
  "flax.linen.tanh",
  "flax.serialization.from_bytes",
  "flax.serialization.to_bytes",
  "flax.traverse_util.flatten_dict",
  "flax.traverse_util.unflatten_dict",
  "fn",
  "fn.__doc__",
  "fn.__qualname__.split",
  "fnmatch.filter",
  "fsmt.configuration_fsmt.FSMTConfig",
  "fsmt.configuration_fsmt.FSMT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "fsmt.modeling_fsmt.FSMTForConditionalGeneration",
  "fsmt.modeling_fsmt.FSMTModel",
  "fsmt.tokenization_fsmt.FSMTTokenizer",
  "ftfy.fix_text",
  "fugashi.GenericTagger",
  "func",
  "func.__name__",
  "functools.lru_cache",
  "functools.partial",
  "functools.reduce",
  "functools.wraps",
  "funnel.configuration_funnel.FUNNEL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "funnel.configuration_funnel.FunnelConfig",
  "funnel.modeling_funnel.FunnelForMaskedLM",
  "funnel.modeling_funnel.FunnelForMultipleChoice",
  "funnel.modeling_funnel.FunnelForPreTraining",
  "funnel.modeling_funnel.FunnelForQuestionAnswering",
  "funnel.modeling_funnel.FunnelForSequenceClassification",
  "funnel.modeling_funnel.FunnelForTokenClassification",
  "funnel.modeling_funnel.FunnelModel",
  "funnel.modeling_tf_funnel.TFFunnelForMaskedLM",
  "funnel.modeling_tf_funnel.TFFunnelForMultipleChoice",
  "funnel.modeling_tf_funnel.TFFunnelForPreTraining",
  "funnel.modeling_tf_funnel.TFFunnelForQuestionAnswering",
  "funnel.modeling_tf_funnel.TFFunnelForSequenceClassification",
  "funnel.modeling_tf_funnel.TFFunnelForTokenClassification",
  "funnel.modeling_tf_funnel.TFFunnelModel",
  "funnel.tokenization_funnel.FunnelTokenizer",
  "funnel.tokenization_funnel_fast.FunnelTokenizerFast",
  "generation_beam_search.BeamScorer",
  "generation_beam_search.BeamSearchScorer",
  "generation_logits_process.EncoderNoRepeatNGramLogitsProcessor",
  "generation_logits_process.HammingDiversityLogitsProcessor",
  "generation_logits_process.LogitsProcessorList",
  "generation_logits_process.MinLengthLogitsProcessor",
  "generation_logits_process.NoBadWordsLogitsProcessor",
  "generation_logits_process.NoRepeatNGramLogitsProcessor",
  "generation_logits_process.PrefixConstrainedLogitsProcessor",
  "generation_logits_process.RepetitionPenaltyLogitsProcessor",
  "generation_logits_process.TemperatureLogitsWarper",
  "generation_logits_process.TopKLogitsWarper",
  "generation_logits_process.TopPLogitsWarper",
  "generation_tf_utils.TFGenerationMixin",
  "generation_utils.GenerationMixin",
  "get_cpu_memory",
  "get_input_ids",
  "get_ipython",
  "get_seq_element",
  "getpass.getpass",
  "git.Repo",
  "glob.glob",
  "google.protobuf.descriptor.Descriptor",
  "google.protobuf.descriptor.EnumDescriptor",
  "google.protobuf.descriptor.EnumValueDescriptor",
  "google.protobuf.descriptor.FieldDescriptor",
  "google.protobuf.descriptor.FileDescriptor",
  "google.protobuf.descriptor._ParseOptions",
  "google.protobuf.descriptor_pb2.FieldOptions",
  "google.protobuf.descriptor_pb2.FileOptions",
  "google.protobuf.message.Message",
  "google.protobuf.reflection.GeneratedProtocolMessageType",
  "google.protobuf.symbol_database.Default",
  "gpt2.configuration_gpt2.GPT2Config",
  "gpt2.configuration_gpt2.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "gpt2.modeling_gpt2.GPT2ForSequenceClassification",
  "gpt2.modeling_gpt2.GPT2LMHeadModel",
  "gpt2.modeling_gpt2.GPT2Model",
  "gpt2.modeling_tf_gpt2.TFGPT2ForSequenceClassification",
  "gpt2.modeling_tf_gpt2.TFGPT2LMHeadModel",
  "gpt2.modeling_tf_gpt2.TFGPT2Model",
  "gpt2.tokenization_gpt2.GPT2Tokenizer",
  "gpt2.tokenization_gpt2_fast.GPT2TokenizerFast",
  "h",
  "h5py.File",
  "hashlib.sha256",
  "herbert.tokenization_herbert.HerbertTokenizer",
  "herbert.tokenization_herbert_fast.HerbertTokenizerFast",
  "hf_api.HfApi",
  "hf_api.HfFolder.delete_token",
  "hf_api.HfFolder.get_token",
  "hf_api.HfFolder.path_token",
  "hf_api.HfFolder.save_token",
  "html.entities.name2codepoint.get",
  "importlib.import_module",
  "importlib.metadata.PackageNotFoundError",
  "importlib.metadata.metadata",
  "importlib.metadata.version",
  "inference_model",
  "initializer",
  "input.append",
  "input.masked_fill",
  "input.name.split",
  "input.shape",
  "input.size",
  "inspect.getfile",
  "inspect.signature",
  "inspect.stack",
  "int_to_alphabetic",
  "integrations.default_hp_search_backend",
  "integrations.get_available_reporting_integrations",
  "integrations.get_reporting_integration_callbacks",
  "integrations.hp_params",
  "integrations.init_deepspeed",
  "integrations.is_comet_available",
  "integrations.is_deepspeed_available",
  "integrations.is_fairscale_available",
  "integrations.is_optuna_available",
  "integrations.is_ray_available",
  "integrations.is_ray_tune_available",
  "integrations.is_wandb_available",
  "integrations.run_hp_search_optuna",
  "integrations.run_hp_search_ray",
  "io.BufferedReader",
  "io.StringIO",
  "io.open",
  "ipadic.DICDIR",
  "is_tensor",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "itertools.count",
  "itertools.groupby",
  "jax.lax.rsqrt",
  "jax.lax.square",
  "jax.nn.initializers.normal",
  "jax.nn.initializers.ones",
  "jax.nn.initializers.zeros",
  "jax.numpy.arange",
  "jax.numpy.array",
  "jax.numpy.asarray",
  "jax.numpy.atleast_2d",
  "jax.numpy.broadcast_to",
  "jax.numpy.cumsum",
  "jax.numpy.dtype",
  "jax.numpy.expand_dims",
  "jax.numpy.float32",
  "jax.numpy.mean",
  "jax.numpy.ndarray",
  "jax.numpy.ones_like",
  "jax.numpy.take",
  "jax.numpy.zeros",
  "jax.random.PRNGKey",
  "jax.random.split",
  "jieba.cut",
  "json.JSONDecodeError",
  "json.dump",
  "json.dumps",
  "json.load",
  "json.loads",
  "keras2onnx.__version__",
  "keras2onnx.convert_keras",
  "keras2onnx.save_model",
  "key_fn",
  "label_from_example",
  "layer",
  "layer.attention.prune_heads",
  "layer.backward_pass",
  "layer_module",
  "layoutlm.configuration_layoutlm.LAYOUTLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "layoutlm.configuration_layoutlm.LayoutLMConfig",
  "layoutlm.modeling_layoutlm.LayoutLMForMaskedLM",
  "layoutlm.modeling_layoutlm.LayoutLMForSequenceClassification",
  "layoutlm.modeling_layoutlm.LayoutLMForTokenClassification",
  "layoutlm.modeling_layoutlm.LayoutLMModel",
  "layoutlm.tokenization_layoutlm.LayoutLMTokenizer",
  "layoutlm.tokenization_layoutlm_fast.LayoutLMTokenizerFast",
  "led.configuration_led.LEDConfig",
  "led.configuration_led.LED_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "led.modeling_led.LEDForConditionalGeneration",
  "led.modeling_led.LEDForQuestionAnswering",
  "led.modeling_led.LEDForSequenceClassification",
  "led.modeling_led.LEDModel",
  "led.modeling_tf_led.TFLEDForConditionalGeneration",
  "led.modeling_tf_led.TFLEDModel",
  "led.tokenization_led.LEDTokenizer",
  "led.tokenization_led_fast.LEDTokenizerFast",
  "lfs.LfsCommands.register_subcommand",
  "linear",
  "linecache.getline",
  "load",
  "log_softmax",
  "logging.CRITICAL",
  "logging.DEBUG",
  "logging.ERROR",
  "logging.Formatter",
  "logging.Handler",
  "logging.INFO",
  "logging.Logger",
  "logging.NOTSET",
  "logging.StreamHandler",
  "logging.WARNING",
  "logging.getLogger",
  "logging.set_verbosity_info",
  "longformer.configuration_longformer.LONGFORMER_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "longformer.configuration_longformer.LongformerConfig",
  "longformer.modeling_longformer.LongformerForMaskedLM",
  "longformer.modeling_longformer.LongformerForMultipleChoice",
  "longformer.modeling_longformer.LongformerForQuestionAnswering",
  "longformer.modeling_longformer.LongformerForSequenceClassification",
  "longformer.modeling_longformer.LongformerForTokenClassification",
  "longformer.modeling_longformer.LongformerModel",
  "longformer.modeling_tf_longformer.TFLongformerForMaskedLM",
  "longformer.modeling_tf_longformer.TFLongformerForMultipleChoice",
  "longformer.modeling_tf_longformer.TFLongformerForQuestionAnswering",
  "longformer.modeling_tf_longformer.TFLongformerForSequenceClassification",
  "longformer.modeling_tf_longformer.TFLongformerForTokenClassification",
  "longformer.modeling_tf_longformer.TFLongformerModel",
  "longformer.tokenization_longformer.LongformerTokenizer",
  "longformer.tokenization_longformer_fast.LongformerTokenizerFast",
  "loss_fct",
  "loss_fct.ignore_index",
  "loss_fct_cls",
  "loss_fn",
  "lower",
  "lxmert.configuration_lxmert.LXMERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "lxmert.configuration_lxmert.LxmertConfig",
  "lxmert.modeling_lxmert.LxmertForPreTraining",
  "lxmert.modeling_lxmert.LxmertForQuestionAnswering",
  "lxmert.modeling_lxmert.LxmertModel",
  "lxmert.modeling_tf_lxmert.TFLxmertForPreTraining",
  "lxmert.modeling_tf_lxmert.TFLxmertModel",
  "lxmert.tokenization_lxmert.LxmertTokenizer",
  "lxmert.tokenization_lxmert_fast.LxmertTokenizerFast",
  "marian.configuration_marian.MarianConfig",
  "marian.modeling_marian.MarianForCausalLM",
  "marian.modeling_marian.MarianMTModel",
  "marian.modeling_marian.MarianModel",
  "marian.modeling_tf_marian.TFMarianMTModel",
  "marian.modeling_tf_marian.TFMarianModel",
  "marian.tokenization_marian.MarianTokenizer",
  "math.ceil",
  "math.cos",
  "math.exp",
  "math.floor",
  "math.inf",
  "math.isnan",
  "math.log",
  "math.pi",
  "math.pow",
  "math.sqrt",
  "mbart.configuration_mbart.MBART_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "mbart.configuration_mbart.MBartConfig",
  "mbart.modeling_mbart.MBartForCausalLM",
  "mbart.modeling_mbart.MBartForConditionalGeneration",
  "mbart.modeling_mbart.MBartForQuestionAnswering",
  "mbart.modeling_mbart.MBartForSequenceClassification",
  "mbart.modeling_mbart.MBartModel",
  "mbart.modeling_tf_mbart.TFMBartForConditionalGeneration",
  "mbart.modeling_tf_mbart.TFMBartModel",
  "mbart.tokenization_mbart.MBartTokenizer",
  "mbart.tokenization_mbart_fast.MBartTokenizerFast",
  "mobilebert.configuration_mobilebert.MobileBertConfig",
  "mobilebert.modeling_mobilebert.MobileBertForMaskedLM",
  "mobilebert.modeling_mobilebert.MobileBertForMultipleChoice",
  "mobilebert.modeling_mobilebert.MobileBertForNextSentencePrediction",
  "mobilebert.modeling_mobilebert.MobileBertForPreTraining",
  "mobilebert.modeling_mobilebert.MobileBertForQuestionAnswering",
  "mobilebert.modeling_mobilebert.MobileBertForSequenceClassification",
  "mobilebert.modeling_mobilebert.MobileBertForTokenClassification",
  "mobilebert.modeling_mobilebert.MobileBertModel",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForMaskedLM",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForMultipleChoice",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForNextSentencePrediction",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTraining",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForQuestionAnswering",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForSequenceClassification",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertForTokenClassification",
  "mobilebert.modeling_tf_mobilebert.TFMobileBertModel",
  "mobilebert.tokenization_mobilebert.MobileBertTokenizer",
  "mobilebert.tokenization_mobilebert_fast.MobileBertTokenizerFast",
  "model",
  "model.__class__.__name__",
  "model.dummy_inputs",
  "model.lm_head",
  "model.load_state_dict",
  "model.model",
  "model.model.load_state_dict",
  "model.model.shared",
  "model.save_pretrained",
  "model.trainable_variables",
  "model_class",
  "model_class.from_pretrained",
  "model_cls",
  "modelcard.ModelCard",
  "modelcard.ModelCard.from_pretrained",
  "modeling_flax_utils.ACT2FN",
  "modeling_flax_utils.FlaxPreTrainedModel",
  "modeling_outputs.BaseModelOutput",
  "modeling_outputs.BaseModelOutputWithCrossAttentions",
  "modeling_outputs.BaseModelOutputWithPast",
  "modeling_outputs.BaseModelOutputWithPastAndCrossAttentions",
  "modeling_outputs.BaseModelOutputWithPooling",
  "modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions",
  "modeling_outputs.CausalLMOutput",
  "modeling_outputs.CausalLMOutputWithCrossAttentions",
  "modeling_outputs.CausalLMOutputWithPast",
  "modeling_outputs.MaskedLMOutput",
  "modeling_outputs.ModelOutput",
  "modeling_outputs.MultipleChoiceModelOutput",
  "modeling_outputs.NextSentencePredictorOutput",
  "modeling_outputs.QuestionAnsweringModelOutput",
  "modeling_outputs.Seq2SeqLMOutput",
  "modeling_outputs.Seq2SeqModelOutput",
  "modeling_outputs.Seq2SeqQuestionAnsweringModelOutput",
  "modeling_outputs.Seq2SeqSequenceClassifierOutput",
  "modeling_outputs.SequenceClassifierOutput",
  "modeling_outputs.SequenceClassifierOutputWithPast",
  "modeling_outputs.TokenClassifierOutput",
  "modeling_tf_outputs.TFBaseModelOutput",
  "modeling_tf_outputs.TFBaseModelOutputWithPast",
  "modeling_tf_outputs.TFBaseModelOutputWithPooling",
  "modeling_tf_outputs.TFCausalLMOutput",
  "modeling_tf_outputs.TFCausalLMOutputWithPast",
  "modeling_tf_outputs.TFMaskedLMOutput",
  "modeling_tf_outputs.TFMultipleChoiceModelOutput",
  "modeling_tf_outputs.TFNextSentencePredictorOutput",
  "modeling_tf_outputs.TFQuestionAnsweringModelOutput",
  "modeling_tf_outputs.TFSeq2SeqLMOutput",
  "modeling_tf_outputs.TFSeq2SeqModelOutput",
  "modeling_tf_outputs.TFSequenceClassifierOutput",
  "modeling_tf_outputs.TFSequenceClassifierOutputWithPast",
  "modeling_tf_outputs.TFTokenClassifierOutput",
  "modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model",
  "modeling_tf_pytorch_utils.load_tf2_checkpoint_in_pytorch_model",
  "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask",
  "modeling_tf_utils.DUMMY_INPUTS",
  "modeling_tf_utils.TFCausalLanguageModelingLoss",
  "modeling_tf_utils.TFConv1D",
  "modeling_tf_utils.TFMaskedLanguageModelingLoss",
  "modeling_tf_utils.TFModelInputType",
  "modeling_tf_utils.TFMultipleChoiceLoss",
  "modeling_tf_utils.TFNextSentencePredictionLoss",
  "modeling_tf_utils.TFPreTrainedModel",
  "modeling_tf_utils.TFQuestionAnsweringLoss",
  "modeling_tf_utils.TFSequenceClassificationLoss",
  "modeling_tf_utils.TFSequenceSummary",
  "modeling_tf_utils.TFSharedEmbeddings",
  "modeling_tf_utils.TFTokenClassificationLoss",
  "modeling_tf_utils.TFWrappedEmbeddings",
  "modeling_tf_utils.get_initializer",
  "modeling_tf_utils.input_processing",
  "modeling_tf_utils.keras_serializable",
  "modeling_tf_utils.load_tf_weights",
  "modeling_tf_utils.shape_list",
  "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax",
  "modeling_utils.Conv1D",
  "modeling_utils.ModuleUtilsMixin",
  "modeling_utils.PoolerAnswerClass",
  "modeling_utils.PoolerEndLogits",
  "modeling_utils.PoolerStartLogits",
  "modeling_utils.PreTrainedModel",
  "modeling_utils.SQuADHead",
  "modeling_utils.SequenceSummary",
  "modeling_utils.apply_chunking_to_forward",
  "modeling_utils.find_pruneable_heads_and_indices",
  "modeling_utils.prune_conv1d_layer",
  "modeling_utils.prune_linear_layer",
  "models.albert.convert_albert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.auto.AutoModel.from_pretrained",
  "models.auto.AutoTokenizer.from_pretrained",
  "models.auto.configuration_auto.ALL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "models.auto.modeling_auto.AutoModel",
  "models.auto.modeling_auto.AutoModel.from_pretrained",
  "models.auto.modeling_auto.AutoModelForCausalLM",
  "models.auto.modeling_auto.AutoModelForMaskedLM",
  "models.auto.modeling_auto.AutoModelForQuestionAnswering",
  "models.auto.modeling_auto.AutoModelForSeq2SeqLM",
  "models.auto.modeling_auto.AutoModelForSequenceClassification",
  "models.auto.modeling_auto.AutoModelForTableQuestionAnswering",
  "models.auto.modeling_auto.AutoModelForTokenClassification",
  "models.auto.modeling_auto.MODEL_FOR_MASKED_LM_MAPPING",
  "models.auto.modeling_auto.MODEL_FOR_QUESTION_ANSWERING_MAPPING",
  "models.auto.modeling_auto.MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys",
  "models.auto.modeling_auto.MODEL_FOR_QUESTION_ANSWERING_MAPPING.values",
  "models.auto.modeling_auto.MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING",
  "models.auto.modeling_auto.MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING",
  "models.auto.modeling_auto.MODEL_FOR_TABLE_QUESTION_ANSWERING_MAPPING",
  "models.auto.modeling_auto.MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING",
  "models.auto.modeling_auto.MODEL_MAPPING",
  "models.auto.modeling_auto.MODEL_WITH_LM_HEAD_MAPPING",
  "models.auto.modeling_tf_auto.TFAutoModel",
  "models.auto.modeling_tf_auto.TFAutoModel.from_pretrained",
  "models.auto.modeling_tf_auto.TFAutoModelForCausalLM",
  "models.auto.modeling_tf_auto.TFAutoModelForMaskedLM",
  "models.auto.modeling_tf_auto.TFAutoModelForQuestionAnswering",
  "models.auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM",
  "models.auto.modeling_tf_auto.TFAutoModelForSequenceClassification",
  "models.auto.modeling_tf_auto.TFAutoModelForTokenClassification",
  "models.auto.modeling_tf_auto.TF_MODEL_FOR_QUESTION_ANSWERING_MAPPING",
  "models.auto.modeling_tf_auto.TF_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING",
  "models.auto.modeling_tf_auto.TF_MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING",
  "models.auto.modeling_tf_auto.TF_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING",
  "models.auto.modeling_tf_auto.TF_MODEL_MAPPING",
  "models.auto.modeling_tf_auto.TF_MODEL_WITH_LM_HEAD_MAPPING",
  "models.auto.tokenization_auto.AutoTokenizer.from_pretrained",
  "models.bert.BasicTokenizer",
  "models.bert.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.bert.tokenization_bert.BasicTokenizer",
  "models.bert.tokenization_bert.whitespace_tokenize",
  "models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch",
  "models.lxmert.convert_lxmert_original_pytorch_checkpoint_to_pytorch.convert_lxmert_checkpoint_to_pytorch",
  "models.marian.MarianConfig.from_pretrained",
  "models.marian.MarianMTModel",
  "models.openai.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch",
  "models.t5.convert_t5_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch",
  "models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch",
  "models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch",
  "module",
  "module.bias",
  "module.bias.data.zero_",
  "module.weight.data.fill_",
  "module.weight.data.normal_",
  "mpnet.configuration_mpnet.MPNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "mpnet.configuration_mpnet.MPNetConfig",
  "mpnet.modeling_mpnet.MPNetForMaskedLM",
  "mpnet.modeling_mpnet.MPNetForMultipleChoice",
  "mpnet.modeling_mpnet.MPNetForQuestionAnswering",
  "mpnet.modeling_mpnet.MPNetForSequenceClassification",
  "mpnet.modeling_mpnet.MPNetForTokenClassification",
  "mpnet.modeling_mpnet.MPNetModel",
  "mpnet.modeling_tf_mpnet.TFMPNetForMaskedLM",
  "mpnet.modeling_tf_mpnet.TFMPNetForMultipleChoice",
  "mpnet.modeling_tf_mpnet.TFMPNetForQuestionAnswering",
  "mpnet.modeling_tf_mpnet.TFMPNetForSequenceClassification",
  "mpnet.modeling_tf_mpnet.TFMPNetForTokenClassification",
  "mpnet.modeling_tf_mpnet.TFMPNetModel",
  "mpnet.tokenization_mpnet.MPNetTokenizer",
  "mpnet.tokenization_mpnet_fast.MPNetTokenizerFast",
  "mt5.MT5Tokenizer",
  "mt5.MT5TokenizerFast",
  "mt5.configuration_mt5.MT5Config",
  "mt5.modeling_mt5.MT5ForConditionalGeneration",
  "mt5.modeling_mt5.MT5Model",
  "mt5.modeling_tf_mt5.TFMT5ForConditionalGeneration",
  "mt5.modeling_tf_mt5.TFMT5Model",
  "multiprocessing.Pipe",
  "multiprocessing.Pool",
  "multiprocessing.Process",
  "multiprocessing.Queue",
  "multiprocessing.connection.Connection",
  "multiprocessing.cpu_count",
  "nlp",
  "numbers.Number",
  "numpy.abs",
  "numpy.allclose",
  "numpy.amax",
  "numpy.append",
  "numpy.arange",
  "numpy.argmax",
  "numpy.argpartition",
  "numpy.argsort",
  "numpy.array",
  "numpy.asarray",
  "numpy.ceil",
  "numpy.concatenate",
  "numpy.cos",
  "numpy.cumsum",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.float32",
  "numpy.full_like",
  "numpy.greater",
  "numpy.hstack",
  "numpy.integer",
  "numpy.isscalar",
  "numpy.lcm",
  "numpy.less",
  "numpy.load",
  "numpy.log",
  "numpy.matmul",
  "numpy.mean",
  "numpy.nan",
  "numpy.nanmean",
  "numpy.ndarray",
  "numpy.newaxis",
  "numpy.nonzero",
  "numpy.ones",
  "numpy.ones_like",
  "numpy.power",
  "numpy.prod",
  "numpy.put",
  "numpy.random.normal",
  "numpy.random.permutation",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.random.shuffle",
  "numpy.reshape",
  "numpy.sin",
  "numpy.split",
  "numpy.sqrt",
  "numpy.squeeze",
  "numpy.sum",
  "numpy.transpose",
  "numpy.tril",
  "numpy.triu",
  "numpy.unique",
  "numpy.unravel_index",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "onnx.load",
  "onnx.save_model",
  "onnxruntime.InferenceSession",
  "onnxruntime.SessionOptions",
  "onnxruntime.__version__",
  "onnxruntime.capi.onnxruntime_pybind11_state.RuntimeException",
  "onnxruntime.quantization.QuantizationMode.IntegerOps",
  "onnxruntime.quantization.quantize",
  "openai.configuration_openai.OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "openai.configuration_openai.OpenAIGPTConfig",
  "openai.modeling_openai.OpenAIGPTForSequenceClassification",
  "openai.modeling_openai.OpenAIGPTLMHeadModel",
  "openai.modeling_openai.OpenAIGPTModel",
  "openai.modeling_tf_openai.TFOpenAIGPTForSequenceClassification",
  "openai.modeling_tf_openai.TFOpenAIGPTLMHeadModel",
  "openai.modeling_tf_openai.TFOpenAIGPTModel",
  "openai.tokenization_openai.OpenAIGPTTokenizer",
  "openai.tokenization_openai_fast.OpenAIGPTTokenizerFast",
  "operator",
  "operator.attrgetter",
  "operator.eq",
  "operator.ge",
  "operator.gt",
  "operator.le",
  "operator.lt",
  "operator.mul",
  "operator.ne",
  "optimization.Adafactor",
  "optimization.AdamW",
  "optimization.get_scheduler",
  "optimization_tf.GradientAccumulator",
  "optimization_tf.create_optimizer",
  "optimizer_cls",
  "optuna.Trial",
  "optuna.TrialPruned",
  "optuna.create_study",
  "os.DirEntry",
  "os.PathLike",
  "os.environ",
  "os.environ.copy",
  "os.environ.get",
  "os.fdopen",
  "os.fstat",
  "os.getcwd",
  "os.getenv",
  "os.getpid",
  "os.kill",
  "os.listdir",
  "os.makedirs",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.extsep.join",
  "os.path.getmtime",
  "os.path.getsize",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.path.split",
  "os.path.splitext",
  "os.remove",
  "os.rename",
  "os.replace",
  "os.rmdir",
  "os.scandir",
  "os.sep",
  "os.stat",
  "packaging.version.Version",
  "packaging.version.parse",
  "pandas.DataFrame",
  "pandas.Series",
  "pandas.read_csv",
  "pandas.to_datetime",
  "pathlib.Path",
  "pathlib.Path.home",
  "pegasus.configuration_pegasus.PegasusConfig",
  "pegasus.modeling_pegasus.PegasusForCausalLM",
  "pegasus.modeling_pegasus.PegasusForConditionalGeneration",
  "pegasus.modeling_pegasus.PegasusModel",
  "pegasus.modeling_tf_pegasus.TFPegasusForConditionalGeneration",
  "pegasus.modeling_tf_pegasus.TFPegasusModel",
  "pegasus.tokenization_pegasus.PegasusTokenizer",
  "pegasus.tokenization_pegasus_fast.PegasusTokenizerFast",
  "phobert.tokenization_phobert.PhobertTokenizer",
  "pickle.HIGHEST_PROTOCOL",
  "pickle.UnpicklingError",
  "pickle.dump",
  "pickle.load",
  "pipelines.Pipeline",
  "pipelines.PipelineDataFormat",
  "pipelines.PipelineDataFormat.SUPPORTED_FORMATS",
  "pipelines.PipelineDataFormat.from_str",
  "pipelines.SUPPORTED_TASKS.keys",
  "pipelines.TextClassificationPipeline.from_pretrained",
  "pipelines.pipeline",
  "pkg_resources.DistributionNotFound",
  "pkg_resources.VersionConflict",
  "pkg_resources.get_distribution",
  "platform.architecture",
  "platform.platform",
  "platform.processor",
  "platform.python_version",
  "platform.system",
  "pre_tok_class",
  "processor",
  "processors.glue.glue_convert_examples_to_features",
  "processors.glue.glue_output_modes",
  "processors.glue.glue_processors",
  "processors.glue.glue_processors.keys",
  "processors.squad.SquadFeatures",
  "processors.squad.SquadV1Processor",
  "processors.squad.SquadV2Processor",
  "processors.squad.squad_convert_examples_to_features",
  "processors.utils.InputFeatures",
  "project",
  "prophetnet.configuration_prophetnet.PROPHETNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "prophetnet.configuration_prophetnet.ProphetNetConfig",
  "prophetnet.modeling_prophetnet.ProphetNetDecoder",
  "prophetnet.modeling_prophetnet.ProphetNetEncoder",
  "prophetnet.modeling_prophetnet.ProphetNetForCausalLM",
  "prophetnet.modeling_prophetnet.ProphetNetForConditionalGeneration",
  "prophetnet.modeling_prophetnet.ProphetNetModel",
  "prophetnet.tokenization_prophetnet.ProphetNetTokenizer",
  "psutil.AccessDenied",
  "psutil.Process",
  "psutil.virtual_memory",
  "pt_model",
  "pt_model.dummy_inputs",
  "py3nvml.py3nvml.NVMLError",
  "py3nvml.py3nvml.nvmlDeviceGetCount",
  "py3nvml.py3nvml.nvmlDeviceGetHandleByIndex",
  "py3nvml.py3nvml.nvmlDeviceGetMemoryInfo",
  "py3nvml.py3nvml.nvmlDeviceGetName",
  "py3nvml.py3nvml.nvmlDeviceGetPerformanceState",
  "py3nvml.py3nvml.nvmlDeviceGetPowerManagementLimit",
  "py3nvml.py3nvml.nvmlInit",
  "py3nvml.py3nvml.nvmlShutdown",
  "pydantic.BaseModel",
  "pytest.mark.is_pipeline_test",
  "pytest.mark.is_pt_tf_cross_test",
  "pythainlp.tokenize.word_tokenize",
  "pytorch_lightning.LightningModule",
  "question_answering.QuestionAnsweringPipeline",
  "rag.configuration_rag.RagConfig",
  "rag.tokenization_rag.RagTokenizer",
  "random.Random",
  "random.randint",
  "random.random",
  "random.sample",
  "random.seed",
  "random.shuffle",
  "random.uniform",
  "ray.tune.CLIReporter",
  "ray.tune.checkpoint_dir",
  "ray.tune.choice",
  "ray.tune.get_trial_id",
  "ray.tune.loguniform",
  "ray.tune.report",
  "ray.tune.run",
  "ray.tune.schedulers.ASHAScheduler",
  "ray.tune.schedulers.HyperBandForBOHB",
  "ray.tune.schedulers.MedianStoppingRule",
  "ray.tune.schedulers.PopulationBasedTraining",
  "ray.tune.uniform",
  "ray.tune.with_parameters",
  "re.M",
  "re.S",
  "re.UNICODE",
  "re.compile",
  "re.escape",
  "re.findall",
  "re.fullmatch",
  "re.match",
  "re.search",
  "re.split",
  "re.sub",
  "reformer.configuration_reformer.ReformerConfig",
  "reformer.modeling_reformer.ReformerForMaskedLM",
  "reformer.modeling_reformer.ReformerForQuestionAnswering",
  "reformer.modeling_reformer.ReformerForSequenceClassification",
  "reformer.modeling_reformer.ReformerModel",
  "reformer.modeling_reformer.ReformerModelWithLMHead",
  "reformer.tokenization_reformer.ReformerTokenizer",
  "reformer.tokenization_reformer_fast.ReformerTokenizerFast",
  "regex.I",
  "regex.UNICODE",
  "regex.VERBOSE",
  "regex.compile",
  "regex.findall",
  "regex.sub",
  "remove_articles",
  "remove_copy_lines",
  "remove_punc",
  "replace",
  "replace_in_files",
  "repr.split",
  "requests.delete",
  "requests.exceptions.ConnectionError",
  "requests.exceptions.HTTPError",
  "requests.exceptions.Timeout",
  "requests.get",
  "requests.head",
  "requests.post",
  "requests.put",
  "retribert.configuration_retribert.RETRIBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "retribert.configuration_retribert.RetriBertConfig",
  "retribert.modeling_retribert.RetriBertModel",
  "retribert.tokenization_retribert.RetriBertTokenizer",
  "retribert.tokenization_retribert_fast.RetriBertTokenizerFast",
  "retrieval_rag.RagRetriever",
  "retriever",
  "roberta.configuration_roberta.ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "roberta.configuration_roberta.RobertaConfig",
  "roberta.modeling_flax_roberta.FlaxRobertaModel",
  "roberta.modeling_roberta.RobertaForCausalLM",
  "roberta.modeling_roberta.RobertaForMaskedLM",
  "roberta.modeling_roberta.RobertaForMultipleChoice",
  "roberta.modeling_roberta.RobertaForQuestionAnswering",
  "roberta.modeling_roberta.RobertaForSequenceClassification",
  "roberta.modeling_roberta.RobertaForTokenClassification",
  "roberta.modeling_roberta.RobertaModel",
  "roberta.modeling_tf_roberta.TFRobertaForMaskedLM",
  "roberta.modeling_tf_roberta.TFRobertaForMultipleChoice",
  "roberta.modeling_tf_roberta.TFRobertaForQuestionAnswering",
  "roberta.modeling_tf_roberta.TFRobertaForSequenceClassification",
  "roberta.modeling_tf_roberta.TFRobertaForTokenClassification",
  "roberta.modeling_tf_roberta.TFRobertaModel",
  "roberta.tokenization_roberta.RobertaTokenizer",
  "roberta.tokenization_roberta_fast.RobertaTokenizerFast",
  "run.RunCommand.register_subcommand",
  "run_hp_search",
  "sacremoses.MosesDetokenizer",
  "sacremoses.MosesPunctNormalizer",
  "sacremoses.MosesTokenizer",
  "schedule_func",
  "scipy.stats.pearsonr",
  "scipy.stats.spearmanr",
  "sentencepiece.SentencePieceProcessor",
  "serving.ServeCommand.register_subcommand",
  "shape",
  "shutil.copyfile",
  "shutil.copymode",
  "shutil.move",
  "shutil.rmtree",
  "signal.SIGKILL",
  "six.binary_type",
  "six.text_type",
  "six_ensure_text",
  "skip_units",
  "sklearn.metrics.f1_score",
  "sklearn.metrics.matthews_corrcoef",
  "smdistributed.dataparallel.torch.distributed.get_local_rank",
  "smdistributed.dataparallel.torch.distributed.get_world_size",
  "smdistributed.dataparallel.torch.distributed.init_process_group",
  "smdistributed.dataparallel.torch.parallel.distributed.DistributedDataParallel",
  "socket.gethostname",
  "spacy.lang.en.English",
  "split_on_token",
  "split_on_tokens",
  "squeezebert.configuration_squeezebert.SQUEEZEBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "squeezebert.configuration_squeezebert.SqueezeBertConfig",
  "squeezebert.modeling_squeezebert.SqueezeBertForMaskedLM",
  "squeezebert.modeling_squeezebert.SqueezeBertForMultipleChoice",
  "squeezebert.modeling_squeezebert.SqueezeBertForQuestionAnswering",
  "squeezebert.modeling_squeezebert.SqueezeBertForSequenceClassification",
  "squeezebert.modeling_squeezebert.SqueezeBertForTokenClassification",
  "squeezebert.modeling_squeezebert.SqueezeBertModel",
  "squeezebert.tokenization_squeezebert.SqueezeBertTokenizer",
  "squeezebert.tokenization_squeezebert_fast.SqueezeBertTokenizerFast",
  "starlette.responses.JSONResponse",
  "str.strip",
  "string.punctuation",
  "subprocess.check_output",
  "subprocess.run",
  "summary_failures_short",
  "sys.argv",
  "sys.exit",
  "sys.maxsize",
  "sys.modules",
  "sys.modules.get_ipython",
  "sys.modules.word_tokenize",
  "sys.platform",
  "sys.settrace",
  "sys.stderr",
  "sys.stderr.flush",
  "sys.stdin",
  "sys.stdin.readline",
  "sys.stdout",
  "sys.stdout.flush",
  "sys.stdout.write",
  "sys.version.split",
  "sys.version_info",
  "t5.configuration_t5.T5Config",
  "t5.configuration_t5.T5_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "t5.modeling_t5.T5EncoderModel",
  "t5.modeling_t5.T5ForConditionalGeneration",
  "t5.modeling_t5.T5Model",
  "t5.modeling_tf_t5.TFT5EncoderModel",
  "t5.modeling_tf_t5.TFT5ForConditionalGeneration",
  "t5.modeling_tf_t5.TFT5Model",
  "t5.tokenization_t5.T5Tokenizer",
  "t5.tokenization_t5_fast.T5TokenizerFast",
  "table_question_answering.TableQuestionAnsweringPipeline",
  "tapas.configuration_tapas.TAPAS_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "tapas.configuration_tapas.TapasConfig",
  "tapas.modeling_tapas.TapasForMaskedLM",
  "tapas.modeling_tapas.TapasForQuestionAnswering",
  "tapas.modeling_tapas.TapasForSequenceClassification",
  "tapas.modeling_tapas.TapasModel",
  "tapas.tokenization_tapas.TapasTokenizer",
  "tarfile.is_tarfile",
  "tarfile.open",
  "task_class",
  "temp_file_manager",
  "tempfile.NamedTemporaryFile",
  "tempfile.TemporaryDirectory",
  "tempfile.mkdtemp",
  "tempfile.mkstemp",
  "tensorboardX.SummaryWriter",
  "tensorflow.Session",
  "tensorflow.Tensor",
  "tensorflow.TensorShape",
  "tensorflow.TensorSpec",
  "tensorflow.Variable",
  "tensorflow.VariableAggregation.ONLY_FIRST_REPLICA",
  "tensorflow.VariableSynchronization.ON_READ",
  "tensorflow.__version__",
  "tensorflow.add",
  "tensorflow.argsort",
  "tensorflow.bfloat16",
  "tensorflow.bool",
  "tensorflow.boolean_mask",
  "tensorflow.broadcast_to",
  "tensorflow.cast",
  "tensorflow.clip_by_value",
  "tensorflow.compat.v1.Session",
  "tensorflow.compat.v1.disable_eager_execution",
  "tensorflow.compat.v1.global_variables_initializer",
  "tensorflow.compat.v1.variable_scope",
  "tensorflow.concat",
  "tensorflow.cond",
  "tensorflow.config.experimental.set_memory_growth",
  "tensorflow.config.experimental_connect_to_cluster",
  "tensorflow.config.list_physical_devices",
  "tensorflow.config.optimizer.set_jit",
  "tensorflow.config.set_visible_devices",
  "tensorflow.constant",
  "tensorflow.control_dependencies",
  "tensorflow.convert_to_tensor",
  "tensorflow.cos",
  "tensorflow.data.Dataset",
  "tensorflow.data.Dataset.from_generator",
  "tensorflow.data.experimental.AUTOTUNE",
  "tensorflow.debugging.assert_equal",
  "tensorflow.debugging.assert_greater_equal",
  "tensorflow.device",
  "tensorflow.distribute.MirroredStrategy",
  "tensorflow.distribute.OneDeviceStrategy",
  "tensorflow.distribute.TPUStrategy",
  "tensorflow.distribute.cluster_resolver.TPUClusterResolver",
  "tensorflow.dtypes.as_dtype",
  "tensorflow.dtypes.cast",
  "tensorflow.dtypes.float32",
  "tensorflow.dtypes.int32",
  "tensorflow.einsum",
  "tensorflow.equal",
  "tensorflow.executing_eagerly",
  "tensorflow.expand_dims",
  "tensorflow.eye",
  "tensorflow.fill",
  "tensorflow.float16",
  "tensorflow.float32",
  "tensorflow.function",
  "tensorflow.gather",
  "tensorflow.gather_nd",
  "tensorflow.get_logger",
  "tensorflow.get_variable",
  "tensorflow.gradients",
  "tensorflow.identity",
  "tensorflow.image.extract_patches",
  "tensorflow.initializers.TruncatedNormal",
  "tensorflow.int32",
  "tensorflow.int64",
  "tensorflow.int8",
  "tensorflow.is_tensor",
  "tensorflow.keras.Model",
  "tensorflow.keras.activations.gelu",
  "tensorflow.keras.activations.relu",
  "tensorflow.keras.activations.swish",
  "tensorflow.keras.activations.tanh",
  "tensorflow.keras.backend.set_value",
  "tensorflow.keras.initializers.TruncatedNormal",
  "tensorflow.keras.layers.Add",
  "tensorflow.keras.layers.Dense",
  "tensorflow.keras.layers.Dropout",
  "tensorflow.keras.layers.Embedding",
  "tensorflow.keras.layers.Layer",
  "tensorflow.keras.layers.LayerNormalization",
  "tensorflow.keras.layers.SeparableConv1D",
  "tensorflow.keras.layers.experimental.EinsumDense",
  "tensorflow.keras.losses.Huber",
  "tensorflow.keras.losses.MeanSquaredError",
  "tensorflow.keras.losses.Reduction.NONE",
  "tensorflow.keras.losses.SparseCategoricalCrossentropy",
  "tensorflow.keras.metrics.Sum",
  "tensorflow.keras.mixed_precision.experimental.Policy",
  "tensorflow.keras.mixed_precision.experimental.set_policy",
  "tensorflow.keras.optimizers.Adam",
  "tensorflow.keras.optimizers.Optimizer",
  "tensorflow.keras.optimizers.schedules.LearningRateSchedule",
  "tensorflow.keras.optimizers.schedules.PolynomialDecay",
  "tensorflow.keras.utils",
  "tensorflow.keras.utils.register_keras_serializable",
  "tensorflow.less_equal",
  "tensorflow.linalg.band_part",
  "tensorflow.logical_not",
  "tensorflow.logical_or",
  "tensorflow.map_fn",
  "tensorflow.math.abs",
  "tensorflow.math.argmax",
  "tensorflow.math.cumsum",
  "tensorflow.math.divide",
  "tensorflow.math.erf",
  "tensorflow.math.greater",
  "tensorflow.math.less",
  "tensorflow.math.log",
  "tensorflow.math.logical_not",
  "tensorflow.math.maximum",
  "tensorflow.math.minimum",
  "tensorflow.math.multiply",
  "tensorflow.math.not_equal",
  "tensorflow.math.pow",
  "tensorflow.math.reduce_any",
  "tensorflow.math.reduce_max",
  "tensorflow.math.reduce_mean",
  "tensorflow.math.reduce_min",
  "tensorflow.math.rsqrt",
  "tensorflow.math.softplus",
  "tensorflow.math.sqrt",
  "tensorflow.math.square",
  "tensorflow.math.top_k",
  "tensorflow.matmul",
  "tensorflow.matrix_band_part",
  "tensorflow.minimum",
  "tensorflow.multiply",
  "tensorflow.name_scope",
  "tensorflow.newaxis",
  "tensorflow.nn.avg_pool1d",
  "tensorflow.nn.bias_add",
  "tensorflow.nn.log_softmax",
  "tensorflow.nn.max_pool1d",
  "tensorflow.nn.relu",
  "tensorflow.nn.softmax",
  "tensorflow.nn.sparse_softmax_cross_entropy_with_logits",
  "tensorflow.nn.top_k",
  "tensorflow.no_op",
  "tensorflow.not_equal",
  "tensorflow.one_hot",
  "tensorflow.ones",
  "tensorflow.ones_like",
  "tensorflow.pad",
  "tensorflow.pow",
  "tensorflow.python.distribute.values.PerReplica",
  "tensorflow.python.eager.context.context",
  "tensorflow.python.framework.errors_impl.ResourceExhaustedError",
  "tensorflow.python.keras.backend.batch_set_value",
  "tensorflow.python.keras.backend.int_shape",
  "tensorflow.python.keras.saving.hdf5_format.load_attributes_from_hdf5_group",
  "tensorflow.random.categorical",
  "tensorflow.random.set_seed",
  "tensorflow.random.uniform",
  "tensorflow.range",
  "tensorflow.rank",
  "tensorflow.reduce_all",
  "tensorflow.reduce_any",
  "tensorflow.reduce_max",
  "tensorflow.reduce_mean",
  "tensorflow.reduce_min",
  "tensorflow.reduce_sum",
  "tensorflow.repeat",
  "tensorflow.reset_default_graph",
  "tensorflow.reshape",
  "tensorflow.reverse",
  "tensorflow.roll",
  "tensorflow.scatter_nd",
  "tensorflow.shape",
  "tensorflow.signal.frame",
  "tensorflow.sin",
  "tensorflow.slice",
  "tensorflow.split",
  "tensorflow.sqrt",
  "tensorflow.squeeze",
  "tensorflow.stack",
  "tensorflow.stop_gradient",
  "tensorflow.strided_slice",
  "tensorflow.string",
  "tensorflow.subtract",
  "tensorflow.summary.SummaryWriter",
  "tensorflow.summary.create_file_writer",
  "tensorflow.summary.experimental.set_step",
  "tensorflow.summary.scalar",
  "tensorflow.summary.text",
  "tensorflow.summary.trace_export",
  "tensorflow.summary.trace_on",
  "tensorflow.tanh",
  "tensorflow.tensor_scatter_nd_update",
  "tensorflow.test.is_gpu_available",
  "tensorflow.tile",
  "tensorflow.tpu.experimental.initialize_tpu_system",
  "tensorflow.train.Checkpoint",
  "tensorflow.train.CheckpointManager",
  "tensorflow.train.Saver",
  "tensorflow.train.list_variables",
  "tensorflow.train.load_variable",
  "tensorflow.trainable_variables",
  "tensorflow.transpose",
  "tensorflow.tuple",
  "tensorflow.unstack",
  "tensorflow.variables_initializer",
  "tensorflow.version.VERSION",
  "tensorflow.where",
  "tensorflow.zeros",
  "tensorflow.zeros_initializer",
  "tensorflow.zeros_like",
  "tensorflow_hub.Module",
  "testing_utils.require_torch",
  "text2text_generation.SummarizationPipeline",
  "text2text_generation.Text2TextGenerationPipeline",
  "text2text_generation.TranslationPipeline",
  "text_classification.TextClassificationPipeline",
  "text_generation.TextGenerationPipeline",
  "tf_model",
  "tf_model.dummy_inputs",
  "tf_model.save_weights",
  "tf_model.weights",
  "tf_model_class",
  "threading.Lock",
  "tie_encoder_to_decoder_recursively",
  "time.strftime",
  "time.time",
  "timeit.repeat",
  "timeout_decorator.timeout",
  "to_tf_var_name",
  "token_classification.TokenClassificationPipeline",
  "tokenization_albert.AlbertTokenizer",
  "tokenization_bart.BartTokenizer",
  "tokenization_barthez.BarthezTokenizer",
  "tokenization_bert.BertTokenizer",
  "tokenization_blenderbot_small.BlenderbotSmallTokenizer",
  "tokenization_camembert.CamembertTokenizer",
  "tokenization_convbert.ConvBertTokenizer",
  "tokenization_distilbert.DistilBertTokenizer",
  "tokenization_dpr.DPRContextEncoderTokenizer",
  "tokenization_dpr.DPRQuestionEncoderTokenizer",
  "tokenization_dpr.DPRReaderTokenizer",
  "tokenization_electra.ElectraTokenizer",
  "tokenization_funnel.FunnelTokenizer",
  "tokenization_gpt2.GPT2Tokenizer",
  "tokenization_herbert.HerbertTokenizer",
  "tokenization_herbert.PRETRAINED_INIT_CONFIGURATION",
  "tokenization_herbert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "tokenization_herbert.PRETRAINED_VOCAB_FILES_MAP",
  "tokenization_layoutlm.LayoutLMTokenizer",
  "tokenization_led.LEDTokenizer",
  "tokenization_longformer.LongformerTokenizer",
  "tokenization_lxmert.LxmertTokenizer",
  "tokenization_mbart.MBartTokenizer",
  "tokenization_mobilebert.MobileBertTokenizer",
  "tokenization_mpnet.MPNetTokenizer",
  "tokenization_openai.OpenAIGPTTokenizer",
  "tokenization_pegasus.PegasusTokenizer",
  "tokenization_rag.RagTokenizer",
  "tokenization_rag.RagTokenizer.from_pretrained",
  "tokenization_reformer.ReformerTokenizer",
  "tokenization_retribert.RetriBertTokenizer",
  "tokenization_roberta.RobertaTokenizer",
  "tokenization_squeezebert.SqueezeBertTokenizer",
  "tokenization_t5.T5Tokenizer",
  "tokenization_utils.AddedToken",
  "tokenization_utils.BatchEncoding",
  "tokenization_utils.PreTrainedTokenizer",
  "tokenization_utils.TruncationStrategy.DO_NOT_TRUNCATE",
  "tokenization_utils.TruncationStrategy.ONLY_FIRST",
  "tokenization_utils._is_control",
  "tokenization_utils._is_punctuation",
  "tokenization_utils._is_whitespace",
  "tokenization_utils_base.AddedToken",
  "tokenization_utils_base.BatchEncoding",
  "tokenization_utils_base.ENCODE_KWARGS_DOCSTRING",
  "tokenization_utils_base.ENCODE_PLUS_ADDITIONAL_KWARGS_DOCSTRING",
  "tokenization_utils_base.EncodedInput",
  "tokenization_utils_base.EncodedInputPair",
  "tokenization_utils_base.ExplicitEnum",
  "tokenization_utils_base.INIT_TOKENIZER_DOCSTRING",
  "tokenization_utils_base.PaddingStrategy",
  "tokenization_utils_base.PaddingStrategy.DO_NOT_PAD",
  "tokenization_utils_base.PaddingStrategy.DO_NOT_PAD.value",
  "tokenization_utils_base.PaddingStrategy.LONGEST",
  "tokenization_utils_base.PaddingStrategy.MAX_LENGTH",
  "tokenization_utils_base.PaddingStrategy.MAX_LENGTH.value",
  "tokenization_utils_base.PreTokenizedInput",
  "tokenization_utils_base.PreTokenizedInputPair",
  "tokenization_utils_base.PreTrainedTokenizerBase",
  "tokenization_utils_base.TensorType",
  "tokenization_utils_base.TextInput",
  "tokenization_utils_base.TextInputPair",
  "tokenization_utils_base.TruncationStrategy",
  "tokenization_utils_base.TruncationStrategy.DO_NOT_TRUNCATE",
  "tokenization_utils_base.TruncationStrategy.ONLY_FIRST.value",
  "tokenization_utils_base.TruncationStrategy.ONLY_SECOND.value",
  "tokenization_utils_fast.PreTrainedTokenizerFast",
  "tokenization_xlm_roberta.XLMRobertaTokenizer",
  "tokenization_xlnet.XLNetTokenizer",
  "tokenizers.AddedToken",
  "tokenizers.ByteLevelBPETokenizer",
  "tokenizers.Encoding",
  "tokenizers.Regex",
  "tokenizers.Tokenizer",
  "tokenizers.Tokenizer.from_file",
  "tokenizers.decoders.BPEDecoder",
  "tokenizers.decoders.ByteLevel",
  "tokenizers.decoders.Decoder",
  "tokenizers.decoders.Metaspace",
  "tokenizers.decoders.WordPiece",
  "tokenizers.models.BPE",
  "tokenizers.models.Unigram",
  "tokenizers.models.WordPiece",
  "tokenizers.normalizers",
  "tokenizers.normalizers.BertNormalizer",
  "tokenizers.normalizers.Lowercase",
  "tokenizers.normalizers.NFKD",
  "tokenizers.normalizers.Precompiled",
  "tokenizers.normalizers.Replace",
  "tokenizers.normalizers.Sequence",
  "tokenizers.normalizers.StripAccents",
  "tokenizers.pre_tokenizers",
  "tokenizers.pre_tokenizers.BertPreTokenizer",
  "tokenizers.pre_tokenizers.ByteLevel",
  "tokenizers.pre_tokenizers.Metaspace",
  "tokenizers.pre_tokenizers.Sequence",
  "tokenizers.pre_tokenizers.WhitespaceSplit",
  "tokenizers.processors.BertProcessing",
  "tokenizers.processors.ByteLevel",
  "tokenizers.processors.RobertaProcessing",
  "tokenizers.processors.TemplateProcessing",
  "torch.BoolTensor",
  "torch.FloatTensor",
  "torch.Generator",
  "torch.LongTensor",
  "torch.Size",
  "torch.Tensor",
  "torch.__version__",
  "torch._softmax_backward_data",
  "torch.abs",
  "torch.addmm",
  "torch.all",
  "torch.allclose",
  "torch.arange",
  "torch.argmax",
  "torch.argsort",
  "torch.as_tensor",
  "torch.autograd.Function",
  "torch.autograd.function.Function",
  "torch.bernoulli",
  "torch.bfloat16",
  "torch.bincount",
  "torch.bmm",
  "torch.bool",
  "torch.cat",
  "torch.chunk",
  "torch.clamp",
  "torch.cos",
  "torch.cuda",
  "torch.cuda.amp.GradScaler",
  "torch.cuda.amp.autocast",
  "torch.cuda.current_device",
  "torch.cuda.default_generators",
  "torch.cuda.default_generators.seed",
  "torch.cuda.device_count",
  "torch.cuda.empty_cache",
  "torch.cuda.is_available",
  "torch.cuda.manual_seed_all",
  "torch.cuda.set_device",
  "torch.cumsum",
  "torch.device",
  "torch.distributed.all_gather",
  "torch.distributed.barrier",
  "torch.distributed.get_local_rank",
  "torch.distributed.get_rank",
  "torch.distributed.get_world_size",
  "torch.distributed.init_process_group",
  "torch.distributed.is_available",
  "torch.distributions.Bernoulli",
  "torch.distributions.Categorical",
  "torch.distributions.RelaxedBernoulli",
  "torch.distributions.RelaxedOneHotCategorical",
  "torch.distributions.categorical.Categorical",
  "torch.dtype",
  "torch.einsum",
  "torch.empty",
  "torch.empty_like",
  "torch.enable_grad",
  "torch.eq",
  "torch.erf",
  "torch.exp",
  "torch.eye",
  "torch.finfo",
  "torch.flatten",
  "torch.float",
  "torch.float16",
  "torch.float32",
  "torch.fmod",
  "torch.from_numpy",
  "torch.full",
  "torch.full_like",
  "torch.gather",
  "torch.ge",
  "torch.ger",
  "torch.hub.load",
  "torch.index_select",
  "torch.int32",
  "torch.int64",
  "torch.is_tensor",
  "torch.isinf",
  "torch.isnan",
  "torch.jit.script",
  "torch.jit.trace",
  "torch.load",
  "torch.log",
  "torch.log_softmax",
  "torch.logical_and",
  "torch.logical_not",
  "torch.logsumexp",
  "torch.long",
  "torch.lt",
  "torch.manual_seed",
  "torch.masked_fill",
  "torch.matmul",
  "torch.max",
  "torch.mean",
  "torch.min",
  "torch.mm",
  "torch.multinomial",
  "torch.multiply",
  "torch.ne",
  "torch.nn.AdaptiveLogSoftmaxWithLoss",
  "torch.nn.BCEWithLogitsLoss",
  "torch.nn.Conv1d",
  "torch.nn.CrossEntropyLoss",
  "torch.nn.DataParallel",
  "torch.nn.Dropout",
  "torch.nn.Embedding",
  "torch.nn.GroupNorm",
  "torch.nn.Identity",
  "torch.nn.LayerNorm",
  "torch.nn.LayerNorm.__init__",
  "torch.nn.LayerNorm.forward",
  "torch.nn.Linear",
  "torch.nn.LogSoftmax",
  "torch.nn.MSELoss",
  "torch.nn.Module",
  "torch.nn.ModuleDict",
  "torch.nn.ModuleList",
  "torch.nn.Parameter",
  "torch.nn.ParameterList",
  "torch.nn.ReLU",
  "torch.nn.Sequential",
  "torch.nn.SmoothL1Loss",
  "torch.nn.Softmax",
  "torch.nn.Tanh",
  "torch.nn.Unfold",
  "torch.nn.functional.avg_pool2d",
  "torch.nn.functional.cross_entropy",
  "torch.nn.functional.dropout",
  "torch.nn.functional.dropout2d",
  "torch.nn.functional.gelu",
  "torch.nn.functional.linear",
  "torch.nn.functional.log_softmax",
  "torch.nn.functional.max_pool2d",
  "torch.nn.functional.nll_loss",
  "torch.nn.functional.one_hot",
  "torch.nn.functional.pad",
  "torch.nn.functional.relu",
  "torch.nn.functional.silu",
  "torch.nn.functional.softmax",
  "torch.nn.functional.softplus",
  "torch.nn.functional.unfold",
  "torch.nn.init.constant_",
  "torch.nn.init.kaiming_normal_",
  "torch.nn.init.normal_",
  "torch.nn.init.uniform_",
  "torch.nn.parallel.DistributedDataParallel",
  "torch.nn.parameter.Parameter",
  "torch.nn.utils.clip_grad_norm_",
  "torch.nn.utils.rnn.pad_sequence",
  "torch.nn.utils.weight_norm",
  "torch.no_grad",
  "torch.nonzero",
  "torch.ones",
  "torch.ones_like",
  "torch.onnx.export",
  "torch.optim.Optimizer",
  "torch.optim.lr_scheduler.LambdaLR",
  "torch.optim.lr_scheduler.SAVE_STATE_WARNING",
  "torch.pow",
  "torch.prod",
  "torch.rand",
  "torch.randint",
  "torch.randn",
  "torch.randperm",
  "torch.repeat_interleave",
  "torch.reshape",
  "torch.rsqrt",
  "torch.save",
  "torch.seed",
  "torch.serialization.default_restore_location",
  "torch.sigmoid",
  "torch.sin",
  "torch.softmax",
  "torch.sort",
  "torch.sparse.LongTensor",
  "torch.split",
  "torch.sqrt",
  "torch.square",
  "torch.stack",
  "torch.sum",
  "torch.tanh",
  "torch.tensor",
  "torch.topk",
  "torch.tril",
  "torch.triu",
  "torch.uint8",
  "torch.unique",
  "torch.unsqueeze",
  "torch.utils.checkpoint.checkpoint",
  "torch.utils.data.IterableDataset",
  "torch.utils.data.TensorDataset",
  "torch.utils.data.dataloader.DataLoader",
  "torch.utils.data.dataset.Dataset",
  "torch.utils.data.distributed.DistributedSampler",
  "torch.utils.data.sampler.RandomSampler",
  "torch.utils.data.sampler.Sampler",
  "torch.utils.data.sampler.SequentialSampler",
  "torch.utils.tensorboard.SummaryWriter",
  "torch.where",
  "torch.zeros",
  "torch.zeros_like",
  "torch_scatter.scatter",
  "torch_xla.core.xla_model.get_ordinal",
  "torch_xla.core.xla_model.is_master_ordinal",
  "torch_xla.core.xla_model.master_print",
  "torch_xla.core.xla_model.mesh_reduce",
  "torch_xla.core.xla_model.optimizer_step",
  "torch_xla.core.xla_model.rendezvous",
  "torch_xla.core.xla_model.save",
  "torch_xla.core.xla_model.send_cpu_data_to_device",
  "torch_xla.core.xla_model.xla_device",
  "torch_xla.core.xla_model.xrt_world_size",
  "torch_xla.debug.metrics.metrics_report",
  "torch_xla.distributed.parallel_loader.ParallelLoader",
  "tqdm.auto.tqdm",
  "tqdm.tqdm",
  "train_model",
  "trainer.Trainer",
  "trainer_callback.CallbackHandler",
  "trainer_callback.DefaultFlowCallback",
  "trainer_callback.PrinterCallback",
  "trainer_callback.ProgressCallback",
  "trainer_callback.TrainerCallback",
  "trainer_callback.TrainerControl",
  "trainer_callback.TrainerState",
  "trainer_callback.TrainerState.load_from_json",
  "trainer_pt_utils.DistributedLengthGroupedSampler",
  "trainer_pt_utils.DistributedTensorGatherer",
  "trainer_pt_utils.LabelSmoother",
  "trainer_pt_utils.LengthGroupedSampler",
  "trainer_pt_utils.SequentialDistributedSampler",
  "trainer_pt_utils.distributed_broadcast_scalars",
  "trainer_pt_utils.distributed_concat",
  "trainer_pt_utils.nested_concat",
  "trainer_pt_utils.nested_detach",
  "trainer_pt_utils.nested_numpify",
  "trainer_pt_utils.nested_xla_mesh_reduce",
  "trainer_pt_utils.reissue_pt_warnings",
  "trainer_utils.BestRun",
  "trainer_utils.EvalPrediction",
  "trainer_utils.EvaluationStrategy",
  "trainer_utils.EvaluationStrategy.EPOCH",
  "trainer_utils.EvaluationStrategy.NO",
  "trainer_utils.EvaluationStrategy.STEPS",
  "trainer_utils.HPSearchBackend",
  "trainer_utils.HPSearchBackend.OPTUNA",
  "trainer_utils.HPSearchBackend.RAY",
  "trainer_utils.PREFIX_CHECKPOINT_DIR",
  "trainer_utils.PredictionOutput",
  "trainer_utils.SchedulerType",
  "trainer_utils.SchedulerType.CONSTANT",
  "trainer_utils.SchedulerType.CONSTANT_WITH_WARMUP",
  "trainer_utils.SchedulerType.COSINE",
  "trainer_utils.SchedulerType.COSINE_WITH_RESTARTS",
  "trainer_utils.SchedulerType.LINEAR",
  "trainer_utils.SchedulerType.POLYNOMIAL",
  "trainer_utils.TrainOutput",
  "trainer_utils.default_compute_objective",
  "trainer_utils.default_hp_space",
  "trainer_utils.set_seed",
  "trainer_utils.speed_metrics",
  "training_args.ParallelMode.DISTRIBUTED",
  "training_args.ParallelMode.SAGEMAKER_DISTRIBUTED",
  "training_args.ParallelMode.TPU",
  "training_args.TrainingArguments",
  "training_args.TrainingArguments.__doc__",
  "training_args_tf.TFTrainingArguments",
  "transfo_xl.configuration_transfo_xl.TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transfo_xl.configuration_transfo_xl.TransfoXLConfig",
  "transfo_xl.modeling_tf_transfo_xl.TFTransfoXLForSequenceClassification",
  "transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel",
  "transfo_xl.modeling_tf_transfo_xl.TFTransfoXLModel",
  "transfo_xl.modeling_transfo_xl.TransfoXLForSequenceClassification",
  "transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModel",
  "transfo_xl.modeling_transfo_xl.TransfoXLModel",
  "transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer",
  "transfomers.models.fsmt.tokenization_fsmt.VOCAB_FILES_NAMES",
  "transformers.AlbertConfig.from_json_file",
  "transformers.AlbertForPreTraining",
  "transformers.BartConfig.from_json_file",
  "transformers.BartConfig.from_pretrained",
  "transformers.BartForConditionalGeneration",
  "transformers.BartForSequenceClassification",
  "transformers.BartModel",
  "transformers.BartTokenizer.from_pretrained",
  "transformers.BertConfig.from_json_file",
  "transformers.BertConfig.get_config_dict",
  "transformers.BertForPreTraining",
  "transformers.BertModel",
  "transformers.BertModel.from_pretrained",
  "transformers.ConvBertConfig.from_json_file",
  "transformers.ConvBertModel",
  "transformers.DPRConfig",
  "transformers.DPRContextEncoder",
  "transformers.DPRQuestionEncoder",
  "transformers.DPRReader",
  "transformers.ElectraConfig.from_json_file",
  "transformers.ElectraForMaskedLM",
  "transformers.ElectraForPreTraining",
  "transformers.FSMTConfig.from_pretrained",
  "transformers.FSMTForConditionalGeneration",
  "transformers.FunnelBaseModel",
  "transformers.FunnelConfig.from_json_file",
  "transformers.FunnelModel",
  "transformers.GPT2Config",
  "transformers.GPT2Config.from_json_file",
  "transformers.GPT2Model",
  "transformers.LongformerForQuestionAnswering.from_pretrained",
  "transformers.LongformerModel.from_pretrained",
  "transformers.LxmertConfig.from_json_file",
  "transformers.LxmertForPreTraining",
  "transformers.MBartConfig.from_pretrained",
  "transformers.MarianConfig",
  "transformers.MarianMTModel",
  "transformers.MarianTokenizer.from_pretrained",
  "transformers.MobileBertConfig.from_json_file",
  "transformers.MobileBertForPreTraining",
  "transformers.OpenAIGPTConfig",
  "transformers.OpenAIGPTConfig.from_json_file",
  "transformers.OpenAIGPTModel",
  "transformers.PegasusConfig",
  "transformers.PegasusForConditionalGeneration",
  "transformers.PegasusTokenizer.from_pretrained",
  "transformers.ReformerConfig.from_json_file",
  "transformers.ReformerModelWithLMHead",
  "transformers.RobertaConfig",
  "transformers.RobertaForMaskedLM",
  "transformers.RobertaForSequenceClassification",
  "transformers.T5Config.from_json_file",
  "transformers.T5ForConditionalGeneration",
  "transformers.TapasConfig.from_json_file",
  "transformers.TapasForMaskedLM",
  "transformers.TapasForQuestionAnswering",
  "transformers.TapasForSequenceClassification",
  "transformers.TapasModel",
  "transformers.TapasTokenizer",
  "transformers.TransfoXLConfig",
  "transformers.TransfoXLConfig.from_json_file",
  "transformers.TransfoXLLMHeadModel",
  "transformers.Wav2Vec2Config",
  "transformers.Wav2Vec2ForCTC",
  "transformers.XLNetConfig.from_json_file",
  "transformers.XLNetForQuestionAnswering",
  "transformers.XLNetForSequenceClassification",
  "transformers.XLNetLMHeadModel",
  "transformers._LazyModule",
  "transformers.__version__",
  "transformers._import_structure",
  "transformers.activations.ACT2FN",
  "transformers.activations._gelu_python",
  "transformers.activations._silu_python",
  "transformers.activations.gelu",
  "transformers.activations.gelu_fast",
  "transformers.activations.gelu_new",
  "transformers.activations.linear_act",
  "transformers.activations.mish",
  "transformers.activations.silu",
  "transformers.activations_tf.ACT2FN",
  "transformers.activations_tf._gelu",
  "transformers.activations_tf._gelu_new",
  "transformers.activations_tf.approximate_gelu_wrap",
  "transformers.activations_tf.gelu",
  "transformers.activations_tf.gelu_fast",
  "transformers.activations_tf.gelu_new",
  "transformers.activations_tf.mish",
  "transformers.benchmark.benchmark.logger",
  "transformers.benchmark.benchmark_args.logger",
  "transformers.benchmark.benchmark_args_tf.logger",
  "transformers.benchmark.benchmark_args_utils.list_field",
  "transformers.benchmark.benchmark_args_utils.logger",
  "transformers.benchmark.benchmark_tf.logger",
  "transformers.benchmark.benchmark_tf.random_input_ids",
  "transformers.benchmark.benchmark_tf.run_with_tf_optimizations",
  "transformers.benchmark.benchmark_utils.BenchmarkOutput",
  "transformers.benchmark.benchmark_utils.Frame",
  "transformers.benchmark.benchmark_utils.Memory",
  "transformers.benchmark.benchmark_utils.MemoryState",
  "transformers.benchmark.benchmark_utils.MemorySummary",
  "transformers.benchmark.benchmark_utils.MemoryTrace",
  "transformers.benchmark.benchmark_utils.PretrainedConfig",
  "transformers.benchmark.benchmark_utils.UsedMemoryState",
  "transformers.benchmark.benchmark_utils._is_memory_tracing_enabled",
  "transformers.benchmark.benchmark_utils.bytes_to_mega_bytes",
  "transformers.benchmark.benchmark_utils.logger",
  "transformers.benchmark.benchmark_utils.separate_process_wrapper_fn",
  "transformers.commands.add_new_model.AddNewModelCommand",
  "transformers.commands.add_new_model.BaseTransformersCLICommand",
  "transformers.commands.add_new_model._has_cookiecutter",
  "transformers.commands.add_new_model.add_new_model_command_factory",
  "transformers.commands.convert.BaseTransformersCLICommand",
  "transformers.commands.convert.ConvertCommand",
  "transformers.commands.convert.IMPORT_ERROR_MESSAGE",
  "transformers.commands.convert.convert_command_factory",
  "transformers.commands.download.BaseTransformersCLICommand",
  "transformers.commands.download.DownloadCommand",
  "transformers.commands.download.download_command_factory",
  "transformers.commands.env.BaseTransformersCLICommand",
  "transformers.commands.env.EnvironmentCommand",
  "transformers.commands.env.info_command_factory",
  "transformers.commands.lfs.BaseTransformersCLICommand",
  "transformers.commands.lfs.FileSlice",
  "transformers.commands.lfs.LFS_MULTIPART_UPLOAD_COMMAND",
  "transformers.commands.lfs.LfsEnableCommand",
  "transformers.commands.lfs.LfsUploadCommand",
  "transformers.commands.lfs.logger",
  "transformers.commands.lfs.read_msg",
  "transformers.commands.lfs.write_msg",
  "transformers.commands.run.BaseTransformersCLICommand",
  "transformers.commands.run.RunCommand",
  "transformers.commands.run.logger",
  "transformers.commands.run.run_command_factory",
  "transformers.commands.run.try_infer_format_from_ext",
  "transformers.commands.serving.BaseTransformersCLICommand",
  "transformers.commands.serving.ServeCommand",
  "transformers.commands.serving.ServeDeTokenizeResult",
  "transformers.commands.serving.ServeForwardResult",
  "transformers.commands.serving.ServeModelInfoResult",
  "transformers.commands.serving.ServeTokenizeResult",
  "transformers.commands.serving._serve_dependencies_installed",
  "transformers.commands.serving.logger",
  "transformers.commands.serving.serve_command_factory",
  "transformers.commands.train.BaseTransformersCLICommand",
  "transformers.commands.train.TrainCommand",
  "transformers.commands.train.train_command_factory",
  "transformers.commands.transformers_cli.main",
  "transformers.commands.user.ANSI",
  "transformers.commands.user.BaseTransformersCLICommand",
  "transformers.commands.user.BaseUserCommand",
  "transformers.commands.user.DeleteObjCommand",
  "transformers.commands.user.DeprecatedUploadCommand",
  "transformers.commands.user.ListObjsCommand",
  "transformers.commands.user.ListReposObjsCommand",
  "transformers.commands.user.LoginCommand",
  "transformers.commands.user.LogoutCommand",
  "transformers.commands.user.RepoCreateCommand",
  "transformers.commands.user.UPLOAD_MAX_FILES",
  "transformers.commands.user.UploadCommand",
  "transformers.commands.user.WhoamiCommand",
  "transformers.commands.user.tabulate",
  "transformers.configuration_utils.PretrainedConfig",
  "transformers.configuration_utils.__version__",
  "transformers.configuration_utils.logger",
  "transformers.convert_graph_to_onnx.ORT_QUANTIZE_MINIMUM_VERSION",
  "transformers.convert_graph_to_onnx.OnnxConverterArgumentParser",
  "transformers.convert_graph_to_onnx.SUPPORTED_PIPELINES",
  "transformers.convert_graph_to_onnx.args",
  "transformers.convert_graph_to_onnx.check_onnxruntime_requirements",
  "transformers.convert_graph_to_onnx.convert",
  "transformers.convert_graph_to_onnx.convert_pytorch",
  "transformers.convert_graph_to_onnx.convert_tensorflow",
  "transformers.convert_graph_to_onnx.ensure_valid_input",
  "transformers.convert_graph_to_onnx.generate_identified_filename",
  "transformers.convert_graph_to_onnx.infer_shapes",
  "transformers.convert_graph_to_onnx.load_graph_from_args",
  "transformers.convert_graph_to_onnx.optimize",
  "transformers.convert_graph_to_onnx.parser",
  "transformers.convert_graph_to_onnx.verify",
  "transformers.convert_pytorch_checkpoint_to_tf2.ALBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.AlbertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.AlbertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.BART_PRETRAINED_MODEL_ARCHIVE_LIST",
  "transformers.convert_pytorch_checkpoint_to_tf2.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.BartConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.BartForConditionalGeneration",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.CAMEMBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.CTRLConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.CTRLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.CamembertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.CamembertForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.DPRConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.DPRContextEncoder",
  "transformers.convert_pytorch_checkpoint_to_tf2.DPRQuestionEncoder",
  "transformers.convert_pytorch_checkpoint_to_tf2.DPRReader",
  "transformers.convert_pytorch_checkpoint_to_tf2.DPR_CONTEXT_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST",
  "transformers.convert_pytorch_checkpoint_to_tf2.DPR_QUESTION_ENCODER_PRETRAINED_MODEL_ARCHIVE_LIST",
  "transformers.convert_pytorch_checkpoint_to_tf2.DPR_READER_PRETRAINED_MODEL_ARCHIVE_LIST",
  "transformers.convert_pytorch_checkpoint_to_tf2.DistilBertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.DistilBertForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.DistilBertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.ELECTRA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.ElectraConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.ElectraForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.FLAUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.FlaubertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.FlaubertWithLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.GPT2Config",
  "transformers.convert_pytorch_checkpoint_to_tf2.GPT2LMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.LXMERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.LxmertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.LxmertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.LxmertVisualFeatureEncoder",
  "transformers.convert_pytorch_checkpoint_to_tf2.MODEL_CLASSES",
  "transformers.convert_pytorch_checkpoint_to_tf2.OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.OpenAIGPTConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.OpenAIGPTLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.RobertaConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.RobertaForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.RobertaForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.T5Config",
  "transformers.convert_pytorch_checkpoint_to_tf2.T5ForConditionalGeneration",
  "transformers.convert_pytorch_checkpoint_to_tf2.T5_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFAlbertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFBartForConditionalGeneration",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFBertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFBertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFBertForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFCTRLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFCamembertForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFDPRContextEncoder",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFDPRQuestionEncoder",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFDPRReader",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFDistilBertForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFDistilBertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFElectraForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFFlaubertWithLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFGPT2LMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFLxmertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFLxmertVisualFeatureEncoder",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFOpenAIGPTLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFRobertaForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFRobertaForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFT5ForConditionalGeneration",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFTransfoXLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFXLMRobertaForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFXLMWithLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFXLNetLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.TransfoXLConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.TransfoXLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.WEIGHTS_NAME",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLMConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLMRobertaConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLMRobertaForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLMWithLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLM_ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLNetConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLNetLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.args",
  "transformers.convert_pytorch_checkpoint_to_tf2.cached_path",
  "transformers.convert_pytorch_checkpoint_to_tf2.convert_all_pt_checkpoints_to_tf",
  "transformers.convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf",
  "transformers.convert_pytorch_checkpoint_to_tf2.is_torch_available",
  "transformers.convert_pytorch_checkpoint_to_tf2.load_pytorch_checkpoint_in_tf2_model",
  "transformers.convert_pytorch_checkpoint_to_tf2.parser",
  "transformers.convert_slow_tokenizer.Converter",
  "transformers.convert_slow_tokenizer.SLOW_TO_FAST_CONVERTERS",
  "transformers.convert_slow_tokenizer.SentencePieceExtractor",
  "transformers.convert_slow_tokenizer.SpmConverter",
  "transformers.convert_slow_tokenizer.check_number_comma",
  "transformers.convert_slow_tokenizers_checkpoints_to_fast.TOKENIZER_CLASSES",
  "transformers.convert_slow_tokenizers_checkpoints_to_fast.args",
  "transformers.convert_slow_tokenizers_checkpoints_to_fast.convert_slow_checkpoint_to_fast",
  "transformers.convert_slow_tokenizers_checkpoints_to_fast.logger",
  "transformers.convert_slow_tokenizers_checkpoints_to_fast.parser",
  "transformers.convert_slow_tokenizers_checkpoints_to_fast.transformers",
  "transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.BertGenerationConfig",
  "transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.BertGenerationDecoder",
  "transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.BertGenerationEncoder",
  "transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.args",
  "transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.load_tf_weights_in_bert_generation",
  "transformers.convert_tf_hub_seq_to_seq_bert_to_pytorch.parser",
  "transformers.data.data_collator.DataCollatorForLanguageModeling",
  "transformers.data.data_collator.InputDataClass",
  "transformers.data.data_collator._collate_batch",
  "transformers.data.data_collator.tolist",
  "transformers.data.datasets.glue.GlueDataTrainingArguments",
  "transformers.data.datasets.glue.Split",
  "transformers.data.datasets.glue.logger",
  "transformers.data.datasets.language_modeling.DEPRECATION_WARNING",
  "transformers.data.datasets.language_modeling.logger",
  "transformers.data.datasets.squad.MODEL_CONFIG_CLASSES",
  "transformers.data.datasets.squad.MODEL_TYPES",
  "transformers.data.datasets.squad.Split",
  "transformers.data.datasets.squad.SquadDataTrainingArguments",
  "transformers.data.datasets.squad.logger",
  "transformers.data.metrics.DEPRECATION_WARNING",
  "transformers.data.metrics.acc_and_f1",
  "transformers.data.metrics.pearson_and_spearman",
  "transformers.data.metrics.simple_accuracy",
  "transformers.data.metrics.squad_metrics._compute_softmax",
  "transformers.data.metrics.squad_metrics._get_best_indexes",
  "transformers.data.metrics.squad_metrics.apply_no_ans_threshold",
  "transformers.data.metrics.squad_metrics.compute_exact",
  "transformers.data.metrics.squad_metrics.compute_f1",
  "transformers.data.metrics.squad_metrics.find_all_best_thresh",
  "transformers.data.metrics.squad_metrics.find_best_thresh",
  "transformers.data.metrics.squad_metrics.find_best_thresh_v2",
  "transformers.data.metrics.squad_metrics.get_final_text",
  "transformers.data.metrics.squad_metrics.get_raw_scores",
  "transformers.data.metrics.squad_metrics.get_tokens",
  "transformers.data.metrics.squad_metrics.logger",
  "transformers.data.metrics.squad_metrics.make_eval_dict",
  "transformers.data.metrics.squad_metrics.merge_eval",
  "transformers.data.metrics.squad_metrics.normalize_answer",
  "transformers.data.processors.glue.ColaProcessor",
  "transformers.data.processors.glue.DEPRECATION_WARNING",
  "transformers.data.processors.glue.MnliMismatchedProcessor",
  "transformers.data.processors.glue.MnliProcessor",
  "transformers.data.processors.glue.MrpcProcessor",
  "transformers.data.processors.glue.QnliProcessor",
  "transformers.data.processors.glue.QqpProcessor",
  "transformers.data.processors.glue.RteProcessor",
  "transformers.data.processors.glue.Sst2Processor",
  "transformers.data.processors.glue.StsbProcessor",
  "transformers.data.processors.glue.WnliProcessor",
  "transformers.data.processors.glue._glue_convert_examples_to_features",
  "transformers.data.processors.glue._tf_glue_convert_examples_to_features",
  "transformers.data.processors.glue.glue_convert_examples_to_features",
  "transformers.data.processors.glue.logger",
  "transformers.data.processors.squad.MULTI_SEP_TOKENS_TOKENIZERS_SET",
  "transformers.data.processors.squad.SquadExample",
  "transformers.data.processors.squad.SquadFeatures",
  "transformers.data.processors.squad.SquadProcessor",
  "transformers.data.processors.squad._improve_answer_span",
  "transformers.data.processors.squad._is_whitespace",
  "transformers.data.processors.squad._new_check_is_max_context",
  "transformers.data.processors.squad.logger",
  "transformers.data.processors.squad.squad_convert_example_to_features",
  "transformers.data.processors.squad.squad_convert_example_to_features_init",
  "transformers.data.processors.utils.DataProcessor",
  "transformers.data.processors.utils.InputExample",
  "transformers.data.processors.utils.InputFeatures",
  "transformers.data.processors.utils.SingleSentenceClassificationProcessor",
  "transformers.data.processors.utils.logger",
  "transformers.data.processors.xnli.XnliProcessor",
  "transformers.dependency_versions_check.pkgs_to_check_at_runtime",
  "transformers.file_utils.CONFIG_NAME",
  "transformers.file_utils.DATASETS_IMPORT_ERROR",
  "transformers.file_utils.ENV_VARS_TRUE_AND_AUTO_VALUES",
  "transformers.file_utils.ENV_VARS_TRUE_VALUES",
  "transformers.file_utils.FAISS_IMPORT_ERROR",
  "transformers.file_utils.FLAX_IMPORT_ERROR",
  "transformers.file_utils.HUGGINGFACE_CO_PREFIX",
  "transformers.file_utils.PANDAS_IMPORT_ERROR",
  "transformers.file_utils.PRESET_MIRROR_DICT",
  "transformers.file_utils.PROTOBUF_IMPORT_ERROR",
  "transformers.file_utils.PT_BASE_MODEL_SAMPLE",
  "transformers.file_utils.PT_CAUSAL_LM_SAMPLE",
  "transformers.file_utils.PT_MASKED_LM_SAMPLE",
  "transformers.file_utils.PT_MULTIPLE_CHOICE_SAMPLE",
  "transformers.file_utils.PT_QUESTION_ANSWERING_SAMPLE",
  "transformers.file_utils.PT_RETURN_INTRODUCTION",
  "transformers.file_utils.PT_SEQUENCE_CLASSIFICATION_SAMPLE",
  "transformers.file_utils.PT_TOKEN_CLASSIFICATION_SAMPLE",
  "transformers.file_utils.PYTORCH_IMPORT_ERROR",
  "transformers.file_utils.PYTORCH_PRETRAINED_BERT_CACHE",
  "transformers.file_utils.PYTORCH_TRANSFORMERS_CACHE",
  "transformers.file_utils.SCATTER_IMPORT_ERROR",
  "transformers.file_utils.SENTENCEPIECE_IMPORT_ERROR",
  "transformers.file_utils.SENTENCEPIECE_UNDERLINE",
  "transformers.file_utils.SKLEARN_IMPORT_ERROR",
  "transformers.file_utils.TENSORFLOW_IMPORT_ERROR",
  "transformers.file_utils.TF_BASE_MODEL_SAMPLE",
  "transformers.file_utils.TF_CAUSAL_LM_SAMPLE",
  "transformers.file_utils.TF_MASKED_LM_SAMPLE",
  "transformers.file_utils.TF_MULTIPLE_CHOICE_SAMPLE",
  "transformers.file_utils.TF_QUESTION_ANSWERING_SAMPLE",
  "transformers.file_utils.TF_RETURN_INTRODUCTION",
  "transformers.file_utils.TF_SEQUENCE_CLASSIFICATION_SAMPLE",
  "transformers.file_utils.TF_TOKEN_CLASSIFICATION_SAMPLE",
  "transformers.file_utils.TOKENIZERS_IMPORT_ERROR",
  "transformers.file_utils.TRANSFORMERS_CACHE",
  "transformers.file_utils.USE_JAX",
  "transformers.file_utils.USE_TF",
  "transformers.file_utils.USE_TORCH",
  "transformers.file_utils.WEIGHTS_NAME",
  "transformers.file_utils.__version__",
  "transformers.file_utils._convert_output_args_doc",
  "transformers.file_utils._datasets_available",
  "transformers.file_utils._datasets_metadata",
  "transformers.file_utils._faiss_available",
  "transformers.file_utils._faiss_version",
  "transformers.file_utils._flax_available",
  "transformers.file_utils._flax_version",
  "transformers.file_utils._get_indent",
  "transformers.file_utils._jax_version",
  "transformers.file_utils._prepare_output_docstrings",
  "transformers.file_utils._scatter_available",
  "transformers.file_utils._scatter_version",
  "transformers.file_utils._soundfile_available",
  "transformers.file_utils._soundfile_version",
  "transformers.file_utils._tf_available",
  "transformers.file_utils._tf_version",
  "transformers.file_utils._torch_available",
  "transformers.file_utils._torch_version",
  "transformers.file_utils.default_cache_path",
  "transformers.file_utils.get_from_cache",
  "transformers.file_utils.hf_cache_home",
  "transformers.file_utils.http_get",
  "transformers.file_utils.http_user_agent",
  "transformers.file_utils.is_datasets_available",
  "transformers.file_utils.is_faiss_available",
  "transformers.file_utils.is_flax_available",
  "transformers.file_utils.is_pandas_available",
  "transformers.file_utils.is_protobuf_available",
  "transformers.file_utils.is_remote_url",
  "transformers.file_utils.is_scatter_available",
  "transformers.file_utils.is_sentencepiece_available",
  "transformers.file_utils.is_sklearn_available",
  "transformers.file_utils.is_tensor",
  "transformers.file_utils.is_tf_available",
  "transformers.file_utils.is_tokenizers_available",
  "transformers.file_utils.is_torch_available",
  "transformers.file_utils.logger",
  "transformers.file_utils.old_default_cache_path",
  "transformers.file_utils.torch_cache_home",
  "transformers.file_utils.url_to_filename",
  "transformers.generation_beam_search.BeamHypotheses",
  "transformers.generation_beam_search.BeamScorer",
  "transformers.generation_beam_search.FINALIZE_INPUTS_DOCSTRING",
  "transformers.generation_beam_search.PROCESS_INPUTS_DOCSTRING",
  "transformers.generation_logits_process.LOGITS_PROCESSOR_INPUTS_DOCSTRING",
  "transformers.generation_logits_process.LogitsProcessor",
  "transformers.generation_logits_process.LogitsWarper",
  "transformers.generation_logits_process._calc_banned_ngram_tokens",
  "transformers.generation_logits_process._get_generated_ngrams",
  "transformers.generation_logits_process._get_ngrams",
  "transformers.generation_tf_utils.BeamHypotheses",
  "transformers.generation_tf_utils._create_next_token_logits_penalties",
  "transformers.generation_tf_utils.calc_banned_bad_words_ids",
  "transformers.generation_tf_utils.calc_banned_ngram_tokens",
  "transformers.generation_tf_utils.logger",
  "transformers.generation_tf_utils.sample_without_replacement",
  "transformers.generation_tf_utils.scatter_values_on_batch_indices",
  "transformers.generation_tf_utils.set_tensor_by_indices_to_value",
  "transformers.generation_tf_utils.shape_list",
  "transformers.generation_tf_utils.tf_top_k_top_p_filtering",
  "transformers.generation_utils.BeamSampleDecoderOnlyOutput",
  "transformers.generation_utils.BeamSampleEncoderDecoderOutput",
  "transformers.generation_utils.BeamSampleOutput",
  "transformers.generation_utils.BeamSearchDecoderOnlyOutput",
  "transformers.generation_utils.BeamSearchEncoderDecoderOutput",
  "transformers.generation_utils.BeamSearchOutput",
  "transformers.generation_utils.GreedySearchDecoderOnlyOutput",
  "transformers.generation_utils.GreedySearchEncoderDecoderOutput",
  "transformers.generation_utils.GreedySearchOutput",
  "transformers.generation_utils.SampleDecoderOnlyOutput",
  "transformers.generation_utils.SampleEncoderDecoderOutput",
  "transformers.generation_utils.SampleOutput",
  "transformers.generation_utils.logger",
  "transformers.hf_api.ENDPOINT",
  "transformers.hf_api.HfApi",
  "transformers.hf_api.ModelInfo",
  "transformers.hf_api.ModelSibling",
  "transformers.hf_api.PresignedUrl",
  "transformers.hf_api.RepoObj",
  "transformers.hf_api.S3Obj",
  "transformers.hf_api.TqdmProgressFileReader",
  "transformers.hf_argparser.DataClass",
  "transformers.hf_argparser.DataClassType",
  "transformers.hf_argparser.string_to_bool",
  "transformers.integrations.AzureMLCallback",
  "transformers.integrations.CometCallback",
  "transformers.integrations.INTEGRATION_TO_CALLBACK",
  "transformers.integrations.MLflowCallback",
  "transformers.integrations.TensorBoardCallback",
  "transformers.integrations.WandbCallback",
  "transformers.integrations._has_comet",
  "transformers.integrations.comet_ml",
  "transformers.integrations.is_azureml_available",
  "transformers.integrations.is_comet_available",
  "transformers.integrations.is_mlflow_available",
  "transformers.integrations.is_optuna_available",
  "transformers.integrations.is_ray_available",
  "transformers.integrations.is_ray_tune_available",
  "transformers.integrations.is_tensorboard_available",
  "transformers.integrations.is_wandb_available",
  "transformers.integrations.logger",
  "transformers.integrations.mlflow",
  "transformers.integrations.rewrite_logs",
  "transformers.integrations.wandb",
  "transformers.load_tf_weights_in_albert",
  "transformers.load_tf_weights_in_bert",
  "transformers.load_tf_weights_in_convbert",
  "transformers.load_tf_weights_in_electra",
  "transformers.load_tf_weights_in_funnel",
  "transformers.load_tf_weights_in_gpt2",
  "transformers.load_tf_weights_in_lxmert",
  "transformers.load_tf_weights_in_mobilebert",
  "transformers.load_tf_weights_in_openai_gpt",
  "transformers.load_tf_weights_in_t5",
  "transformers.load_tf_weights_in_tapas",
  "transformers.load_tf_weights_in_transfo_xl",
  "transformers.load_tf_weights_in_xlnet",
  "transformers.logger",
  "transformers.logging.get_logger",
  "transformers.logging.set_verbosity_info",
  "transformers.modelcard.logger",
  "transformers.modeling_flax_utils.convert_state_dict_from_pt",
  "transformers.modeling_flax_utils.logger",
  "transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name",
  "transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model",
  "transformers.modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model",
  "transformers.modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model",
  "transformers.modeling_tf_pytorch_utils.logger",
  "transformers.modeling_tf_pytorch_utils.transformers",
  "transformers.modeling_tf_utils.TFCausalLanguageModelingLoss",
  "transformers.modeling_tf_utils.TFModelUtilsMixin",
  "transformers.modeling_tf_utils.TFSequenceClassificationLoss",
  "transformers.modeling_tf_utils.booleans_processing",
  "transformers.modeling_tf_utils.get_initializer",
  "transformers.modeling_tf_utils.init_copy_embeddings",
  "transformers.modeling_tf_utils.load_tf_weights",
  "transformers.modeling_tf_utils.logger",
  "transformers.modeling_tf_utils.shape_list",
  "transformers.modeling_tf_utils.tf_logger",
  "transformers.modeling_utils.Conv1D",
  "transformers.modeling_utils.ModuleUtilsMixin",
  "transformers.modeling_utils.PoolerAnswerClass",
  "transformers.modeling_utils.PoolerEndLogits",
  "transformers.modeling_utils.PoolerStartLogits",
  "transformers.modeling_utils.SquadHeadOutput",
  "transformers.modeling_utils.logger",
  "transformers.modeling_utils.prune_conv1d_layer",
  "transformers.modeling_utils.prune_linear_layer",
  "transformers.models.albert._LazyModule",
  "transformers.models.albert._import_structure",
  "transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.albert.convert_albert_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.albert.modeling_albert.ALBERT_INPUTS_DOCSTRING",
  "transformers.models.albert.modeling_albert.ALBERT_START_DOCSTRING",
  "transformers.models.albert.modeling_albert.AlbertAttention",
  "transformers.models.albert.modeling_albert.AlbertEmbeddings",
  "transformers.models.albert.modeling_albert.AlbertForPreTrainingOutput",
  "transformers.models.albert.modeling_albert.AlbertLayer",
  "transformers.models.albert.modeling_albert.AlbertLayerGroup",
  "transformers.models.albert.modeling_albert.AlbertMLMHead",
  "transformers.models.albert.modeling_albert.AlbertModel",
  "transformers.models.albert.modeling_albert.AlbertPreTrainedModel",
  "transformers.models.albert.modeling_albert.AlbertSOPHead",
  "transformers.models.albert.modeling_albert.AlbertTransformer",
  "transformers.models.albert.modeling_albert._CONFIG_FOR_DOC",
  "transformers.models.albert.modeling_albert._TOKENIZER_FOR_DOC",
  "transformers.models.albert.modeling_albert.load_tf_weights_in_albert",
  "transformers.models.albert.modeling_albert.logger",
  "transformers.models.albert.modeling_tf_albert.ALBERT_INPUTS_DOCSTRING",
  "transformers.models.albert.modeling_tf_albert.ALBERT_START_DOCSTRING",
  "transformers.models.albert.modeling_tf_albert.TFAlbertAttention",
  "transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings",
  "transformers.models.albert.modeling_tf_albert.TFAlbertForPreTrainingOutput",
  "transformers.models.albert.modeling_tf_albert.TFAlbertLayer",
  "transformers.models.albert.modeling_tf_albert.TFAlbertLayerGroup",
  "transformers.models.albert.modeling_tf_albert.TFAlbertMLMHead",
  "transformers.models.albert.modeling_tf_albert.TFAlbertMainLayer",
  "transformers.models.albert.modeling_tf_albert.TFAlbertPositionEmbeddings",
  "transformers.models.albert.modeling_tf_albert.TFAlbertPreTrainedModel",
  "transformers.models.albert.modeling_tf_albert.TFAlbertSOPHead",
  "transformers.models.albert.modeling_tf_albert.TFAlbertTokenTypeEmbeddings",
  "transformers.models.albert.modeling_tf_albert.TFAlbertTransformer",
  "transformers.models.albert.modeling_tf_albert.TFAlbertWordEmbeddings",
  "transformers.models.albert.modeling_tf_albert._CONFIG_FOR_DOC",
  "transformers.models.albert.modeling_tf_albert._TOKENIZER_FOR_DOC",
  "transformers.models.albert.tokenization_albert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.albert.tokenization_albert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.albert.tokenization_albert.SPIECE_UNDERLINE",
  "transformers.models.albert.tokenization_albert.VOCAB_FILES_NAMES",
  "transformers.models.albert.tokenization_albert.logger",
  "transformers.models.albert.tokenization_albert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.albert.tokenization_albert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.albert.tokenization_albert_fast.VOCAB_FILES_NAMES",
  "transformers.models.albert.tokenization_albert_fast.logger",
  "transformers.models.auto._LazyModule",
  "transformers.models.auto._import_structure",
  "transformers.models.auto.configuration_auto.CONFIG_MAPPING",
  "transformers.models.auto.configuration_auto.MODEL_NAMES_MAPPING",
  "transformers.models.auto.configuration_auto._list_model_options",
  "transformers.models.auto.configuration_auto.replace_list_option_in_docstrings",
  "transformers.models.auto.modeling_auto.AUTO_MODEL_PRETRAINED_DOCSTRING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_CAUSAL_LM_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_MASKED_LM_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_MULTIPLE_CHOICE_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_PRETRAINING_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_QUESTION_ANSWERING_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_TABLE_QUESTION_ANSWERING_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_MAPPING",
  "transformers.models.auto.modeling_auto.MODEL_WITH_LM_HEAD_MAPPING",
  "transformers.models.auto.modeling_flax_auto.FLAX_MODEL_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_AUTO_MODEL_PRETRAINED_DOCSTRING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_CAUSAL_LM_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_MASKED_LM_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_MULTIPLE_CHOICE_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_PRETRAINING_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_QUESTION_ANSWERING_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_MAPPING",
  "transformers.models.auto.modeling_tf_auto.TF_MODEL_WITH_LM_HEAD_MAPPING",
  "transformers.models.auto.tokenization_auto.NO_CONFIG_TOKENIZER",
  "transformers.models.auto.tokenization_auto.SLOW_TOKENIZER_MAPPING",
  "transformers.models.auto.tokenization_auto.TOKENIZER_MAPPING",
  "transformers.models.auto.tokenization_auto.logger",
  "transformers.models.auto.tokenization_auto.tokenizer_class_from_name",
  "transformers.models.bart._LazyModule",
  "transformers.models.bart._import_structure",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.SAMPLE_TEXT",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.convert_bart_checkpoint",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.load_xsum_checkpoint",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.make_linear_from_emb",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.mnli_rename_keys",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.remove_ignore_keys_",
  "transformers.models.bart.convert_bart_original_pytorch_checkpoint_to_pytorch.rename_key",
  "transformers.models.bart.modeling_bart.BART_GENERATION_EXAMPLE",
  "transformers.models.bart.modeling_bart.BART_INPUTS_DOCSTRING",
  "transformers.models.bart.modeling_bart.BART_START_DOCSTRING",
  "transformers.models.bart.modeling_bart.BartAttention",
  "transformers.models.bart.modeling_bart.BartClassificationHead",
  "transformers.models.bart.modeling_bart.BartDecoder",
  "transformers.models.bart.modeling_bart.BartDecoderLayer",
  "transformers.models.bart.modeling_bart.BartDecoderWrapper",
  "transformers.models.bart.modeling_bart.BartEncoder",
  "transformers.models.bart.modeling_bart.BartEncoderLayer",
  "transformers.models.bart.modeling_bart.BartLearnedPositionalEmbedding",
  "transformers.models.bart.modeling_bart.BartModel",
  "transformers.models.bart.modeling_bart.BartPretrainedModel",
  "transformers.models.bart.modeling_bart._CONFIG_FOR_DOC",
  "transformers.models.bart.modeling_bart._TOKENIZER_FOR_DOC",
  "transformers.models.bart.modeling_bart._expand_mask",
  "transformers.models.bart.modeling_bart._make_causal_mask",
  "transformers.models.bart.modeling_bart.logger",
  "transformers.models.bart.modeling_bart.shift_tokens_right",
  "transformers.models.bart.modeling_tf_bart.BART_GENERATION_EXAMPLE",
  "transformers.models.bart.modeling_tf_bart.BART_INPUTS_DOCSTRING",
  "transformers.models.bart.modeling_tf_bart.BART_START_DOCSTRING",
  "transformers.models.bart.modeling_tf_bart.LARGE_NEGATIVE",
  "transformers.models.bart.modeling_tf_bart.TFBartAttention",
  "transformers.models.bart.modeling_tf_bart.TFBartDecoder",
  "transformers.models.bart.modeling_tf_bart.TFBartDecoderLayer",
  "transformers.models.bart.modeling_tf_bart.TFBartEncoder",
  "transformers.models.bart.modeling_tf_bart.TFBartEncoderLayer",
  "transformers.models.bart.modeling_tf_bart.TFBartLearnedPositionalEmbedding",
  "transformers.models.bart.modeling_tf_bart.TFBartMainLayer",
  "transformers.models.bart.modeling_tf_bart.TFBartPretrainedModel",
  "transformers.models.bart.modeling_tf_bart._CONFIG_FOR_DOC",
  "transformers.models.bart.modeling_tf_bart._TOKENIZER_FOR_DOC",
  "transformers.models.bart.modeling_tf_bart._expand_mask",
  "transformers.models.bart.modeling_tf_bart._make_causal_mask",
  "transformers.models.bart.modeling_tf_bart.shift_tokens_right",
  "transformers.models.bart.tokenization_bart._all_bart_models",
  "transformers.models.bart.tokenization_bart.merges_url",
  "transformers.models.bart.tokenization_bart.vocab_url",
  "transformers.models.bart.tokenization_bart_fast._all_bart_models",
  "transformers.models.bart.tokenization_bart_fast.merges_url",
  "transformers.models.bart.tokenization_bart_fast.tokenizer_url",
  "transformers.models.bart.tokenization_bart_fast.vocab_url",
  "transformers.models.barthez._LazyModule",
  "transformers.models.barthez._import_structure",
  "transformers.models.barthez.tokenization_barthez.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.barthez.tokenization_barthez.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.barthez.tokenization_barthez.SPIECE_UNDERLINE",
  "transformers.models.barthez.tokenization_barthez.VOCAB_FILES_NAMES",
  "transformers.models.barthez.tokenization_barthez.logger",
  "transformers.models.barthez.tokenization_barthez_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.barthez.tokenization_barthez_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.barthez.tokenization_barthez_fast.VOCAB_FILES_NAMES",
  "transformers.models.barthez.tokenization_barthez_fast.logger",
  "transformers.models.bert._LazyModule",
  "transformers.models.bert._import_structure",
  "transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.args",
  "transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.convert_tf2_checkpoint_to_pytorch",
  "transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.load_tf2_weights_in_bert",
  "transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.logger",
  "transformers.models.bert.convert_bert_original_tf2_checkpoint_to_pytorch.parser",
  "transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.bert.convert_bert_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf",
  "transformers.models.bert.convert_bert_pytorch_checkpoint_to_original_tf.main",
  "transformers.models.bert.modeling_bert.BERT_INPUTS_DOCSTRING",
  "transformers.models.bert.modeling_bert.BERT_START_DOCSTRING",
  "transformers.models.bert.modeling_bert.BertAttention",
  "transformers.models.bert.modeling_bert.BertEmbeddings",
  "transformers.models.bert.modeling_bert.BertEncoder",
  "transformers.models.bert.modeling_bert.BertForPreTrainingOutput",
  "transformers.models.bert.modeling_bert.BertIntermediate",
  "transformers.models.bert.modeling_bert.BertLMPredictionHead",
  "transformers.models.bert.modeling_bert.BertLayer",
  "transformers.models.bert.modeling_bert.BertModel",
  "transformers.models.bert.modeling_bert.BertOnlyMLMHead",
  "transformers.models.bert.modeling_bert.BertOnlyNSPHead",
  "transformers.models.bert.modeling_bert.BertOutput",
  "transformers.models.bert.modeling_bert.BertPooler",
  "transformers.models.bert.modeling_bert.BertPreTrainedModel",
  "transformers.models.bert.modeling_bert.BertPreTrainingHeads",
  "transformers.models.bert.modeling_bert.BertPredictionHeadTransform",
  "transformers.models.bert.modeling_bert.BertSelfAttention",
  "transformers.models.bert.modeling_bert.BertSelfOutput",
  "transformers.models.bert.modeling_bert._CONFIG_FOR_DOC",
  "transformers.models.bert.modeling_bert._TOKENIZER_FOR_DOC",
  "transformers.models.bert.modeling_bert.load_tf_weights_in_bert",
  "transformers.models.bert.modeling_bert.logger",
  "transformers.models.bert.modeling_flax_bert.BERT_INPUTS_DOCSTRING",
  "transformers.models.bert.modeling_flax_bert.BERT_START_DOCSTRING",
  "transformers.models.bert.modeling_flax_bert.FlaxBertAttention",
  "transformers.models.bert.modeling_flax_bert.FlaxBertEmbedding",
  "transformers.models.bert.modeling_flax_bert.FlaxBertEmbeddings",
  "transformers.models.bert.modeling_flax_bert.FlaxBertEncoder",
  "transformers.models.bert.modeling_flax_bert.FlaxBertForMaskedLMModule",
  "transformers.models.bert.modeling_flax_bert.FlaxBertIntermediate",
  "transformers.models.bert.modeling_flax_bert.FlaxBertLMPredictionHead",
  "transformers.models.bert.modeling_flax_bert.FlaxBertLayer",
  "transformers.models.bert.modeling_flax_bert.FlaxBertLayerCollection",
  "transformers.models.bert.modeling_flax_bert.FlaxBertLayerNorm",
  "transformers.models.bert.modeling_flax_bert.FlaxBertModule",
  "transformers.models.bert.modeling_flax_bert.FlaxBertOnlyMLMHead",
  "transformers.models.bert.modeling_flax_bert.FlaxBertOutput",
  "transformers.models.bert.modeling_flax_bert.FlaxBertPooler",
  "transformers.models.bert.modeling_flax_bert.FlaxBertPreTrainedModel",
  "transformers.models.bert.modeling_flax_bert.FlaxBertPredictionHeadTransform",
  "transformers.models.bert.modeling_tf_bert.BERT_INPUTS_DOCSTRING",
  "transformers.models.bert.modeling_tf_bert.BERT_START_DOCSTRING",
  "transformers.models.bert.modeling_tf_bert.TFBertAttention",
  "transformers.models.bert.modeling_tf_bert.TFBertEmbeddings",
  "transformers.models.bert.modeling_tf_bert.TFBertEncoder",
  "transformers.models.bert.modeling_tf_bert.TFBertForPreTrainingOutput",
  "transformers.models.bert.modeling_tf_bert.TFBertIntermediate",
  "transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead",
  "transformers.models.bert.modeling_tf_bert.TFBertLayer",
  "transformers.models.bert.modeling_tf_bert.TFBertMLMHead",
  "transformers.models.bert.modeling_tf_bert.TFBertMainLayer",
  "transformers.models.bert.modeling_tf_bert.TFBertNSPHead",
  "transformers.models.bert.modeling_tf_bert.TFBertOutput",
  "transformers.models.bert.modeling_tf_bert.TFBertPooler",
  "transformers.models.bert.modeling_tf_bert.TFBertPositionEmbeddings",
  "transformers.models.bert.modeling_tf_bert.TFBertPreTrainedModel",
  "transformers.models.bert.modeling_tf_bert.TFBertPreTrainingLoss",
  "transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform",
  "transformers.models.bert.modeling_tf_bert.TFBertSelfAttention",
  "transformers.models.bert.modeling_tf_bert.TFBertSelfOutput",
  "transformers.models.bert.modeling_tf_bert.TFBertTokenTypeEmbeddings",
  "transformers.models.bert.modeling_tf_bert.TFBertWordEmbeddings",
  "transformers.models.bert.modeling_tf_bert._CONFIG_FOR_DOC",
  "transformers.models.bert.modeling_tf_bert._TOKENIZER_FOR_DOC",
  "transformers.models.bert.modeling_tf_bert.logger",
  "transformers.models.bert.tokenization_bert.BasicTokenizer",
  "transformers.models.bert.tokenization_bert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.bert.tokenization_bert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.bert.tokenization_bert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.bert.tokenization_bert.VOCAB_FILES_NAMES",
  "transformers.models.bert.tokenization_bert.WordpieceTokenizer",
  "transformers.models.bert.tokenization_bert.load_vocab",
  "transformers.models.bert.tokenization_bert.logger",
  "transformers.models.bert.tokenization_bert.whitespace_tokenize",
  "transformers.models.bert.tokenization_bert_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.bert.tokenization_bert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.bert.tokenization_bert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.bert.tokenization_bert_fast.VOCAB_FILES_NAMES",
  "transformers.models.bert_generation._LazyModule",
  "transformers.models.bert_generation._import_structure",
  "transformers.models.bert_generation.modeling_bert_generation.BERT_GENERATION_INPUTS_DOCSTRING",
  "transformers.models.bert_generation.modeling_bert_generation.BERT_GENERATION_START_DOCSTRING",
  "transformers.models.bert_generation.modeling_bert_generation.BertGenerationEmbeddings",
  "transformers.models.bert_generation.modeling_bert_generation.BertGenerationEncoder",
  "transformers.models.bert_generation.modeling_bert_generation.BertGenerationOnlyLMHead",
  "transformers.models.bert_generation.modeling_bert_generation.BertGenerationPreTrainedModel",
  "transformers.models.bert_generation.modeling_bert_generation._CONFIG_FOR_DOC",
  "transformers.models.bert_generation.modeling_bert_generation._TOKENIZER_FOR_DOC",
  "transformers.models.bert_generation.modeling_bert_generation.logger",
  "transformers.models.bert_generation.tokenization_bert_generation.VOCAB_FILES_NAMES",
  "transformers.models.bert_generation.tokenization_bert_generation.logger",
  "transformers.models.bert_generation.tokenization_bert_generation.tokenizer_url",
  "transformers.models.bert_japanese._LazyModule",
  "transformers.models.bert_japanese._import_structure",
  "transformers.models.bert_japanese.tokenization_bert_japanese.CharacterTokenizer",
  "transformers.models.bert_japanese.tokenization_bert_japanese.MecabTokenizer",
  "transformers.models.bert_japanese.tokenization_bert_japanese.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.bert_japanese.tokenization_bert_japanese.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.bert_japanese.tokenization_bert_japanese.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.bert_japanese.tokenization_bert_japanese.VOCAB_FILES_NAMES",
  "transformers.models.bertweet._LazyModule",
  "transformers.models.bertweet._import_structure",
  "transformers.models.bertweet.tokenization_bertweet.EMOTICONS",
  "transformers.models.bertweet.tokenization_bertweet.EMOTICON_RE",
  "transformers.models.bertweet.tokenization_bertweet.ENT_RE",
  "transformers.models.bertweet.tokenization_bertweet.HANG_RE",
  "transformers.models.bertweet.tokenization_bertweet.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.bertweet.tokenization_bertweet.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.bertweet.tokenization_bertweet.REGEXPS",
  "transformers.models.bertweet.tokenization_bertweet.TweetTokenizer",
  "transformers.models.bertweet.tokenization_bertweet.URLS",
  "transformers.models.bertweet.tokenization_bertweet.VOCAB_FILES_NAMES",
  "transformers.models.bertweet.tokenization_bertweet.WORD_RE",
  "transformers.models.bertweet.tokenization_bertweet._replace_html_entities",
  "transformers.models.bertweet.tokenization_bertweet._str_to_unicode",
  "transformers.models.bertweet.tokenization_bertweet.get_pairs",
  "transformers.models.bertweet.tokenization_bertweet.logger",
  "transformers.models.bertweet.tokenization_bertweet.reduce_lengthening",
  "transformers.models.bertweet.tokenization_bertweet.remove_handles",
  "transformers.models.blenderbot._LazyModule",
  "transformers.models.blenderbot._import_structure",
  "transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.IGNORE_KEYS",
  "transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.PATTERNS",
  "transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.convert_parlai_checkpoint",
  "transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.rename_layernorm_keys",
  "transformers.models.blenderbot.convert_blenderbot_original_pytorch_checkpoint_to_pytorch.rename_state_dict_key",
  "transformers.models.blenderbot.modeling_blenderbot.BLENDERBOT_GENERATION_EXAMPLE",
  "transformers.models.blenderbot.modeling_blenderbot.BLENDERBOT_INPUTS_DOCSTRING",
  "transformers.models.blenderbot.modeling_blenderbot.BLENDERBOT_START_DOCSTRING",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotAttention",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotDecoder",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotDecoderLayer",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotDecoderWrapper",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotEncoder",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotEncoderLayer",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotForConditionalGeneration",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotLearnedPositionalEmbedding",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotModel",
  "transformers.models.blenderbot.modeling_blenderbot.BlenderbotPreTrainedModel",
  "transformers.models.blenderbot.modeling_blenderbot._CONFIG_FOR_DOC",
  "transformers.models.blenderbot.modeling_blenderbot._expand_mask",
  "transformers.models.blenderbot.modeling_blenderbot._make_causal_mask",
  "transformers.models.blenderbot.modeling_blenderbot.logger",
  "transformers.models.blenderbot.modeling_blenderbot.shift_tokens_right",
  "transformers.models.blenderbot.modeling_tf_blenderbot.BLENDERBOT_GENERATION_EXAMPLE",
  "transformers.models.blenderbot.modeling_tf_blenderbot.BLENDERBOT_INPUTS_DOCSTRING",
  "transformers.models.blenderbot.modeling_tf_blenderbot.BLENDERBOT_START_DOCSTRING",
  "transformers.models.blenderbot.modeling_tf_blenderbot.LARGE_NEGATIVE",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotAttention",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotDecoder",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotDecoderLayer",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotEncoder",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotEncoderLayer",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotLearnedPositionalEmbedding",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotMainLayer",
  "transformers.models.blenderbot.modeling_tf_blenderbot.TFBlenderbotPreTrainedModel",
  "transformers.models.blenderbot.modeling_tf_blenderbot._CONFIG_FOR_DOC",
  "transformers.models.blenderbot.modeling_tf_blenderbot._TOKENIZER_FOR_DOC",
  "transformers.models.blenderbot.modeling_tf_blenderbot._expand_mask",
  "transformers.models.blenderbot.modeling_tf_blenderbot._make_causal_mask",
  "transformers.models.blenderbot.modeling_tf_blenderbot.shift_tokens_right",
  "transformers.models.blenderbot.tokenization_blenderbot.CKPT_3B",
  "transformers.models.blenderbot_small._LazyModule",
  "transformers.models.blenderbot_small._import_structure",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BLENDERBOT_SMALL_GENERATION_EXAMPLE",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BLENDERBOT_SMALL_INPUTS_DOCSTRING",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BLENDERBOT_SMALL_START_DOCSTRING",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallAttention",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallDecoder",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallDecoderLayer",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallDecoderWrapper",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallEncoder",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallEncoderLayer",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallLearnedPositionalEmbedding",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallModel",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.BlenderbotSmallPreTrainedModel",
  "transformers.models.blenderbot_small.modeling_blenderbot_small._CONFIG_FOR_DOC",
  "transformers.models.blenderbot_small.modeling_blenderbot_small._expand_mask",
  "transformers.models.blenderbot_small.modeling_blenderbot_small._make_causal_mask",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.logger",
  "transformers.models.blenderbot_small.modeling_blenderbot_small.shift_tokens_right",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.BLENDERBOT_SMALL_GENERATION_EXAMPLE",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.BLENDERBOT_SMALL_INPUTS_DOCSTRING",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.BLENDERBOT_SMALL_START_DOCSTRING",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.LARGE_NEGATIVE",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallAttention",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallDecoder",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallDecoderLayer",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallEncoder",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallEncoderLayer",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallLearnedPositionalEmbedding",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallMainLayer",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.TFBlenderbotSmallPreTrainedModel",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small._CONFIG_FOR_DOC",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small._TOKENIZER_FOR_DOC",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small._expand_mask",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small._make_causal_mask",
  "transformers.models.blenderbot_small.modeling_tf_blenderbot_small.shift_tokens_right",
  "transformers.models.blenderbot_small.tokenization_blenderbot_small.VOCAB_FILES_NAMES",
  "transformers.models.blenderbot_small.tokenization_blenderbot_small.get_pairs",
  "transformers.models.blenderbot_small.tokenization_blenderbot_small.logger",
  "transformers.models.blenderbot_small.tokenization_blenderbot_small_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.blenderbot_small.tokenization_blenderbot_small_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.blenderbot_small.tokenization_blenderbot_small_fast.VOCAB_FILES_NAMES",
  "transformers.models.camembert._LazyModule",
  "transformers.models.camembert._import_structure",
  "transformers.models.camembert.modeling_camembert.CAMEMBERT_START_DOCSTRING",
  "transformers.models.camembert.modeling_tf_camembert.CAMEMBERT_START_DOCSTRING",
  "transformers.models.camembert.tokenization_camembert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.camembert.tokenization_camembert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.camembert.tokenization_camembert.SPIECE_UNDERLINE",
  "transformers.models.camembert.tokenization_camembert.VOCAB_FILES_NAMES",
  "transformers.models.camembert.tokenization_camembert.logger",
  "transformers.models.camembert.tokenization_camembert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.camembert.tokenization_camembert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.camembert.tokenization_camembert_fast.VOCAB_FILES_NAMES",
  "transformers.models.camembert.tokenization_camembert_fast.logger",
  "transformers.models.convbert._LazyModule",
  "transformers.models.convbert._import_structure",
  "transformers.models.convbert.convert_convbert_original_tf1_checkpoint_to_pytorch.args",
  "transformers.models.convbert.convert_convbert_original_tf1_checkpoint_to_pytorch.convert_orig_tf1_checkpoint_to_pytorch",
  "transformers.models.convbert.convert_convbert_original_tf1_checkpoint_to_pytorch.parser",
  "transformers.models.convbert.modeling_convbert.CONVBERT_INPUTS_DOCSTRING",
  "transformers.models.convbert.modeling_convbert.CONVBERT_START_DOCSTRING",
  "transformers.models.convbert.modeling_convbert.ConvBertAttention",
  "transformers.models.convbert.modeling_convbert.ConvBertClassificationHead",
  "transformers.models.convbert.modeling_convbert.ConvBertEmbeddings",
  "transformers.models.convbert.modeling_convbert.ConvBertEncoder",
  "transformers.models.convbert.modeling_convbert.ConvBertGeneratorPredictions",
  "transformers.models.convbert.modeling_convbert.ConvBertIntermediate",
  "transformers.models.convbert.modeling_convbert.ConvBertLayer",
  "transformers.models.convbert.modeling_convbert.ConvBertModel",
  "transformers.models.convbert.modeling_convbert.ConvBertOutput",
  "transformers.models.convbert.modeling_convbert.ConvBertPreTrainedModel",
  "transformers.models.convbert.modeling_convbert.ConvBertSelfAttention",
  "transformers.models.convbert.modeling_convbert.ConvBertSelfOutput",
  "transformers.models.convbert.modeling_convbert.GroupedLinearLayer",
  "transformers.models.convbert.modeling_convbert.SeparableConv1D",
  "transformers.models.convbert.modeling_convbert._CONFIG_FOR_DOC",
  "transformers.models.convbert.modeling_convbert._TOKENIZER_FOR_DOC",
  "transformers.models.convbert.modeling_convbert.load_tf_weights_in_convbert",
  "transformers.models.convbert.modeling_convbert.logger",
  "transformers.models.convbert.modeling_tf_convbert.CONVBERT_INPUTS_DOCSTRING",
  "transformers.models.convbert.modeling_tf_convbert.CONVBERT_START_DOCSTRING",
  "transformers.models.convbert.modeling_tf_convbert.GroupedLinearLayer",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertAttention",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertClassificationHead",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertEmbeddings",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertEncoder",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertGeneratorPredictions",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertIntermediate",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertLayer",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertMainLayer",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertMaskedLMHead",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertOutput",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertPositionEmbeddings",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertPreTrainedModel",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertSelfAttention",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertSelfOutput",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertTokenTypeEmbeddings",
  "transformers.models.convbert.modeling_tf_convbert.TFConvBertWordEmbeddings",
  "transformers.models.convbert.modeling_tf_convbert._CONFIG_FOR_DOC",
  "transformers.models.convbert.modeling_tf_convbert._TOKENIZER_FOR_DOC",
  "transformers.models.convbert.tokenization_convbert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.convbert.tokenization_convbert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.convbert.tokenization_convbert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.convbert.tokenization_convbert.VOCAB_FILES_NAMES",
  "transformers.models.convbert.tokenization_convbert_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.convbert.tokenization_convbert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.convbert.tokenization_convbert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.convbert.tokenization_convbert_fast.VOCAB_FILES_NAMES",
  "transformers.models.ctrl._LazyModule",
  "transformers.models.ctrl._import_structure",
  "transformers.models.ctrl.modeling_ctrl.CTRLModel",
  "transformers.models.ctrl.modeling_ctrl.CTRLPreTrainedModel",
  "transformers.models.ctrl.modeling_ctrl.CTRL_INPUTS_DOCSTRING",
  "transformers.models.ctrl.modeling_ctrl.CTRL_START_DOCSTRING",
  "transformers.models.ctrl.modeling_ctrl.EncoderLayer",
  "transformers.models.ctrl.modeling_ctrl.MultiHeadAttention",
  "transformers.models.ctrl.modeling_ctrl._CONFIG_FOR_DOC",
  "transformers.models.ctrl.modeling_ctrl._TOKENIZER_FOR_DOC",
  "transformers.models.ctrl.modeling_ctrl.angle_defn",
  "transformers.models.ctrl.modeling_ctrl.logger",
  "transformers.models.ctrl.modeling_ctrl.point_wise_feed_forward_network",
  "transformers.models.ctrl.modeling_ctrl.positional_encoding",
  "transformers.models.ctrl.modeling_ctrl.scaled_dot_product_attention",
  "transformers.models.ctrl.modeling_tf_ctrl.CTRL_INPUTS_DOCSTRING",
  "transformers.models.ctrl.modeling_tf_ctrl.CTRL_START_DOCSTRING",
  "transformers.models.ctrl.modeling_tf_ctrl.TFCTRLLMHead",
  "transformers.models.ctrl.modeling_tf_ctrl.TFCTRLMainLayer",
  "transformers.models.ctrl.modeling_tf_ctrl.TFCTRLPreTrainedModel",
  "transformers.models.ctrl.modeling_tf_ctrl.TFEncoderLayer",
  "transformers.models.ctrl.modeling_tf_ctrl.TFMultiHeadAttention",
  "transformers.models.ctrl.modeling_tf_ctrl.TFPointWiseFeedForwardLayer",
  "transformers.models.ctrl.modeling_tf_ctrl._CONFIG_FOR_DOC",
  "transformers.models.ctrl.modeling_tf_ctrl._TOKENIZER_FOR_DOC",
  "transformers.models.ctrl.modeling_tf_ctrl.angle_defn",
  "transformers.models.ctrl.modeling_tf_ctrl.logger",
  "transformers.models.ctrl.modeling_tf_ctrl.positional_encoding",
  "transformers.models.ctrl.modeling_tf_ctrl.scaled_dot_product_attention",
  "transformers.models.ctrl.tokenization_ctrl.CONTROL_CODES",
  "transformers.models.ctrl.tokenization_ctrl.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.ctrl.tokenization_ctrl.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.ctrl.tokenization_ctrl.VOCAB_FILES_NAMES",
  "transformers.models.ctrl.tokenization_ctrl.get_pairs",
  "transformers.models.ctrl.tokenization_ctrl.logger",
  "transformers.models.deberta._LazyModule",
  "transformers.models.deberta._import_structure",
  "transformers.models.deberta.modeling_deberta.ContextPooler",
  "transformers.models.deberta.modeling_deberta.DEBERTA_INPUTS_DOCSTRING",
  "transformers.models.deberta.modeling_deberta.DEBERTA_START_DOCSTRING",
  "transformers.models.deberta.modeling_deberta.DebertaAttention",
  "transformers.models.deberta.modeling_deberta.DebertaEmbeddings",
  "transformers.models.deberta.modeling_deberta.DebertaEncoder",
  "transformers.models.deberta.modeling_deberta.DebertaIntermediate",
  "transformers.models.deberta.modeling_deberta.DebertaLMPredictionHead",
  "transformers.models.deberta.modeling_deberta.DebertaLayer",
  "transformers.models.deberta.modeling_deberta.DebertaLayerNorm",
  "transformers.models.deberta.modeling_deberta.DebertaModel",
  "transformers.models.deberta.modeling_deberta.DebertaOnlyMLMHead",
  "transformers.models.deberta.modeling_deberta.DebertaOutput",
  "transformers.models.deberta.modeling_deberta.DebertaPreTrainedModel",
  "transformers.models.deberta.modeling_deberta.DebertaPredictionHeadTransform",
  "transformers.models.deberta.modeling_deberta.DebertaSelfOutput",
  "transformers.models.deberta.modeling_deberta.DisentangledSelfAttention",
  "transformers.models.deberta.modeling_deberta.DropoutContext",
  "transformers.models.deberta.modeling_deberta.StableDropout",
  "transformers.models.deberta.modeling_deberta.XDropout",
  "transformers.models.deberta.modeling_deberta.XSoftmax",
  "transformers.models.deberta.modeling_deberta._CONFIG_FOR_DOC",
  "transformers.models.deberta.modeling_deberta._TOKENIZER_FOR_DOC",
  "transformers.models.deberta.modeling_deberta.build_relative_position",
  "transformers.models.deberta.modeling_deberta.c2p_dynamic_expand",
  "transformers.models.deberta.modeling_deberta.get_mask",
  "transformers.models.deberta.modeling_deberta.p2c_dynamic_expand",
  "transformers.models.deberta.modeling_deberta.pos_dynamic_expand",
  "transformers.models.deberta.tokenization_deberta.Encoder",
  "transformers.models.deberta.tokenization_deberta.GPT2Tokenizer",
  "transformers.models.deberta.tokenization_deberta.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.deberta.tokenization_deberta.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.deberta.tokenization_deberta.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.deberta.tokenization_deberta.VOCAB_FILES_NAMES",
  "transformers.models.deberta.tokenization_deberta._is_control",
  "transformers.models.deberta.tokenization_deberta._is_punctuation",
  "transformers.models.deberta.tokenization_deberta._is_whitespace",
  "transformers.models.deberta.tokenization_deberta.bytes_to_unicode",
  "transformers.models.deberta.tokenization_deberta.download_asset",
  "transformers.models.deberta.tokenization_deberta.get_encoder",
  "transformers.models.deberta.tokenization_deberta.get_pairs",
  "transformers.models.deberta.tokenization_deberta.load_vocab",
  "transformers.models.deberta.tokenization_deberta.tqdm",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.DIALOGPT_MODELS",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.NEW_KEY",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.OLD_KEY",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.checkpoint_path",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.convert_dialogpt_checkpoint",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.dialogpt.convert_dialogpt_original_pytorch_checkpoint_to_pytorch.pytorch_dump_folder_path",
  "transformers.models.distilbert._LazyModule",
  "transformers.models.distilbert._import_structure",
  "transformers.models.distilbert.modeling_distilbert.DISTILBERT_INPUTS_DOCSTRING",
  "transformers.models.distilbert.modeling_distilbert.DISTILBERT_START_DOCSTRING",
  "transformers.models.distilbert.modeling_distilbert.DistilBertModel",
  "transformers.models.distilbert.modeling_distilbert.DistilBertPreTrainedModel",
  "transformers.models.distilbert.modeling_distilbert.Embeddings",
  "transformers.models.distilbert.modeling_distilbert.FFN",
  "transformers.models.distilbert.modeling_distilbert.MultiHeadSelfAttention",
  "transformers.models.distilbert.modeling_distilbert.Transformer",
  "transformers.models.distilbert.modeling_distilbert.TransformerBlock",
  "transformers.models.distilbert.modeling_distilbert._CONFIG_FOR_DOC",
  "transformers.models.distilbert.modeling_distilbert._TOKENIZER_FOR_DOC",
  "transformers.models.distilbert.modeling_distilbert.create_sinusoidal_embeddings",
  "transformers.models.distilbert.modeling_tf_distilbert.DISTILBERT_INPUTS_DOCSTRING",
  "transformers.models.distilbert.modeling_tf_distilbert.DISTILBERT_START_DOCSTRING",
  "transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertLMHead",
  "transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertMainLayer",
  "transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertPositionEmbeddings",
  "transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertPreTrainedModel",
  "transformers.models.distilbert.modeling_tf_distilbert.TFDistilBertWordEmbeddings",
  "transformers.models.distilbert.modeling_tf_distilbert.TFEmbeddings",
  "transformers.models.distilbert.modeling_tf_distilbert.TFFFN",
  "transformers.models.distilbert.modeling_tf_distilbert.TFMultiHeadSelfAttention",
  "transformers.models.distilbert.modeling_tf_distilbert.TFTransformer",
  "transformers.models.distilbert.modeling_tf_distilbert.TFTransformerBlock",
  "transformers.models.distilbert.modeling_tf_distilbert._CONFIG_FOR_DOC",
  "transformers.models.distilbert.modeling_tf_distilbert._TOKENIZER_FOR_DOC",
  "transformers.models.distilbert.tokenization_distilbert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.distilbert.tokenization_distilbert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.distilbert.tokenization_distilbert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.distilbert.tokenization_distilbert.VOCAB_FILES_NAMES",
  "transformers.models.distilbert.tokenization_distilbert_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.distilbert.tokenization_distilbert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.distilbert.tokenization_distilbert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.distilbert.tokenization_distilbert_fast.VOCAB_FILES_NAMES",
  "transformers.models.dpr._LazyModule",
  "transformers.models.dpr._import_structure",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.CheckpointState",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRContextEncoderState",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRQuestionEncoderState",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRReaderState",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.DPRState",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.args",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.convert",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.dest_dir",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.load_states_from_checkpoint",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.parser",
  "transformers.models.dpr.convert_dpr_original_checkpoint_to_pytorch.src_file",
  "transformers.models.dpr.modeling_dpr.DPRContextEncoderOutput",
  "transformers.models.dpr.modeling_dpr.DPREncoder",
  "transformers.models.dpr.modeling_dpr.DPRPretrainedContextEncoder",
  "transformers.models.dpr.modeling_dpr.DPRPretrainedQuestionEncoder",
  "transformers.models.dpr.modeling_dpr.DPRPretrainedReader",
  "transformers.models.dpr.modeling_dpr.DPRQuestionEncoderOutput",
  "transformers.models.dpr.modeling_dpr.DPRReaderOutput",
  "transformers.models.dpr.modeling_dpr.DPRSpanPredictor",
  "transformers.models.dpr.modeling_dpr.DPR_ENCODERS_INPUTS_DOCSTRING",
  "transformers.models.dpr.modeling_dpr.DPR_READER_INPUTS_DOCSTRING",
  "transformers.models.dpr.modeling_dpr.DPR_START_DOCSTRING",
  "transformers.models.dpr.modeling_dpr._CONFIG_FOR_DOC",
  "transformers.models.dpr.modeling_tf_dpr.TFDPRContextEncoderOutput",
  "transformers.models.dpr.modeling_tf_dpr.TFDPREncoderLayer",
  "transformers.models.dpr.modeling_tf_dpr.TFDPRPretrainedContextEncoder",
  "transformers.models.dpr.modeling_tf_dpr.TFDPRPretrainedQuestionEncoder",
  "transformers.models.dpr.modeling_tf_dpr.TFDPRPretrainedReader",
  "transformers.models.dpr.modeling_tf_dpr.TFDPRQuestionEncoderOutput",
  "transformers.models.dpr.modeling_tf_dpr.TFDPRReaderOutput",
  "transformers.models.dpr.modeling_tf_dpr.TFDPRSpanPredictorLayer",
  "transformers.models.dpr.modeling_tf_dpr.TF_DPR_ENCODERS_INPUTS_DOCSTRING",
  "transformers.models.dpr.modeling_tf_dpr.TF_DPR_READER_INPUTS_DOCSTRING",
  "transformers.models.dpr.modeling_tf_dpr.TF_DPR_START_DOCSTRING",
  "transformers.models.dpr.modeling_tf_dpr._CONFIG_FOR_DOC",
  "transformers.models.dpr.tokenization_dpr.CONTEXT_ENCODER_PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.dpr.tokenization_dpr.CONTEXT_ENCODER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.dpr.tokenization_dpr.CONTEXT_ENCODER_PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.dpr.tokenization_dpr.CUSTOM_DPR_READER_DOCSTRING",
  "transformers.models.dpr.tokenization_dpr.CustomDPRReaderTokenizerMixin",
  "transformers.models.dpr.tokenization_dpr.DPRReaderOutput",
  "transformers.models.dpr.tokenization_dpr.DPRSpanPrediction",
  "transformers.models.dpr.tokenization_dpr.QUESTION_ENCODER_PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.dpr.tokenization_dpr.QUESTION_ENCODER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.dpr.tokenization_dpr.QUESTION_ENCODER_PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.dpr.tokenization_dpr.READER_PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.dpr.tokenization_dpr.READER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.dpr.tokenization_dpr.READER_PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.dpr.tokenization_dpr.VOCAB_FILES_NAMES",
  "transformers.models.dpr.tokenization_dpr_fast.CONTEXT_ENCODER_PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.dpr.tokenization_dpr_fast.CONTEXT_ENCODER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.dpr.tokenization_dpr_fast.CONTEXT_ENCODER_PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.dpr.tokenization_dpr_fast.CUSTOM_DPR_READER_DOCSTRING",
  "transformers.models.dpr.tokenization_dpr_fast.CustomDPRReaderTokenizerMixin",
  "transformers.models.dpr.tokenization_dpr_fast.DPRReaderOutput",
  "transformers.models.dpr.tokenization_dpr_fast.DPRSpanPrediction",
  "transformers.models.dpr.tokenization_dpr_fast.QUESTION_ENCODER_PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.dpr.tokenization_dpr_fast.QUESTION_ENCODER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.dpr.tokenization_dpr_fast.QUESTION_ENCODER_PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.dpr.tokenization_dpr_fast.READER_PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.dpr.tokenization_dpr_fast.READER_PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.dpr.tokenization_dpr_fast.READER_PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.dpr.tokenization_dpr_fast.VOCAB_FILES_NAMES",
  "transformers.models.electra._LazyModule",
  "transformers.models.electra._import_structure",
  "transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.electra.convert_electra_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.electra.modeling_electra.ELECTRA_INPUTS_DOCSTRING",
  "transformers.models.electra.modeling_electra.ELECTRA_START_DOCSTRING",
  "transformers.models.electra.modeling_electra.ElectraAttention",
  "transformers.models.electra.modeling_electra.ElectraClassificationHead",
  "transformers.models.electra.modeling_electra.ElectraDiscriminatorPredictions",
  "transformers.models.electra.modeling_electra.ElectraEmbeddings",
  "transformers.models.electra.modeling_electra.ElectraEncoder",
  "transformers.models.electra.modeling_electra.ElectraForPreTrainingOutput",
  "transformers.models.electra.modeling_electra.ElectraGeneratorPredictions",
  "transformers.models.electra.modeling_electra.ElectraIntermediate",
  "transformers.models.electra.modeling_electra.ElectraLayer",
  "transformers.models.electra.modeling_electra.ElectraModel",
  "transformers.models.electra.modeling_electra.ElectraOutput",
  "transformers.models.electra.modeling_electra.ElectraPreTrainedModel",
  "transformers.models.electra.modeling_electra.ElectraSelfAttention",
  "transformers.models.electra.modeling_electra.ElectraSelfOutput",
  "transformers.models.electra.modeling_electra._CONFIG_FOR_DOC",
  "transformers.models.electra.modeling_electra._TOKENIZER_FOR_DOC",
  "transformers.models.electra.modeling_electra.load_tf_weights_in_electra",
  "transformers.models.electra.modeling_electra.logger",
  "transformers.models.electra.modeling_tf_electra.ELECTRA_INPUTS_DOCSTRING",
  "transformers.models.electra.modeling_tf_electra.ELECTRA_START_DOCSTRING",
  "transformers.models.electra.modeling_tf_electra.TFElectraAttention",
  "transformers.models.electra.modeling_tf_electra.TFElectraClassificationHead",
  "transformers.models.electra.modeling_tf_electra.TFElectraDiscriminatorPredictions",
  "transformers.models.electra.modeling_tf_electra.TFElectraEmbeddings",
  "transformers.models.electra.modeling_tf_electra.TFElectraEncoder",
  "transformers.models.electra.modeling_tf_electra.TFElectraForPreTrainingOutput",
  "transformers.models.electra.modeling_tf_electra.TFElectraGeneratorPredictions",
  "transformers.models.electra.modeling_tf_electra.TFElectraIntermediate",
  "transformers.models.electra.modeling_tf_electra.TFElectraLayer",
  "transformers.models.electra.modeling_tf_electra.TFElectraMainLayer",
  "transformers.models.electra.modeling_tf_electra.TFElectraMaskedLMHead",
  "transformers.models.electra.modeling_tf_electra.TFElectraOutput",
  "transformers.models.electra.modeling_tf_electra.TFElectraPositionEmbeddings",
  "transformers.models.electra.modeling_tf_electra.TFElectraPreTrainedModel",
  "transformers.models.electra.modeling_tf_electra.TFElectraSelfAttention",
  "transformers.models.electra.modeling_tf_electra.TFElectraSelfOutput",
  "transformers.models.electra.modeling_tf_electra.TFElectraTokenTypeEmbeddings",
  "transformers.models.electra.modeling_tf_electra.TFElectraWordEmbeddings",
  "transformers.models.electra.modeling_tf_electra._CONFIG_FOR_DOC",
  "transformers.models.electra.modeling_tf_electra._TOKENIZER_FOR_DOC",
  "transformers.models.electra.tokenization_electra.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.electra.tokenization_electra.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.electra.tokenization_electra.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.electra.tokenization_electra.VOCAB_FILES_NAMES",
  "transformers.models.electra.tokenization_electra_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.electra.tokenization_electra_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.electra.tokenization_electra_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.electra.tokenization_electra_fast.VOCAB_FILES_NAMES",
  "transformers.models.encoder_decoder._LazyModule",
  "transformers.models.encoder_decoder._import_structure",
  "transformers.models.encoder_decoder.configuration_encoder_decoder.logger",
  "transformers.models.encoder_decoder.modeling_encoder_decoder.ENCODER_DECODER_INPUTS_DOCSTRING",
  "transformers.models.encoder_decoder.modeling_encoder_decoder.ENCODER_DECODER_START_DOCSTRING",
  "transformers.models.encoder_decoder.modeling_encoder_decoder._CONFIG_FOR_DOC",
  "transformers.models.encoder_decoder.modeling_encoder_decoder.logger",
  "transformers.models.flaubert._LazyModule",
  "transformers.models.flaubert._import_structure",
  "transformers.models.flaubert.modeling_flaubert.FLAUBERT_INPUTS_DOCSTRING",
  "transformers.models.flaubert.modeling_flaubert.FLAUBERT_START_DOCSTRING",
  "transformers.models.flaubert.modeling_flaubert.FlaubertModel",
  "transformers.models.flaubert.modeling_flaubert._CONFIG_FOR_DOC",
  "transformers.models.flaubert.modeling_flaubert._TOKENIZER_FOR_DOC",
  "transformers.models.flaubert.modeling_tf_flaubert.FLAUBERT_INPUTS_DOCSTRING",
  "transformers.models.flaubert.modeling_tf_flaubert.FLAUBERT_START_DOCSTRING",
  "transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMainLayer",
  "transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertMultiHeadAttention",
  "transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPreTrainedModel",
  "transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertPredLayer",
  "transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertTransformerFFN",
  "transformers.models.flaubert.modeling_tf_flaubert.TFFlaubertWithLMHeadModelOutput",
  "transformers.models.flaubert.modeling_tf_flaubert._CONFIG_FOR_DOC",
  "transformers.models.flaubert.modeling_tf_flaubert._TOKENIZER_FOR_DOC",
  "transformers.models.flaubert.modeling_tf_flaubert.get_masks",
  "transformers.models.flaubert.tokenization_flaubert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.flaubert.tokenization_flaubert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.flaubert.tokenization_flaubert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.flaubert.tokenization_flaubert.VOCAB_FILES_NAMES",
  "transformers.models.flaubert.tokenization_flaubert.convert_to_unicode",
  "transformers.models.flaubert.tokenization_flaubert.logger",
  "transformers.models.fsmt._LazyModule",
  "transformers.models.fsmt._import_structure",
  "transformers.models.fsmt.configuration_fsmt.DecoderConfig",
  "transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.best_score_hparams",
  "transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.convert_fsmt_checkpoint_to_pytorch",
  "transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.json_indent",
  "transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.org_names",
  "transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.fsmt.convert_fsmt_original_pytorch_checkpoint_to_pytorch.rewrite_dict_keys",
  "transformers.models.fsmt.modeling_fsmt.Attention",
  "transformers.models.fsmt.modeling_fsmt.DecoderLayer",
  "transformers.models.fsmt.modeling_fsmt.EncoderLayer",
  "transformers.models.fsmt.modeling_fsmt.FSMTDecoder",
  "transformers.models.fsmt.modeling_fsmt.FSMTEncoder",
  "transformers.models.fsmt.modeling_fsmt.FSMTModel",
  "transformers.models.fsmt.modeling_fsmt.FSMT_GENERATION_EXAMPLE",
  "transformers.models.fsmt.modeling_fsmt.FSMT_INPUTS_DOCSTRING",
  "transformers.models.fsmt.modeling_fsmt.FSMT_START_DOCSTRING",
  "transformers.models.fsmt.modeling_fsmt.PretrainedFSMTModel",
  "transformers.models.fsmt.modeling_fsmt.SinusoidalPositionalEmbedding",
  "transformers.models.fsmt.modeling_fsmt._CONFIG_FOR_DOC",
  "transformers.models.fsmt.modeling_fsmt._TOKENIZER_FOR_DOC",
  "transformers.models.fsmt.modeling_fsmt._prepare_fsmt_decoder_inputs",
  "transformers.models.fsmt.modeling_fsmt._reorder_buffer",
  "transformers.models.fsmt.modeling_fsmt.fill_with_neg_inf",
  "transformers.models.fsmt.modeling_fsmt.invert_mask",
  "transformers.models.fsmt.modeling_fsmt.make_padding_mask",
  "transformers.models.fsmt.modeling_fsmt.shift_tokens_right",
  "transformers.models.fsmt.modeling_fsmt.triu_onnx",
  "transformers.models.fsmt.tokenization_fsmt.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.fsmt.tokenization_fsmt.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.fsmt.tokenization_fsmt.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.fsmt.tokenization_fsmt.VOCAB_FILES_NAMES",
  "transformers.models.fsmt.tokenization_fsmt.get_pairs",
  "transformers.models.fsmt.tokenization_fsmt.logger",
  "transformers.models.fsmt.tokenization_fsmt.remove_non_printing_char",
  "transformers.models.fsmt.tokenization_fsmt.replace_unicode_punct",
  "transformers.models.funnel._LazyModule",
  "transformers.models.funnel._import_structure",
  "transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.funnel.modeling_funnel.FUNNEL_INPUTS_DOCSTRING",
  "transformers.models.funnel.modeling_funnel.FUNNEL_START_DOCSTRING",
  "transformers.models.funnel.modeling_funnel.FunnelAttentionStructure",
  "transformers.models.funnel.modeling_funnel.FunnelBaseModel",
  "transformers.models.funnel.modeling_funnel.FunnelClassificationHead",
  "transformers.models.funnel.modeling_funnel.FunnelDecoder",
  "transformers.models.funnel.modeling_funnel.FunnelDiscriminatorPredictions",
  "transformers.models.funnel.modeling_funnel.FunnelEmbeddings",
  "transformers.models.funnel.modeling_funnel.FunnelEncoder",
  "transformers.models.funnel.modeling_funnel.FunnelForPreTrainingOutput",
  "transformers.models.funnel.modeling_funnel.FunnelLayer",
  "transformers.models.funnel.modeling_funnel.FunnelModel",
  "transformers.models.funnel.modeling_funnel.FunnelPositionwiseFFN",
  "transformers.models.funnel.modeling_funnel.FunnelPreTrainedModel",
  "transformers.models.funnel.modeling_funnel.FunnelRelMultiheadAttention",
  "transformers.models.funnel.modeling_funnel.INF",
  "transformers.models.funnel.modeling_funnel._CONFIG_FOR_DOC",
  "transformers.models.funnel.modeling_funnel._TOKENIZER_FOR_DOC",
  "transformers.models.funnel.modeling_funnel._relative_shift_gather",
  "transformers.models.funnel.modeling_funnel.load_tf_weights_in_funnel",
  "transformers.models.funnel.modeling_funnel.logger",
  "transformers.models.funnel.modeling_funnel.upsample",
  "transformers.models.funnel.modeling_tf_funnel.FUNNEL_INPUTS_DOCSTRING",
  "transformers.models.funnel.modeling_tf_funnel.FUNNEL_START_DOCSTRING",
  "transformers.models.funnel.modeling_tf_funnel.INF",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelAttentionStructure",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelBaseLayer",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelClassificationHead",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelDecoder",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelDiscriminatorPredictions",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelEmbeddings",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelEncoder",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelForPreTrainingOutput",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelLayer",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelMainLayer",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelMaskedLMHead",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelPositionwiseFFN",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelPreTrainedModel",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelRelMultiheadAttention",
  "transformers.models.funnel.modeling_tf_funnel.TFFunnelWordEmbeddings",
  "transformers.models.funnel.modeling_tf_funnel._CONFIG_FOR_DOC",
  "transformers.models.funnel.modeling_tf_funnel._TOKENIZER_FOR_DOC",
  "transformers.models.funnel.modeling_tf_funnel._relative_shift_gather",
  "transformers.models.funnel.modeling_tf_funnel.upsample",
  "transformers.models.funnel.tokenization_funnel.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.funnel.tokenization_funnel.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.funnel.tokenization_funnel.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.funnel.tokenization_funnel.VOCAB_FILES_NAMES",
  "transformers.models.funnel.tokenization_funnel._model_names",
  "transformers.models.funnel.tokenization_funnel_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.funnel.tokenization_funnel_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.funnel.tokenization_funnel_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.funnel.tokenization_funnel_fast.VOCAB_FILES_NAMES",
  "transformers.models.funnel.tokenization_funnel_fast._model_names",
  "transformers.models.gpt2._LazyModule",
  "transformers.models.gpt2._import_structure",
  "transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch",
  "transformers.models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.gpt2.modeling_gpt2.Attention",
  "transformers.models.gpt2.modeling_gpt2.Block",
  "transformers.models.gpt2.modeling_gpt2.DEPARALLELIZE_DOCSTRING",
  "transformers.models.gpt2.modeling_gpt2.GPT2DoubleHeadsModelOutput",
  "transformers.models.gpt2.modeling_gpt2.GPT2Model",
  "transformers.models.gpt2.modeling_gpt2.GPT2PreTrainedModel",
  "transformers.models.gpt2.modeling_gpt2.GPT2_INPUTS_DOCSTRING",
  "transformers.models.gpt2.modeling_gpt2.GPT2_START_DOCSTRING",
  "transformers.models.gpt2.modeling_gpt2.MLP",
  "transformers.models.gpt2.modeling_gpt2.PARALLELIZE_DOCSTRING",
  "transformers.models.gpt2.modeling_gpt2._CONFIG_FOR_DOC",
  "transformers.models.gpt2.modeling_gpt2._TOKENIZER_FOR_DOC",
  "transformers.models.gpt2.modeling_gpt2.load_tf_weights_in_gpt2",
  "transformers.models.gpt2.modeling_gpt2.logger",
  "transformers.models.gpt2.modeling_tf_gpt2.GPT2_INPUTS_DOCSTRING",
  "transformers.models.gpt2.modeling_tf_gpt2.GPT2_START_DOCSTRING",
  "transformers.models.gpt2.modeling_tf_gpt2.TFAttention",
  "transformers.models.gpt2.modeling_tf_gpt2.TFBlock",
  "transformers.models.gpt2.modeling_tf_gpt2.TFGPT2DoubleHeadsModelOutput",
  "transformers.models.gpt2.modeling_tf_gpt2.TFGPT2MainLayer",
  "transformers.models.gpt2.modeling_tf_gpt2.TFGPT2PreTrainedModel",
  "transformers.models.gpt2.modeling_tf_gpt2.TFMLP",
  "transformers.models.gpt2.modeling_tf_gpt2._CONFIG_FOR_DOC",
  "transformers.models.gpt2.modeling_tf_gpt2._TOKENIZER_FOR_DOC",
  "transformers.models.gpt2.modeling_tf_gpt2.logger",
  "transformers.models.gpt2.tokenization_gpt2.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.gpt2.tokenization_gpt2.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.gpt2.tokenization_gpt2.VOCAB_FILES_NAMES",
  "transformers.models.gpt2.tokenization_gpt2.bytes_to_unicode",
  "transformers.models.gpt2.tokenization_gpt2.get_pairs",
  "transformers.models.gpt2.tokenization_gpt2.logger",
  "transformers.models.gpt2.tokenization_gpt2_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.gpt2.tokenization_gpt2_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.gpt2.tokenization_gpt2_fast.VOCAB_FILES_NAMES",
  "transformers.models.herbert._LazyModule",
  "transformers.models.herbert._import_structure",
  "transformers.models.herbert.tokenization_herbert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.herbert.tokenization_herbert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.herbert.tokenization_herbert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.herbert.tokenization_herbert.VOCAB_FILES_NAMES",
  "transformers.models.herbert.tokenization_herbert_fast.VOCAB_FILES_NAMES",
  "transformers.models.layoutlm._LazyModule",
  "transformers.models.layoutlm._import_structure",
  "transformers.models.layoutlm.modeling_layoutlm.LAYOUTLM_INPUTS_DOCSTRING",
  "transformers.models.layoutlm.modeling_layoutlm.LAYOUTLM_PRETRAINED_MODEL_ARCHIVE_LIST",
  "transformers.models.layoutlm.modeling_layoutlm.LAYOUTLM_START_DOCSTRING",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMAttention",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMEmbeddings",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMEncoder",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMIntermediate",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMLMPredictionHead",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMLayer",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMLayerNorm",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMModel",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMOnlyMLMHead",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMOutput",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMPooler",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMPreTrainedModel",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMPredictionHeadTransform",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfAttention",
  "transformers.models.layoutlm.modeling_layoutlm.LayoutLMSelfOutput",
  "transformers.models.layoutlm.modeling_layoutlm._CONFIG_FOR_DOC",
  "transformers.models.layoutlm.modeling_layoutlm.logger",
  "transformers.models.layoutlm.tokenization_layoutlm.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.layoutlm.tokenization_layoutlm.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.layoutlm.tokenization_layoutlm.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.layoutlm.tokenization_layoutlm.VOCAB_FILES_NAMES",
  "transformers.models.layoutlm.tokenization_layoutlm_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.layoutlm.tokenization_layoutlm_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.layoutlm.tokenization_layoutlm_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.layoutlm.tokenization_layoutlm_fast.VOCAB_FILES_NAMES",
  "transformers.models.led._LazyModule",
  "transformers.models.led._import_structure",
  "transformers.models.led.modeling_led.LEDClassificationHead",
  "transformers.models.led.modeling_led.LEDDecoder",
  "transformers.models.led.modeling_led.LEDDecoderAttention",
  "transformers.models.led.modeling_led.LEDDecoderLayer",
  "transformers.models.led.modeling_led.LEDEncoder",
  "transformers.models.led.modeling_led.LEDEncoderAttention",
  "transformers.models.led.modeling_led.LEDEncoderBaseModelOutput",
  "transformers.models.led.modeling_led.LEDEncoderLayer",
  "transformers.models.led.modeling_led.LEDEncoderSelfAttention",
  "transformers.models.led.modeling_led.LEDLearnedPositionalEmbedding",
  "transformers.models.led.modeling_led.LEDModel",
  "transformers.models.led.modeling_led.LEDPreTrainedModel",
  "transformers.models.led.modeling_led.LEDSeq2SeqLMOutput",
  "transformers.models.led.modeling_led.LEDSeq2SeqModelOutput",
  "transformers.models.led.modeling_led.LEDSeq2SeqQuestionAnsweringModelOutput",
  "transformers.models.led.modeling_led.LEDSeq2SeqSequenceClassifierOutput",
  "transformers.models.led.modeling_led.LED_GENERATION_EXAMPLE",
  "transformers.models.led.modeling_led.LED_INPUTS_DOCSTRING",
  "transformers.models.led.modeling_led.LED_START_DOCSTRING",
  "transformers.models.led.modeling_led._CONFIG_FOR_DOC",
  "transformers.models.led.modeling_led._TOKENIZER_FOR_DOC",
  "transformers.models.led.modeling_led._expand_mask",
  "transformers.models.led.modeling_led._make_causal_mask",
  "transformers.models.led.modeling_led.logger",
  "transformers.models.led.modeling_led.shift_tokens_right",
  "transformers.models.led.modeling_tf_led.LARGE_NEGATIVE",
  "transformers.models.led.modeling_tf_led.LED_INPUTS_DOCSTRING",
  "transformers.models.led.modeling_tf_led.LED_START_DOCSTRING",
  "transformers.models.led.modeling_tf_led.TFLEDDecoder",
  "transformers.models.led.modeling_tf_led.TFLEDDecoderAttention",
  "transformers.models.led.modeling_tf_led.TFLEDDecoderLayer",
  "transformers.models.led.modeling_tf_led.TFLEDEncoder",
  "transformers.models.led.modeling_tf_led.TFLEDEncoderAttention",
  "transformers.models.led.modeling_tf_led.TFLEDEncoderBaseModelOutput",
  "transformers.models.led.modeling_tf_led.TFLEDEncoderLayer",
  "transformers.models.led.modeling_tf_led.TFLEDEncoderSelfAttention",
  "transformers.models.led.modeling_tf_led.TFLEDLearnedPositionalEmbedding",
  "transformers.models.led.modeling_tf_led.TFLEDMainLayer",
  "transformers.models.led.modeling_tf_led.TFLEDPreTrainedModel",
  "transformers.models.led.modeling_tf_led.TFLEDSeq2SeqLMOutput",
  "transformers.models.led.modeling_tf_led.TFLEDSeq2SeqModelOutput",
  "transformers.models.led.modeling_tf_led._CONFIG_FOR_DOC",
  "transformers.models.led.modeling_tf_led._TOKENIZER_FOR_DOC",
  "transformers.models.led.modeling_tf_led._expand_mask",
  "transformers.models.led.modeling_tf_led._make_causal_mask",
  "transformers.models.led.modeling_tf_led.logger",
  "transformers.models.led.modeling_tf_led.shift_tokens_right",
  "transformers.models.led.tokenization_led.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.led.tokenization_led.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.led.tokenization_led_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.led.tokenization_led_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.longformer._LazyModule",
  "transformers.models.longformer._import_structure",
  "transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.LightningModel",
  "transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.args",
  "transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.convert_longformer_qa_checkpoint_to_pytorch",
  "transformers.models.longformer.convert_longformer_original_pytorch_lightning_to_pytorch.parser",
  "transformers.models.longformer.modeling_longformer.LONGFORMER_INPUTS_DOCSTRING",
  "transformers.models.longformer.modeling_longformer.LONGFORMER_START_DOCSTRING",
  "transformers.models.longformer.modeling_longformer.LongformerAttention",
  "transformers.models.longformer.modeling_longformer.LongformerBaseModelOutput",
  "transformers.models.longformer.modeling_longformer.LongformerBaseModelOutputWithPooling",
  "transformers.models.longformer.modeling_longformer.LongformerClassificationHead",
  "transformers.models.longformer.modeling_longformer.LongformerEmbeddings",
  "transformers.models.longformer.modeling_longformer.LongformerEncoder",
  "transformers.models.longformer.modeling_longformer.LongformerIntermediate",
  "transformers.models.longformer.modeling_longformer.LongformerLMHead",
  "transformers.models.longformer.modeling_longformer.LongformerLayer",
  "transformers.models.longformer.modeling_longformer.LongformerMaskedLMOutput",
  "transformers.models.longformer.modeling_longformer.LongformerModel",
  "transformers.models.longformer.modeling_longformer.LongformerMultipleChoiceModelOutput",
  "transformers.models.longformer.modeling_longformer.LongformerOutput",
  "transformers.models.longformer.modeling_longformer.LongformerPooler",
  "transformers.models.longformer.modeling_longformer.LongformerPreTrainedModel",
  "transformers.models.longformer.modeling_longformer.LongformerQuestionAnsweringModelOutput",
  "transformers.models.longformer.modeling_longformer.LongformerSelfAttention",
  "transformers.models.longformer.modeling_longformer.LongformerSelfOutput",
  "transformers.models.longformer.modeling_longformer.LongformerSequenceClassifierOutput",
  "transformers.models.longformer.modeling_longformer.LongformerTokenClassifierOutput",
  "transformers.models.longformer.modeling_longformer._CONFIG_FOR_DOC",
  "transformers.models.longformer.modeling_longformer._TOKENIZER_FOR_DOC",
  "transformers.models.longformer.modeling_longformer._compute_global_attention_mask",
  "transformers.models.longformer.modeling_longformer._get_question_end_index",
  "transformers.models.longformer.modeling_longformer.create_position_ids_from_input_ids",
  "transformers.models.longformer.modeling_longformer.logger",
  "transformers.models.longformer.modeling_tf_longformer.LONGFORMER_INPUTS_DOCSTRING",
  "transformers.models.longformer.modeling_tf_longformer.LONGFORMER_START_DOCSTRING",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerAttention",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerBaseModelOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerBaseModelOutputWithPooling",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerClassificationHead",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerEmbeddings",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerEncoder",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerIntermediate",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerLMHead",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerLayer",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerMainLayer",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerMaskedLMOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerMultipleChoiceModelOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerPooler",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerPositionEmbeddings",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerPreTrainedModel",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerQuestionAnsweringModelOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerSequenceClassifierOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerTokenClassifierOutput",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerTokenTypeEmbeddings",
  "transformers.models.longformer.modeling_tf_longformer.TFLongformerWordEmbeddings",
  "transformers.models.longformer.modeling_tf_longformer._CONFIG_FOR_DOC",
  "transformers.models.longformer.modeling_tf_longformer._TOKENIZER_FOR_DOC",
  "transformers.models.longformer.modeling_tf_longformer._compute_global_attention_mask",
  "transformers.models.longformer.modeling_tf_longformer.logger",
  "transformers.models.longformer.tokenization_longformer.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.longformer.tokenization_longformer._all_longformer_models",
  "transformers.models.longformer.tokenization_longformer.merges_url",
  "transformers.models.longformer.tokenization_longformer.vocab_url",
  "transformers.models.longformer.tokenization_longformer_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.longformer.tokenization_longformer_fast._all_longformer_models",
  "transformers.models.longformer.tokenization_longformer_fast.merges_url",
  "transformers.models.longformer.tokenization_longformer_fast.tokenizer_url",
  "transformers.models.longformer.tokenization_longformer_fast.vocab_url",
  "transformers.models.lxmert._LazyModule",
  "transformers.models.lxmert._import_structure",
  "transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.lxmert.convert_lxmert_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.lxmert.modeling_lxmert.GeLU",
  "transformers.models.lxmert.modeling_lxmert.LXMERT_INPUTS_DOCSTRING",
  "transformers.models.lxmert.modeling_lxmert.LXMERT_START_DOCSTRING",
  "transformers.models.lxmert.modeling_lxmert.LxmertAttention",
  "transformers.models.lxmert.modeling_lxmert.LxmertAttentionOutput",
  "transformers.models.lxmert.modeling_lxmert.LxmertCrossAttentionLayer",
  "transformers.models.lxmert.modeling_lxmert.LxmertEmbeddings",
  "transformers.models.lxmert.modeling_lxmert.LxmertEncoder",
  "transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput",
  "transformers.models.lxmert.modeling_lxmert.LxmertForQuestionAnsweringOutput",
  "transformers.models.lxmert.modeling_lxmert.LxmertIntermediate",
  "transformers.models.lxmert.modeling_lxmert.LxmertLMPredictionHead",
  "transformers.models.lxmert.modeling_lxmert.LxmertLayer",
  "transformers.models.lxmert.modeling_lxmert.LxmertModel",
  "transformers.models.lxmert.modeling_lxmert.LxmertModelOutput",
  "transformers.models.lxmert.modeling_lxmert.LxmertOutput",
  "transformers.models.lxmert.modeling_lxmert.LxmertPooler",
  "transformers.models.lxmert.modeling_lxmert.LxmertPreTrainedModel",
  "transformers.models.lxmert.modeling_lxmert.LxmertPreTrainingHeads",
  "transformers.models.lxmert.modeling_lxmert.LxmertPredictionHeadTransform",
  "transformers.models.lxmert.modeling_lxmert.LxmertSelfAttentionLayer",
  "transformers.models.lxmert.modeling_lxmert.LxmertVisualAnswerHead",
  "transformers.models.lxmert.modeling_lxmert.LxmertVisualFeatureEncoder",
  "transformers.models.lxmert.modeling_lxmert.LxmertVisualObjHead",
  "transformers.models.lxmert.modeling_lxmert.LxmertXLayer",
  "transformers.models.lxmert.modeling_lxmert._CONFIG_FOR_DOC",
  "transformers.models.lxmert.modeling_lxmert._TOKENIZER_FOR_DOC",
  "transformers.models.lxmert.modeling_lxmert.load_tf_weights_in_lxmert",
  "transformers.models.lxmert.modeling_lxmert.logger",
  "transformers.models.lxmert.modeling_tf_lxmert.LXMERT_INPUTS_DOCSTRING",
  "transformers.models.lxmert.modeling_tf_lxmert.LXMERT_START_DOCSTRING",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttention",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertAttentionOutput",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertCrossAttentionLayer",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEmbeddings",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertEncoder",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertForPreTrainingOutput",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertIntermediate",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLMPredictionHead",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertLayer",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertMainLayer",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertModelOutput",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertOutput",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPooler",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPositionEmbeddings",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPreTrainedModel",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPreTrainingHeads",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertPredictionHeadTransform",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertSelfAttentionLayer",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertTokenTypeEmbeddings",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualAnswerHead",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualFeatureEncoder",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertVisualObjHead",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertWordEmbeddings",
  "transformers.models.lxmert.modeling_tf_lxmert.TFLxmertXLayer",
  "transformers.models.lxmert.modeling_tf_lxmert._CONFIG_FOR_DOC",
  "transformers.models.lxmert.modeling_tf_lxmert._TOKENIZER_FOR_DOC",
  "transformers.models.lxmert.tokenization_lxmert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.lxmert.tokenization_lxmert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.lxmert.tokenization_lxmert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.lxmert.tokenization_lxmert.VOCAB_FILES_NAMES",
  "transformers.models.lxmert.tokenization_lxmert_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.lxmert.tokenization_lxmert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.lxmert.tokenization_lxmert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.lxmert.tokenization_lxmert_fast.VOCAB_FILES_NAMES",
  "transformers.models.marian._LazyModule",
  "transformers.models.marian._import_structure",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.DEFAULT_MODEL_DIR",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.DEFAULT_REPO",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.ISO_PATH",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.ISO_URL",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.LANG_CODE_PATH",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.LANG_CODE_URL",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.TatoebaConverter",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.args",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.dedup",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.l2front_matter",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.parser",
  "transformers.models.marian.convert_marian_tatoeba_to_pytorch.resolver",
  "transformers.models.marian.convert_marian_to_pytorch.BART_CONVERTER",
  "transformers.models.marian.convert_marian_to_pytorch.BIAS_KEY",
  "transformers.models.marian.convert_marian_to_pytorch.CONFIG_KEY",
  "transformers.models.marian.convert_marian_to_pytorch.DEFAULT_REPO",
  "transformers.models.marian.convert_marian_to_pytorch.FRONT_MATTER_TEMPLATE",
  "transformers.models.marian.convert_marian_to_pytorch.FRONT_MATTER_TEMPLATE.format",
  "transformers.models.marian.convert_marian_to_pytorch.GROUPS",
  "transformers.models.marian.convert_marian_to_pytorch.GROUP_TO_OPUS_NAME",
  "transformers.models.marian.convert_marian_to_pytorch.ORG_NAME",
  "transformers.models.marian.convert_marian_to_pytorch.OpusState",
  "transformers.models.marian.convert_marian_to_pytorch.ROM_GROUP",
  "transformers.models.marian.convert_marian_to_pytorch._cast_yaml_str",
  "transformers.models.marian.convert_marian_to_pytorch._parse_readme",
  "transformers.models.marian.convert_marian_to_pytorch.add_emb_entries",
  "transformers.models.marian.convert_marian_to_pytorch.add_special_tokens_to_vocab",
  "transformers.models.marian.convert_marian_to_pytorch.add_to_vocab_",
  "transformers.models.marian.convert_marian_to_pytorch.args",
  "transformers.models.marian.convert_marian_to_pytorch.cast_marian_config",
  "transformers.models.marian.convert_marian_to_pytorch.check_equal",
  "transformers.models.marian.convert_marian_to_pytorch.check_marian_cfg_assumptions",
  "transformers.models.marian.convert_marian_to_pytorch.convert",
  "transformers.models.marian.convert_marian_to_pytorch.convert_all_sentencepiece_models",
  "transformers.models.marian.convert_marian_to_pytorch.convert_encoder_layer",
  "transformers.models.marian.convert_marian_to_pytorch.convert_hf_name_to_opus_name",
  "transformers.models.marian.convert_marian_to_pytorch.convert_opus_name_to_hf_name",
  "transformers.models.marian.convert_marian_to_pytorch.dest_dir",
  "transformers.models.marian.convert_marian_to_pytorch.download_and_unzip",
  "transformers.models.marian.convert_marian_to_pytorch.find_model_file",
  "transformers.models.marian.convert_marian_to_pytorch.find_vocab_file",
  "transformers.models.marian.convert_marian_to_pytorch.get_system_metadata",
  "transformers.models.marian.convert_marian_to_pytorch.lmap",
  "transformers.models.marian.convert_marian_to_pytorch.load_config_from_state_dict",
  "transformers.models.marian.convert_marian_to_pytorch.load_layers_",
  "transformers.models.marian.convert_marian_to_pytorch.load_yaml",
  "transformers.models.marian.convert_marian_to_pytorch.make_registry",
  "transformers.models.marian.convert_marian_to_pytorch.parser",
  "transformers.models.marian.convert_marian_to_pytorch.remove_prefix",
  "transformers.models.marian.convert_marian_to_pytorch.remove_suffix",
  "transformers.models.marian.convert_marian_to_pytorch.save_json",
  "transformers.models.marian.convert_marian_to_pytorch.save_tokenizer_config",
  "transformers.models.marian.convert_marian_to_pytorch.source_dir",
  "transformers.models.marian.convert_marian_to_pytorch.unzip",
  "transformers.models.marian.modeling_marian.MARIAN_GENERATION_EXAMPLE",
  "transformers.models.marian.modeling_marian.MARIAN_INPUTS_DOCSTRING",
  "transformers.models.marian.modeling_marian.MARIAN_START_DOCSTRING",
  "transformers.models.marian.modeling_marian.MarianAttention",
  "transformers.models.marian.modeling_marian.MarianDecoder",
  "transformers.models.marian.modeling_marian.MarianDecoderLayer",
  "transformers.models.marian.modeling_marian.MarianDecoderWrapper",
  "transformers.models.marian.modeling_marian.MarianEncoder",
  "transformers.models.marian.modeling_marian.MarianEncoderLayer",
  "transformers.models.marian.modeling_marian.MarianModel",
  "transformers.models.marian.modeling_marian.MarianPreTrainedModel",
  "transformers.models.marian.modeling_marian.MarianSinusoidalPositionalEmbedding",
  "transformers.models.marian.modeling_marian._CONFIG_FOR_DOC",
  "transformers.models.marian.modeling_marian._expand_mask",
  "transformers.models.marian.modeling_marian._make_causal_mask",
  "transformers.models.marian.modeling_marian.logger",
  "transformers.models.marian.modeling_marian.shift_tokens_right",
  "transformers.models.marian.modeling_tf_marian.LARGE_NEGATIVE",
  "transformers.models.marian.modeling_tf_marian.MARIAN_GENERATION_EXAMPLE",
  "transformers.models.marian.modeling_tf_marian.MARIAN_INPUTS_DOCSTRING",
  "transformers.models.marian.modeling_tf_marian.MARIAN_START_DOCSTRING",
  "transformers.models.marian.modeling_tf_marian.TFMarianAttention",
  "transformers.models.marian.modeling_tf_marian.TFMarianDecoder",
  "transformers.models.marian.modeling_tf_marian.TFMarianDecoderLayer",
  "transformers.models.marian.modeling_tf_marian.TFMarianEncoder",
  "transformers.models.marian.modeling_tf_marian.TFMarianEncoderLayer",
  "transformers.models.marian.modeling_tf_marian.TFMarianMainLayer",
  "transformers.models.marian.modeling_tf_marian.TFMarianPreTrainedModel",
  "transformers.models.marian.modeling_tf_marian.TFMarianSinusoidalPositionalEmbedding",
  "transformers.models.marian.modeling_tf_marian._CONFIG_FOR_DOC",
  "transformers.models.marian.modeling_tf_marian._TOKENIZER_FOR_DOC",
  "transformers.models.marian.modeling_tf_marian._expand_mask",
  "transformers.models.marian.modeling_tf_marian._make_causal_mask",
  "transformers.models.marian.modeling_tf_marian.shift_tokens_right",
  "transformers.models.marian.tokenization_marian.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.marian.tokenization_marian.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.marian.tokenization_marian.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.marian.tokenization_marian.load_json",
  "transformers.models.marian.tokenization_marian.load_spm",
  "transformers.models.marian.tokenization_marian.save_json",
  "transformers.models.marian.tokenization_marian.vocab_files_names",
  "transformers.models.mbart._LazyModule",
  "transformers.models.mbart._import_structure",
  "transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.args",
  "transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.convert_fairseq_mbart_checkpoint_from_disk",
  "transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.model",
  "transformers.models.mbart.convert_mbart_original_checkpoint_to_pytorch.parser",
  "transformers.models.mbart.modeling_mbart.MBART_GENERATION_EXAMPLE",
  "transformers.models.mbart.modeling_mbart.MBART_INPUTS_DOCSTRING",
  "transformers.models.mbart.modeling_mbart.MBART_START_DOCSTRING",
  "transformers.models.mbart.modeling_mbart.MBartAttention",
  "transformers.models.mbart.modeling_mbart.MBartClassificationHead",
  "transformers.models.mbart.modeling_mbart.MBartDecoder",
  "transformers.models.mbart.modeling_mbart.MBartDecoderLayer",
  "transformers.models.mbart.modeling_mbart.MBartDecoderWrapper",
  "transformers.models.mbart.modeling_mbart.MBartEncoder",
  "transformers.models.mbart.modeling_mbart.MBartEncoderLayer",
  "transformers.models.mbart.modeling_mbart.MBartLearnedPositionalEmbedding",
  "transformers.models.mbart.modeling_mbart.MBartModel",
  "transformers.models.mbart.modeling_mbart.MBartPreTrainedModel",
  "transformers.models.mbart.modeling_mbart._CONFIG_FOR_DOC",
  "transformers.models.mbart.modeling_mbart._TOKENIZER_FOR_DOC",
  "transformers.models.mbart.modeling_mbart._expand_mask",
  "transformers.models.mbart.modeling_mbart._make_causal_mask",
  "transformers.models.mbart.modeling_mbart.logger",
  "transformers.models.mbart.modeling_mbart.shift_tokens_right",
  "transformers.models.mbart.modeling_tf_mbart.LARGE_NEGATIVE",
  "transformers.models.mbart.modeling_tf_mbart.MBART_GENERATION_EXAMPLE",
  "transformers.models.mbart.modeling_tf_mbart.MBART_INPUTS_DOCSTRING",
  "transformers.models.mbart.modeling_tf_mbart.MBART_START_DOCSTRING",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartAttention",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartDecoder",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartDecoderLayer",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartEncoder",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartEncoderLayer",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartLearnedPositionalEmbedding",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartMainLayer",
  "transformers.models.mbart.modeling_tf_mbart.TFMBartPreTrainedModel",
  "transformers.models.mbart.modeling_tf_mbart._CONFIG_FOR_DOC",
  "transformers.models.mbart.modeling_tf_mbart._TOKENIZER_FOR_DOC",
  "transformers.models.mbart.modeling_tf_mbart._expand_mask",
  "transformers.models.mbart.modeling_tf_mbart._make_causal_mask",
  "transformers.models.mbart.modeling_tf_mbart.shift_tokens_right",
  "transformers.models.mbart.tokenization_mbart.FAIRSEQ_LANGUAGE_CODES",
  "transformers.models.mbart.tokenization_mbart.SPM_URL",
  "transformers.models.mbart.tokenization_mbart._all_mbart_models",
  "transformers.models.mbart.tokenization_mbart_fast.FAIRSEQ_LANGUAGE_CODES",
  "transformers.models.mbart.tokenization_mbart_fast.SPM_URL",
  "transformers.models.mbart.tokenization_mbart_fast._all_mbart_models",
  "transformers.models.mmbt._LazyModule",
  "transformers.models.mmbt._import_structure",
  "transformers.models.mmbt.modeling_mmbt.MMBTModel",
  "transformers.models.mmbt.modeling_mmbt.MMBT_INPUTS_DOCSTRING",
  "transformers.models.mmbt.modeling_mmbt.MMBT_START_DOCSTRING",
  "transformers.models.mmbt.modeling_mmbt.ModalEmbeddings",
  "transformers.models.mmbt.modeling_mmbt._CONFIG_FOR_DOC",
  "transformers.models.mobilebert._LazyModule",
  "transformers.models.mobilebert._import_structure",
  "transformers.models.mobilebert.configuration_mobilebert.MOBILEBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.mobilebert.convert_mobilebert_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.mobilebert.modeling_mobilebert.Bottleneck",
  "transformers.models.mobilebert.modeling_mobilebert.BottleneckLayer",
  "transformers.models.mobilebert.modeling_mobilebert.FFNLayer",
  "transformers.models.mobilebert.modeling_mobilebert.FFNOutput",
  "transformers.models.mobilebert.modeling_mobilebert.MOBILEBERT_INPUTS_DOCSTRING",
  "transformers.models.mobilebert.modeling_mobilebert.MOBILEBERT_PRETRAINED_MODEL_ARCHIVE_LIST",
  "transformers.models.mobilebert.modeling_mobilebert.MOBILEBERT_START_DOCSTRING",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertAttention",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertEmbeddings",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertEncoder",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertForPreTrainingOutput",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertIntermediate",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertLMPredictionHead",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertLayer",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertModel",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyMLMHead",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertOnlyNSPHead",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertOutput",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertPooler",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertPreTrainedModel",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertPreTrainingHeads",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertPredictionHeadTransform",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfAttention",
  "transformers.models.mobilebert.modeling_mobilebert.MobileBertSelfOutput",
  "transformers.models.mobilebert.modeling_mobilebert.NORM2FN",
  "transformers.models.mobilebert.modeling_mobilebert.NoNorm",
  "transformers.models.mobilebert.modeling_mobilebert.OutputBottleneck",
  "transformers.models.mobilebert.modeling_mobilebert._CONFIG_FOR_DOC",
  "transformers.models.mobilebert.modeling_mobilebert._TOKENIZER_FOR_DOC",
  "transformers.models.mobilebert.modeling_mobilebert.load_tf_weights_in_mobilebert",
  "transformers.models.mobilebert.modeling_mobilebert.logger",
  "transformers.models.mobilebert.modeling_tf_mobilebert.MOBILEBERT_INPUTS_DOCSTRING",
  "transformers.models.mobilebert.modeling_tf_mobilebert.MOBILEBERT_START_DOCSTRING",
  "transformers.models.mobilebert.modeling_tf_mobilebert.NORM2FN",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneck",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFBottleneckLayer",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNLayer",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFFFNOutput",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFLayerNorm",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertAttention",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEmbeddings",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertEncoder",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertForPreTrainingOutput",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertIntermediate",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLMPredictionHead",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertLayer",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMLMHead",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertMainLayer",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOnlyNSPHead",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertOutput",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPooler",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPositionEmbeddings",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPreTrainedModel",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertPredictionHeadTransform",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfAttention",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertSelfOutput",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertTokenTypeEmbeddings",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFMobileBertWordEmbeddings",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFNoNorm",
  "transformers.models.mobilebert.modeling_tf_mobilebert.TFOutputBottleneck",
  "transformers.models.mobilebert.modeling_tf_mobilebert._CONFIG_FOR_DOC",
  "transformers.models.mobilebert.modeling_tf_mobilebert._TOKENIZER_FOR_DOC",
  "transformers.models.mobilebert.tokenization_mobilebert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.mobilebert.tokenization_mobilebert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.mobilebert.tokenization_mobilebert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.mobilebert.tokenization_mobilebert.VOCAB_FILES_NAMES",
  "transformers.models.mobilebert.tokenization_mobilebert_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.mobilebert.tokenization_mobilebert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.mobilebert.tokenization_mobilebert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.mobilebert.tokenization_mobilebert_fast.VOCAB_FILES_NAMES",
  "transformers.models.mpnet._LazyModule",
  "transformers.models.mpnet._import_structure",
  "transformers.models.mpnet.modeling_mpnet.MPNET_INPUTS_DOCSTRING",
  "transformers.models.mpnet.modeling_mpnet.MPNET_PRETRAINED_MODEL_ARCHIVE_LIST",
  "transformers.models.mpnet.modeling_mpnet.MPNET_START_DOCSTRING",
  "transformers.models.mpnet.modeling_mpnet.MPNetAttention",
  "transformers.models.mpnet.modeling_mpnet.MPNetClassificationHead",
  "transformers.models.mpnet.modeling_mpnet.MPNetEmbeddings",
  "transformers.models.mpnet.modeling_mpnet.MPNetEncoder",
  "transformers.models.mpnet.modeling_mpnet.MPNetIntermediate",
  "transformers.models.mpnet.modeling_mpnet.MPNetLMHead",
  "transformers.models.mpnet.modeling_mpnet.MPNetLayer",
  "transformers.models.mpnet.modeling_mpnet.MPNetModel",
  "transformers.models.mpnet.modeling_mpnet.MPNetOutput",
  "transformers.models.mpnet.modeling_mpnet.MPNetPooler",
  "transformers.models.mpnet.modeling_mpnet.MPNetPreTrainedModel",
  "transformers.models.mpnet.modeling_mpnet.MPNetSelfAttention",
  "transformers.models.mpnet.modeling_mpnet._CONFIG_FOR_DOC",
  "transformers.models.mpnet.modeling_mpnet._TOKENIZER_FOR_DOC",
  "transformers.models.mpnet.modeling_mpnet.create_position_ids_from_input_ids",
  "transformers.models.mpnet.modeling_tf_mpnet.MPNET_INPUTS_DOCSTRING",
  "transformers.models.mpnet.modeling_tf_mpnet.MPNET_START_DOCSTRING",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetAttention",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetClassificationHead",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEmbeddings",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetEncoder",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetIntermediate",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLMHead",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetLayer",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetMainLayer",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetOutput",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetPooler",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetPositionEmbeddings",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetPreTrainedModel",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetSelfAttention",
  "transformers.models.mpnet.modeling_tf_mpnet.TFMPNetWordEmbeddings",
  "transformers.models.mpnet.modeling_tf_mpnet._CONFIG_FOR_DOC",
  "transformers.models.mpnet.modeling_tf_mpnet._TOKENIZER_FOR_DOC",
  "transformers.models.mpnet.tokenization_mpnet.BasicTokenizer",
  "transformers.models.mpnet.tokenization_mpnet.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.mpnet.tokenization_mpnet.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.mpnet.tokenization_mpnet.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.mpnet.tokenization_mpnet.VOCAB_FILES_NAMES",
  "transformers.models.mpnet.tokenization_mpnet.WordpieceTokenizer",
  "transformers.models.mpnet.tokenization_mpnet.load_vocab",
  "transformers.models.mpnet.tokenization_mpnet.logger",
  "transformers.models.mpnet.tokenization_mpnet.whitespace_tokenize",
  "transformers.models.mpnet.tokenization_mpnet_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.mpnet.tokenization_mpnet_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.mpnet.tokenization_mpnet_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.mpnet.tokenization_mpnet_fast.VOCAB_FILES_NAMES",
  "transformers.models.mt5.MT5Tokenizer",
  "transformers.models.mt5.MT5TokenizerFast",
  "transformers.models.mt5._LazyModule",
  "transformers.models.mt5._import_structure",
  "transformers.models.openai._LazyModule",
  "transformers.models.openai._import_structure",
  "transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch",
  "transformers.models.openai.convert_openai_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.openai.modeling_openai.ACT_FNS",
  "transformers.models.openai.modeling_openai.Attention",
  "transformers.models.openai.modeling_openai.Block",
  "transformers.models.openai.modeling_openai.MLP",
  "transformers.models.openai.modeling_openai.OPENAI_GPT_INPUTS_DOCSTRING",
  "transformers.models.openai.modeling_openai.OPENAI_GPT_START_DOCSTRING",
  "transformers.models.openai.modeling_openai.OpenAIGPTDoubleHeadsModelOutput",
  "transformers.models.openai.modeling_openai.OpenAIGPTModel",
  "transformers.models.openai.modeling_openai.OpenAIGPTPreTrainedModel",
  "transformers.models.openai.modeling_openai._CONFIG_FOR_DOC",
  "transformers.models.openai.modeling_openai._TOKENIZER_FOR_DOC",
  "transformers.models.openai.modeling_openai.load_tf_weights_in_openai_gpt",
  "transformers.models.openai.modeling_openai.logger",
  "transformers.models.openai.modeling_tf_openai.OPENAI_GPT_INPUTS_DOCSTRING",
  "transformers.models.openai.modeling_tf_openai.OPENAI_GPT_START_DOCSTRING",
  "transformers.models.openai.modeling_tf_openai.TFAttention",
  "transformers.models.openai.modeling_tf_openai.TFBlock",
  "transformers.models.openai.modeling_tf_openai.TFMLP",
  "transformers.models.openai.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModelOutput",
  "transformers.models.openai.modeling_tf_openai.TFOpenAIGPTMainLayer",
  "transformers.models.openai.modeling_tf_openai.TFOpenAIGPTPreTrainedModel",
  "transformers.models.openai.modeling_tf_openai._CONFIG_FOR_DOC",
  "transformers.models.openai.modeling_tf_openai._TOKENIZER_FOR_DOC",
  "transformers.models.openai.modeling_tf_openai.logger",
  "transformers.models.openai.tokenization_openai.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.openai.tokenization_openai.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.openai.tokenization_openai.VOCAB_FILES_NAMES",
  "transformers.models.openai.tokenization_openai.get_pairs",
  "transformers.models.openai.tokenization_openai.logger",
  "transformers.models.openai.tokenization_openai.text_standardize",
  "transformers.models.openai.tokenization_openai_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.openai.tokenization_openai_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.openai.tokenization_openai_fast.VOCAB_FILES_NAMES",
  "transformers.models.pegasus._LazyModule",
  "transformers.models.pegasus._import_structure",
  "transformers.models.pegasus.configuration_pegasus.DEFAULTS.copy",
  "transformers.models.pegasus.configuration_pegasus.task_specific_params",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.PATTERNS",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.args",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.convert_pegasus",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.convert_pegasus_ckpt_to_pytorch",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.dataset",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.get_tf_weights_as_numpy",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.parser",
  "transformers.models.pegasus.convert_pegasus_tf_to_pytorch.rename_state_dict_key",
  "transformers.models.pegasus.modeling_pegasus.PEGASUS_GENERATION_EXAMPLE",
  "transformers.models.pegasus.modeling_pegasus.PEGASUS_INPUTS_DOCSTRING",
  "transformers.models.pegasus.modeling_pegasus.PEGASUS_START_DOCSTRING",
  "transformers.models.pegasus.modeling_pegasus.PegasusAttention",
  "transformers.models.pegasus.modeling_pegasus.PegasusDecoder",
  "transformers.models.pegasus.modeling_pegasus.PegasusDecoderLayer",
  "transformers.models.pegasus.modeling_pegasus.PegasusDecoderWrapper",
  "transformers.models.pegasus.modeling_pegasus.PegasusEncoder",
  "transformers.models.pegasus.modeling_pegasus.PegasusEncoderLayer",
  "transformers.models.pegasus.modeling_pegasus.PegasusModel",
  "transformers.models.pegasus.modeling_pegasus.PegasusPreTrainedModel",
  "transformers.models.pegasus.modeling_pegasus.PegasusSinusoidalPositionalEmbedding",
  "transformers.models.pegasus.modeling_pegasus._CONFIG_FOR_DOC",
  "transformers.models.pegasus.modeling_pegasus._expand_mask",
  "transformers.models.pegasus.modeling_pegasus._make_causal_mask",
  "transformers.models.pegasus.modeling_pegasus.logger",
  "transformers.models.pegasus.modeling_pegasus.shift_tokens_right",
  "transformers.models.pegasus.modeling_tf_pegasus.LARGE_NEGATIVE",
  "transformers.models.pegasus.modeling_tf_pegasus.PEGASUS_GENERATION_EXAMPLE",
  "transformers.models.pegasus.modeling_tf_pegasus.PEGASUS_INPUTS_DOCSTRING",
  "transformers.models.pegasus.modeling_tf_pegasus.PEGASUS_START_DOCSTRING",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusAttention",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusDecoder",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusDecoderLayer",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusEncoder",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusEncoderLayer",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusMainLayer",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusPreTrainedModel",
  "transformers.models.pegasus.modeling_tf_pegasus.TFPegasusSinusoidalPositionalEmbedding",
  "transformers.models.pegasus.modeling_tf_pegasus._CONFIG_FOR_DOC",
  "transformers.models.pegasus.modeling_tf_pegasus._TOKENIZER_FOR_DOC",
  "transformers.models.pegasus.modeling_tf_pegasus._expand_mask",
  "transformers.models.pegasus.modeling_tf_pegasus._make_causal_mask",
  "transformers.models.pegasus.modeling_tf_pegasus.shift_tokens_right",
  "transformers.models.pegasus.tokenization_pegasus.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.pegasus.tokenization_pegasus.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.pegasus.tokenization_pegasus.VOCAB_FILES_NAMES",
  "transformers.models.pegasus.tokenization_pegasus.logger",
  "transformers.models.pegasus.tokenization_pegasus_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.pegasus.tokenization_pegasus_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.pegasus.tokenization_pegasus_fast.VOCAB_FILES_NAMES",
  "transformers.models.pegasus.tokenization_pegasus_fast.logger",
  "transformers.models.phobert._LazyModule",
  "transformers.models.phobert._import_structure",
  "transformers.models.phobert.tokenization_phobert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.phobert.tokenization_phobert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.phobert.tokenization_phobert.VOCAB_FILES_NAMES",
  "transformers.models.phobert.tokenization_phobert.get_pairs",
  "transformers.models.phobert.tokenization_phobert.logger",
  "transformers.models.prophetnet._LazyModule",
  "transformers.models.prophetnet._import_structure",
  "transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.convert_prophetnet_checkpoint_to_pytorch",
  "transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.logger",
  "transformers.models.prophetnet.convert_prophetnet_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.prophetnet.modeling_prophetnet.PROPHETNET_INPUTS_DOCSTRING",
  "transformers.models.prophetnet.modeling_prophetnet.PROPHETNET_STANDALONE_INPUTS_DOCSTRING",
  "transformers.models.prophetnet.modeling_prophetnet.PROPHETNET_START_DOCSTRING",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetAttention",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoder",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderLMOutput",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderLayer",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderModelOutput",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetDecoderWrapper",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoder",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetEncoderLayer",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetFeedForward",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetModel",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetNgramSelfAttention",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetPositionalEmbeddings",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetPreTrainedModel",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetSeq2SeqLMOutput",
  "transformers.models.prophetnet.modeling_prophetnet.ProphetNetSeq2SeqModelOutput",
  "transformers.models.prophetnet.modeling_prophetnet._CONFIG_FOR_DOC",
  "transformers.models.prophetnet.modeling_prophetnet.compute_all_stream_relative_buckets",
  "transformers.models.prophetnet.modeling_prophetnet.compute_relative_buckets",
  "transformers.models.prophetnet.modeling_prophetnet.ngram_attention_bias",
  "transformers.models.prophetnet.modeling_prophetnet.softmax",
  "transformers.models.prophetnet.tokenization_prophetnet.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.prophetnet.tokenization_prophetnet.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.prophetnet.tokenization_prophetnet.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.prophetnet.tokenization_prophetnet.VOCAB_FILES_NAMES",
  "transformers.models.prophetnet.tokenization_prophetnet.load_vocab",
  "transformers.models.prophetnet.tokenization_prophetnet.logger",
  "transformers.models.rag._LazyModule",
  "transformers.models.rag._import_structure",
  "transformers.models.rag.configuration_rag.RAG_CONFIG_DOC",
  "transformers.models.rag.modeling_rag.RAG_FORWARD_INPUTS_DOCSTRING",
  "transformers.models.rag.modeling_rag.RAG_START_DOCSTRING",
  "transformers.models.rag.modeling_rag.RagModel",
  "transformers.models.rag.modeling_rag.RagPreTrainedModel",
  "transformers.models.rag.modeling_rag.RetrievAugLMMarginOutput",
  "transformers.models.rag.modeling_rag.RetrievAugLMOutput",
  "transformers.models.rag.modeling_rag._CONFIG_FOR_DOC",
  "transformers.models.rag.retrieval_rag.CanonicalHFIndex",
  "transformers.models.rag.retrieval_rag.CustomHFIndex",
  "transformers.models.rag.retrieval_rag.HFIndexBase",
  "transformers.models.rag.retrieval_rag.Index",
  "transformers.models.rag.retrieval_rag.LEGACY_INDEX_PATH",
  "transformers.models.rag.retrieval_rag.LegacyIndex",
  "transformers.models.rag.retrieval_rag.logger",
  "transformers.models.reformer._LazyModule",
  "transformers.models.reformer._import_structure",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.args",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.convert_trax_checkpoint_to_pytorch",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.parser",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_block_weights_in_torch",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_layer_weights_in_torch_local",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_layer_weights_in_torch_lsh",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_model_weights_in_torch",
  "transformers.models.reformer.convert_reformer_trax_checkpoint_to_pytorch.set_param",
  "transformers.models.reformer.modeling_reformer.AttentionOutput",
  "transformers.models.reformer.modeling_reformer.AxialPositionEmbeddings",
  "transformers.models.reformer.modeling_reformer.ChunkReformerFeedForward",
  "transformers.models.reformer.modeling_reformer.EfficientAttentionMixin",
  "transformers.models.reformer.modeling_reformer.LSHSelfAttention",
  "transformers.models.reformer.modeling_reformer.LSHSelfAttentionOutput",
  "transformers.models.reformer.modeling_reformer.LocalSelfAttention",
  "transformers.models.reformer.modeling_reformer.LocalSelfAttentionOutput",
  "transformers.models.reformer.modeling_reformer.PositionEmbeddings",
  "transformers.models.reformer.modeling_reformer.REFORMER_INPUTS_DOCSTRING",
  "transformers.models.reformer.modeling_reformer.REFORMER_START_DOCSTRING",
  "transformers.models.reformer.modeling_reformer.ReformerAttention",
  "transformers.models.reformer.modeling_reformer.ReformerBackwardOutput",
  "transformers.models.reformer.modeling_reformer.ReformerClassificationHead",
  "transformers.models.reformer.modeling_reformer.ReformerEmbeddings",
  "transformers.models.reformer.modeling_reformer.ReformerEncoder",
  "transformers.models.reformer.modeling_reformer.ReformerEncoderOutput",
  "transformers.models.reformer.modeling_reformer.ReformerFeedForwardDense",
  "transformers.models.reformer.modeling_reformer.ReformerFeedForwardOutput",
  "transformers.models.reformer.modeling_reformer.ReformerLayer",
  "transformers.models.reformer.modeling_reformer.ReformerModel",
  "transformers.models.reformer.modeling_reformer.ReformerModelOutput",
  "transformers.models.reformer.modeling_reformer.ReformerModelWithLMHeadOutput",
  "transformers.models.reformer.modeling_reformer.ReformerOnlyLMHead",
  "transformers.models.reformer.modeling_reformer.ReformerOutput",
  "transformers.models.reformer.modeling_reformer.ReformerPreTrainedModel",
  "transformers.models.reformer.modeling_reformer.ReformerSelfOutput",
  "transformers.models.reformer.modeling_reformer._CONFIG_FOR_DOC",
  "transformers.models.reformer.modeling_reformer._ReversibleFunction",
  "transformers.models.reformer.modeling_reformer._TOKENIZER_FOR_DOC",
  "transformers.models.reformer.modeling_reformer._get_least_common_mult_chunk_len",
  "transformers.models.reformer.modeling_reformer._get_min_chunk_len",
  "transformers.models.reformer.modeling_reformer._stable_argsort",
  "transformers.models.reformer.modeling_reformer.logger",
  "transformers.models.reformer.tokenization_reformer.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.reformer.tokenization_reformer.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.reformer.tokenization_reformer.VOCAB_FILES_NAMES",
  "transformers.models.reformer.tokenization_reformer.logger",
  "transformers.models.reformer.tokenization_reformer_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.reformer.tokenization_reformer_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.reformer.tokenization_reformer_fast.VOCAB_FILES_NAMES",
  "transformers.models.reformer.tokenization_reformer_fast.logger",
  "transformers.models.retribert._LazyModule",
  "transformers.models.retribert._import_structure",
  "transformers.models.retribert.modeling_retribert.RETRIBERT_START_DOCSTRING",
  "transformers.models.retribert.modeling_retribert.RetriBertPreTrainedModel",
  "transformers.models.retribert.tokenization_retribert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.retribert.tokenization_retribert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.retribert.tokenization_retribert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.retribert.tokenization_retribert.VOCAB_FILES_NAMES",
  "transformers.models.retribert.tokenization_retribert_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.retribert.tokenization_retribert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.retribert.tokenization_retribert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.retribert.tokenization_retribert_fast.VOCAB_FILES_NAMES",
  "transformers.models.roberta._LazyModule",
  "transformers.models.roberta._import_structure",
  "transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.SAMPLE_TEXT",
  "transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.convert_roberta_checkpoint_to_pytorch",
  "transformers.models.roberta.convert_roberta_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaAttention",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEmbedding",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEmbeddings",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaEncoder",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaIntermediate",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayer",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayerCollection",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaLayerNorm",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaModule",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaOutput",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPooler",
  "transformers.models.roberta.modeling_flax_roberta.FlaxRobertaPreTrainedModel",
  "transformers.models.roberta.modeling_flax_roberta.ROBERTA_INPUTS_DOCSTRING",
  "transformers.models.roberta.modeling_flax_roberta.ROBERTA_START_DOCSTRING",
  "transformers.models.roberta.modeling_flax_roberta.create_position_ids_from_input_ids",
  "transformers.models.roberta.modeling_roberta.ROBERTA_INPUTS_DOCSTRING",
  "transformers.models.roberta.modeling_roberta.ROBERTA_START_DOCSTRING",
  "transformers.models.roberta.modeling_roberta.RobertaAttention",
  "transformers.models.roberta.modeling_roberta.RobertaClassificationHead",
  "transformers.models.roberta.modeling_roberta.RobertaEmbeddings",
  "transformers.models.roberta.modeling_roberta.RobertaEncoder",
  "transformers.models.roberta.modeling_roberta.RobertaIntermediate",
  "transformers.models.roberta.modeling_roberta.RobertaLMHead",
  "transformers.models.roberta.modeling_roberta.RobertaLayer",
  "transformers.models.roberta.modeling_roberta.RobertaModel",
  "transformers.models.roberta.modeling_roberta.RobertaOutput",
  "transformers.models.roberta.modeling_roberta.RobertaPooler",
  "transformers.models.roberta.modeling_roberta.RobertaPreTrainedModel",
  "transformers.models.roberta.modeling_roberta.RobertaSelfAttention",
  "transformers.models.roberta.modeling_roberta.RobertaSelfOutput",
  "transformers.models.roberta.modeling_roberta._CONFIG_FOR_DOC",
  "transformers.models.roberta.modeling_roberta._TOKENIZER_FOR_DOC",
  "transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids",
  "transformers.models.roberta.modeling_roberta.logger",
  "transformers.models.roberta.modeling_tf_roberta.ROBERTA_INPUTS_DOCSTRING",
  "transformers.models.roberta.modeling_tf_roberta.ROBERTA_START_DOCSTRING",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaAttention",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaClassificationHead",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaEncoder",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaIntermediate",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaLMHead",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaLayer",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaOutput",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaPooler",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaPositionEmbeddings",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaPreTrainedModel",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfAttention",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaSelfOutput",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaTokenTypeEmbeddings",
  "transformers.models.roberta.modeling_tf_roberta.TFRobertaWordEmbeddings",
  "transformers.models.roberta.modeling_tf_roberta._CONFIG_FOR_DOC",
  "transformers.models.roberta.modeling_tf_roberta._TOKENIZER_FOR_DOC",
  "transformers.models.roberta.tokenization_roberta.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.roberta.tokenization_roberta.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.roberta.tokenization_roberta.VOCAB_FILES_NAMES",
  "transformers.models.roberta.tokenization_roberta_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.roberta.tokenization_roberta_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.roberta.tokenization_roberta_fast.VOCAB_FILES_NAMES",
  "transformers.models.squeezebert._LazyModule",
  "transformers.models.squeezebert._import_structure",
  "transformers.models.squeezebert.configuration_squeezebert.SQUEEZEBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.models.squeezebert.modeling_squeezebert.ConvActivation",
  "transformers.models.squeezebert.modeling_squeezebert.ConvDropoutLayerNorm",
  "transformers.models.squeezebert.modeling_squeezebert.MatMulWrapper",
  "transformers.models.squeezebert.modeling_squeezebert.SQUEEZEBERT_INPUTS_DOCSTRING",
  "transformers.models.squeezebert.modeling_squeezebert.SQUEEZEBERT_START_DOCSTRING",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEmbeddings",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertEncoder",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLMPredictionHead",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertLayerNorm",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModel",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertModule",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertOnlyMLMHead",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPooler",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPreTrainedModel",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertPredictionHeadTransform",
  "transformers.models.squeezebert.modeling_squeezebert.SqueezeBertSelfAttention",
  "transformers.models.squeezebert.modeling_squeezebert._CONFIG_FOR_DOC",
  "transformers.models.squeezebert.modeling_squeezebert._TOKENIZER_FOR_DOC",
  "transformers.models.squeezebert.tokenization_squeezebert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.squeezebert.tokenization_squeezebert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.squeezebert.tokenization_squeezebert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.squeezebert.tokenization_squeezebert.VOCAB_FILES_NAMES",
  "transformers.models.squeezebert.tokenization_squeezebert_fast.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.squeezebert.tokenization_squeezebert_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.squeezebert.tokenization_squeezebert_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.squeezebert.tokenization_squeezebert_fast.VOCAB_FILES_NAMES",
  "transformers.models.t5._LazyModule",
  "transformers.models.t5._import_structure",
  "transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.t5.convert_t5_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.t5.modeling_t5.DEPARALLELIZE_DOCSTRING",
  "transformers.models.t5.modeling_t5.PARALLELIZE_DOCSTRING",
  "transformers.models.t5.modeling_t5.T5Attention",
  "transformers.models.t5.modeling_t5.T5Block",
  "transformers.models.t5.modeling_t5.T5DenseGatedGeluDense",
  "transformers.models.t5.modeling_t5.T5DenseReluDense",
  "transformers.models.t5.modeling_t5.T5LayerCrossAttention",
  "transformers.models.t5.modeling_t5.T5LayerFF",
  "transformers.models.t5.modeling_t5.T5LayerNorm",
  "transformers.models.t5.modeling_t5.T5LayerSelfAttention",
  "transformers.models.t5.modeling_t5.T5PreTrainedModel",
  "transformers.models.t5.modeling_t5.T5Stack",
  "transformers.models.t5.modeling_t5.T5_ENCODER_INPUTS_DOCSTRING",
  "transformers.models.t5.modeling_t5.T5_INPUTS_DOCSTRING",
  "transformers.models.t5.modeling_t5.T5_START_DOCSTRING",
  "transformers.models.t5.modeling_t5._CONFIG_FOR_DOC",
  "transformers.models.t5.modeling_t5.__HEAD_MASK_WARNING_MSG",
  "transformers.models.t5.modeling_t5.load_tf_weights_in_t5",
  "transformers.models.t5.modeling_t5.logger",
  "transformers.models.t5.modeling_tf_t5.T5_ENCODER_INPUTS_DOCSTRING",
  "transformers.models.t5.modeling_tf_t5.T5_INPUTS_DOCSTRING",
  "transformers.models.t5.modeling_tf_t5.T5_START_DOCSTRING",
  "transformers.models.t5.modeling_tf_t5.TFT5Attention",
  "transformers.models.t5.modeling_tf_t5.TFT5Block",
  "transformers.models.t5.modeling_tf_t5.TFT5DenseReluDense",
  "transformers.models.t5.modeling_tf_t5.TFT5GatedGeluDense",
  "transformers.models.t5.modeling_tf_t5.TFT5LayerCrossAttention",
  "transformers.models.t5.modeling_tf_t5.TFT5LayerFF",
  "transformers.models.t5.modeling_tf_t5.TFT5LayerNorm",
  "transformers.models.t5.modeling_tf_t5.TFT5LayerSelfAttention",
  "transformers.models.t5.modeling_tf_t5.TFT5MainLayer",
  "transformers.models.t5.modeling_tf_t5.TFT5PreTrainedModel",
  "transformers.models.t5.modeling_tf_t5._CONFIG_FOR_DOC",
  "transformers.models.t5.modeling_tf_t5.__HEAD_MASK_WARNING_MSG",
  "transformers.models.t5.modeling_tf_t5.logger",
  "transformers.models.t5.tokenization_t5.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.t5.tokenization_t5.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.t5.tokenization_t5.VOCAB_FILES_NAMES",
  "transformers.models.t5.tokenization_t5.logger",
  "transformers.models.t5.tokenization_t5_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.t5.tokenization_t5_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.t5.tokenization_t5_fast.VOCAB_FILES_NAMES",
  "transformers.models.t5.tokenization_t5_fast.logger",
  "transformers.models.tapas._LazyModule",
  "transformers.models.tapas._import_structure",
  "transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.models.tapas.convert_tapas_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.tapas.modeling_tapas.AverageApproximationFunction",
  "transformers.models.tapas.modeling_tapas.CLOSE_ENOUGH_TO_LOG_ZERO",
  "transformers.models.tapas.modeling_tapas.EPSILON_ZERO_DIVISION",
  "transformers.models.tapas.modeling_tapas.IndexMap",
  "transformers.models.tapas.modeling_tapas.ProductIndexMap",
  "transformers.models.tapas.modeling_tapas.TAPAS_INPUTS_DOCSTRING",
  "transformers.models.tapas.modeling_tapas.TAPAS_START_DOCSTRING",
  "transformers.models.tapas.modeling_tapas.TableQuestionAnsweringOutput",
  "transformers.models.tapas.modeling_tapas.TapasAttention",
  "transformers.models.tapas.modeling_tapas.TapasEmbeddings",
  "transformers.models.tapas.modeling_tapas.TapasEncoder",
  "transformers.models.tapas.modeling_tapas.TapasIntermediate",
  "transformers.models.tapas.modeling_tapas.TapasLayer",
  "transformers.models.tapas.modeling_tapas.TapasModel",
  "transformers.models.tapas.modeling_tapas.TapasOutput",
  "transformers.models.tapas.modeling_tapas.TapasPooler",
  "transformers.models.tapas.modeling_tapas.TapasPreTrainedModel",
  "transformers.models.tapas.modeling_tapas.TapasSelfAttention",
  "transformers.models.tapas.modeling_tapas.TapasSelfOutput",
  "transformers.models.tapas.modeling_tapas._CONFIG_FOR_DOC",
  "transformers.models.tapas.modeling_tapas._calculate_aggregate_mask",
  "transformers.models.tapas.modeling_tapas._calculate_aggregation_loss",
  "transformers.models.tapas.modeling_tapas._calculate_aggregation_loss_known",
  "transformers.models.tapas.modeling_tapas._calculate_aggregation_loss_unknown",
  "transformers.models.tapas.modeling_tapas._calculate_expected_result",
  "transformers.models.tapas.modeling_tapas._calculate_regression_loss",
  "transformers.models.tapas.modeling_tapas._segment_reduce",
  "transformers.models.tapas.modeling_tapas._single_column_cell_selection_loss",
  "transformers.models.tapas.modeling_tapas.compute_column_logits",
  "transformers.models.tapas.modeling_tapas.compute_token_logits",
  "transformers.models.tapas.modeling_tapas.flatten",
  "transformers.models.tapas.modeling_tapas.gather",
  "transformers.models.tapas.modeling_tapas.huber_loss",
  "transformers.models.tapas.modeling_tapas.logger",
  "transformers.models.tapas.modeling_tapas.range_index_map",
  "transformers.models.tapas.modeling_tapas.reduce_max",
  "transformers.models.tapas.modeling_tapas.reduce_mean",
  "transformers.models.tapas.modeling_tapas.reduce_min",
  "transformers.models.tapas.modeling_tapas.reduce_sum",
  "transformers.models.tapas.tokenization_tapas.BasicTokenizer",
  "transformers.models.tapas.tokenization_tapas.Cell",
  "transformers.models.tapas.tokenization_tapas.DATE_TYPE",
  "transformers.models.tapas.tokenization_tapas.Date",
  "transformers.models.tapas.tokenization_tapas.NUMBER_TYPE",
  "transformers.models.tapas.tokenization_tapas.NumericValue",
  "transformers.models.tapas.tokenization_tapas.NumericValueSpan",
  "transformers.models.tapas.tokenization_tapas.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.tapas.tokenization_tapas.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.tapas.tokenization_tapas.Question",
  "transformers.models.tapas.tokenization_tapas.Relation",
  "transformers.models.tapas.tokenization_tapas.SerializedExample",
  "transformers.models.tapas.tokenization_tapas.TAPAS_ENCODE_PLUS_ADDITIONAL_KWARGS_DOCSTRING",
  "transformers.models.tapas.tokenization_tapas.TableValue",
  "transformers.models.tapas.tokenization_tapas.TapasTruncationStrategy",
  "transformers.models.tapas.tokenization_tapas.TokenCoordinates",
  "transformers.models.tapas.tokenization_tapas.TokenizedTable",
  "transformers.models.tapas.tokenization_tapas.VOCAB_FILES_NAMES",
  "transformers.models.tapas.tokenization_tapas.WordpieceTokenizer",
  "transformers.models.tapas.tokenization_tapas._DATE_PATTERNS",
  "transformers.models.tapas.tokenization_tapas._DATE_TUPLE_SIZE",
  "transformers.models.tapas.tokenization_tapas._DateMask",
  "transformers.models.tapas.tokenization_tapas._FIELD_TO_REGEX",
  "transformers.models.tapas.tokenization_tapas._INF",
  "transformers.models.tapas.tokenization_tapas._MAX_DATE_NGRAM_SIZE",
  "transformers.models.tapas.tokenization_tapas._MAX_YEAR",
  "transformers.models.tapas.tokenization_tapas._MIN_YEAR",
  "transformers.models.tapas.tokenization_tapas._MONTH",
  "transformers.models.tapas.tokenization_tapas._MONTH_DAY",
  "transformers.models.tapas.tokenization_tapas._NUMBER_PATTERN",
  "transformers.models.tapas.tokenization_tapas._NUMBER_WORDS",
  "transformers.models.tapas.tokenization_tapas._ORDINAL_SUFFIXES",
  "transformers.models.tapas.tokenization_tapas._ORDINAL_WORDS",
  "transformers.models.tapas.tokenization_tapas._PROCESSED_DATE_PATTERNS",
  "transformers.models.tapas.tokenization_tapas._YEAR",
  "transformers.models.tapas.tokenization_tapas._YEAR_MONTH",
  "transformers.models.tapas.tokenization_tapas._YEAR_MONTH_DAY",
  "transformers.models.tapas.tokenization_tapas._consolidate_numeric_values",
  "transformers.models.tapas.tokenization_tapas._get_all_types",
  "transformers.models.tapas.tokenization_tapas._get_column_values",
  "transformers.models.tapas.tokenization_tapas._get_numeric_value_from_date",
  "transformers.models.tapas.tokenization_tapas._get_numeric_value_from_float",
  "transformers.models.tapas.tokenization_tapas._get_numeric_values",
  "transformers.models.tapas.tokenization_tapas._get_span_length_key",
  "transformers.models.tapas.tokenization_tapas._get_value_as_primitive_value",
  "transformers.models.tapas.tokenization_tapas._get_value_type",
  "transformers.models.tapas.tokenization_tapas._is_inner_wordpiece",
  "transformers.models.tapas.tokenization_tapas._parse_date",
  "transformers.models.tapas.tokenization_tapas._parse_number",
  "transformers.models.tapas.tokenization_tapas._process_date_pattern",
  "transformers.models.tapas.tokenization_tapas._process_date_patterns",
  "transformers.models.tapas.tokenization_tapas.add_numeric_table_values",
  "transformers.models.tapas.tokenization_tapas.add_numeric_values_to_question",
  "transformers.models.tapas.tokenization_tapas.filter_invalid_unicode",
  "transformers.models.tapas.tokenization_tapas.filter_invalid_unicode_from_table",
  "transformers.models.tapas.tokenization_tapas.format_text",
  "transformers.models.tapas.tokenization_tapas.get_all_spans",
  "transformers.models.tapas.tokenization_tapas.get_numeric_relation",
  "transformers.models.tapas.tokenization_tapas.get_numeric_sort_key_fn",
  "transformers.models.tapas.tokenization_tapas.load_vocab",
  "transformers.models.tapas.tokenization_tapas.logger",
  "transformers.models.tapas.tokenization_tapas.normalize_for_match",
  "transformers.models.tapas.tokenization_tapas.parse_text",
  "transformers.models.tapas.tokenization_tapas.whitespace_tokenize",
  "transformers.models.transfo_xl._LazyModule",
  "transformers.models.transfo_xl._import_structure",
  "transformers.models.transfo_xl.configuration_transfo_xl.logger",
  "transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch",
  "transformers.models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFAdaptiveEmbedding",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionalEmbedding",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFPositionwiseFF",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLLMHeadModelOutput",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLMainLayer",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLModelOutput",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLPreTrainedModel",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TFTransfoXLSequenceClassifierOutputWithPast",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TRANSFO_XL_INPUTS_DOCSTRING",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.TRANSFO_XL_START_DOCSTRING",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl._CONFIG_FOR_DOC",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl._TOKENIZER_FOR_DOC",
  "transformers.models.transfo_xl.modeling_tf_transfo_xl.logger",
  "transformers.models.transfo_xl.modeling_transfo_xl.AdaptiveEmbedding",
  "transformers.models.transfo_xl.modeling_transfo_xl.PositionalEmbedding",
  "transformers.models.transfo_xl.modeling_transfo_xl.PositionwiseFF",
  "transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableDecoderLayer",
  "transformers.models.transfo_xl.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn",
  "transformers.models.transfo_xl.modeling_transfo_xl.TRANSFO_XL_INPUTS_DOCSTRING",
  "transformers.models.transfo_xl.modeling_transfo_xl.TRANSFO_XL_START_DOCSTRING",
  "transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLLMHeadModelOutput",
  "transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModel",
  "transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLModelOutput",
  "transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLPreTrainedModel",
  "transformers.models.transfo_xl.modeling_transfo_xl.TransfoXLSequenceClassifierOutputWithPast",
  "transformers.models.transfo_xl.modeling_transfo_xl._CONFIG_FOR_DOC",
  "transformers.models.transfo_xl.modeling_transfo_xl._TOKENIZER_FOR_DOC",
  "transformers.models.transfo_xl.modeling_transfo_xl.build_tf_to_pytorch_map",
  "transformers.models.transfo_xl.modeling_transfo_xl.load_tf_weights_in_transfo_xl",
  "transformers.models.transfo_xl.modeling_transfo_xl.logger",
  "transformers.models.transfo_xl.tokenization_transfo_xl",
  "transformers.models.transfo_xl.tokenization_transfo_xl.CORPUS_NAME",
  "transformers.models.transfo_xl.tokenization_transfo_xl.Corpus",
  "transformers.models.transfo_xl.tokenization_transfo_xl.DETOKENIZE_NUMBERS",
  "transformers.models.transfo_xl.tokenization_transfo_xl.LMMultiFileIterator",
  "transformers.models.transfo_xl.tokenization_transfo_xl.LMOrderedIterator",
  "transformers.models.transfo_xl.tokenization_transfo_xl.LMShuffledIterator",
  "transformers.models.transfo_xl.tokenization_transfo_xl.MATCH_NUMBERS",
  "transformers.models.transfo_xl.tokenization_transfo_xl.PRETRAINED_CORPUS_ARCHIVE_MAP",
  "transformers.models.transfo_xl.tokenization_transfo_xl.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.transfo_xl.tokenization_transfo_xl.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLCorpus",
  "transformers.models.transfo_xl.tokenization_transfo_xl.TransfoXLTokenizer",
  "transformers.models.transfo_xl.tokenization_transfo_xl.VOCAB_FILES_NAMES",
  "transformers.models.transfo_xl.tokenization_transfo_xl.Vocab",
  "transformers.models.transfo_xl.tokenization_transfo_xl.detokenize_numbers",
  "transformers.models.transfo_xl.tokenization_transfo_xl.logger",
  "transformers.models.transfo_xl.tokenization_transfo_xl.tokenize_numbers",
  "transformers.models.wav2vec2._LazyModule",
  "transformers.models.wav2vec2._import_structure",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.MAPPING",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.convert_wav2vec2_checkpoint",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.load_conv_layer",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.logger",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.recursively_load_weights",
  "transformers.models.wav2vec2.convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.set_recursively",
  "transformers.models.wav2vec2.modeling_wav2vec2.WAV_2_VEC_2_INPUTS_DOCSTRING",
  "transformers.models.wav2vec2.modeling_wav2vec2.WAV_2_VEC_2_START_DOCSTRING",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2Attention",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2Encoder",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderLayer",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderLayerStableLayerNorm",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderStableLayerNorm",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeatureExtractor",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeatureProjection",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeedForward",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2GroupNormConvLayer",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2LayerNormConvLayer",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2Model",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2NoLayerNormConvLayer",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2PositionalConvEmbedding",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2PreTrainedModel",
  "transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2SamePadLayer",
  "transformers.models.wav2vec2.modeling_wav2vec2._CONFIG_FOR_DOC",
  "transformers.models.wav2vec2.tokenization_wav2vec2.VOCAB_FILES_NAMES",
  "transformers.models.wav2vec2.tokenization_wav2vec2.WAV2VEC2_KWARGS_DOCSTRING",
  "transformers.models.wav2vec2.tokenization_wav2vec2.logger",
  "transformers.models.xlm._LazyModule",
  "transformers.models.xlm._import_structure",
  "transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch",
  "transformers.models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.models.xlm.modeling_tf_xlm.TFXLMMainLayer",
  "transformers.models.xlm.modeling_tf_xlm.TFXLMMultiHeadAttention",
  "transformers.models.xlm.modeling_tf_xlm.TFXLMPreTrainedModel",
  "transformers.models.xlm.modeling_tf_xlm.TFXLMPredLayer",
  "transformers.models.xlm.modeling_tf_xlm.TFXLMTransformerFFN",
  "transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModelOutput",
  "transformers.models.xlm.modeling_tf_xlm.XLM_INPUTS_DOCSTRING",
  "transformers.models.xlm.modeling_tf_xlm.XLM_START_DOCSTRING",
  "transformers.models.xlm.modeling_tf_xlm._CONFIG_FOR_DOC",
  "transformers.models.xlm.modeling_tf_xlm._TOKENIZER_FOR_DOC",
  "transformers.models.xlm.modeling_tf_xlm.get_masks",
  "transformers.models.xlm.modeling_tf_xlm.logger",
  "transformers.models.xlm.modeling_xlm.MultiHeadAttention",
  "transformers.models.xlm.modeling_xlm.TransformerFFN",
  "transformers.models.xlm.modeling_xlm.XLMForQuestionAnsweringOutput",
  "transformers.models.xlm.modeling_xlm.XLMModel",
  "transformers.models.xlm.modeling_xlm.XLMPreTrainedModel",
  "transformers.models.xlm.modeling_xlm.XLMPredLayer",
  "transformers.models.xlm.modeling_xlm.XLM_INPUTS_DOCSTRING",
  "transformers.models.xlm.modeling_xlm.XLM_START_DOCSTRING",
  "transformers.models.xlm.modeling_xlm._CONFIG_FOR_DOC",
  "transformers.models.xlm.modeling_xlm._TOKENIZER_FOR_DOC",
  "transformers.models.xlm.modeling_xlm.create_sinusoidal_embeddings",
  "transformers.models.xlm.modeling_xlm.get_masks",
  "transformers.models.xlm.modeling_xlm.logger",
  "transformers.models.xlm.tokenization_xlm.PRETRAINED_INIT_CONFIGURATION",
  "transformers.models.xlm.tokenization_xlm.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.xlm.tokenization_xlm.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.xlm.tokenization_xlm.VOCAB_FILES_NAMES",
  "transformers.models.xlm.tokenization_xlm.get_pairs",
  "transformers.models.xlm.tokenization_xlm.jieba",
  "transformers.models.xlm.tokenization_xlm.logger",
  "transformers.models.xlm.tokenization_xlm.lowercase_and_remove_accent",
  "transformers.models.xlm.tokenization_xlm.remove_non_printing_char",
  "transformers.models.xlm.tokenization_xlm.replace_unicode_punct",
  "transformers.models.xlm.tokenization_xlm.romanian_preprocessing",
  "transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.SPIECE_UNDERLINE",
  "transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.VOCAB_FILES_NAMES",
  "transformers.models.xlm_prophetnet.tokenization_xlm_prophetnet.logger",
  "transformers.models.xlm_roberta._LazyModule",
  "transformers.models.xlm_roberta._import_structure",
  "transformers.models.xlm_roberta.modeling_tf_xlm_roberta.XLM_ROBERTA_START_DOCSTRING",
  "transformers.models.xlm_roberta.modeling_xlm_roberta.XLM_ROBERTA_START_DOCSTRING",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta.SPIECE_UNDERLINE",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta.VOCAB_FILES_NAMES",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta.logger",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.VOCAB_FILES_NAMES",
  "transformers.models.xlm_roberta.tokenization_xlm_roberta_fast.logger",
  "transformers.models.xlnet._LazyModule",
  "transformers.models.xlnet._import_structure",
  "transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.GLUE_TASKS_NUM_LABELS",
  "transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.args",
  "transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch",
  "transformers.models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.parser",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetFeedForward",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoiceOutput",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimpleOutput",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForSequenceClassificationOutput",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetForTokenClassificationOutput",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHead",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLMHeadModelOutput",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetLayer",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetMainLayer",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetModelOutput",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetPreTrainedModel",
  "transformers.models.xlnet.modeling_tf_xlnet.TFXLNetRelativeAttention",
  "transformers.models.xlnet.modeling_tf_xlnet.XLNET_INPUTS_DOCSTRING",
  "transformers.models.xlnet.modeling_tf_xlnet.XLNET_START_DOCSTRING",
  "transformers.models.xlnet.modeling_tf_xlnet._CONFIG_FOR_DOC",
  "transformers.models.xlnet.modeling_tf_xlnet._TOKENIZER_FOR_DOC",
  "transformers.models.xlnet.modeling_xlnet.XLNET_INPUTS_DOCSTRING",
  "transformers.models.xlnet.modeling_xlnet.XLNET_START_DOCSTRING",
  "transformers.models.xlnet.modeling_xlnet.XLNetFeedForward",
  "transformers.models.xlnet.modeling_xlnet.XLNetForMultipleChoiceOutput",
  "transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnsweringOutput",
  "transformers.models.xlnet.modeling_xlnet.XLNetForQuestionAnsweringSimpleOutput",
  "transformers.models.xlnet.modeling_xlnet.XLNetForSequenceClassificationOutput",
  "transformers.models.xlnet.modeling_xlnet.XLNetForTokenClassificationOutput",
  "transformers.models.xlnet.modeling_xlnet.XLNetLMHeadModelOutput",
  "transformers.models.xlnet.modeling_xlnet.XLNetLayer",
  "transformers.models.xlnet.modeling_xlnet.XLNetModel",
  "transformers.models.xlnet.modeling_xlnet.XLNetModelOutput",
  "transformers.models.xlnet.modeling_xlnet.XLNetPreTrainedModel",
  "transformers.models.xlnet.modeling_xlnet.XLNetRelativeAttention",
  "transformers.models.xlnet.modeling_xlnet._CONFIG_FOR_DOC",
  "transformers.models.xlnet.modeling_xlnet._TOKENIZER_FOR_DOC",
  "transformers.models.xlnet.modeling_xlnet.build_tf_xlnet_to_pytorch_map",
  "transformers.models.xlnet.modeling_xlnet.load_tf_weights_in_xlnet",
  "transformers.models.xlnet.modeling_xlnet.logger",
  "transformers.models.xlnet.tokenization_xlnet.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.xlnet.tokenization_xlnet.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.xlnet.tokenization_xlnet.VOCAB_FILES_NAMES",
  "transformers.models.xlnet.tokenization_xlnet.logger",
  "transformers.models.xlnet.tokenization_xlnet_fast.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.models.xlnet.tokenization_xlnet_fast.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.models.xlnet.tokenization_xlnet_fast.VOCAB_FILES_NAMES",
  "transformers.models.xlnet.tokenization_xlnet_fast.logger",
  "transformers.optimization.TYPE_TO_SCHEDULER_FUNCTION",
  "transformers.optimization.get_constant_schedule",
  "transformers.optimization.get_constant_schedule_with_warmup",
  "transformers.optimization.get_cosine_schedule_with_warmup",
  "transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup",
  "transformers.optimization.get_linear_schedule_with_warmup",
  "transformers.optimization.get_polynomial_decay_schedule_with_warmup",
  "transformers.optimization_tf.AdamWeightDecay",
  "transformers.optimization_tf.WarmUp",
  "transformers.pipelines.SUPPORTED_TASKS",
  "transformers.pipelines.base.ArgumentHandler",
  "transformers.pipelines.base.CsvPipelineDataFormat",
  "transformers.pipelines.base.JsonPipelineDataFormat",
  "transformers.pipelines.base.PIPELINE_INIT_ARGS",
  "transformers.pipelines.base.PipedPipelineDataFormat",
  "transformers.pipelines.base.PipelineDataFormat",
  "transformers.pipelines.base.PipelineException",
  "transformers.pipelines.base._ScikitCompat",
  "transformers.pipelines.base.get_framework",
  "transformers.pipelines.base.logger",
  "transformers.pipelines.check_task",
  "transformers.pipelines.conversational.Conversation",
  "transformers.pipelines.conversational.logger",
  "transformers.pipelines.fill_mask.logger",
  "transformers.pipelines.logger",
  "transformers.pipelines.question_answering.QuestionAnsweringArgumentHandler",
  "transformers.pipelines.table_question_answering.TableQuestionAnsweringArgumentHandler",
  "transformers.pipelines.text2text_generation.Text2TextGenerationPipeline",
  "transformers.pipelines.text2text_generation.logger",
  "transformers.pipelines.token_classification.TokenClassificationArgumentHandler",
  "transformers.pipelines.token_classification.TokenClassificationPipeline",
  "transformers.pipelines.zero_shot_classification.ZeroShotClassificationArgumentHandler",
  "transformers.pipelines.zero_shot_classification.logger",
  "transformers.testing_utils.CaptureStd",
  "transformers.testing_utils._RunOutput",
  "transformers.testing_utils._run_custom_tokenizers",
  "transformers.testing_utils._run_git_lfs_tests",
  "transformers.testing_utils._run_pipeline_tests",
  "transformers.testing_utils._run_pt_tf_cross_tests",
  "transformers.testing_utils._run_slow_tests",
  "transformers.testing_utils.apply_print_resets",
  "transformers.testing_utils.err",
  "transformers.testing_utils.line",
  "transformers.testing_utils.out",
  "transformers.testing_utils.p",
  "transformers.testing_utils.parse_flag_from_env",
  "transformers.testing_utils.parse_int_from_env",
  "transformers.testing_utils.pytest_opt_registered",
  "transformers.testing_utils.require_torch_non_multi_gpu",
  "transformers.testing_utils.tee",
  "transformers.testing_utils.torch_device",
  "transformers.tokenization_utils._is_control",
  "transformers.tokenization_utils._is_end_of_word",
  "transformers.tokenization_utils._is_punctuation",
  "transformers.tokenization_utils._is_start_of_word",
  "transformers.tokenization_utils._is_whitespace",
  "transformers.tokenization_utils.logger",
  "transformers.tokenization_utils_base.ADDED_TOKENS_FILE",
  "transformers.tokenization_utils_base.BatchEncoding",
  "transformers.tokenization_utils_base.CharSpan",
  "transformers.tokenization_utils_base.ENCODE_KWARGS_DOCSTRING",
  "transformers.tokenization_utils_base.ENCODE_PLUS_ADDITIONAL_KWARGS_DOCSTRING",
  "transformers.tokenization_utils_base.EncodedInput",
  "transformers.tokenization_utils_base.EncodedInputPair",
  "transformers.tokenization_utils_base.ExplicitEnum",
  "transformers.tokenization_utils_base.FULL_TOKENIZER_FILE",
  "transformers.tokenization_utils_base.INIT_TOKENIZER_DOCSTRING",
  "transformers.tokenization_utils_base.LARGE_INTEGER",
  "transformers.tokenization_utils_base.PaddingStrategy",
  "transformers.tokenization_utils_base.PreTokenizedInput",
  "transformers.tokenization_utils_base.PreTokenizedInputPair",
  "transformers.tokenization_utils_base.SPECIAL_TOKENS_MAP_FILE",
  "transformers.tokenization_utils_base.SpecialTokensMixin",
  "transformers.tokenization_utils_base.TOKENIZER_CONFIG_FILE",
  "transformers.tokenization_utils_base.TensorType",
  "transformers.tokenization_utils_base.TextInput",
  "transformers.tokenization_utils_base.TextInputPair",
  "transformers.tokenization_utils_base.TokenSpan",
  "transformers.tokenization_utils_base.TruncationStrategy",
  "transformers.tokenization_utils_base.VERY_LARGE_INTEGER",
  "transformers.tokenization_utils_base._is_jax",
  "transformers.tokenization_utils_base._is_numpy",
  "transformers.tokenization_utils_base._is_tensorflow",
  "transformers.tokenization_utils_base._is_torch",
  "transformers.tokenization_utils_base._is_torch_device",
  "transformers.tokenization_utils_base.logger",
  "transformers.tokenization_utils_base.to_py_obj",
  "transformers.tokenization_utils_fast.ADDED_TOKENS_FILE",
  "transformers.tokenization_utils_fast.TOKENIZER_FILE",
  "transformers.trainer.DEFAULT_CALLBACKS",
  "transformers.trainer.DEFAULT_PROGRESS_CALLBACK",
  "transformers.trainer._is_native_amp_available",
  "transformers.trainer._model_unwrap",
  "transformers.trainer.logger",
  "transformers.trainer_callback.TrainerCallback",
  "transformers.trainer_callback.TrainerControl",
  "transformers.trainer_callback.TrainerState",
  "transformers.trainer_callback.logger",
  "transformers.trainer_pt_utils._get_first_shape",
  "transformers.trainer_pt_utils.get_length_grouped_indices",
  "transformers.trainer_pt_utils.logger",
  "transformers.trainer_pt_utils.nested_expand_like",
  "transformers.trainer_pt_utils.nested_new_like",
  "transformers.trainer_pt_utils.nested_truncate",
  "transformers.trainer_pt_utils.numpy_pad_and_concatenate",
  "transformers.trainer_pt_utils.torch_pad_and_concatenate",
  "transformers.trainer_tf.logger",
  "transformers.trainer_utils.HPSearchBackend",
  "transformers.trainer_utils.PREFIX_CHECKPOINT_DIR",
  "transformers.trainer_utils._re_checkpoint",
  "transformers.trainer_utils.default_hp_space_optuna",
  "transformers.trainer_utils.default_hp_space_ray",
  "transformers.training_args.default_logdir",
  "transformers.training_args.logger",
  "transformers.training_args_tf.logger",
  "transformers.utils.hp_naming.TrialShortNamer",
  "transformers.utils.logging._configure_library_root_logger",
  "transformers.utils.logging._default_log_level",
  "transformers.utils.logging._get_default_logging_level",
  "transformers.utils.logging._get_library_name",
  "transformers.utils.logging._get_library_root_logger",
  "transformers.utils.logging._lock",
  "transformers.utils.logging.get_logger",
  "transformers.utils.logging.log_levels",
  "transformers.utils.logging.set_verbosity",
  "transformers.utils.logging.set_verbosity_info",
  "transformers.utils.logging.set_verbosity_warning",
  "transformers.utils.notebook.NotebookProgressBar",
  "transformers.utils.notebook.NotebookTrainingTracker",
  "transformers.utils.notebook.format_time",
  "transformers.utils.notebook.html_progress_bar",
  "transformers.utils.notebook.text_to_html_table",
  "transformers.utils.sentencepiece_model_pb2.DESCRIPTOR",
  "transformers.utils.sentencepiece_model_pb2.ModelProto",
  "transformers.utils.sentencepiece_model_pb2.NormalizerSpec",
  "transformers.utils.sentencepiece_model_pb2.SelfTestData",
  "transformers.utils.sentencepiece_model_pb2.TrainerSpec",
  "transformers.utils.sentencepiece_model_pb2._MODELPROTO",
  "transformers.utils.sentencepiece_model_pb2._MODELPROTO_SENTENCEPIECE",
  "transformers.utils.sentencepiece_model_pb2._MODELPROTO_SENTENCEPIECE_TYPE",
  "transformers.utils.sentencepiece_model_pb2._NORMALIZERSPEC",
  "transformers.utils.sentencepiece_model_pb2._SELFTESTDATA",
  "transformers.utils.sentencepiece_model_pb2._SELFTESTDATA_SAMPLE",
  "transformers.utils.sentencepiece_model_pb2._TRAINERSPEC",
  "transformers.utils.sentencepiece_model_pb2._TRAINERSPEC_MODELTYPE",
  "transformers.utils.sentencepiece_model_pb2._b",
  "transformers.utils.sentencepiece_model_pb2._sym_db",
  "transformers.utils.versions.ops",
  "transformers.utils.versions.require_version",
  "transformers_old.modeling_prophetnet.ProphetNetForConditionalGeneration.from_pretrained",
  "transformers_old.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration.from_pretrained",
  "truncate_seq_pair",
  "types.ModuleType",
  "types.SimpleNamespace",
  "typing.Any",
  "typing.BinaryIO",
  "typing.Callable",
  "typing.Dict",
  "typing.Generator",
  "typing.Iterable",
  "typing.Iterator",
  "typing.List",
  "typing.NamedTuple",
  "typing.NewType",
  "typing.Optional",
  "typing.Sequence",
  "typing.Set",
  "typing.TYPE_CHECKING",
  "typing.Text",
  "typing.Tuple",
  "typing.Union",
  "unicodedata.category",
  "unicodedata.combining",
  "unicodedata.normalize",
  "unidic.DICDIR",
  "unidic_lite.DICDIR",
  "unittest.TestCase",
  "unittest.mock.patch.dict",
  "unittest.skip",
  "unshape",
  "urllib.parse.urlparse",
  "user.UserCommands.register_subcommand",
  "utils.DataProcessor",
  "utils.InputExample",
  "utils.InputFeatures",
  "utils.dummy_flax_objects",
  "utils.dummy_pt_objects",
  "utils.dummy_sentencepiece_objects",
  "utils.dummy_tf_objects",
  "utils.dummy_tokenizers_objects",
  "utils.logging.NOTSET",
  "utils.logging.WARN",
  "utils.logging.get_logger",
  "utils.logging.get_verbosity",
  "utils.logging.info",
  "utils.logging.set_verbosity_info",
  "utils.logging.warning",
  "utils.model_parallel_utils.assert_device_map",
  "utils.model_parallel_utils.get_device_map",
  "utils.notebook.NotebookProgressCallback",
  "utils.sentencepiece_model_pb2.ModelProto",
  "utils.versions.require_version_core",
  "uuid.UUID",
  "uuid.uuid4",
  "uvicorn.run",
  "visn_loss_fct",
  "visual_loss_fct",
  "wandb.api.api_key",
  "wandb.ensure_configured",
  "wandb.init",
  "wandb.log",
  "warnings.catch_warnings",
  "warnings.warn",
  "wav2vec2.configuration_wav2vec2.WAV_2_VEC_2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "wav2vec2.configuration_wav2vec2.Wav2Vec2Config",
  "wav2vec2.modeling_wav2vec2.Wav2Vec2ForMaskedLM",
  "wav2vec2.modeling_wav2vec2.Wav2Vec2Model",
  "wav2vec2.tokenization_wav2vec2.Wav2Vec2Tokenizer",
  "wget.download",
  "white_space_fix",
  "xlm.configuration_xlm.XLMConfig",
  "xlm.configuration_xlm.XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlm.modeling_tf_xlm.TFXLMForMultipleChoice",
  "xlm.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple",
  "xlm.modeling_tf_xlm.TFXLMForSequenceClassification",
  "xlm.modeling_tf_xlm.TFXLMForTokenClassification",
  "xlm.modeling_tf_xlm.TFXLMModel",
  "xlm.modeling_tf_xlm.TFXLMWithLMHeadModel",
  "xlm.modeling_xlm.XLMForMultipleChoice",
  "xlm.modeling_xlm.XLMForQuestionAnswering",
  "xlm.modeling_xlm.XLMForQuestionAnsweringSimple",
  "xlm.modeling_xlm.XLMForSequenceClassification",
  "xlm.modeling_xlm.XLMForTokenClassification",
  "xlm.modeling_xlm.XLMModel",
  "xlm.modeling_xlm.XLMWithLMHeadModel",
  "xlm.modeling_xlm.get_masks",
  "xlm.tokenization_xlm.XLMTokenizer",
  "xlm_prophetnet.configuration_xlm_prophetnet.XLMProphetNetConfig",
  "xlm_prophetnet.configuration_xlm_prophetnet.XLM_PROPHETNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetForCausalLM",
  "xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration",
  "xlm_prophetnet.modeling_xlm_prophetnet.XLMProphetNetModel",
  "xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer",
  "xlm_roberta.configuration_xlm_roberta.XLMRobertaConfig",
  "xlm_roberta.configuration_xlm_roberta.XLM_ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForMaskedLM",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForMultipleChoice",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForQuestionAnswering",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForSequenceClassification",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaForTokenClassification",
  "xlm_roberta.modeling_tf_xlm_roberta.TFXLMRobertaModel",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForCausalLM",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForMaskedLM",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForMultipleChoice",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForQuestionAnswering",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForSequenceClassification",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaForTokenClassification",
  "xlm_roberta.modeling_xlm_roberta.XLMRobertaModel",
  "xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer",
  "xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast",
  "xlnet.configuration_xlnet.XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "xlnet.configuration_xlnet.XLNetConfig",
  "xlnet.modeling_tf_xlnet.TFXLNetForMultipleChoice",
  "xlnet.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple",
  "xlnet.modeling_tf_xlnet.TFXLNetForSequenceClassification",
  "xlnet.modeling_tf_xlnet.TFXLNetForTokenClassification",
  "xlnet.modeling_tf_xlnet.TFXLNetLMHeadModel",
  "xlnet.modeling_tf_xlnet.TFXLNetModel",
  "xlnet.modeling_xlnet.XLNetForMultipleChoice",
  "xlnet.modeling_xlnet.XLNetForQuestionAnsweringSimple",
  "xlnet.modeling_xlnet.XLNetForSequenceClassification",
  "xlnet.modeling_xlnet.XLNetForTokenClassification",
  "xlnet.modeling_xlnet.XLNetLMHeadModel",
  "xlnet.modeling_xlnet.XLNetModel",
  "xlnet.tokenization_xlnet.XLNetTokenizer",
  "xlnet.tokenization_xlnet_fast.XLNetTokenizerFast",
  "yaml.BaseLoader",
  "yaml.load",
  "zero_shot_classification.ZeroShotClassificationPipeline",
  "zipfile.ZipFile",
  "zipfile.is_zipfile"
 ],
 "deps": {
  "AutoConfig": [],
  "BertConfig": [],
  "IPython": [],
  "MemoryMeasureProcess": [],
  "Mykytea": [],
  "_NbestPrediction": [],
  "_PrelimPrediction": [],
  "__name__": [],
  "__version__": [],
  "_get_generated_ngrams": [],
  "_mask_pads": [],
  "_pytest": [],
  "_read_stream": [],
  "_reorder_cache": [],
  "_reorder_stacked": [],
  "_stream_subprocess": [],
  "_strip_spaces": [],
  "_to_coordinates": [],
  "_tokens_match": [],
  "abc": [],
  "activations": [],
  "activations_tf": [],
  "add_new_model": [],
  "albert": [],
  "albert_layer": [],
  "apex": [],
  "approx": [],
  "argparse": [],
  "as_tensor": [],
  "asyncio": [],
  "auto": [],
  "azureml": [],
  "bart": [],
  "barthez": [],
  "base": [],
  "benchmark_args": [],
  "benchmark_args_tf": [],
  "benchmark_args_utils": [],
  "benchmark_utils": [],
  "bert": [],
  "bert_generation": [],
  "bert_japanese": [],
  "bertweet": [],
  "blenderbot": [],
  "blenderbot_small": [],
  "block": [],
  "build_shape_dict": [],
  "callback": [],
  "camembert": [],
  "cat_input_and_doc": [],
  "collections": [],
  "comet_ml": [],
  "config_class": [],
  "configuration_albert": [],
  "configuration_auto": [],
  "configuration_bart": [],
  "configuration_bert": [],
  "configuration_bert_generation": [],
  "configuration_blenderbot": [],
  "configuration_blenderbot_small": [],
  "configuration_camembert": [],
  "configuration_convbert": [],
  "configuration_ctrl": [],
  "configuration_deberta": [],
  "configuration_distilbert": [],
  "configuration_dpr": [],
  "configuration_electra": [],
  "configuration_encoder_decoder": [],
  "configuration_flaubert": [],
  "configuration_fsmt": [],
  "configuration_funnel": [],
  "configuration_gpt2": [],
  "configuration_layoutlm": [],
  "configuration_led": [],
  "configuration_longformer": [],
  "configuration_lxmert": [],
  "configuration_marian": [],
  "configuration_mbart": [],
  "configuration_mobilebert": [],
  "configuration_mpnet": [],
  "configuration_mt5": [],
  "configuration_openai": [],
  "configuration_pegasus": [],
  "configuration_prophetnet": [],
  "configuration_rag": [],
  "configuration_reformer": [],
  "configuration_retribert": [],
  "configuration_roberta": [],
  "configuration_squeezebert": [],
  "configuration_t5": [],
  "configuration_tapas": [],
  "configuration_transfo_xl": [],
  "configuration_utils": [],
  "configuration_wav2vec2": [],
  "configuration_xlm": [],
  "configuration_xlm_prophetnet": [],
  "configuration_xlm_roberta": [],
  "configuration_xlnet": [],
  "contextlib": [],
  "conv_layer": [],
  "convbert": [],
  "conversational": [],
  "convert": [],
  "convert_added_tokens": [],
  "convert_slow_tokenizer": [],
  "converter_class": [],
  "cookiecutter": [],
  "copy": [],
  "create_custom_forward": [],
  "create_tf_var": [],
  "csv": [],
  "ctrl": [],
  "data": [],
  "dataclasses": [],
  "datasets": [],
  "datetime": [],
  "deberta": [],
  "decoder_layer": [],
  "deepspeed": [],
  "dependency_versions_table": [],
  "distilbert": [],
  "distutils": [],
  "download": [],
  "dpr": [],
  "dtype": [],
  "electra": [],
  "emoji": [],
  "encoder": [],
  "encoder_decoder": [],
  "encoder_layer": [],
  "enum": [],
  "env": [],
  "extend_enc_output": [],
  "fairscale": [],
  "fairseq": [],
  "faiss": [],
  "fastapi": [],
  "feature_extraction": [],
  "ffn_module": [],
  "file_utils": [],
  "filelock": [],
  "fill_mask": [],
  "flaubert": [],
  "flax": [],
  "fn": [],
  "fnmatch": [],
  "fsmt": [],
  "ftfy": [],
  "fugashi": [],
  "func": [],
  "functools": [],
  "funnel": [],
  "generation_beam_search": [],
  "generation_logits_process": [],
  "generation_tf_utils": [],
  "generation_utils": [],
  "get_cpu_memory": [],
  "get_input_ids": [],
  "get_ipython": [],
  "get_seq_element": [],
  "getpass": [],
  "git": [],
  "glob": [],
  "google": [],
  "gpt2": [],
  "h": [],
  "h5py": [],
  "hashlib": [],
  "herbert": [],
  "hf_api": [],
  "html": [],
  "importlib": [],
  "inference_model": [],
  "initializer": [],
  "input": [],
  "inspect": [],
  "int_to_alphabetic": [],
  "integrations": [],
  "io": [],
  "ipadic": [],
  "is_tensor": [],
  "itertools": [],
  "jax": [],
  "jieba": [],
  "json": [],
  "keras2onnx": [],
  "key_fn": [],
  "label_from_example": [],
  "layer": [],
  "layer_module": [],
  "layoutlm": [],
  "led": [],
  "lfs": [],
  "linear": [],
  "linecache": [],
  "load": [],
  "log_softmax": [],
  "logging": [],
  "longformer": [],
  "loss_fct": [],
  "loss_fct_cls": [],
  "loss_fn": [],
  "lower": [],
  "lxmert": [],
  "marian": [],
  "math": [],
  "mbart": [],
  "mobilebert": [],
  "model": [],
  "model_class": [],
  "model_cls": [],
  "modelcard": [],
  "modeling_flax_utils": [],
  "modeling_outputs": [],
  "modeling_tf_outputs": [],
  "modeling_tf_pytorch_utils": [],
  "modeling_tf_transfo_xl_utilities": [],
  "modeling_tf_utils": [],
  "modeling_transfo_xl_utilities": [],
  "modeling_utils": [],
  "models": [],
  "module": [],
  "mpnet": [],
  "mt5": [],
  "multiprocessing": [],
  "nlp": [],
  "numbers": [],
  "numpy": [],
  "onnx": [],
  "onnxruntime": [],
  "openai": [],
  "operator": [],
  "optimization": [],
  "optimization_tf": [],
  "optimizer_cls": [],
  "optuna": [],
  "os": [],
  "packaging": [],
  "pandas": [],
  "pathlib": [],
  "pegasus": [],
  "phobert": [],
  "pickle": [],
  "pipelines": [],
  "pkg_resources": [],
  "platform": [],
  "pre_tok_class": [],
  "processor": [],
  "processors": [],
  "project": [],
  "prophetnet": [],
  "psutil": [],
  "pt_model": [],
  "py3nvml": [],
  "pydantic": [],
  "pytest": [],
  "pythainlp": [],
  "pytorch_lightning": [],
  "question_answering": [],
  "rag": [],
  "random": [],
  "ray": [],
  "re": [],
  "reformer": [],
  "regex": [],
  "remove_articles": [],
  "remove_copy_lines": [],
  "remove_punc": [],
  "replace": [],
  "replace_in_files": [],
  "repr": [],
  "requests": [],
  "retribert": [],
  "retrieval_rag": [],
  "retriever": [],
  "roberta": [],
  "run": [],
  "run_hp_search": [],
  "sacremoses": [],
  "schedule_func": [],
  "scipy": [],
  "sentencepiece": [],
  "serving": [],
  "shape": [],
  "shutil": [],
  "signal": [],
  "six": [],
  "six_ensure_text": [],
  "skip_units": [],
  "sklearn": [],
  "smdistributed": [],
  "socket": [],
  "spacy": [],
  "split_on_token": [],
  "split_on_tokens": [],
  "squeezebert": [],
  "starlette": [],
  "str": [],
  "string": [],
  "subprocess": [],
  "summary_failures_short": [],
  "sys": [],
  "t5": [],
  "table_question_answering": [],
  "tapas": [],
  "tarfile": [],
  "task_class": [],
  "temp_file_manager": [],
  "tempfile": [],
  "tensorboardX": [],
  "tensorflow": [],
  "tensorflow_hub": [],
  "testing_utils": [],
  "text2text_generation": [],
  "text_classification": [],
  "text_generation": [],
  "tf_model": [],
  "tf_model_class": [],
  "threading": [],
  "tie_encoder_to_decoder_recursively": [],
  "time": [],
  "timeit": [],
  "timeout_decorator": [],
  "to_tf_var_name": [],
  "token_classification": [],
  "tokenization_albert": [],
  "tokenization_bart": [],
  "tokenization_barthez": [],
  "tokenization_bert": [],
  "tokenization_blenderbot_small": [],
  "tokenization_camembert": [],
  "tokenization_convbert": [],
  "tokenization_distilbert": [],
  "tokenization_dpr": [],
  "tokenization_electra": [],
  "tokenization_funnel": [],
  "tokenization_gpt2": [],
  "tokenization_herbert": [],
  "tokenization_layoutlm": [],
  "tokenization_led": [],
  "tokenization_longformer": [],
  "tokenization_lxmert": [],
  "tokenization_mbart": [],
  "tokenization_mobilebert": [],
  "tokenization_mpnet": [],
  "tokenization_openai": [],
  "tokenization_pegasus": [],
  "tokenization_rag": [],
  "tokenization_reformer": [],
  "tokenization_retribert": [],
  "tokenization_roberta": [],
  "tokenization_squeezebert": [],
  "tokenization_t5": [],
  "tokenization_utils": [],
  "tokenization_utils_base": [],
  "tokenization_utils_fast": [],
  "tokenization_xlm_roberta": [],
  "tokenization_xlnet": [],
  "tokenizers": [],
  "torch": [],
  "torch_scatter": [],
  "torch_xla": [],
  "tqdm": [],
  "train_model": [],
  "trainer": [],
  "trainer_callback": [],
  "trainer_pt_utils": [],
  "trainer_utils": [],
  "training_args": [],
  "training_args_tf": [],
  "transfo_xl": [],
  "transfomers": [],
  "transformers": [],
  "transformers_old": [],
  "truncate_seq_pair": [],
  "types": [],
  "typing": [],
  "unicodedata": [],
  "unidic": [],
  "unidic_lite": [],
  "unittest": [],
  "unshape": [],
  "urllib": [],
  "user": [],
  "utils": [],
  "uuid": [],
  "uvicorn": [],
  "visn_loss_fct": [],
  "visual_loss_fct": [],
  "wandb": [],
  "warnings": [],
  "wav2vec2": [],
  "wget": [],
  "white_space_fix": [],
  "xlm": [],
  "xlm_prophetnet": [],
  "xlm_roberta": [],
  "xlnet": [],
  "yaml": [],
  "zero_shot_classification": [],
  "zipfile": []
 }
}