{
 "bad": [
  "BertConfig.from_pretrained",
  "IPython.display",
  "IPython.display.HTML",
  "IPython.display.display",
  "IndexMap",
  "MecabTokenizer",
  "MemoryMeasureProcess",
  "Mykytea",
  "Mykytea.Mykytea",
  "ProductIndexMap",
  "SquadExample",
  "_NbestPrediction",
  "_PrelimPrediction",
  "__name__.split",
  "_conv_out_length",
  "_create_next_token_logits_penalties",
  "_get_generated_ngrams",
  "_is_punctuation",
  "_mask_pads",
  "_norm",
  "_pytest.config.create_terminal_writer",
  "_read_stream",
  "_reorder_stacked",
  "_stream_subprocess",
  "_strip_spaces",
  "_to_coordinates",
  "_tokens_match",
  "abc.ABC",
  "abc.abstractmethod",
  "add_new_model.AddNewModelCommand.register_subcommand",
  "albert.tokenization_albert.AlbertTokenizer",
  "albert.tokenization_albert_fast.AlbertTokenizerFast",
  "albert_layer",
  "apex.amp",
  "apex.amp.initialize",
  "apex.amp.master_params",
  "apex.amp.scale_loss",
  "approx",
  "argparse",
  "argparse.ArgumentParser",
  "argparse.ArgumentTypeError",
  "argparse.Namespace",
  "as_tensor",
  "asyncio",
  "asyncio.create_subprocess_exec",
  "asyncio.get_event_loop",
  "asyncio.subprocess.PIPE",
  "asyncio.wait",
  "auto.configuration_auto.AutoConfig.from_pretrained",
  "auto.modeling_auto.AutoModel.from_pretrained",
  "auto.modeling_auto.AutoModelForCausalLM.from_pretrained",
  "auto.modeling_auto.AutoModelForSeq2SeqLM.from_pretrained",
  "auto.modeling_tf_auto.TFAutoModel.from_pretrained",
  "auto.modeling_tf_auto.TFAutoModelForSeq2SeqLM.from_pretrained",
  "auto.tokenization_auto.AutoTokenizer.from_pretrained",
  "azureml.core.run.Run",
  "azureml.core.run.Run.get_context",
  "bart.tokenization_bart_fast.BartTokenizerFast",
  "barthez.tokenization_barthez.BarthezTokenizer",
  "barthez.tokenization_barthez_fast.BarthezTokenizerFast",
  "bert.tokenization_bert_fast.BertTokenizerFast",
  "bert_generation.tokenization_bert_generation.BertGenerationTokenizer",
  "blenderbot_small.BlenderbotSmallForConditionalGeneration.from_pretrained",
  "blenderbot_small.BlenderbotSmallModel.from_pretrained",
  "blenderbot_small.TFBlenderbotSmallForConditionalGeneration.from_pretrained",
  "blenderbot_small.TFBlenderbotSmallModel.from_pretrained",
  "block",
  "build_shape_dict",
  "calc_banned_bad_words_ids",
  "calc_banned_ngram_tokens",
  "callback",
  "camembert.tokenization_camembert.CamembertTokenizer",
  "camembert.tokenization_camembert_fast.CamembertTokenizerFast",
  "cat_input_and_doc",
  "collections",
  "collections.Counter",
  "collections.OrderedDict",
  "collections.OrderedDict.fromkeys",
  "collections.UserDict",
  "collections.abc.Iterable",
  "collections.abc.Sequence",
  "collections.abc.Sized",
  "collections.defaultdict",
  "collections.namedtuple",
  "comet_ml",
  "comet_ml.Experiment",
  "comet_ml.OfflineExperiment",
  "comet_ml.config.get_config",
  "comet_ml.config.get_global_experiment",
  "config_class",
  "config_class.from_dict",
  "configuration_auto.AutoConfig.from_pretrained",
  "configuration_encoder_decoder.EncoderDecoderConfig.from_encoder_decoder_configs",
  "configuration_rag.RagConfig.from_pretrained",
  "configuration_rag.RagConfig.from_question_encoder_generator_configs",
  "configuration_utils.PretrainedConfig.get_config_dict",
  "contextlib",
  "contextlib.AbstractContextManager",
  "contextlib.contextmanager",
  "conv",
  "conv_layer",
  "convbert.tokenization_convbert_fast.ConvBertTokenizerFast",
  "convert",
  "convert.ConvertCommand.register_subcommand",
  "convert_added_tokens",
  "converter_class",
  "copy",
  "copy.copy",
  "copy.deepcopy",
  "create_custom_forward",
  "create_tf_var",
  "criteria",
  "csv",
  "csv.DictReader",
  "csv.DictWriter",
  "csv.reader",
  "csv.writer",
  "datetime",
  "datetime.datetime",
  "datetime.datetime.date",
  "datetime.datetime.now",
  "datetime.datetime.strptime",
  "datetime.datetime.time",
  "deberta_v2.tokenization_deberta_v2.DebertaV2Tokenizer",
  "decimal",
  "decimal.Decimal",
  "decimal.ROUND_HALF_UP",
  "decoder_layer",
  "deepspeed",
  "deepspeed.init_distributed",
  "deepspeed.initialize",
  "dependency_versions_table.deps.keys",
  "distilbert.tokenization_distilbert_fast.DistilBertTokenizerFast",
  "distutils.util.strtobool",
  "download.DownloadCommand.register_subcommand",
  "dpr.tokenization_dpr_fast.DPRQuestionEncoderTokenizerFast",
  "dtype",
  "electra.tokenization_electra_fast.ElectraTokenizerFast",
  "encoder",
  "encoder_layer",
  "env.EnvironmentCommand.register_subcommand",
  "extend_enc_output",
  "fairscale",
  "fairscale.__version__",
  "fairscale.nn.data_parallel.FullyShardedDataParallel",
  "fairscale.nn.data_parallel.ShardedDataParallel",
  "fairscale.nn.wrap.auto_wrap",
  "fairscale.optim.OSS",
  "fairscale.optim.grad_scaler.ShardedGradScaler",
  "fairseq",
  "fairseq.__version__",
  "fairseq.checkpoint_utils.load_model_ensemble_and_task",
  "fairseq.data.dictionary.Dictionary",
  "fairseq.data.dictionary.Dictionary.load",
  "fairseq.hub_utils",
  "fairseq.hub_utils.from_pretrained",
  "fairseq.model_parallel.models.transformer.ModelParallelTransformerModel",
  "fairseq.models.roberta.RobertaModel",
  "fairseq.models.roberta.RobertaModel.from_pretrained",
  "fairseq.modules.TransformerSentenceEncoderLayer",
  "faiss",
  "faiss.IndexHNSWFlat",
  "faiss.read_index",
  "feature_extraction_speech_to_text.Speech2TextFeatureExtractor.from_pretrained",
  "feature_extraction_wav2vec2.Wav2Vec2FeatureExtractor.from_pretrained",
  "ffn_module",
  "file_utils.PaddingStrategy.DO_NOT_PAD",
  "file_utils.PaddingStrategy.DO_NOT_PAD.value",
  "file_utils.PaddingStrategy.LONGEST",
  "file_utils.PaddingStrategy.MAX_LENGTH",
  "file_utils.PaddingStrategy.MAX_LENGTH.value",
  "file_utils.TensorType.JAX",
  "file_utils.TensorType.PYTORCH",
  "file_utils.TensorType.TENSORFLOW",
  "fn",
  "fn.__doc__",
  "fn.__qualname__.split",
  "fnmatch",
  "fnmatch.filter",
  "func",
  "func.__name__",
  "functools",
  "functools.lru_cache",
  "functools.partial",
  "functools.reduce",
  "functools.wraps",
  "funnel.tokenization_funnel_fast.FunnelTokenizerFast",
  "gather",
  "gather2d",
  "gc",
  "gc.collect",
  "get_cpu_memory",
  "get_initializer",
  "get_input_ids",
  "get_ipython",
  "get_numeric_sort_key_fn",
  "getpass.getpass",
  "glob",
  "glob.glob",
  "google.protobuf.descriptor",
  "google.protobuf.descriptor.Descriptor",
  "google.protobuf.descriptor.EnumDescriptor",
  "google.protobuf.descriptor.EnumValueDescriptor",
  "google.protobuf.descriptor.FieldDescriptor",
  "google.protobuf.descriptor.FileDescriptor",
  "google.protobuf.descriptor._ParseOptions",
  "google.protobuf.descriptor_pb2",
  "google.protobuf.descriptor_pb2.FieldOptions",
  "google.protobuf.descriptor_pb2.FileOptions",
  "google.protobuf.message",
  "google.protobuf.message.Message",
  "google.protobuf.reflection",
  "google.protobuf.reflection.GeneratedProtocolMessageType",
  "google.protobuf.symbol_database",
  "google.protobuf.symbol_database.Default",
  "gpt2.tokenization_gpt2_fast.GPT2TokenizerFast",
  "h",
  "h5py",
  "h5py.File",
  "hashlib.sha256",
  "herbert.tokenization_herbert_fast.HerbertTokenizerFast",
  "hf_api.HfFolder.delete_token",
  "hf_api.HfFolder.get_token",
  "hf_api.HfFolder.path_token",
  "hf_api.HfFolder.save_token",
  "html",
  "html.entities.name2codepoint.get",
  "importlib",
  "importlib.import_module",
  "importlib.metadata",
  "importlib.metadata.PackageNotFoundError",
  "importlib.metadata.metadata",
  "importlib.metadata.version",
  "importlib.util",
  "inference_model",
  "initializer",
  "input.masked_fill",
  "input.mul_",
  "input.name.split",
  "input.shape",
  "input.size",
  "inspect",
  "inspect.currentframe",
  "inspect.getfile",
  "inspect.signature",
  "inspect.stack",
  "int_to_alphabetic",
  "integrations.get_available_reporting_integrations",
  "integrations.is_deepspeed_available",
  "integrations.is_optuna_available",
  "integrations.is_ray_tune_available",
  "io",
  "io.StringIO",
  "io.open",
  "is_tensor",
  "itertools",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "itertools.count",
  "itertools.groupby",
  "json",
  "json.JSONDecodeError",
  "json.dump",
  "json.dumps",
  "json.load",
  "json.loads",
  "key_fn",
  "label_from_example",
  "layer",
  "layer.attention.prune_heads",
  "layer.backward_pass",
  "layer_module",
  "layoutlm.tokenization_layoutlm_fast.LayoutLMTokenizerFast",
  "led.tokenization_led_fast.LEDTokenizerFast",
  "lfs.LfsCommands.register_subcommand",
  "linear",
  "linecache",
  "linecache.getline",
  "load",
  "load_pytorch_weights_in_tf2_model",
  "load_spm",
  "log_softmax",
  "logging",
  "logging.CRITICAL",
  "logging.DEBUG",
  "logging.ERROR",
  "logging.FATAL",
  "logging.Formatter",
  "logging.Handler",
  "logging.INFO",
  "logging.Logger",
  "logging.NOTSET",
  "logging.StreamHandler",
  "logging.WARN",
  "logging.WARNING",
  "logging.getLogger",
  "logging.set_verbosity_info",
  "longformer.tokenization_longformer_fast.LongformerTokenizerFast",
  "loss_fct",
  "loss_fct.ignore_index",
  "loss_fct_cls",
  "loss_fn",
  "lower",
  "lxmert.tokenization_lxmert_fast.LxmertTokenizerFast",
  "m2m_100.M2M100Tokenizer",
  "marian.tokenization_marian.MarianTokenizer",
  "math",
  "math.ceil",
  "math.cos",
  "math.exp",
  "math.floor",
  "math.inf",
  "math.isnan",
  "math.log",
  "math.pi",
  "math.pow",
  "math.sqrt",
  "mbart.tokenization_mbart.MBartTokenizer",
  "mbart.tokenization_mbart50.MBart50Tokenizer",
  "mbart.tokenization_mbart50_fast.MBart50TokenizerFast",
  "mbart.tokenization_mbart_fast.MBartTokenizerFast",
  "mobilebert.tokenization_mobilebert_fast.MobileBertTokenizerFast",
  "model",
  "model.__class__.__name__",
  "model.dummy_inputs",
  "model.lm_head",
  "model.load_state_dict",
  "model.model",
  "model.model.load_state_dict",
  "model.model.shared",
  "model.save_pretrained",
  "model.trainable_variables",
  "model_class",
  "model_class.from_pretrained",
  "model_cls",
  "modelcard.ModelCard.from_pretrained",
  "modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model",
  "modeling_tf_pytorch_utils.load_tf2_checkpoint_in_pytorch_model",
  "modeling_tf_utils.load_tf_weights",
  "models.albert.convert_albert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.auto.AutoModel.from_pretrained",
  "models.auto.AutoTokenizer.from_pretrained",
  "models.auto.modeling_auto.AutoModel.from_pretrained",
  "models.auto.modeling_auto.MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys",
  "models.auto.modeling_tf_auto.TFAutoModel.from_pretrained",
  "models.auto.tokenization_auto.AutoTokenizer.from_pretrained",
  "models.bert.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.funnel.convert_funnel_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.gpt2.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch",
  "models.lxmert.convert_lxmert_original_pytorch_checkpoint_to_pytorch.convert_lxmert_checkpoint_to_pytorch",
  "models.marian.MarianConfig.from_pretrained",
  "models.openai.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch",
  "models.t5.convert_t5_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "models.transfo_xl.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch",
  "models.xlm.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch",
  "models.xlnet.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch",
  "module",
  "module.bias",
  "module.bias.data.zero_",
  "module.padding_idx",
  "module.padding_idx.zero_",
  "module.weight.data",
  "module.weight.data.fill_",
  "module.weight.data.normal_",
  "module.weight.data.zero_",
  "mpnet.tokenization_mpnet_fast.MPNetTokenizerFast",
  "mt5.MT5Tokenizer",
  "mt5.MT5TokenizerFast",
  "multiprocessing.Pipe",
  "multiprocessing.Pool",
  "multiprocessing.Process",
  "multiprocessing.Queue",
  "multiprocessing.connection.Connection",
  "multiprocessing.cpu_count",
  "numbers",
  "numbers.Number",
  "numpy",
  "numpy.abs",
  "numpy.allclose",
  "numpy.amax",
  "numpy.append",
  "numpy.arange",
  "numpy.argmax",
  "numpy.argpartition",
  "numpy.argsort",
  "numpy.array",
  "numpy.asarray",
  "numpy.ceil",
  "numpy.concatenate",
  "numpy.cos",
  "numpy.cumsum",
  "numpy.divide",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.float32",
  "numpy.frexp",
  "numpy.full",
  "numpy.full_like",
  "numpy.generic",
  "numpy.greater",
  "numpy.hstack",
  "numpy.int",
  "numpy.isscalar",
  "numpy.lcm",
  "numpy.less",
  "numpy.load",
  "numpy.log",
  "numpy.matmul",
  "numpy.maximum",
  "numpy.mean",
  "numpy.nan",
  "numpy.nanmean",
  "numpy.ndarray",
  "numpy.newaxis",
  "numpy.nonzero",
  "numpy.ones",
  "numpy.ones_like",
  "numpy.power",
  "numpy.prod",
  "numpy.put",
  "numpy.random.choice",
  "numpy.random.normal",
  "numpy.random.permutation",
  "numpy.random.rand",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.random.shuffle",
  "numpy.random.uniform",
  "numpy.reshape",
  "numpy.sign",
  "numpy.sin",
  "numpy.split",
  "numpy.sqrt",
  "numpy.squeeze",
  "numpy.subtract",
  "numpy.sum",
  "numpy.tile",
  "numpy.transpose",
  "numpy.tril",
  "numpy.triu",
  "numpy.unique",
  "numpy.unravel_index",
  "numpy.var",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "onnx",
  "onnx.load",
  "onnx.save_model",
  "onnxruntime",
  "onnxruntime.InferenceSession",
  "onnxruntime.SessionOptions",
  "onnxruntime.__version__",
  "onnxruntime.capi.onnxruntime_pybind11_state.RuntimeException",
  "onnxruntime.quantization.QuantizationMode",
  "onnxruntime.quantization.QuantizationMode.IntegerOps",
  "onnxruntime.quantization.quantize",
  "openai.tokenization_openai_fast.OpenAIGPTTokenizerFast",
  "operator",
  "operator.attrgetter",
  "operator.eq",
  "operator.ge",
  "operator.gt",
  "operator.le",
  "operator.lt",
  "operator.mul",
  "operator.ne",
  "optimizer_cls",
  "optuna.TrialPruned",
  "os",
  "os.DirEntry",
  "os.PathLike",
  "os.environ",
  "os.environ.copy",
  "os.environ.get",
  "os.fdopen",
  "os.fstat",
  "os.getcwd",
  "os.getenv",
  "os.getpid",
  "os.kill",
  "os.listdir",
  "os.makedirs",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.extsep.join",
  "os.path.getmtime",
  "os.path.getsize",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.path.split",
  "os.path.splitext",
  "os.remove",
  "os.rename",
  "os.replace",
  "os.rmdir",
  "os.scandir",
  "os.sep",
  "os.stat",
  "pandas",
  "pandas.DataFrame",
  "pandas.Series",
  "pathlib",
  "pathlib.Path",
  "pathlib.Path.home",
  "pegasus.tokenization_pegasus.PegasusTokenizer",
  "pegasus.tokenization_pegasus_fast.PegasusTokenizerFast",
  "pickle",
  "pickle.UnpicklingError",
  "pickle.dump",
  "pickle.load",
  "pipelines.PipelineDataFormat.SUPPORTED_FORMATS",
  "pipelines.PipelineDataFormat.from_str",
  "pipelines.SUPPORTED_TASKS.keys",
  "pkg_resources",
  "pkg_resources.DistributionNotFound",
  "pkg_resources.VersionConflict",
  "pkg_resources.get_distribution",
  "platform",
  "platform.architecture",
  "platform.platform",
  "platform.processor",
  "platform.python_version",
  "platform.system",
  "processor",
  "processors.glue.glue_processors.keys",
  "project",
  "psutil",
  "psutil.AccessDenied",
  "psutil.Process",
  "psutil.virtual_memory",
  "pt_model",
  "pt_model.dummy_inputs",
  "py3nvml.py3nvml",
  "py3nvml.py3nvml.NVMLError",
  "py3nvml.py3nvml.nvmlDeviceGetCount",
  "py3nvml.py3nvml.nvmlDeviceGetHandleByIndex",
  "py3nvml.py3nvml.nvmlDeviceGetMemoryInfo",
  "py3nvml.py3nvml.nvmlDeviceGetName",
  "py3nvml.py3nvml.nvmlDeviceGetPerformanceState",
  "py3nvml.py3nvml.nvmlDeviceGetPowerManagementLimit",
  "py3nvml.py3nvml.nvmlInit",
  "py3nvml.py3nvml.nvmlShutdown",
  "pytest",
  "pytest.mark.is_pipeline_test",
  "pytest.mark.is_pt_flax_cross_test",
  "pytest.mark.is_pt_tf_cross_test",
  "pythainlp.tokenize.word_tokenize",
  "random",
  "random.Random",
  "random.randint",
  "random.random",
  "random.sample",
  "random.seed",
  "random.shuffle",
  "random.uniform",
  "ray",
  "ray.tune",
  "ray.tune.CLIReporter",
  "ray.tune.checkpoint_dir",
  "ray.tune.choice",
  "ray.tune.get_trial_id",
  "ray.tune.loguniform",
  "ray.tune.report",
  "ray.tune.run",
  "ray.tune.schedulers.ASHAScheduler",
  "ray.tune.schedulers.HyperBandForBOHB",
  "ray.tune.schedulers.MedianStoppingRule",
  "ray.tune.schedulers.PopulationBasedTraining",
  "ray.tune.uniform",
  "ray.tune.with_parameters",
  "re",
  "re.M",
  "re.S",
  "re.UNICODE",
  "re.compile",
  "re.escape",
  "re.findall",
  "re.fullmatch",
  "re.match",
  "re.search",
  "re.split",
  "re.sub",
  "reformer.tokenization_reformer.ReformerTokenizer",
  "reformer.tokenization_reformer_fast.ReformerTokenizerFast",
  "regex",
  "regex.I",
  "regex.UNICODE",
  "regex.VERBOSE",
  "regex.compile",
  "regex.findall",
  "regex.sub",
  "remove_articles",
  "remove_copy_lines",
  "remove_punc",
  "replace",
  "replace_in_files",
  "repr.split",
  "reshape",
  "retribert.tokenization_retribert_fast.RetriBertTokenizerFast",
  "roberta.tokenization_roberta_fast.RobertaTokenizerFast",
  "run.RunCommand.register_subcommand",
  "run_hp_search",
  "sacremoses.MosesDetokenizer",
  "sacremoses.MosesPunctNormalizer",
  "sacremoses.MosesTokenizer",
  "save_json",
  "schedule_func",
  "scipy.stats.pearsonr",
  "scipy.stats.spearmanr",
  "sentencepiece",
  "sentencepiece.SentencePieceProcessor",
  "serving.ServeCommand.register_subcommand",
  "set_tensor_by_indices_to_value",
  "shape",
  "shape_list",
  "shutil",
  "shutil.copyfile",
  "shutil.copymode",
  "shutil.move",
  "shutil.rmtree",
  "signal.CTRL_C_EVENT",
  "signal.SIGKILL",
  "six_ensure_text",
  "skip_units",
  "sklearn.metrics.f1_score",
  "sklearn.metrics.matthews_corrcoef",
  "smdistributed.dataparallel.torch.distributed",
  "smdistributed.dataparallel.torch.distributed.get_local_rank",
  "smdistributed.dataparallel.torch.distributed.get_rank",
  "smdistributed.dataparallel.torch.distributed.get_world_size",
  "smdistributed.dataparallel.torch.distributed.init_process_group",
  "smdistributed.dataparallel.torch.parallel.distributed.DistributedDataParallel",
  "smdistributed.modelparallel.torch",
  "smdistributed.modelparallel.torch.CommGroup.DP_GROUP",
  "smdistributed.modelparallel.torch.DistributedModel",
  "smdistributed.modelparallel.torch.DistributedOptimizer",
  "smdistributed.modelparallel.torch.allgather",
  "smdistributed.modelparallel.torch.dp_rank",
  "smdistributed.modelparallel.torch.dp_size",
  "smdistributed.modelparallel.torch.init",
  "smdistributed.modelparallel.torch.local_rank",
  "smdistributed.modelparallel.torch.model.DistributedModel",
  "smdistributed.modelparallel.torch.mp_rank",
  "smdistributed.modelparallel.torch.rank",
  "smdistributed.modelparallel.torch.step",
  "socket",
  "socket.gethostname",
  "speech_to_text.Speech2TextTokenizer",
  "split_on_token",
  "split_on_tokens",
  "squeezebert.tokenization_squeezebert_fast.SqueezeBertTokenizerFast",
  "str.strip",
  "string",
  "string.punctuation",
  "subprocess",
  "subprocess.check_output",
  "subprocess.run",
  "summary_failures_short",
  "symmetric_linear_quantization_params",
  "sys",
  "sys.argv",
  "sys.exit",
  "sys.maxsize",
  "sys.modules",
  "sys.modules.get_ipython",
  "sys.modules.word_tokenize",
  "sys.platform",
  "sys.settrace",
  "sys.stderr",
  "sys.stderr.flush",
  "sys.stdin",
  "sys.stdin.readline",
  "sys.stdout",
  "sys.stdout.flush",
  "sys.stdout.write",
  "sys.version.split",
  "sys.version_info",
  "t5.tokenization_t5.T5Tokenizer",
  "t5.tokenization_t5_fast.T5TokenizerFast",
  "tarfile",
  "tarfile.is_tarfile",
  "tarfile.open",
  "task_class",
  "temp_file_manager",
  "tempfile",
  "tempfile.NamedTemporaryFile",
  "tempfile.TemporaryDirectory",
  "tempfile.mkdtemp",
  "tempfile.mkstemp",
  "tensorflow",
  "tensorflow.Session",
  "tensorflow.Tensor",
  "tensorflow.TensorShape",
  "tensorflow.TensorSpec",
  "tensorflow.Variable",
  "tensorflow.VariableAggregation.ONLY_FIRST_REPLICA",
  "tensorflow.VariableSynchronization.ON_READ",
  "tensorflow.__version__",
  "tensorflow.add",
  "tensorflow.argsort",
  "tensorflow.bfloat16",
  "tensorflow.bool",
  "tensorflow.boolean_mask",
  "tensorflow.broadcast_to",
  "tensorflow.cast",
  "tensorflow.clip_by_value",
  "tensorflow.compat.v1",
  "tensorflow.compat.v1.Session",
  "tensorflow.compat.v1.disable_eager_execution",
  "tensorflow.compat.v1.global_variables_initializer",
  "tensorflow.compat.v1.variable_scope",
  "tensorflow.concat",
  "tensorflow.cond",
  "tensorflow.config.experimental.set_memory_growth",
  "tensorflow.config.experimental_connect_to_cluster",
  "tensorflow.config.list_physical_devices",
  "tensorflow.config.optimizer.set_jit",
  "tensorflow.config.set_visible_devices",
  "tensorflow.constant",
  "tensorflow.control_dependencies",
  "tensorflow.convert_to_tensor",
  "tensorflow.cos",
  "tensorflow.data.Dataset",
  "tensorflow.data.Dataset.from_generator",
  "tensorflow.data.experimental.AUTOTUNE",
  "tensorflow.debugging.assert_equal",
  "tensorflow.debugging.assert_greater_equal",
  "tensorflow.device",
  "tensorflow.distribute.MirroredStrategy",
  "tensorflow.distribute.OneDeviceStrategy",
  "tensorflow.distribute.TPUStrategy",
  "tensorflow.distribute.cluster_resolver.TPUClusterResolver",
  "tensorflow.divide",
  "tensorflow.dtypes.as_dtype",
  "tensorflow.dtypes.float32",
  "tensorflow.dtypes.int32",
  "tensorflow.einsum",
  "tensorflow.equal",
  "tensorflow.executing_eagerly",
  "tensorflow.expand_dims",
  "tensorflow.eye",
  "tensorflow.fill",
  "tensorflow.float16",
  "tensorflow.float32",
  "tensorflow.function",
  "tensorflow.gather",
  "tensorflow.gather_nd",
  "tensorflow.get_logger",
  "tensorflow.get_variable",
  "tensorflow.gradients",
  "tensorflow.identity",
  "tensorflow.initializers.TruncatedNormal",
  "tensorflow.int32",
  "tensorflow.int64",
  "tensorflow.int8",
  "tensorflow.is_tensor",
  "tensorflow.keras.Model",
  "tensorflow.keras.activations.gelu",
  "tensorflow.keras.activations.relu",
  "tensorflow.keras.activations.swish",
  "tensorflow.keras.activations.tanh",
  "tensorflow.keras.backend.set_value",
  "tensorflow.keras.initializers.TruncatedNormal",
  "tensorflow.keras.layers.Dense",
  "tensorflow.keras.layers.Layer",
  "tensorflow.keras.layers.LayerNormalization",
  "tensorflow.keras.losses.MeanSquaredError",
  "tensorflow.keras.losses.Reduction.NONE",
  "tensorflow.keras.losses.Reduction.SUM",
  "tensorflow.keras.losses.SparseCategoricalCrossentropy",
  "tensorflow.keras.metrics.Sum",
  "tensorflow.keras.mixed_precision.experimental.Policy",
  "tensorflow.keras.mixed_precision.experimental.set_policy",
  "tensorflow.keras.optimizers.Adam",
  "tensorflow.keras.optimizers.schedules.LearningRateSchedule",
  "tensorflow.keras.optimizers.schedules.PolynomialDecay",
  "tensorflow.keras.utils",
  "tensorflow.keras.utils.register_keras_serializable",
  "tensorflow.less_equal",
  "tensorflow.linalg.band_part",
  "tensorflow.logical_not",
  "tensorflow.logical_or",
  "tensorflow.math.abs",
  "tensorflow.math.argmax",
  "tensorflow.math.count_nonzero",
  "tensorflow.math.cumsum",
  "tensorflow.math.divide",
  "tensorflow.math.erf",
  "tensorflow.math.greater",
  "tensorflow.math.less",
  "tensorflow.math.log",
  "tensorflow.math.logical_not",
  "tensorflow.math.maximum",
  "tensorflow.math.minimum",
  "tensorflow.math.multiply",
  "tensorflow.math.not_equal",
  "tensorflow.math.pow",
  "tensorflow.math.reduce_any",
  "tensorflow.math.reduce_logsumexp",
  "tensorflow.math.reduce_max",
  "tensorflow.math.reduce_mean",
  "tensorflow.math.reduce_min",
  "tensorflow.math.rsqrt",
  "tensorflow.math.softplus",
  "tensorflow.math.sqrt",
  "tensorflow.math.square",
  "tensorflow.math.top_k",
  "tensorflow.matmul",
  "tensorflow.matrix_band_part",
  "tensorflow.minimum",
  "tensorflow.multiply",
  "tensorflow.name_scope",
  "tensorflow.nn.avg_pool1d",
  "tensorflow.nn.bias_add",
  "tensorflow.nn.log_softmax",
  "tensorflow.nn.max_pool1d",
  "tensorflow.nn.softmax",
  "tensorflow.nn.sparse_softmax_cross_entropy_with_logits",
  "tensorflow.nn.top_k",
  "tensorflow.no_op",
  "tensorflow.not_equal",
  "tensorflow.one_hot",
  "tensorflow.ones",
  "tensorflow.ones_like",
  "tensorflow.pad",
  "tensorflow.pow",
  "tensorflow.python.distribute.values.PerReplica",
  "tensorflow.python.eager.context",
  "tensorflow.python.eager.context.context",
  "tensorflow.python.framework.errors_impl.ResourceExhaustedError",
  "tensorflow.python.keras.backend",
  "tensorflow.python.keras.backend.batch_set_value",
  "tensorflow.python.keras.backend.int_shape",
  "tensorflow.python.keras.saving.hdf5_format",
  "tensorflow.python.keras.saving.hdf5_format.load_attributes_from_hdf5_group",
  "tensorflow.random.categorical",
  "tensorflow.random.set_seed",
  "tensorflow.random.uniform",
  "tensorflow.range",
  "tensorflow.rank",
  "tensorflow.reduce_all",
  "tensorflow.reduce_any",
  "tensorflow.reduce_logsumexp",
  "tensorflow.reduce_max",
  "tensorflow.reduce_mean",
  "tensorflow.reduce_min",
  "tensorflow.reduce_sum",
  "tensorflow.repeat",
  "tensorflow.reset_default_graph",
  "tensorflow.reshape",
  "tensorflow.reverse",
  "tensorflow.roll",
  "tensorflow.scatter_nd",
  "tensorflow.shape",
  "tensorflow.signal.frame",
  "tensorflow.sin",
  "tensorflow.slice",
  "tensorflow.split",
  "tensorflow.sqrt",
  "tensorflow.squeeze",
  "tensorflow.stack",
  "tensorflow.stop_gradient",
  "tensorflow.string",
  "tensorflow.subtract",
  "tensorflow.summary.experimental.set_step",
  "tensorflow.summary.scalar",
  "tensorflow.summary.text",
  "tensorflow.summary.trace_export",
  "tensorflow.summary.trace_on",
  "tensorflow.tanh",
  "tensorflow.tensor_scatter_nd_update",
  "tensorflow.test.is_gpu_available",
  "tensorflow.tile",
  "tensorflow.tpu.experimental.initialize_tpu_system",
  "tensorflow.train.Checkpoint",
  "tensorflow.train.CheckpointManager",
  "tensorflow.train.Saver",
  "tensorflow.train.list_variables",
  "tensorflow.train.load_variable",
  "tensorflow.trainable_variables",
  "tensorflow.transpose",
  "tensorflow.tuple",
  "tensorflow.unstack",
  "tensorflow.variables_initializer",
  "tensorflow.version.VERSION",
  "tensorflow.where",
  "tensorflow.zeros",
  "tensorflow.zeros_initializer",
  "tensorflow.zeros_like",
  "tensorflow_text",
  "tf_index_select",
  "tf_model",
  "tf_model.dummy_inputs",
  "tf_model.save_weights",
  "tf_model.weights",
  "tf_model_class",
  "tf_top_k_top_p_filtering",
  "threading",
  "threading.Lock",
  "tie_encoder_to_decoder_recursively",
  "time",
  "time.strftime",
  "time.time",
  "timeit",
  "timeit.repeat",
  "to_tf_var_name",
  "tokenization_albert.AlbertTokenizer",
  "tokenization_barthez.BarthezTokenizer",
  "tokenization_camembert.CamembertTokenizer",
  "tokenization_mbart.MBartTokenizer",
  "tokenization_mbart50.MBart50Tokenizer",
  "tokenization_pegasus.PegasusTokenizer",
  "tokenization_rag.RagTokenizer.from_pretrained",
  "tokenization_reformer.ReformerTokenizer",
  "tokenization_speech_to_text.Speech2TextTokenizer.from_pretrained",
  "tokenization_t5.T5Tokenizer",
  "tokenization_utils.TruncationStrategy.DO_NOT_TRUNCATE",
  "tokenization_utils.TruncationStrategy.ONLY_FIRST",
  "tokenization_utils_base.TruncationStrategy.DO_NOT_TRUNCATE",
  "tokenization_utils_base.TruncationStrategy.ONLY_FIRST.value",
  "tokenization_utils_base.TruncationStrategy.ONLY_SECOND.value",
  "tokenization_wav2vec2.Wav2Vec2CTCTokenizer.from_pretrained",
  "tokenization_xlm_roberta.XLMRobertaTokenizer",
  "tokenization_xlnet.XLNetTokenizer",
  "tokenizers.AddedToken",
  "tokenizers.ByteLevelBPETokenizer",
  "tokenizers.Encoding",
  "tokenizers.Regex",
  "tokenizers.Tokenizer",
  "tokenizers.decoders.BPEDecoder",
  "tokenizers.decoders.ByteLevel",
  "tokenizers.decoders.Decoder",
  "tokenizers.decoders.Metaspace",
  "tokenizers.decoders.WordPiece",
  "tokenizers.models.BPE",
  "tokenizers.models.Unigram",
  "tokenizers.models.WordPiece",
  "tokenizers.normalizers",
  "tokenizers.normalizers.BertNormalizer",
  "tokenizers.normalizers.Lowercase",
  "tokenizers.normalizers.NFKD",
  "tokenizers.normalizers.Precompiled",
  "tokenizers.normalizers.Replace",
  "tokenizers.normalizers.Sequence",
  "tokenizers.normalizers.StripAccents",
  "tokenizers.pre_tokenizers",
  "tokenizers.pre_tokenizers.BertPreTokenizer",
  "tokenizers.pre_tokenizers.ByteLevel",
  "tokenizers.pre_tokenizers.Metaspace",
  "tokenizers.pre_tokenizers.Sequence",
  "tokenizers.pre_tokenizers.WhitespaceSplit",
  "tokenizers.processors",
  "tokenizers.processors.BertProcessing",
  "tokenizers.processors.ByteLevel",
  "tokenizers.processors.RobertaProcessing",
  "tokenizers.processors.TemplateProcessing",
  "torch",
  "torch.BoolTensor",
  "torch.FloatTensor",
  "torch.Generator",
  "torch.LongTensor",
  "torch.Size",
  "torch.Tensor",
  "torch.__version__",
  "torch._softmax_backward_data",
  "torch.abs",
  "torch.addmm",
  "torch.all",
  "torch.allclose",
  "torch.arange",
  "torch.argmax",
  "torch.argsort",
  "torch.as_tensor",
  "torch.autograd.Function",
  "torch.autograd.function.Function",
  "torch.backends.cudnn.flags",
  "torch.bernoulli",
  "torch.bfloat16",
  "torch.bincount",
  "torch.bmm",
  "torch.bool",
  "torch.cat",
  "torch.chunk",
  "torch.clamp",
  "torch.cos",
  "torch.cuda",
  "torch.cuda.amp.autocast",
  "torch.cuda.current_device",
  "torch.cuda.default_generators",
  "torch.cuda.default_generators.seed",
  "torch.cuda.device_count",
  "torch.cuda.empty_cache",
  "torch.cuda.is_available",
  "torch.cuda.manual_seed_all",
  "torch.cuda.set_device",
  "torch.cumsum",
  "torch.device",
  "torch.distributed",
  "torch.distributed.all_gather",
  "torch.distributed.barrier",
  "torch.distributed.get_local_rank",
  "torch.distributed.get_rank",
  "torch.distributed.get_world_size",
  "torch.distributed.init_process_group",
  "torch.distributions.Bernoulli",
  "torch.distributions.Categorical",
  "torch.distributions.RelaxedBernoulli",
  "torch.distributions.RelaxedOneHotCategorical",
  "torch.distributions.categorical.Categorical",
  "torch.double",
  "torch.dtype",
  "torch.einsum",
  "torch.empty_like",
  "torch.enable_grad",
  "torch.eq",
  "torch.erf",
  "torch.exp",
  "torch.eye",
  "torch.finfo",
  "torch.flatten",
  "torch.float",
  "torch.float16",
  "torch.float32",
  "torch.floor",
  "torch.fmod",
  "torch.from_numpy",
  "torch.full",
  "torch.full_like",
  "torch.gather",
  "torch.ge",
  "torch.ger",
  "torch.hub.load",
  "torch.index_select",
  "torch.int32",
  "torch.int64",
  "torch.is_tensor",
  "torch.isinf",
  "torch.isnan",
  "torch.jit.script",
  "torch.jit.trace",
  "torch.kthvalue",
  "torch.load",
  "torch.log",
  "torch.log2",
  "torch.log_softmax",
  "torch.logical_and",
  "torch.logical_not",
  "torch.logsumexp",
  "torch.long",
  "torch.lt",
  "torch.manual_seed",
  "torch.masked_fill",
  "torch.matmul",
  "torch.max",
  "torch.mean",
  "torch.min",
  "torch.mm",
  "torch.multinomial",
  "torch.multiply",
  "torch.ne",
  "torch.nn",
  "torch.nn.BCEWithLogitsLoss",
  "torch.nn.Conv1d",
  "torch.nn.CrossEntropyLoss",
  "torch.nn.DataParallel",
  "torch.nn.Embedding",
  "torch.nn.GroupNorm",
  "torch.nn.Identity",
  "torch.nn.LayerNorm",
  "torch.nn.LayerNorm.forward",
  "torch.nn.Linear",
  "torch.nn.LogSoftmax",
  "torch.nn.MSELoss",
  "torch.nn.Module",
  "torch.nn.ModuleList",
  "torch.nn.Parameter",
  "torch.nn.ReLU",
  "torch.nn.Sequential",
  "torch.nn.SmoothL1Loss",
  "torch.nn.Softmax",
  "torch.nn.functional",
  "torch.nn.functional.avg_pool2d",
  "torch.nn.functional.cross_entropy",
  "torch.nn.functional.ctc_loss",
  "torch.nn.functional.dropout",
  "torch.nn.functional.dropout2d",
  "torch.nn.functional.embedding",
  "torch.nn.functional.gelu",
  "torch.nn.functional.glu",
  "torch.nn.functional.linear",
  "torch.nn.functional.log_softmax",
  "torch.nn.functional.max_pool2d",
  "torch.nn.functional.nll_loss",
  "torch.nn.functional.one_hot",
  "torch.nn.functional.pad",
  "torch.nn.functional.relu",
  "torch.nn.functional.silu",
  "torch.nn.functional.softmax",
  "torch.nn.functional.softplus",
  "torch.nn.functional.unfold",
  "torch.nn.init.constant_",
  "torch.nn.init.kaiming_normal_",
  "torch.nn.init.normal_",
  "torch.nn.init.uniform_",
  "torch.nn.parallel.DistributedDataParallel",
  "torch.nn.utils.clip_grad_norm_",
  "torch.nn.utils.rnn.pad_sequence",
  "torch.no_grad",
  "torch.nonzero",
  "torch.ones",
  "torch.ones_like",
  "torch.onnx.export",
  "torch.optim.Optimizer",
  "torch.optim.lr_scheduler.LambdaLR",
  "torch.optim.lr_scheduler.SAVE_STATE_WARNING",
  "torch.pow",
  "torch.prod",
  "torch.rand",
  "torch.randint",
  "torch.randn",
  "torch.randperm",
  "torch.repeat_interleave",
  "torch.reshape",
  "torch.round",
  "torch.rsqrt",
  "torch.save",
  "torch.seed",
  "torch.serialization.default_restore_location",
  "torch.sigmoid",
  "torch.sign",
  "torch.sin",
  "torch.softmax",
  "torch.sort",
  "torch.sparse.LongTensor",
  "torch.split",
  "torch.sqrt",
  "torch.square",
  "torch.stack",
  "torch.sum",
  "torch.tanh",
  "torch.tensor",
  "torch.topk",
  "torch.tril",
  "torch.triu",
  "torch.uint8",
  "torch.unique",
  "torch.unsqueeze",
  "torch.utils.checkpoint",
  "torch.utils.checkpoint.checkpoint",
  "torch.utils.data.IterableDataset",
  "torch.utils.data.TensorDataset",
  "torch.utils.data.dataloader.DataLoader",
  "torch.utils.data.dataset.Dataset",
  "torch.utils.data.distributed.DistributedSampler",
  "torch.utils.data.sampler.RandomSampler",
  "torch.utils.data.sampler.Sampler",
  "torch.utils.data.sampler.SequentialSampler",
  "torch.where",
  "torch.zeros",
  "torch.zeros_like",
  "torch_gather",
  "torch_scatter.scatter",
  "torch_xla.core.xla_model",
  "torch_xla.core.xla_model.get_ordinal",
  "torch_xla.core.xla_model.is_master_ordinal",
  "torch_xla.core.xla_model.master_print",
  "torch_xla.core.xla_model.mesh_reduce",
  "torch_xla.core.xla_model.optimizer_step",
  "torch_xla.core.xla_model.rendezvous",
  "torch_xla.core.xla_model.save",
  "torch_xla.core.xla_model.send_cpu_data_to_device",
  "torch_xla.core.xla_model.xla_device",
  "torch_xla.core.xla_model.xrt_world_size",
  "torch_xla.debug.metrics",
  "torch_xla.debug.metrics.metrics_report",
  "torch_xla.distributed.parallel_loader",
  "torch_xla.distributed.parallel_loader.ParallelLoader",
  "torchaudio.compliance.kaldi",
  "torchaudio.compliance.kaldi.fbank",
  "tqdm.auto.tqdm",
  "tracemalloc",
  "tracemalloc.get_traced_memory",
  "tracemalloc.start",
  "tracemalloc.stop",
  "train_model",
  "trainer.Trainer",
  "trainer_callback.TrainerState.load_from_json",
  "trainer_utils.HPSearchBackend.OPTUNA",
  "trainer_utils.HPSearchBackend.RAY",
  "trainer_utils.IntervalStrategy.EPOCH",
  "trainer_utils.IntervalStrategy.NO",
  "trainer_utils.IntervalStrategy.STEPS",
  "trainer_utils.SchedulerType.CONSTANT",
  "trainer_utils.SchedulerType.CONSTANT_WITH_WARMUP",
  "trainer_utils.SchedulerType.COSINE",
  "trainer_utils.SchedulerType.COSINE_WITH_RESTARTS",
  "trainer_utils.SchedulerType.LINEAR",
  "trainer_utils.SchedulerType.POLYNOMIAL",
  "trainer_utils.ShardedDDPOption.AUTO_WRAP",
  "trainer_utils.ShardedDDPOption.OFFLOAD",
  "trainer_utils.ShardedDDPOption.SIMPLE",
  "trainer_utils.ShardedDDPOption.ZERO_DP_2",
  "trainer_utils.ShardedDDPOption.ZERO_DP_3",
  "training_args.ParallelMode.TPU",
  "training_args.TrainingArguments.__doc__",
  "transformers.AlbertConfig.from_json_file",
  "transformers.BartConfig.from_json_file",
  "transformers.BartConfig.from_pretrained",
  "transformers.BartTokenizer.from_pretrained",
  "transformers.BertConfig.from_json_file",
  "transformers.BertConfig.get_config_dict",
  "transformers.BertModel.from_pretrained",
  "transformers.ConvBertConfig.from_json_file",
  "transformers.ElectraConfig.from_json_file",
  "transformers.FSMTConfig.from_pretrained",
  "transformers.FunnelConfig.from_json_file",
  "transformers.GPT2Config.from_json_file",
  "transformers.LongformerForQuestionAnswering.from_pretrained",
  "transformers.LongformerModel.from_pretrained",
  "transformers.LxmertConfig.from_json_file",
  "transformers.MBartConfig.from_pretrained",
  "transformers.MarianTokenizer.from_pretrained",
  "transformers.MobileBertConfig.from_json_file",
  "transformers.OpenAIGPTConfig.from_json_file",
  "transformers.PegasusTokenizer.from_pretrained",
  "transformers.ReformerConfig.from_json_file",
  "transformers.T5Config.from_json_file",
  "transformers.TFConvBertModel.from_pretrained",
  "transformers.TapasConfig.from_json_file",
  "transformers.TransfoXLConfig.from_json_file",
  "transformers.Wav2Vec2Config.from_pretrained",
  "transformers.XLNetConfig.from_json_file",
  "transformers.__init__._BaseLazyModule",
  "transformers.__init__._LazyModule",
  "transformers.__init__.__version__",
  "transformers.__init__._import_structure",
  "transformers.__init__.dummy_flax_objects",
  "transformers.__init__.dummy_pt_objects",
  "transformers.__init__.dummy_sentencepiece_objects",
  "transformers.__init__.dummy_tf_objects",
  "transformers.__init__.dummy_tokenizers_objects",
  "transformers.__init__.is_flax_available",
  "transformers.__init__.is_sentencepiece_available",
  "transformers.__init__.is_tf_available",
  "transformers.__init__.is_tokenizers_available",
  "transformers.__init__.is_torch_available",
  "transformers.__init__.logger",
  "transformers.data.metrics.__init__.DEPRECATION_WARNING",
  "transformers.data.metrics.__init__.acc_and_f1",
  "transformers.data.metrics.__init__.is_sklearn_available",
  "transformers.data.metrics.__init__.pearson_and_spearman",
  "transformers.data.metrics.__init__.requires_sklearn",
  "transformers.data.metrics.__init__.simple_accuracy",
  "transformers.load_tf_weights_in_lxmert",
  "transformers.load_tf_weights_in_tapas",
  "transformers.logging.get_logger",
  "transformers.logging.set_verbosity_info",
  "transformers.models.albert.__init__._BaseLazyModule",
  "transformers.models.albert.__init__._LazyModule",
  "transformers.models.albert.__init__._import_structure",
  "transformers.models.albert.__init__.is_sentencepiece_available",
  "transformers.models.albert.__init__.is_tf_available",
  "transformers.models.albert.__init__.is_tokenizers_available",
  "transformers.models.albert.__init__.is_torch_available",
  "transformers.models.auto.__init__._BaseLazyModule",
  "transformers.models.auto.__init__._LazyModule",
  "transformers.models.auto.__init__._import_structure",
  "transformers.models.auto.__init__.is_flax_available",
  "transformers.models.auto.__init__.is_tf_available",
  "transformers.models.auto.__init__.is_torch_available",
  "transformers.models.bart.__init__._BaseLazyModule",
  "transformers.models.bart.__init__._LazyModule",
  "transformers.models.bart.__init__._import_structure",
  "transformers.models.bart.__init__.is_tf_available",
  "transformers.models.bart.__init__.is_tokenizers_available",
  "transformers.models.bart.__init__.is_torch_available",
  "transformers.models.barthez.__init__._BaseLazyModule",
  "transformers.models.barthez.__init__._LazyModule",
  "transformers.models.barthez.__init__._import_structure",
  "transformers.models.barthez.__init__.is_sentencepiece_available",
  "transformers.models.barthez.__init__.is_tokenizers_available",
  "transformers.models.bert.__init__._BaseLazyModule",
  "transformers.models.bert.__init__._LazyModule",
  "transformers.models.bert.__init__._import_structure",
  "transformers.models.bert.__init__.is_flax_available",
  "transformers.models.bert.__init__.is_tf_available",
  "transformers.models.bert.__init__.is_tokenizers_available",
  "transformers.models.bert.__init__.is_torch_available",
  "transformers.models.bert_generation.__init__._BaseLazyModule",
  "transformers.models.bert_generation.__init__._LazyModule",
  "transformers.models.bert_generation.__init__._import_structure",
  "transformers.models.bert_generation.__init__.is_sentencepiece_available",
  "transformers.models.bert_generation.__init__.is_torch_available",
  "transformers.models.bert_japanese.__init__._BaseLazyModule",
  "transformers.models.bert_japanese.__init__._LazyModule",
  "transformers.models.bert_japanese.__init__._import_structure",
  "transformers.models.bertweet.__init__._BaseLazyModule",
  "transformers.models.bertweet.__init__._LazyModule",
  "transformers.models.bertweet.__init__._import_structure",
  "transformers.models.blenderbot.__init__._BaseLazyModule",
  "transformers.models.blenderbot.__init__._LazyModule",
  "transformers.models.blenderbot.__init__._import_structure",
  "transformers.models.blenderbot.__init__.is_tf_available",
  "transformers.models.blenderbot.__init__.is_torch_available",
  "transformers.models.blenderbot_small.__init__._BaseLazyModule",
  "transformers.models.blenderbot_small.__init__._LazyModule",
  "transformers.models.blenderbot_small.__init__._import_structure",
  "transformers.models.blenderbot_small.__init__.is_tf_available",
  "transformers.models.blenderbot_small.__init__.is_torch_available",
  "transformers.models.camembert.__init__._BaseLazyModule",
  "transformers.models.camembert.__init__._LazyModule",
  "transformers.models.camembert.__init__._import_structure",
  "transformers.models.camembert.__init__.is_sentencepiece_available",
  "transformers.models.camembert.__init__.is_tf_available",
  "transformers.models.camembert.__init__.is_tokenizers_available",
  "transformers.models.camembert.__init__.is_torch_available",
  "transformers.models.convbert.__init__._BaseLazyModule",
  "transformers.models.convbert.__init__._LazyModule",
  "transformers.models.convbert.__init__._import_structure",
  "transformers.models.convbert.__init__.is_tf_available",
  "transformers.models.convbert.__init__.is_tokenizers_available",
  "transformers.models.convbert.__init__.is_torch_available",
  "transformers.models.ctrl.__init__._BaseLazyModule",
  "transformers.models.ctrl.__init__._LazyModule",
  "transformers.models.ctrl.__init__._import_structure",
  "transformers.models.ctrl.__init__.is_tf_available",
  "transformers.models.ctrl.__init__.is_torch_available",
  "transformers.models.deberta.__init__._BaseLazyModule",
  "transformers.models.deberta.__init__._LazyModule",
  "transformers.models.deberta.__init__._import_structure",
  "transformers.models.deberta.__init__.is_torch_available",
  "transformers.models.deberta_v2.__init__._BaseLazyModule",
  "transformers.models.deberta_v2.__init__._LazyModule",
  "transformers.models.deberta_v2.__init__._import_structure",
  "transformers.models.deberta_v2.__init__.is_torch_available",
  "transformers.models.distilbert.__init__._BaseLazyModule",
  "transformers.models.distilbert.__init__._LazyModule",
  "transformers.models.distilbert.__init__._import_structure",
  "transformers.models.distilbert.__init__.is_tf_available",
  "transformers.models.distilbert.__init__.is_tokenizers_available",
  "transformers.models.distilbert.__init__.is_torch_available",
  "transformers.models.dpr.__init__._BaseLazyModule",
  "transformers.models.dpr.__init__._LazyModule",
  "transformers.models.dpr.__init__._import_structure",
  "transformers.models.dpr.__init__.is_tf_available",
  "transformers.models.dpr.__init__.is_tokenizers_available",
  "transformers.models.dpr.__init__.is_torch_available",
  "transformers.models.dpr.transformers.DPRConfig",
  "transformers.models.dpr.transformers.DPRContextEncoder",
  "transformers.models.dpr.transformers.DPRQuestionEncoder",
  "transformers.models.dpr.transformers.DPRReader",
  "transformers.models.electra.__init__._BaseLazyModule",
  "transformers.models.electra.__init__._LazyModule",
  "transformers.models.electra.__init__._import_structure",
  "transformers.models.electra.__init__.is_tf_available",
  "transformers.models.electra.__init__.is_tokenizers_available",
  "transformers.models.electra.__init__.is_torch_available",
  "transformers.models.encoder_decoder.__init__._BaseLazyModule",
  "transformers.models.encoder_decoder.__init__._LazyModule",
  "transformers.models.encoder_decoder.__init__._import_structure",
  "transformers.models.encoder_decoder.__init__.is_torch_available",
  "transformers.models.flaubert.__init__._BaseLazyModule",
  "transformers.models.flaubert.__init__._LazyModule",
  "transformers.models.flaubert.__init__._import_structure",
  "transformers.models.flaubert.__init__.is_tf_available",
  "transformers.models.flaubert.__init__.is_torch_available",
  "transformers.models.fsmt.__init__._BaseLazyModule",
  "transformers.models.fsmt.__init__._LazyModule",
  "transformers.models.fsmt.__init__._import_structure",
  "transformers.models.fsmt.__init__.is_torch_available",
  "transformers.models.funnel.__init__._BaseLazyModule",
  "transformers.models.funnel.__init__._LazyModule",
  "transformers.models.funnel.__init__._import_structure",
  "transformers.models.funnel.__init__.is_tf_available",
  "transformers.models.funnel.__init__.is_tokenizers_available",
  "transformers.models.funnel.__init__.is_torch_available",
  "transformers.models.gpt2.__init__._BaseLazyModule",
  "transformers.models.gpt2.__init__._LazyModule",
  "transformers.models.gpt2.__init__._import_structure",
  "transformers.models.gpt2.__init__.is_tf_available",
  "transformers.models.gpt2.__init__.is_tokenizers_available",
  "transformers.models.gpt2.__init__.is_torch_available",
  "transformers.models.herbert.__init__._BaseLazyModule",
  "transformers.models.herbert.__init__._LazyModule",
  "transformers.models.herbert.__init__._import_structure",
  "transformers.models.herbert.__init__.is_tokenizers_available",
  "transformers.models.ibert.__init__._BaseLazyModule",
  "transformers.models.ibert.__init__._LazyModule",
  "transformers.models.ibert.__init__._import_structure",
  "transformers.models.ibert.__init__.is_torch_available",
  "transformers.models.layoutlm.__init__._BaseLazyModule",
  "transformers.models.layoutlm.__init__._LazyModule",
  "transformers.models.layoutlm.__init__._import_structure",
  "transformers.models.layoutlm.__init__.is_tokenizers_available",
  "transformers.models.layoutlm.__init__.is_torch_available",
  "transformers.models.led.__init__._BaseLazyModule",
  "transformers.models.led.__init__._LazyModule",
  "transformers.models.led.__init__._import_structure",
  "transformers.models.led.__init__.is_tf_available",
  "transformers.models.led.__init__.is_tokenizers_available",
  "transformers.models.led.__init__.is_torch_available",
  "transformers.models.longformer.__init__._BaseLazyModule",
  "transformers.models.longformer.__init__._LazyModule",
  "transformers.models.longformer.__init__._import_structure",
  "transformers.models.longformer.__init__.is_tf_available",
  "transformers.models.longformer.__init__.is_tokenizers_available",
  "transformers.models.longformer.__init__.is_torch_available",
  "transformers.models.lxmert.__init__._BaseLazyModule",
  "transformers.models.lxmert.__init__._LazyModule",
  "transformers.models.lxmert.__init__._import_structure",
  "transformers.models.lxmert.__init__.is_tf_available",
  "transformers.models.lxmert.__init__.is_tokenizers_available",
  "transformers.models.lxmert.__init__.is_torch_available",
  "transformers.models.m2m_100.__init__._BaseLazyModule",
  "transformers.models.m2m_100.__init__._LazyModule",
  "transformers.models.m2m_100.__init__._import_structure",
  "transformers.models.m2m_100.__init__.is_torch_available",
  "transformers.models.marian.__init__._BaseLazyModule",
  "transformers.models.marian.__init__._LazyModule",
  "transformers.models.marian.__init__._import_structure",
  "transformers.models.marian.__init__.is_sentencepiece_available",
  "transformers.models.marian.__init__.is_tf_available",
  "transformers.models.marian.__init__.is_torch_available",
  "transformers.models.marian.convert_marian_to_pytorch.FRONT_MATTER_TEMPLATE.format",
  "transformers.models.mbart.__init__._BaseLazyModule",
  "transformers.models.mbart.__init__._LazyModule",
  "transformers.models.mbart.__init__._import_structure",
  "transformers.models.mbart.__init__.is_sentencepiece_available",
  "transformers.models.mbart.__init__.is_tf_available",
  "transformers.models.mbart.__init__.is_tokenizers_available",
  "transformers.models.mbart.__init__.is_torch_available",
  "transformers.models.mmbt.__init__._BaseLazyModule",
  "transformers.models.mmbt.__init__._LazyModule",
  "transformers.models.mmbt.__init__._import_structure",
  "transformers.models.mmbt.__init__.is_torch_available",
  "transformers.models.mobilebert.__init__._BaseLazyModule",
  "transformers.models.mobilebert.__init__._LazyModule",
  "transformers.models.mobilebert.__init__._import_structure",
  "transformers.models.mobilebert.__init__.is_tf_available",
  "transformers.models.mobilebert.__init__.is_tokenizers_available",
  "transformers.models.mobilebert.__init__.is_torch_available",
  "transformers.models.mpnet.__init__._BaseLazyModule",
  "transformers.models.mpnet.__init__._LazyModule",
  "transformers.models.mpnet.__init__._import_structure",
  "transformers.models.mpnet.__init__.is_tf_available",
  "transformers.models.mpnet.__init__.is_tokenizers_available",
  "transformers.models.mpnet.__init__.is_torch_available",
  "transformers.models.mt5.__init__.MT5Tokenizer",
  "transformers.models.mt5.__init__.MT5TokenizerFast",
  "transformers.models.mt5.__init__.T5Tokenizer",
  "transformers.models.mt5.__init__.T5TokenizerFast",
  "transformers.models.mt5.__init__._BaseLazyModule",
  "transformers.models.mt5.__init__._LazyModule",
  "transformers.models.mt5.__init__._import_structure",
  "transformers.models.mt5.__init__.is_sentencepiece_available",
  "transformers.models.mt5.__init__.is_tf_available",
  "transformers.models.mt5.__init__.is_tokenizers_available",
  "transformers.models.mt5.__init__.is_torch_available",
  "transformers.models.openai.__init__._BaseLazyModule",
  "transformers.models.openai.__init__._LazyModule",
  "transformers.models.openai.__init__._import_structure",
  "transformers.models.openai.__init__.is_tf_available",
  "transformers.models.openai.__init__.is_tokenizers_available",
  "transformers.models.openai.__init__.is_torch_available",
  "transformers.models.pegasus.__init__._BaseLazyModule",
  "transformers.models.pegasus.__init__._LazyModule",
  "transformers.models.pegasus.__init__._import_structure",
  "transformers.models.pegasus.__init__.is_sentencepiece_available",
  "transformers.models.pegasus.__init__.is_tf_available",
  "transformers.models.pegasus.__init__.is_tokenizers_available",
  "transformers.models.pegasus.__init__.is_torch_available",
  "transformers.models.pegasus.configuration_pegasus.DEFAULTS",
  "transformers.models.pegasus.configuration_pegasus.DEFAULTS.copy",
  "transformers.models.pegasus.configuration_pegasus.task_specific_params",
  "transformers.models.phobert.__init__._BaseLazyModule",
  "transformers.models.phobert.__init__._LazyModule",
  "transformers.models.phobert.__init__._import_structure",
  "transformers.models.prophetnet.__init__._BaseLazyModule",
  "transformers.models.prophetnet.__init__._LazyModule",
  "transformers.models.prophetnet.__init__._import_structure",
  "transformers.models.prophetnet.__init__.is_torch_available",
  "transformers.models.rag.__init__._BaseLazyModule",
  "transformers.models.rag.__init__._LazyModule",
  "transformers.models.rag.__init__._import_structure",
  "transformers.models.rag.__init__.is_tf_available",
  "transformers.models.rag.__init__.is_torch_available",
  "transformers.models.reformer.__init__._BaseLazyModule",
  "transformers.models.reformer.__init__._LazyModule",
  "transformers.models.reformer.__init__._import_structure",
  "transformers.models.reformer.__init__.is_sentencepiece_available",
  "transformers.models.reformer.__init__.is_tokenizers_available",
  "transformers.models.reformer.__init__.is_torch_available",
  "transformers.models.retribert.__init__._BaseLazyModule",
  "transformers.models.retribert.__init__._LazyModule",
  "transformers.models.retribert.__init__._import_structure",
  "transformers.models.retribert.__init__.is_tokenizers_available",
  "transformers.models.retribert.__init__.is_torch_available",
  "transformers.models.roberta.__init__._BaseLazyModule",
  "transformers.models.roberta.__init__._LazyModule",
  "transformers.models.roberta.__init__._import_structure",
  "transformers.models.roberta.__init__.is_flax_available",
  "transformers.models.roberta.__init__.is_tf_available",
  "transformers.models.roberta.__init__.is_tokenizers_available",
  "transformers.models.roberta.__init__.is_torch_available",
  "transformers.models.speech_to_text.__init__._BaseLazyModule",
  "transformers.models.speech_to_text.__init__._LazyModule",
  "transformers.models.speech_to_text.__init__._import_structure",
  "transformers.models.speech_to_text.__init__.is_sentencepiece_available",
  "transformers.models.speech_to_text.__init__.is_torch_available",
  "transformers.models.squeezebert.__init__._BaseLazyModule",
  "transformers.models.squeezebert.__init__._LazyModule",
  "transformers.models.squeezebert.__init__._import_structure",
  "transformers.models.squeezebert.__init__.is_tokenizers_available",
  "transformers.models.squeezebert.__init__.is_torch_available",
  "transformers.models.t5.__init__._BaseLazyModule",
  "transformers.models.t5.__init__._LazyModule",
  "transformers.models.t5.__init__._import_structure",
  "transformers.models.t5.__init__.is_sentencepiece_available",
  "transformers.models.t5.__init__.is_tf_available",
  "transformers.models.t5.__init__.is_tokenizers_available",
  "transformers.models.t5.__init__.is_torch_available",
  "transformers.models.tapas.__init__._BaseLazyModule",
  "transformers.models.tapas.__init__._LazyModule",
  "transformers.models.tapas.__init__._import_structure",
  "transformers.models.tapas.__init__.is_torch_available",
  "transformers.models.transfo_xl.__init__._BaseLazyModule",
  "transformers.models.transfo_xl.__init__._LazyModule",
  "transformers.models.transfo_xl.__init__._import_structure",
  "transformers.models.transfo_xl.__init__.is_tf_available",
  "transformers.models.transfo_xl.__init__.is_torch_available",
  "transformers.models.transfo_xl.tokenization_transfo_xl.Corpus",
  "transformers.models.transfo_xl.tokenization_transfo_xl.Vocab",
  "transformers.models.wav2vec2.__init__._BaseLazyModule",
  "transformers.models.wav2vec2.__init__._LazyModule",
  "transformers.models.wav2vec2.__init__._import_structure",
  "transformers.models.wav2vec2.__init__.is_torch_available",
  "transformers.models.xlm.__init__._BaseLazyModule",
  "transformers.models.xlm.__init__._LazyModule",
  "transformers.models.xlm.__init__._import_structure",
  "transformers.models.xlm.__init__.is_tf_available",
  "transformers.models.xlm.__init__.is_torch_available",
  "transformers.models.xlm_prophetnet.__init__.is_sentencepiece_available",
  "transformers.models.xlm_prophetnet.__init__.is_torch_available",
  "transformers.models.xlm_roberta.__init__._BaseLazyModule",
  "transformers.models.xlm_roberta.__init__._LazyModule",
  "transformers.models.xlm_roberta.__init__._import_structure",
  "transformers.models.xlm_roberta.__init__.is_sentencepiece_available",
  "transformers.models.xlm_roberta.__init__.is_tf_available",
  "transformers.models.xlm_roberta.__init__.is_tokenizers_available",
  "transformers.models.xlm_roberta.__init__.is_torch_available",
  "transformers.models.xlnet.__init__._BaseLazyModule",
  "transformers.models.xlnet.__init__._LazyModule",
  "transformers.models.xlnet.__init__._import_structure",
  "transformers.models.xlnet.__init__.is_sentencepiece_available",
  "transformers.models.xlnet.__init__.is_tf_available",
  "transformers.models.xlnet.__init__.is_tokenizers_available",
  "transformers.models.xlnet.__init__.is_torch_available",
  "transformers.pipelines.__init__.AutoModel",
  "transformers.pipelines.__init__.AutoModelForCausalLM",
  "transformers.pipelines.__init__.AutoModelForMaskedLM",
  "transformers.pipelines.__init__.AutoModelForQuestionAnswering",
  "transformers.pipelines.__init__.AutoModelForSeq2SeqLM",
  "transformers.pipelines.__init__.AutoModelForSequenceClassification",
  "transformers.pipelines.__init__.AutoModelForTableQuestionAnswering",
  "transformers.pipelines.__init__.AutoModelForTokenClassification",
  "transformers.pipelines.__init__.ConversationalPipeline",
  "transformers.pipelines.__init__.FeatureExtractionPipeline",
  "transformers.pipelines.__init__.FillMaskPipeline",
  "transformers.pipelines.__init__.Pipeline",
  "transformers.pipelines.__init__.PreTrainedTokenizer",
  "transformers.pipelines.__init__.PretrainedConfig",
  "transformers.pipelines.__init__.QuestionAnsweringPipeline",
  "transformers.pipelines.__init__.SUPPORTED_TASKS",
  "transformers.pipelines.__init__.SummarizationPipeline",
  "transformers.pipelines.__init__.TFAutoModel",
  "transformers.pipelines.__init__.TFAutoModelForCausalLM",
  "transformers.pipelines.__init__.TFAutoModelForMaskedLM",
  "transformers.pipelines.__init__.TFAutoModelForQuestionAnswering",
  "transformers.pipelines.__init__.TFAutoModelForSeq2SeqLM",
  "transformers.pipelines.__init__.TFAutoModelForSequenceClassification",
  "transformers.pipelines.__init__.TFAutoModelForTokenClassification",
  "transformers.pipelines.__init__.TableQuestionAnsweringPipeline",
  "transformers.pipelines.__init__.Text2TextGenerationPipeline",
  "transformers.pipelines.__init__.TextClassificationPipeline",
  "transformers.pipelines.__init__.TextGenerationPipeline",
  "transformers.pipelines.__init__.TokenClassificationPipeline",
  "transformers.pipelines.__init__.TranslationPipeline",
  "transformers.pipelines.__init__.ZeroShotClassificationPipeline",
  "transformers.pipelines.__init__.check_task",
  "transformers.pipelines.__init__.get_default_model",
  "transformers.pipelines.__init__.get_framework",
  "transformers.pipelines.__init__.is_tf_available",
  "transformers.pipelines.__init__.is_torch_available",
  "transformers.pipelines.__init__.logger",
  "transformers.utils.__init__.__version__",
  "transformers_old.modeling_prophetnet.ProphetNetForConditionalGeneration",
  "transformers_old.modeling_prophetnet.ProphetNetForConditionalGeneration.from_pretrained",
  "transformers_old.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration",
  "transformers_old.modeling_xlm_prophetnet.XLMProphetNetForConditionalGeneration.from_pretrained",
  "truncate_seq_pair",
  "types.ModuleType",
  "types.SimpleNamespace",
  "typing.Any",
  "typing.BinaryIO",
  "typing.Callable",
  "typing.Dict",
  "typing.Generator",
  "typing.Iterable",
  "typing.Iterator",
  "typing.List",
  "typing.NamedTuple",
  "typing.NewType",
  "typing.Optional",
  "typing.Sequence",
  "typing.Set",
  "typing.TYPE_CHECKING",
  "typing.Text",
  "typing.Tuple",
  "typing.Union",
  "typing.overload",
  "unicodedata",
  "unicodedata.category",
  "unicodedata.combining",
  "unicodedata.normalize",
  "unittest",
  "unittest.TestCase",
  "unittest.mock.patch.dict",
  "unittest.skip",
  "unshape",
  "urllib.parse.urlparse",
  "user.UserCommands.register_subcommand",
  "utils.logging.NOTSET",
  "utils.logging.WARN",
  "utils.logging.add_handler",
  "utils.logging.get_logger",
  "utils.logging.get_verbosity",
  "utils.logging.info",
  "utils.logging.set_verbosity_info",
  "utils.logging.warning",
  "uuid",
  "uvicorn.run",
  "visn_loss_fct",
  "visual_loss_fct",
  "warnings",
  "warnings.catch_warnings",
  "warnings.warn",
  "wget",
  "wget.download",
  "white_space_fix",
  "xlm_prophetnet.tokenization_xlm_prophetnet.XLMProphetNetTokenizer",
  "xlm_roberta.tokenization_xlm_roberta.XLMRobertaTokenizer",
  "xlm_roberta.tokenization_xlm_roberta_fast.XLMRobertaTokenizerFast",
  "xlnet.tokenization_xlnet.XLNetTokenizer",
  "xlnet.tokenization_xlnet_fast.XLNetTokenizerFast",
  "zipfile.ZipFile",
  "zipfile.is_zipfile"
 ],
 "deps": {
  "BertConfig": [],
  "IPython": [],
  "IndexMap": [],
  "MecabTokenizer": [],
  "MemoryMeasureProcess": [],
  "Mykytea": [],
  "ProductIndexMap": [],
  "SquadExample": [],
  "_NbestPrediction": [],
  "_PrelimPrediction": [],
  "__name__": [],
  "_conv_out_length": [],
  "_create_next_token_logits_penalties": [],
  "_get_generated_ngrams": [],
  "_is_punctuation": [],
  "_mask_pads": [],
  "_norm": [],
  "_pytest": [],
  "_read_stream": [],
  "_reorder_stacked": [],
  "_stream_subprocess": [],
  "_strip_spaces": [],
  "_to_coordinates": [],
  "_tokens_match": [],
  "abc": [],
  "absl": [
   "absl-py/conda-forge/noarch/absl-py-0.12.0-pyhd8ed1ab_0"
  ],
  "add_new_model": [],
  "albert": [],
  "albert_layer": [],
  "apex": [],
  "approx": [],
  "argparse": [],
  "as_tensor": [],
  "asyncio": [],
  "auto": [],
  "azureml": [],
  "bart": [],
  "barthez": [],
  "bert": [],
  "bert_generation": [],
  "blenderbot_small": [],
  "block": [],
  "build_shape_dict": [],
  "calc_banned_bad_words_ids": [],
  "calc_banned_ngram_tokens": [],
  "callback": [],
  "camembert": [],
  "cat_input_and_doc": [],
  "collections": [],
  "comet_ml": [],
  "config_class": [],
  "configuration_auto": [],
  "configuration_encoder_decoder": [],
  "configuration_rag": [],
  "configuration_utils": [],
  "contextlib": [],
  "conv": [],
  "conv_layer": [],
  "convbert": [],
  "convert": [],
  "convert_added_tokens": [],
  "converter_class": [],
  "cookiecutter": [
   "cookiecutter/conda-forge/noarch/cookiecutter-1.7.3-pyh6c4a22f_0"
  ],
  "copy": [],
  "create_custom_forward": [],
  "create_tf_var": [],
  "criteria": [],
  "csv": [],
  "dataclasses": [
   "dataclasses/conda-forge/noarch/dataclasses-0.8-pyh787bdff_0",
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ],
  "datasets": [
   "datasets/conda-forge/noarch/datasets-1.1.3-pyhd3deb0d_0"
  ],
  "datetime": [],
  "deberta_v2": [],
  "decimal": [],
  "decoder_layer": [],
  "deepspeed": [],
  "dependency_versions_table": [],
  "distilbert": [],
  "distutils": [],
  "download": [],
  "dpr": [],
  "dtype": [],
  "electra": [],
  "encoder": [],
  "encoder_layer": [],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "env": [],
  "extend_enc_output": [],
  "fairscale": [],
  "fairseq": [],
  "faiss": [],
  "fastapi": [
   "fastapi/conda-forge/noarch/fastapi-0.52.0-py_0"
  ],
  "feature_extraction_speech_to_text": [],
  "feature_extraction_wav2vec2": [],
  "ffn_module": [],
  "file_utils": [],
  "filelock": [
   "filelock/conda-forge/noarch/filelock-3.0.12-pyh9f0ad1d_0"
  ],
  "flax": [
   "flax/conda-forge/noarch/flax-0.3.2-pyhd8ed1ab_0"
  ],
  "fn": [],
  "fnmatch": [],
  "func": [],
  "functools": [],
  "funnel": [],
  "gather": [],
  "gather2d": [],
  "gc": [],
  "get_cpu_memory": [],
  "get_initializer": [],
  "get_input_ids": [],
  "get_ipython": [],
  "get_numeric_sort_key_fn": [],
  "getpass": [],
  "git": [
   "gitpython/conda-forge/noarch/gitpython-3.0.8-py_0"
  ],
  "glob": [],
  "google": [],
  "gpt2": [],
  "h": [],
  "h5py": [],
  "hashlib": [],
  "herbert": [],
  "hf_api": [],
  "html": [],
  "importlib": [],
  "importlib_metadata": [
   "importlib-metadata/conda-forge/noarch/importlib-metadata-3.0.0-pyhd8ed1ab_0"
  ],
  "inference_model": [],
  "initializer": [],
  "input": [],
  "inspect": [],
  "int_to_alphabetic": [],
  "integrations": [],
  "io": [],
  "is_tensor": [],
  "itertools": [],
  "jax": [
   "jax/conda-forge/noarch/jax-0.1.73-py_0"
  ],
  "jieba": [
   "jieba/conda-forge/noarch/jieba-0.42.1-pyhd8ed1ab_0"
  ],
  "json": [],
  "keras2onnx": [
   "keras2onnx/conda-forge/noarch/keras2onnx-1.6.5-pyhd8ed1ab_0"
  ],
  "key_fn": [],
  "label_from_example": [],
  "layer": [],
  "layer_module": [],
  "layoutlm": [],
  "led": [],
  "lfs": [],
  "linear": [],
  "linecache": [],
  "load": [],
  "load_pytorch_weights_in_tf2_model": [],
  "load_spm": [],
  "log_softmax": [],
  "logging": [],
  "longformer": [],
  "loss_fct": [],
  "loss_fct_cls": [],
  "loss_fn": [],
  "lower": [],
  "lxmert": [],
  "m2m_100": [],
  "marian": [],
  "math": [],
  "mbart": [],
  "mobilebert": [],
  "model": [],
  "model_class": [],
  "model_cls": [],
  "modelcard": [],
  "modeling_tf_pytorch_utils": [],
  "modeling_tf_utils": [],
  "models": [],
  "module": [],
  "mpnet": [],
  "mt5": [],
  "multiprocessing": [],
  "nlp": [
   "nlp/conda-forge/noarch/nlp-0.4.0-pyh9f0ad1d_0"
  ],
  "numbers": [],
  "numpy": [],
  "onnx": [],
  "onnxruntime": [],
  "openai": [],
  "operator": [],
  "optimizer_cls": [],
  "optuna": [
   "optuna/conda-forge/noarch/optuna-1.2.0-py_0"
  ],
  "os": [],
  "packaging": [
   "packaging/conda-forge/noarch/packaging-18.0-py_0"
  ],
  "pandas": [],
  "pathlib": [],
  "pegasus": [],
  "pickle": [],
  "pipelines": [],
  "pkg_resources": [],
  "platform": [],
  "processor": [],
  "processors": [],
  "project": [],
  "psutil": [],
  "pt_model": [],
  "py3nvml": [],
  "pydantic": [
   "pydantic/conda-forge/noarch/pydantic-0.18.1-py_1"
  ],
  "pytest": [],
  "pythainlp": [],
  "pytorch_lightning": [
   "pytorch-lightning/conda-forge/noarch/pytorch-lightning-1.2.9-pyhd8ed1ab_1"
  ],
  "random": [],
  "ray": [],
  "re": [],
  "reformer": [],
  "regex": [],
  "remove_articles": [],
  "remove_copy_lines": [],
  "remove_punc": [],
  "replace": [],
  "replace_in_files": [],
  "repr": [],
  "requests": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "reshape": [],
  "retribert": [],
  "retriever": [
   "retriever/conda-forge/noarch/retriever-2.3.0-py_0"
  ],
  "roberta": [],
  "run": [],
  "run_hp_search": [],
  "sacremoses": [
   "sacremoses/conda-forge/noarch/sacremoses-0.0.35-py_0"
  ],
  "save_json": [],
  "schedule_func": [],
  "scipy": [],
  "sentencepiece": [],
  "serving": [],
  "set_tensor_by_indices_to_value": [],
  "shape": [],
  "shape_list": [],
  "shutil": [],
  "signal": [],
  "six": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "six_ensure_text": [],
  "skip_units": [],
  "sklearn": [],
  "smdistributed": [],
  "socket": [],
  "speech_to_text": [],
  "split_on_token": [],
  "split_on_tokens": [],
  "squeezebert": [],
  "starlette": [
   "starlette-base/conda-forge/noarch/starlette-base-0.13.5-py_2",
   "starlette/conda-forge/noarch/starlette-0.11.2-py_0"
  ],
  "str": [],
  "string": [],
  "subprocess": [],
  "summary_failures_short": [],
  "symmetric_linear_quantization_params": [],
  "sys": [],
  "t5": [],
  "tarfile": [],
  "task_class": [],
  "temp_file_manager": [],
  "tempfile": [],
  "tensorflow": [],
  "tensorflow_hub": [
   "tensorflow-hub/conda-forge/noarch/tensorflow-hub-0.8.0-pyh831f99a_0"
  ],
  "tensorflow_text": [],
  "tf_index_select": [],
  "tf_model": [],
  "tf_model_class": [],
  "tf_top_k_top_p_filtering": [],
  "threading": [],
  "tie_encoder_to_decoder_recursively": [],
  "time": [],
  "timeit": [],
  "timeout_decorator": [
   "timeout-decorator/conda-forge/noarch/timeout-decorator-0.4.1-py_0"
  ],
  "to_tf_var_name": [],
  "tokenization_albert": [],
  "tokenization_barthez": [],
  "tokenization_camembert": [],
  "tokenization_mbart": [],
  "tokenization_mbart50": [],
  "tokenization_pegasus": [],
  "tokenization_rag": [],
  "tokenization_reformer": [],
  "tokenization_speech_to_text": [],
  "tokenization_t5": [],
  "tokenization_utils": [],
  "tokenization_utils_base": [],
  "tokenization_wav2vec2": [],
  "tokenization_xlm_roberta": [],
  "tokenization_xlnet": [],
  "tokenizers": [],
  "torch": [],
  "torch_gather": [],
  "torch_scatter": [],
  "torch_xla": [],
  "torchaudio": [],
  "tqdm": [
   "tqdm/conda-forge/noarch/tqdm-4.20.0-py_0"
  ],
  "tracemalloc": [],
  "train_model": [],
  "trainer": [],
  "trainer_callback": [],
  "trainer_utils": [],
  "training_args": [],
  "transformers": [],
  "transformers_old": [],
  "truncate_seq_pair": [],
  "types": [],
  "typing": [],
  "unicodedata": [],
  "unittest": [],
  "unshape": [],
  "urllib": [],
  "user": [],
  "utils": [],
  "uuid": [],
  "uvicorn": [],
  "visn_loss_fct": [],
  "visual_loss_fct": [],
  "wandb": [
   "wandb/conda-forge/noarch/wandb-0.10.8-pyh9f0ad1d_0"
  ],
  "warnings": [],
  "wget": [],
  "white_space_fix": [],
  "xlm_prophetnet": [],
  "xlm_roberta": [],
  "xlnet": [],
  "yaml": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ],
  "zipfile": []
 }
}