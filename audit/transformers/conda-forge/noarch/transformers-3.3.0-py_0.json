{
 "bad": [
  "AdamW",
  "AddedToken",
  "AssertionError",
  "AttributeError",
  "BaseModelOutput",
  "BaseModelOutputWithPast",
  "BaseModelOutputWithPooling",
  "BasicTokenizer",
  "BatchEncoding",
  "BertEncoder",
  "BertModel",
  "BestRun",
  "CausalLMOutput",
  "CausalLMOutputWithPast",
  "Conv1D",
  "DataCollatorWithPadding",
  "EnvironmentError",
  "EvalPrediction",
  "EvaluationStrategy",
  "Exception",
  "FileNotFoundError",
  "FutureWarning",
  "GradientAccumulator",
  "HPSearchBackend",
  "HPSearchBackend.OPTUNA",
  "HPSearchBackend.RAY",
  "ImportError",
  "IndexError",
  "InputExample",
  "InputFeatures",
  "KeyError",
  "MaskedLMOutput",
  "Memory",
  "MemoryMeasureProcess",
  "ModuleNotFoundError",
  "MultipleChoiceModelOutput",
  "NextSentencePredictorOutput",
  "NotImplementedError",
  "OSError",
  "OverflowError",
  "PoolerAnswerClass",
  "PoolerEndLogits",
  "PoolerStartLogits",
  "PredictionOutput",
  "ProjectedAdaptiveLogSoftmax",
  "QuestionAnsweringModelOutput",
  "RagTokenizer",
  "RuntimeError",
  "SQuADHead",
  "Seq2SeqLMOutput",
  "Seq2SeqModelOutput",
  "SequenceClassifierOutput",
  "SequenceSummary",
  "SquadExample",
  "SquadV1Processor",
  "SquadV2Processor",
  "StopIteration",
  "TFAdaptiveSoftmaxMask",
  "TFBaseModelOutput",
  "TFBaseModelOutputWithPast",
  "TFBaseModelOutputWithPooling",
  "TFCausalLMOutput",
  "TFCausalLMOutputWithPast",
  "TFConv1D",
  "TFMaskedLMOutput",
  "TFMultipleChoiceModelOutput",
  "TFNextSentencePredictorOutput",
  "TFQuestionAnsweringModelOutput",
  "TFSeq2SeqLMOutput",
  "TFSeq2SeqModelOutput",
  "TFSequenceClassifierOutput",
  "TFSequenceSummary",
  "TFSharedEmbeddings",
  "TFTokenClassifierOutput",
  "TokenClassifierOutput",
  "TrainOutput",
  "TrainingArguments",
  "TypeError",
  "UnicodeError",
  "UserWarning",
  "ValueError",
  "WordpieceTokenizer",
  "_NbestPrediction",
  "_PrelimPrediction",
  "__import__",
  "__name__",
  "__name__.split",
  "_is_control",
  "_is_punctuation",
  "_is_whitespace",
  "_mask_pads",
  "_reorder_buffer",
  "_reorder_stacked",
  "_strip_spaces",
  "abc.ABC",
  "abc.abstractmethod",
  "add_code_sample_docstrings",
  "add_end_docstrings",
  "add_start_docstrings",
  "add_start_docstrings_to_callable",
  "albert_layer",
  "all",
  "any",
  "apex.amp.initialize",
  "apex.amp.master_params",
  "apex.amp.scale_loss",
  "apply_chunking_to_forward",
  "approx",
  "argparse.ArgumentParser",
  "argparse.Namespace",
  "as_tensor",
  "block",
  "bool",
  "build_shape_dict",
  "bytearray",
  "bytes",
  "cached_path",
  "callable",
  "cast_bool_to_primitive",
  "cat_input_and_doc",
  "chr",
  "classmethod",
  "cls",
  "cls._dict_from_json_file",
  "cls.authorized_missing_keys",
  "cls.authorized_unexpected_keys",
  "cls.base_model_prefix",
  "cls.load_tf_weights",
  "collections.Counter",
  "collections.OrderedDict",
  "collections.OrderedDict.fromkeys",
  "collections.UserDict",
  "collections.defaultdict",
  "collections.namedtuple",
  "config_class",
  "config_class.from_dict",
  "contextlib.contextmanager",
  "create_custom_forward",
  "create_optimizer",
  "create_tf_var",
  "datasets.load_dataset",
  "datetime.datetime.date",
  "datetime.datetime.now",
  "datetime.datetime.time",
  "default_hp_search_backend",
  "delattr",
  "dict",
  "distributed_broadcast_scalars",
  "distributed_concat",
  "distutils.util.strtobool",
  "dtype",
  "embed_tokens",
  "encoder",
  "enum.Enum",
  "enumerate",
  "exit",
  "extend_enc_output",
  "fairseq.models.roberta.RobertaModel.from_pretrained",
  "fairseq.modules.TransformerSentenceEncoderLayer",
  "ffn_module",
  "filelock.FileLock",
  "filter",
  "find_pruneable_heads_and_indices",
  "float",
  "format",
  "forward_fn",
  "func",
  "func.__name__",
  "function",
  "functools.lru_cache",
  "functools.partial",
  "functools.reduce",
  "functools.wraps",
  "gelu",
  "get_activation",
  "get_cpu_memory",
  "get_initializer",
  "get_input_ids",
  "get_linear_schedule_with_warmup",
  "get_masks",
  "get_tf_activation",
  "getattr",
  "getpass.getpass",
  "globals",
  "glue_convert_examples_to_features",
  "h",
  "hasattr",
  "hashlib.sha256",
  "hf_bucket_url",
  "inference_model",
  "input",
  "input.append",
  "input.size",
  "int",
  "io.StringIO",
  "is_apex_available",
  "is_comet_available",
  "is_datasets_available",
  "is_faiss_available",
  "is_optuna_available",
  "is_psutil_available",
  "is_py3nvml_available",
  "is_ray_available",
  "is_remote_url",
  "is_sklearn_available",
  "is_tensorboard_available",
  "is_tf_available",
  "is_torch_available",
  "is_torch_tpu_available",
  "is_wandb_available",
  "isinstance",
  "issubclass",
  "iter",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "keras2onnx.__version__",
  "keras2onnx.convert_keras",
  "keras2onnx.save_model",
  "label_from_example",
  "layer",
  "layer.attention.prune_heads",
  "layer.backward_pass",
  "layer_module",
  "len",
  "list",
  "load",
  "load_tf2_checkpoint_in_pytorch_model",
  "load_vocab",
  "logging.DEBUG",
  "logging.ERROR",
  "logging.INFO",
  "logging.WARNING",
  "loss_fct",
  "loss_fct.ignore_index",
  "loss_fct_cls",
  "lower",
  "map",
  "max",
  "measure_peak_memory_cpu",
  "min",
  "model",
  "model.eval",
  "model.floating_point_ops",
  "model.lm_head",
  "model.load_state_dict",
  "model.model",
  "model.model.load_state_dict",
  "model.model.shared",
  "model.module",
  "model.save_pretrained",
  "model.trainable_variables",
  "model_class",
  "model_cls",
  "model_init",
  "module",
  "module.bias",
  "module.bias.data.zero_",
  "module.weight.data.fill_",
  "module.weight.data.normal_",
  "multiprocessing.Pipe",
  "multiprocessing.Process",
  "multiprocessing.Queue",
  "multiprocessing.connection.Connection",
  "nested_concat",
  "nested_numpify",
  "nested_xla_mesh_reduce",
  "next",
  "numpy.abs",
  "numpy.allclose",
  "numpy.amax",
  "numpy.append",
  "numpy.arange",
  "numpy.argmax",
  "numpy.argpartition",
  "numpy.argsort",
  "numpy.array",
  "numpy.asarray",
  "numpy.ceil",
  "numpy.concatenate",
  "numpy.cos",
  "numpy.cumsum",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.float32",
  "numpy.hstack",
  "numpy.lcm",
  "numpy.load",
  "numpy.log",
  "numpy.matmul",
  "numpy.mean",
  "numpy.ndarray",
  "numpy.newaxis",
  "numpy.power",
  "numpy.prod",
  "numpy.random.normal",
  "numpy.random.permutation",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.random.shuffle",
  "numpy.sin",
  "numpy.split",
  "numpy.sqrt",
  "numpy.sum",
  "numpy.transpose",
  "numpy.tril",
  "numpy.triu",
  "numpy.unravel_index",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "object",
  "onnxruntime.InferenceSession",
  "onnxruntime.SessionOptions",
  "onnxruntime.capi.onnxruntime_pybind11_state.RuntimeException",
  "onnxruntime.quantization.QuantizationMode.IntegerOps",
  "onnxruntime.quantization.quantize",
  "open",
  "operator.mul",
  "ord",
  "os.listdir",
  "os.makedirs",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "print",
  "property",
  "prune_conv1d_layer",
  "prune_linear_layer",
  "pt_model",
  "pt_model.dummy_inputs",
  "pydantic.BaseModel",
  "pythainlp.tokenize.word_tokenize",
  "range",
  "regex.compile",
  "regex.findall",
  "remove_articles",
  "remove_ignore_keys_",
  "remove_punc",
  "replace_list_option_in_docstrings",
  "replace_return_docstrings",
  "reversed",
  "round",
  "run_hp_search",
  "sacremoses.MosesDetokenizer",
  "sacremoses.MosesPunctNormalizer",
  "sacremoses.MosesTokenizer",
  "scipy.stats.pearsonr",
  "scipy.stats.spearmanr",
  "self",
  "self.ALLOWED_MODELS",
  "self.XL_PREFIX",
  "self._args_parser",
  "self._args_parser._parse_labels",
  "self._basic_tokenizer",
  "self._cat_and_pad",
  "self._clean_padding_history",
  "self._concat_inputs_history",
  "self._forward",
  "self._generate_beam_search",
  "self._generate_no_beam_search",
  "self._parse_and_tokenize",
  "self._parse_labels",
  "self.bpe_ranks.items",
  "self.check_model_type",
  "self.config.bad_words_ids",
  "self.config.bos_token_id",
  "self.config.decoder_start_token_id",
  "self.config.do_marginalize",
  "self.config.early_stopping",
  "self.config.generator.bos_token_id",
  "self.config.generator.decoder_start_token_id",
  "self.config.generator.eos_token_id",
  "self.config.generator.pad_token_id",
  "self.config.generator.vocab_size",
  "self.config.label_smoothing",
  "self.config.length_penalty",
  "self.config.max_length",
  "self.config.min_length",
  "self.config.n_docs",
  "self.config.no_repeat_ngram_size",
  "self.config.num_beams",
  "self.config.num_return_sequences",
  "self.config.reduce_loss",
  "self.config.repetition_penalty",
  "self.config.temperature",
  "self.config.top_k",
  "self.config.top_p",
  "self.config.use_cache",
  "self.cur_lang_code",
  "self.decode",
  "self.decoder.items",
  "self.device",
  "self.device.type",
  "self.device_placement",
  "self.encoder",
  "self.ensure_exactly_one_mask_token",
  "self.ensure_tensor_on_device",
  "self.eos_token_id",
  "self.framework",
  "self.generated_responses",
  "self.generated_responses.append",
  "self.generator.config.prefix",
  "self.get_nll",
  "self.group_entities",
  "self.group_sub_entities",
  "self.grouped_entities",
  "self.history",
  "self.ignore_labels",
  "self.lang_code_to_id",
  "self.marginalize",
  "self.min_length_for_response",
  "self.model",
  "self.model.__class__.__name__",
  "self.model.base_model_prefix",
  "self.model.config.id2label",
  "self.model.config.max_length",
  "self.model.config.min_length",
  "self.model.config.prefix",
  "self.model.generate",
  "self.model_max_length",
  "self.new_user_input",
  "self.pad_token_id",
  "self.parameters",
  "self.past_user_inputs",
  "self.past_user_inputs.append",
  "self.prefix_tokens",
  "self.question_encoder",
  "self.rag",
  "self.rag.generator",
  "self.rag.generator.adjust_logits_during_generation",
  "self.rag.generator.get_encoder",
  "self.rag.generator.get_input_embeddings",
  "self.rag.generator.get_output_embeddings",
  "self.rag.question_encoder",
  "self.rag.retriever",
  "self.retriever",
  "self.return_all_scores",
  "self.set_src_lang_special_tokens",
  "self.set_tgt_lang_special_tokens",
  "self.suffix_tokens",
  "self.task",
  "self.tokenizer",
  "self.tokenizer.batch_encode_plus",
  "self.tokenizer.convert_ids_to_tokens",
  "self.tokenizer.convert_tokens_to_ids",
  "self.tokenizer.convert_tokens_to_string",
  "self.tokenizer.decode",
  "self.tokenizer.eos_token_id",
  "self.tokenizer.mask_token",
  "self.tokenizer.mask_token_id",
  "self.tokenizer.model_input_names",
  "self.tokenizer.pad_token_id",
  "self.tokenizer.tokenize",
  "self.tokenizer.unk_token",
  "self.topk",
  "self.uuid",
  "sent_encoder",
  "sent_encoder.config.num_hidden_layers",
  "sent_encoder.embeddings",
  "sent_encoder.encoder",
  "sent_encoder.get_extended_attention_mask",
  "sent_encoder.pooler",
  "set",
  "set_seed",
  "setattr",
  "shape",
  "shape_list",
  "shutil.copyfile",
  "signal.SIGKILL",
  "six_ensure_text",
  "sklearn.metrics.f1_score",
  "sklearn.metrics.matthews_corrcoef",
  "slice",
  "sorted",
  "split_on_token",
  "split_on_tokens",
  "squad_convert_examples_to_features",
  "start_memory_tracing",
  "staticmethod",
  "stop_memory_tracing",
  "str",
  "sum",
  "super",
  "task_class",
  "temp_file_manager",
  "tensorboardX.SummaryWriter",
  "tensorflow.VariableAggregation.ONLY_FIRST_REPLICA",
  "tensorflow.VariableSynchronization.ON_READ",
  "tensorflow.compat.v1.Session",
  "tensorflow.compat.v1.disable_eager_execution",
  "tensorflow.compat.v1.global_variables_initializer",
  "tensorflow.compat.v1.variable_scope",
  "tensorflow.config.experimental.set_memory_growth",
  "tensorflow.config.experimental.set_visible_devices",
  "tensorflow.config.experimental_connect_to_cluster",
  "tensorflow.config.list_physical_devices",
  "tensorflow.config.optimizer.set_jit",
  "tensorflow.data.Dataset.from_generator",
  "tensorflow.data.experimental.AUTOTUNE",
  "tensorflow.data.experimental.cardinality",
  "tensorflow.debugging.assert_equal",
  "tensorflow.debugging.assert_greater_equal",
  "tensorflow.distribute.MirroredStrategy",
  "tensorflow.distribute.OneDeviceStrategy",
  "tensorflow.distribute.cluster_resolver.TPUClusterResolver",
  "tensorflow.distribute.experimental.TPUStrategy",
  "tensorflow.dtypes.as_dtype",
  "tensorflow.dtypes.cast",
  "tensorflow.dtypes.float32",
  "tensorflow.dtypes.int32",
  "tensorflow.function",
  "tensorflow.keras.activations.swish",
  "tensorflow.keras.layers.LayerNormalization",
  "tensorflow.keras.losses.Huber",
  "tensorflow.keras.losses.SparseCategoricalCrossentropy",
  "tensorflow.keras.metrics.Sum",
  "tensorflow.keras.mixed_precision.experimental.Policy",
  "tensorflow.keras.mixed_precision.experimental.set_policy",
  "tensorflow.keras.optimizers.schedules.LearningRateSchedule",
  "tensorflow.keras.optimizers.schedules.PolynomialDecay",
  "tensorflow.math.abs",
  "tensorflow.math.cumsum",
  "tensorflow.math.divide",
  "tensorflow.math.erf",
  "tensorflow.math.pow",
  "tensorflow.math.reduce_any",
  "tensorflow.math.reduce_mean",
  "tensorflow.math.sqrt",
  "tensorflow.math.square",
  "tensorflow.math.top_k",
  "tensorflow.nn.avg_pool1d",
  "tensorflow.nn.max_pool1d",
  "tensorflow.python.distribute.values.PerReplica",
  "tensorflow.random.set_seed",
  "tensorflow.random.uniform",
  "tensorflow.repeat",
  "tensorflow.signal.frame",
  "tensorflow.summary.SummaryWriter",
  "tensorflow.summary.create_file_writer",
  "tensorflow.summary.experimental.set_step",
  "tensorflow.summary.trace_export",
  "tensorflow.summary.trace_on",
  "tensorflow.tensor_scatter_nd_update",
  "tensorflow.tpu.experimental.initialize_tpu_system",
  "tensorflow.train.CheckpointManager",
  "tensorflow.version.VERSION",
  "tf_model",
  "tf_model.dummy_inputs",
  "tf_model.save_weights",
  "tie_encoder_to_decoder_recursively",
  "time.time",
  "to_py_obj",
  "to_tf_var_name",
  "tokenizer",
  "tokenizer.__class__.__name__",
  "tokenizer.build_inputs_with_special_tokens",
  "tokenizer.convert_tokens_to_ids",
  "tokenizer.create_token_type_ids_from_sequences",
  "tokenizer.num_special_tokens_to_add",
  "tokenizer.tokenize",
  "tokenizers.AddedToken",
  "tokenizers.BertWordPieceTokenizer",
  "tokenizers.ByteLevelBPETokenizer",
  "tokenizers.CharBPETokenizer",
  "tokenizers.Encoding",
  "tokenizers.Tokenizer",
  "tokenizers.implementations.BaseTokenizer",
  "torch.Tensor",
  "torch.cuda.amp.autocast",
  "torch.cuda.empty_cache",
  "torch.device",
  "torch.dtype",
  "torch.nn.AdaptiveLogSoftmaxWithLoss",
  "torch.nn.BCEWithLogitsLoss",
  "torch.nn.CrossEntropyLoss",
  "torch.nn.Dropout",
  "torch.nn.Embedding",
  "torch.nn.Identity",
  "torch.nn.LayerNorm",
  "torch.nn.Linear",
  "torch.nn.MSELoss",
  "torch.nn.Module",
  "torch.nn.ModuleDict",
  "torch.nn.ModuleList",
  "torch.nn.Parameter",
  "torch.nn.ParameterList",
  "torch.nn.ReLU",
  "torch.nn.Sequential",
  "torch.nn.SmoothL1Loss",
  "torch.nn.Softmax",
  "torch.nn.Tanh",
  "torch.nn.functional.avg_pool2d",
  "torch.nn.functional.cross_entropy",
  "torch.nn.functional.dropout",
  "torch.nn.functional.dropout2d",
  "torch.nn.functional.gelu",
  "torch.nn.functional.linear",
  "torch.nn.functional.log_softmax",
  "torch.nn.functional.max_pool2d",
  "torch.nn.functional.one_hot",
  "torch.nn.functional.pad",
  "torch.nn.functional.relu",
  "torch.nn.functional.softmax",
  "torch.nn.functional.softplus",
  "torch.optim.Optimizer",
  "torch.utils.data.TensorDataset",
  "torch_xla.core.xla_model.get_ordinal",
  "torch_xla.core.xla_model.is_master_ordinal",
  "torch_xla.core.xla_model.master_print",
  "torch_xla.core.xla_model.mesh_reduce",
  "torch_xla.core.xla_model.optimizer_step",
  "torch_xla.core.xla_model.rendezvous",
  "torch_xla.core.xla_model.save",
  "torch_xla.core.xla_model.send_cpu_data_to_device",
  "torch_xla.core.xla_model.xla_device",
  "torch_xla.core.xla_model.xrt_world_size",
  "torch_xla.debug.metrics.metrics_report",
  "torch_xla.distributed.parallel_loader.ParallelLoader",
  "tqdm.tqdm",
  "train_model",
  "transformers.ALBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.AlbertConfig",
  "transformers.AlbertConfig.from_json_file",
  "transformers.AlbertForPreTraining",
  "transformers.AutoConfig.from_pretrained",
  "transformers.AutoModel.from_pretrained",
  "transformers.AutoTokenizer.from_pretrained",
  "transformers.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.BartConfig.from_pretrained",
  "transformers.BartForConditionalGeneration",
  "transformers.BartForSequenceClassification",
  "transformers.BartModel",
  "transformers.BartTokenizer.from_pretrained",
  "transformers.BertConfig",
  "transformers.BertConfig.from_json_file",
  "transformers.BertConfig.from_pretrained",
  "transformers.BertConfig.get_config_dict",
  "transformers.BertForPreTraining",
  "transformers.BertForQuestionAnswering",
  "transformers.BertForSequenceClassification",
  "transformers.BertGenerationConfig",
  "transformers.BertGenerationDecoder",
  "transformers.BertGenerationEncoder",
  "transformers.BertModel",
  "transformers.BertModel.from_pretrained",
  "transformers.CAMEMBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.CONFIG_NAME",
  "transformers.CTRLConfig",
  "transformers.CTRLLMHeadModel",
  "transformers.CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.CamembertConfig",
  "transformers.CamembertForMaskedLM",
  "transformers.DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.DPRConfig",
  "transformers.DPRContextEncoder",
  "transformers.DPRQuestionEncoder",
  "transformers.DPRReader",
  "transformers.DistilBertConfig",
  "transformers.DistilBertForMaskedLM",
  "transformers.DistilBertForQuestionAnswering",
  "transformers.ELECTRA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.ElectraConfig",
  "transformers.ElectraConfig.from_json_file",
  "transformers.ElectraForMaskedLM",
  "transformers.ElectraForPreTraining",
  "transformers.FLAUBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.FlaubertConfig",
  "transformers.FlaubertWithLMHeadModel",
  "transformers.FunnelConfig.from_json_file",
  "transformers.FunnelForPreTraining",
  "transformers.GPT2Config",
  "transformers.GPT2Config.from_json_file",
  "transformers.GPT2LMHeadModel",
  "transformers.GPT2Model",
  "transformers.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.LXMERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.LxmertConfig",
  "transformers.LxmertConfig.from_json_file",
  "transformers.LxmertForPreTraining",
  "transformers.LxmertVisualFeatureEncoder",
  "transformers.MBartConfig.from_pretrained",
  "transformers.MarianConfig.from_pretrained",
  "transformers.MarianMTModel",
  "transformers.MobileBertConfig.from_json_file",
  "transformers.MobileBertForPreTraining",
  "transformers.OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.OpenAIGPTConfig",
  "transformers.OpenAIGPTConfig.from_json_file",
  "transformers.OpenAIGPTLMHeadModel",
  "transformers.OpenAIGPTModel",
  "transformers.PegasusConfig",
  "transformers.PegasusForConditionalGeneration",
  "transformers.PegasusTokenizer.from_pretrained",
  "transformers.Pipeline",
  "transformers.PretrainedConfig",
  "transformers.ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.ReformerConfig.from_json_file",
  "transformers.ReformerModelWithLMHead",
  "transformers.RobertaConfig",
  "transformers.RobertaForMaskedLM",
  "transformers.RobertaForSequenceClassification",
  "transformers.SingleSentenceClassificationProcessor.create_from_csv",
  "transformers.T5Config",
  "transformers.T5Config.from_json_file",
  "transformers.T5ForConditionalGeneration",
  "transformers.T5Model",
  "transformers.T5_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.TFAlbertForPreTraining",
  "transformers.TFBertForPreTraining",
  "transformers.TFBertForQuestionAnswering",
  "transformers.TFBertForSequenceClassification",
  "transformers.TFCTRLLMHeadModel",
  "transformers.TFCamembertForMaskedLM",
  "transformers.TFDistilBertForMaskedLM",
  "transformers.TFDistilBertForQuestionAnswering",
  "transformers.TFElectraForPreTraining",
  "transformers.TFFlaubertWithLMHeadModel",
  "transformers.TFGPT2LMHeadModel",
  "transformers.TFLxmertForPreTraining",
  "transformers.TFLxmertVisualFeatureEncoder",
  "transformers.TFOpenAIGPTLMHeadModel",
  "transformers.TFRobertaForMaskedLM",
  "transformers.TFRobertaForSequenceClassification",
  "transformers.TFT5ForConditionalGeneration",
  "transformers.TFTransfoXLLMHeadModel",
  "transformers.TFXLMRobertaForMaskedLM",
  "transformers.TFXLMWithLMHeadModel",
  "transformers.TFXLNetLMHeadModel",
  "transformers.TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.TextClassificationPipeline.from_pretrained",
  "transformers.TransfoXLConfig",
  "transformers.TransfoXLConfig.from_json_file",
  "transformers.TransfoXLLMHeadModel",
  "transformers.WEIGHTS_NAME",
  "transformers.XLMConfig",
  "transformers.XLMRobertaConfig",
  "transformers.XLMRobertaForMaskedLM",
  "transformers.XLMWithLMHeadModel",
  "transformers.XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.XLM_ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.XLNetConfig",
  "transformers.XLNetConfig.from_json_file",
  "transformers.XLNetForQuestionAnswering",
  "transformers.XLNetForSequenceClassification",
  "transformers.XLNetLMHeadModel",
  "transformers.cached_path",
  "transformers.configuration_fsmt.FSMTConfig.from_pretrained",
  "transformers.configuration_pegasus.DEFAULTS.copy",
  "transformers.convert_lxmert_original_pytorch_checkpoint_to_pytorch.convert_lxmert_checkpoint_to_pytorch",
  "transformers.hf_api.HfFolder.path_token",
  "transformers.is_tf_available",
  "transformers.is_torch_available",
  "transformers.load_pytorch_checkpoint_in_tf2_model",
  "transformers.load_tf_weights_in_albert",
  "transformers.load_tf_weights_in_bert",
  "transformers.load_tf_weights_in_bert_generation",
  "transformers.load_tf_weights_in_electra",
  "transformers.load_tf_weights_in_funnel",
  "transformers.load_tf_weights_in_gpt2",
  "transformers.load_tf_weights_in_lxmert",
  "transformers.load_tf_weights_in_mobilebert",
  "transformers.load_tf_weights_in_openai_gpt",
  "transformers.load_tf_weights_in_t5",
  "transformers.load_tf_weights_in_transfo_xl",
  "transformers.load_tf_weights_in_xlnet",
  "transformers.logging.set_verbosity_info",
  "transformers.logging.set_verbosity_warning",
  "transformers.modeling_bart._make_linear_from_emb",
  "transformers.modeling_fsmt.FSMTForConditionalGeneration",
  "transformers.modeling_longformer.LongformerForQuestionAnswering.from_pretrained",
  "transformers.modeling_longformer.LongformerModel.from_pretrained",
  "transformers.modeling_roberta.RobertaConfig",
  "transformers.pipelines.PipelineDataFormat.SUPPORTED_FORMATS",
  "transformers.pipelines.SUPPORTED_TASKS.keys",
  "transformers.tokenization_transfo_xl.Corpus",
  "transformers.tokenization_transfo_xl.Vocab",
  "transformers.tokenization_utils.BatchEncoding",
  "truncate_seq_pair",
  "tuple",
  "type",
  "unshape",
  "urllib.parse.urlparse",
  "uuid.UUID",
  "vars",
  "visn_loss_fct",
  "visual_loss_fct",
  "white_space_fix",
  "zip",
  "zipfile.ZipFile",
  "zipfile.is_zipfile"
 ],
 "deps": [
  [
   "closure-20190417-py_0",
   "closure-20191111-py_0"
  ],
  [
   "dataclasses-0.5-py_0",
   "dataclasses-0.6-py36_1",
   "dataclasses-0.6-py_0",
   "dataclasses-0.7-pyhe4b4509_6",
   "google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "google-cloud-bigquery-storage-core-2.0.1-pyh9f0ad1d_0",
   "google-cloud-bigquery-storage-core-2.1.0-pyhd3deb0d_0"
  ],
  [
   "emoji-0.5.1-py_0",
   "emoji-0.5.3-py_0",
   "emoji-0.6.0-pyh9f0ad1d_0"
  ],
  [
   "fairseq-0.10.1-py37hdc94413_0",
   "fairseq-0.10.2-py36h284efc9_0",
   "fairseq-0.10.2-py37hdc94413_0"
  ],
  [
   "fastapi-0.63.0-pyhd8ed1ab_0"
  ],
  [
   "nlp-0.3.0-py37hc8dfbb8_0",
   "nlp-0.4.0-pyh9f0ad1d_0"
  ],
  [
   "packaging-16.7-py27_0",
   "packaging-17.1-py_0",
   "packaging-18.0-py_0",
   "packaging-19.0-py_0",
   "packaging-19.2-py_0",
   "packaging-20.0-py_0",
   "packaging-20.1-py_0",
   "packaging-20.4-pyh9f0ad1d_0",
   "packaging-20.7-pyhd3deb0d_0",
   "packaging-20.8-pyhd3deb0d_0",
   "packaging-20.9-pyh44b312d_0"
  ],
  [
   "pathlib-1.0.1-py27_0",
   "pathlib-1.0.1-py27_1",
   "pathlib-1.0.1-py_1"
  ],
  [
   "py3nvml-0.2.5-py27h8c360ce_1",
   "py3nvml-0.2.5-py36_0",
   "py3nvml-0.2.5-py37_0",
   "py3nvml-0.2.5-py38h32f6830_2"
  ],
  [
   "pytorch-lightning-0.10.0-py_0",
   "pytorch-lightning-0.10.0-py_1",
   "pytorch-lightning-0.7.6-py_0",
   "pytorch-lightning-0.8.0-py_0",
   "pytorch-lightning-0.8.1-py_0",
   "pytorch-lightning-0.8.3-py_0",
   "pytorch-lightning-0.8.4-py_0",
   "pytorch-lightning-0.8.5-py_0",
   "pytorch-lightning-0.9.0-py_0",
   "pytorch-lightning-1.0.0-py_0",
   "pytorch-lightning-1.0.0-py_1",
   "pytorch-lightning-1.0.1-py_0",
   "pytorch-lightning-1.0.2-py_0",
   "pytorch-lightning-1.0.3-py_0",
   "pytorch-lightning-1.0.3-py_1",
   "pytorch-lightning-1.0.4-py_0",
   "pytorch-lightning-1.0.5-pyhd8ed1ab_0",
   "pytorch-lightning-1.0.6-pyhd8ed1ab_0",
   "pytorch-lightning-1.0.7-pyhd8ed1ab_0",
   "pytorch-lightning-1.0.8-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.0-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.1-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.2-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.3-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.4-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.5-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.6-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.7-pyhd8ed1ab_0",
   "pytorch-lightning-1.1.8-pyhd8ed1ab_0",
   "pytorch-lightning-1.2.0-pyhd8ed1ab_0"
  ],
  [
   "ray-core-1.0.1-py37hf931bba_0",
   "ray-core-1.0.1-py38h9ba0119_0",
   "ray-core-1.0.1-py38h9ba0119_1"
  ],
  [
   "google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "google-cloud-bigquery-storage-core-2.0.1-pyh9f0ad1d_0",
   "google-cloud-bigquery-storage-core-2.1.0-pyhd3deb0d_0",
   "requests-2.10.0-py34_0",
   "requests-2.10.0-py35_0",
   "requests-2.12.0-py35_0",
   "requests-2.17.3-py36_0",
   "requests-2.18.2-py27_0",
   "requests-2.18.2-py36_0",
   "requests-2.18.4-py36_0",
   "requests-2.18.4-py36_1",
   "requests-2.19.1-py35_1",
   "requests-2.19.1-py36_0",
   "requests-2.19.1-py36_1001",
   "requests-2.20.0-py27_1000",
   "requests-2.22.0-py27_1",
   "requests-2.22.0-py38_1",
   "requests-2.23.0-py27h8c360ce_1",
   "requests-2.23.0-py36hc560c46_1",
   "requests-2.23.0-pyh8c360ce_2",
   "requests-2.24.0-pyh9f0ad1d_0",
   "requests-2.25.0-pyhd3deb0d_0",
   "requests-2.25.1-pyhd3deb0d_0"
  ],
  [
   "sentencepiece-0.1.91-py36h4ea7e17_4",
   "sentencepiece-0.1.91-py37h2527ec5_4",
   "sentencepiece-0.1.91-py37h99015e2_0",
   "sentencepiece-0.1.91-py38h1fd1430_4",
   "sentencepiece-0.1.95-py37h2527ec5_0",
   "sentencepiece-0.1.95-py38h1fd1430_0"
  ],
  [
   "spacy-2.2.1-py27hc9558a2_0",
   "spacy-2.2.3-py36hc9558a2_0",
   "spacy-2.2.4-py36hdb11119_1",
   "spacy-2.3.1-py36hdb11119_0",
   "spacy-2.3.2-py36h51d7077_1",
   "spacy-2.3.2-py36hdb11119_0",
   "spacy-2.3.2-py37hc928c03_2",
   "spacy-2.3.2-py39h081fc7a_2",
   "spacy-2.3.4-py36h8e82bdb_0",
   "spacy-2.3.4-py38hf6732f7_0",
   "spacy-2.3.5-py37h6dcda5c_1",
   "spacy-2.3.5-py38hc10631b_0",
   "spacy-3.0.0-py36h355b2fd_0",
   "spacy-3.0.2-py37h6dcda5c_0",
   "spacy-3.0.3-py39h5472131_0"
  ],
  [
   "starlette-0.10.1-py_0",
   "starlette-0.10.2-py_0",
   "starlette-0.10.3-py_0",
   "starlette-0.10.5-py_0",
   "starlette-0.11.1-py_0",
   "starlette-0.11.2-py_0",
   "starlette-0.11.4-py_0",
   "starlette-0.12.0-py_0",
   "starlette-0.12.1-py_0",
   "starlette-0.12.10-py_0",
   "starlette-0.12.13-py_0",
   "starlette-0.12.2-py_0",
   "starlette-0.12.3-py_0",
   "starlette-0.12.4-py_0",
   "starlette-0.12.5-py_0",
   "starlette-0.12.6-py_0",
   "starlette-0.12.7-py_0",
   "starlette-0.12.8-py_0",
   "starlette-0.12.9-py_0",
   "starlette-0.13.0-py_0",
   "starlette-0.13.1-py_0",
   "starlette-0.13.2-py_0",
   "starlette-0.13.3-py_0",
   "starlette-0.13.4-py_0",
   "starlette-0.13.5-py_0",
   "starlette-0.13.8-py_0",
   "starlette-0.14.1-pyhd8ed1ab_0",
   "starlette-0.14.2-pyhd8ed1ab_0",
   "starlette-0.4.2-py_0",
   "starlette-0.5.4-py_0",
   "starlette-0.5.5-py_0",
   "starlette-0.6.0-py_0",
   "starlette-0.6.1-py_0",
   "starlette-0.6.3-py_0",
   "starlette-0.7.0-py_0",
   "starlette-0.7.1-py_0",
   "starlette-0.8.0-py_0",
   "starlette-0.8.2-py_0",
   "starlette-0.8.4-py_0",
   "starlette-0.9.10-py_0",
   "starlette-0.9.9-py_0",
   "starlette-base-0.13.5-py_2",
   "starlette-base-0.13.6-py_0"
  ],
  [],
  [
   "tensorflow-hub-0.1.0-py_0",
   "tensorflow-hub-0.1.1-py_0",
   "tensorflow-hub-0.2.0-py_0",
   "tensorflow-hub-0.3.0-py_0",
   "tensorflow-hub-0.4.0-py_0",
   "tensorflow-hub-0.5.0-py_0",
   "tensorflow-hub-0.5.0-pyhe1b5a44_1",
   "tensorflow-hub-0.6.0-pyhe1b5a44_0",
   "tensorflow-hub-0.7.0-pyhe1b5a44_0",
   "tensorflow-hub-0.8.0-pyh831f99a_0",
   "tensorflow-hub-0.9.0-pyh831f99a_0"
  ],
  [
   "tokenizers-0.8.0-py36hf1545a4_1",
   "tokenizers-0.8.0-py37h4c3b196_0",
   "tokenizers-0.8.1-py36hf1545a4_0",
   "tokenizers-0.9.3-py36h2bc52f9_0",
   "tokenizers-0.9.4-py36h2bc52f9_0",
   "tokenizers-0.9.4-py38h781e378_0"
  ],
  [
   "pytorch-1.6.0-cpu_py38h36eccb8_1",
   "pytorch-1.6.0-cuda101py38h2499a06_1",
   "pytorch-1.6.0-cuda102py38h9f8c3ab_1",
   "pytorch-1.6.0-cuda92py37hc3ec645_1",
   "pytorch-1.7.1-cpu_py37hf1c21f6_1",
   "pytorch-1.7.1-cpu_py37hf1c21f6_2",
   "pytorch-1.7.1-cpu_py39h714fb45_1",
   "pytorch-1.7.1-cuda92py39hde86683_1",
   "pytorch-cpu-1.1.0-py27he1b5a44_0",
   "pytorch-cpu-1.1.0-py37he1b5a44_0",
   "pytorch-cpu-1.6.0-cpu_py38h3369884_0",
   "pytorch-cpu-1.6.0-cpu_py39he5e7b68_1"
  ],
  [
   "tqdm-4.48.1-pyh9f0ad1d_0",
   "tqdm-4.48.2-pyh9f0ad1d_0",
   "tqdm-4.49.0-pyh9f0ad1d_0",
   "tqdm-4.50.0-pyh9f0ad1d_0",
   "tqdm-4.50.1-pyh9f0ad1d_0",
   "tqdm-4.50.2-pyh9f0ad1d_0",
   "tqdm-4.51.0-pyh9f0ad1d_0",
   "tqdm-4.52.0-pyhd3deb0d_0",
   "tqdm-4.53.0-pyhd8ed1ab_1",
   "tqdm-4.54.0-pyhd8ed1ab_0",
   "tqdm-4.54.1-pyhd8ed1ab_0",
   "tqdm-4.54.1-pyhd8ed1ab_1",
   "tqdm-4.55.0-pyhd8ed1ab_0",
   "tqdm-4.55.1-pyhd8ed1ab_0",
   "tqdm-4.55.2-pyhd8ed1ab_0",
   "tqdm-4.56.0-pyhd8ed1ab_0",
   "tqdm-4.56.1-pyhd8ed1ab_0",
   "tqdm-4.56.2-pyhd8ed1ab_0",
   "tqdm-4.57.0-pyhd8ed1ab_0"
  ],
  [],
  [
   "typing-3.6.1-py35_0",
   "typing-3.6.2-py36_0",
   "typing-3.6.4-py27_0",
   "typing-3.6.6-py27_0",
   "typing-3.6.6-py35_0"
  ],
  [
   "uvicorn-0.10.9-py37_0",
   "uvicorn-0.11.2-py37_0",
   "uvicorn-0.11.3-py37hc8dfbb8_1",
   "uvicorn-0.11.3-py38h32f6830_2",
   "uvicorn-0.12.1-py36h9f0ad1d_0",
   "uvicorn-0.12.2-py36h9f0ad1d_0",
   "uvicorn-0.12.2-py37hc8dfbb8_0",
   "uvicorn-0.12.3-py37h89c1867_0",
   "uvicorn-0.13.0-py37h89c1867_0",
   "uvicorn-0.13.1-py38h578d9bd_0",
   "uvicorn-0.13.3-py37h89c1867_0",
   "uvicorn-0.13.4-py37h89c1867_0",
   "uvicorn-0.13.4-py39hf3d152e_0",
   "uvicorn-0.3.14-py36_0",
   "uvicorn-0.3.17-py36_0",
   "uvicorn-0.3.20-py36_0",
   "uvicorn-0.3.21-py37_1000",
   "uvicorn-0.3.23-py36_1000",
   "uvicorn-0.3.24-py37_1000",
   "uvicorn-0.3.25-py36_0",
   "uvicorn-0.3.25-py37_0",
   "uvicorn-0.4.1-py36_0",
   "uvicorn-0.4.2-py37_0",
   "uvicorn-0.4.3-py37_0",
   "uvicorn-0.4.4-py36_0",
   "uvicorn-0.4.5-py36_0",
   "uvicorn-0.4.5-py37_0",
   "uvicorn-0.5.0-py36_0",
   "uvicorn-0.5.1-py37_0",
   "uvicorn-0.7.2-py36_0",
   "uvicorn-0.8.1-py36_0",
   "uvicorn-0.8.2-py36_0"
  ]
 ]
}