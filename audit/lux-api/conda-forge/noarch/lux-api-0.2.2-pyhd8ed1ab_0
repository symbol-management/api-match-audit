{
 "bad": [
  "IPython.display.clear_output",
  "IPython.display.display",
  "altair.Axis",
  "altair.Bin",
  "altair.BinParams",
  "altair.Chart",
  "altair.Color",
  "altair.Opacity",
  "altair.Scale",
  "altair.TooltipContent",
  "altair.X",
  "altair.X2",
  "altair.Y",
  "altair.Y2",
  "altair.data_transformers.disable_max_rows",
  "combine",
  "context.lux.Clause",
  "context.lux.config.executor.compute_data_model",
  "context.lux.config.executor.compute_data_model_lookup",
  "context.lux.config.executor.execute",
  "context.lux.config.executor.invert_data_type",
  "context.lux.config.heatmap",
  "context.lux.config.plot_config",
  "context.lux.config.register_action",
  "context.lux.config.remove_action",
  "context.lux.config.sampling",
  "context.lux.config.sampling_cap",
  "context.lux.config.sampling_start",
  "context.lux.config.sort",
  "context.lux.config.topk",
  "context.lux.core.frame.LuxDataFrame",
  "context.lux.core.series.LuxSeries",
  "copy.copy",
  "copy.deepcopy",
  "dateutil.parser.parse",
  "display_condition",
  "filter.attribute",
  "filter.filter_op",
  "filter.value",
  "frame.LuxDataFrame",
  "get_complementary_ops",
  "inspect.currentframe",
  "inspect.getouterframes",
  "inspect.getsource",
  "ipywidgets.Button",
  "ipywidgets.Layout",
  "ipywidgets.Output",
  "ipywidgets.embed.embed_data",
  "json.dumps",
  "line_or_bar",
  "lux.Clause",
  "lux._config.Config",
  "lux._config.config",
  "lux._config.config.RegisteredOption",
  "lux._version.version_info",
  "lux.action.column_group.column_group",
  "lux.action.correlation.check_transpose_not_computed",
  "lux.action.correlation.correlation",
  "lux.action.custom.custom",
  "lux.action.custom.custom_actions",
  "lux.action.default.register_default_actions",
  "lux.action.enhance.enhance",
  "lux.action.filter.add_filter",
  "lux.action.generalize.generalize",
  "lux.action.row_group.row_group",
  "lux.action.univariate.univariate",
  "lux.actions",
  "lux.config.SQLconnection",
  "lux.config.actions",
  "lux.config.actions.action",
  "lux.config.actions.args",
  "lux.config.actions.display_condition",
  "lux.config.actions.keys",
  "lux.config.default_display",
  "lux.config.executor",
  "lux.config.executor.compute_data_model",
  "lux.config.executor.compute_data_model_lookup",
  "lux.config.executor.compute_dataset_metadata",
  "lux.config.executor.compute_stats",
  "lux.config.executor.execute",
  "lux.config.executor.invert_data_type",
  "lux.config.heatmap",
  "lux.config.plot_config",
  "lux.config.register_action",
  "lux.config.sampling",
  "lux.config.sampling_cap",
  "lux.config.sampling_start",
  "lux.config.sort",
  "lux.config.topk",
  "lux.config.update_actions",
  "lux.core.frame.LuxDataFrame",
  "lux.core.frame.LuxDataFrame.current_vis_to_JSON",
  "lux.core.frame.LuxDataFrame.rec_to_JSON",
  "lux.core.originalDF",
  "lux.core.originalSeries",
  "lux.core.series.LuxSeries",
  "lux.core.setOption",
  "lux.executor.Executor.Executor",
  "lux.executor.PandasExecutor.PandasExecutor",
  "lux.executor.PandasExecutor.PandasExecutor.apply_filter",
  "lux.executor.PandasExecutor.PandasExecutor.execute",
  "lux.executor.PandasExecutor.PandasExecutor.execute_2D_binning",
  "lux.executor.PandasExecutor.PandasExecutor.execute_filter",
  "lux.executor.SQLExecutor.SQLExecutor",
  "lux.history.event.Event",
  "lux.history.history.History",
  "lux.interestingness.interestingness.deviation_from_overall",
  "lux.interestingness.interestingness.get_filtered_size",
  "lux.interestingness.interestingness.interestingness",
  "lux.interestingness.interestingness.monotonicity",
  "lux.interestingness.interestingness.skewness",
  "lux.interestingness.interestingness.unevenness",
  "lux.interestingness.interestingness.weighted_avg",
  "lux.interestingness.interestingness.weighted_correlation",
  "lux.interestingness.interestingness.weighted_cov",
  "lux.interestingness.similarity.euclidean_dist",
  "lux.interestingness.similarity.normalize",
  "lux.interestingness.similarity.preprocess",
  "lux.processor.Compiler.Compiler",
  "lux.processor.Compiler.Compiler.compile_intent",
  "lux.processor.Compiler.Compiler.compile_vis",
  "lux.processor.Compiler.Compiler.populate_wildcard_options",
  "lux.processor.Parser.Parser.parse",
  "lux.processor.Validator.Validator.validate_intent",
  "lux.utils.date_utils.compute_date_granularity",
  "lux.utils.date_utils.date_formatter",
  "lux.utils.date_utils.is_datetime_series",
  "lux.utils.date_utils.is_datetime_string",
  "lux.utils.message.Message",
  "lux.utils.utils.check_if_id_like",
  "lux.utils.utils.check_import_lux_widget",
  "lux.utils.utils.convert_to_list",
  "lux.utils.utils.get_agg_title",
  "lux.utils.utils.get_attrs_specs",
  "lux.utils.utils.get_filter_specs",
  "lux.utils.utils.like_nan",
  "lux.utils.utils.pandas_to_lux",
  "lux.vis.Clause",
  "lux.vis.Clause.Clause",
  "lux.vis.Vis.Clause",
  "lux.vis.Vis.Vis",
  "lux.vis.VisList.VisList",
  "lux.vislib.altair.AltairChart.AltairChart",
  "lux.vislib.altair.AltairChart.AltairChart.encode_color",
  "lux.vislib.altair.AltairChart.AltairChart.sanitize_dataframe",
  "lux.vislib.altair.AltairRenderer.AltairRenderer",
  "lux.vislib.altair.BarChart.BarChart",
  "lux.vislib.altair.Heatmap.Heatmap",
  "lux.vislib.altair.Histogram.Histogram",
  "lux.vislib.altair.LineChart.LineChart",
  "lux.vislib.altair.ScatterChart.ScatterChart",
  "lux.warning_format",
  "luxwidget.LuxWidget",
  "math.ceil",
  "math.isnan",
  "math.nan",
  "numpy.append",
  "numpy.array",
  "numpy.average",
  "numpy.datetime64",
  "numpy.dtype",
  "numpy.histogram",
  "numpy.isclose",
  "numpy.isnan",
  "numpy.linalg.norm",
  "numpy.mean",
  "numpy.nan",
  "numpy.ptp",
  "numpy.sqrt",
  "numpy.sum",
  "numpy.vstack",
  "on_button_clicked",
  "os.path.abspath",
  "os.path.dirname",
  "os.path.join",
  "pandas.DataFrame",
  "pandas.DatetimeIndex",
  "pandas.Interval",
  "pandas.Period",
  "pandas.PeriodIndex",
  "pandas.Series",
  "pandas.Series.mode",
  "pandas._libs.tslibs.timestamps.Timestamp",
  "pandas.api.types.is_datetime64_any_dtype",
  "pandas.api.types.is_float_dtype",
  "pandas.api.types.is_integer_dtype",
  "pandas.api.types.is_interval_dtype",
  "pandas.api.types.is_period_dtype",
  "pandas.api.types.is_string_dtype",
  "pandas.concat",
  "pandas.core.frame.DataFrame",
  "pandas.core.series.Series",
  "pandas.crosstab",
  "pandas.cut",
  "pandas.get_dummies",
  "pandas.io.api.DataFrame",
  "pandas.io.clipboards.DataFrame",
  "pandas.io.common.DataFrame",
  "pandas.io.excel.DataFrame",
  "pandas.io.feather_format.DataFrame",
  "pandas.io.formats.DataFrame",
  "pandas.io.gbq.DataFrame",
  "pandas.io.html.DataFrame",
  "pandas.io.json._json.DataFrame",
  "pandas.io.orc.DataFrame",
  "pandas.io.parquet.DataFrame",
  "pandas.io.parsers.DataFrame",
  "pandas.io.pickle.DataFrame",
  "pandas.io.pytables.DataFrame",
  "pandas.io.sas.DataFrame",
  "pandas.io.spss.DataFrame",
  "pandas.io.sql.DataFrame",
  "pandas.io.stata.DataFrame",
  "pandas.isnull",
  "pandas.merge",
  "pandas.option_context",
  "pandas.qcut",
  "pandas.read_csv",
  "pandas.read_excel",
  "pandas.read_json",
  "pandas.read_sas",
  "pandas.read_sql",
  "pandas.reset_option",
  "pandas.to_datetime",
  "pandas.to_numeric",
  "pkgutil.find_loader",
  "pytest.car_df",
  "pytest.college_df",
  "pytest.fixture",
  "pytest.olympic",
  "pytest.raises",
  "pytest.warns",
  "re.findall",
  "re.match",
  "re.search",
  "scipy.spatial.distance.euclidean",
  "scipy.stats.chi2_contingency",
  "scipy.stats.skew",
  "scipy.stats.spearmanr",
  "series.LuxSeries",
  "sklearn.metrics.mutual_info_score",
  "sys.path.insert",
  "tests.test_columns.long_var",
  "tests.test_compiler.check_attribute_on_channel",
  "tests.test_compiler.list_equal",
  "tests.test_config.register_new_action",
  "tests.test_pandas_coverage.check_metadata_equal",
  "tests.test_pandas_coverage.compare_clauses",
  "tests.test_pandas_coverage.compare_vis",
  "time.perf_counter",
  "traceback.format_exc",
  "type.lower",
  "typing.Any",
  "typing.Callable",
  "typing.Dict",
  "typing.List",
  "typing.Optional",
  "typing.Union",
  "validate_clause",
  "warnings.catch_warnings",
  "warnings.filterwarnings",
  "warnings.formatwarning",
  "warnings.warn"
 ],
 "deps": {
  "IPython": [],
  "altair": [],
  "combine": [],
  "context": [],
  "copy": [],
  "dateutil": [],
  "display_condition": [],
  "filter": [],
  "frame": [],
  "get_complementary_ops": [],
  "inspect": [],
  "ipywidgets": [],
  "json": [],
  "line_or_bar": [],
  "lux": [],
  "luxwidget": [],
  "math": [],
  "numpy": [],
  "on_button_clicked": [],
  "os": [],
  "pandas": [],
  "pkgutil": [],
  "pytest": [],
  "re": [],
  "scipy": [],
  "series": [],
  "sklearn": [],
  "sys": [],
  "tests": [],
  "time": [],
  "traceback": [],
  "type": [],
  "typing": [],
  "validate_clause": [],
  "warnings": []
 }
}