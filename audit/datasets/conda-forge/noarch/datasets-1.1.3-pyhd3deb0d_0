{
 "bad": [
  "IPython.get_ipython",
  "NumExamplesMismatch",
  "PandasArrayExtensionArray",
  "SCRIPTS_VERSION",
  "SplitReadInstruction",
  "__future__.absolute_import",
  "__future__.division",
  "__future__.print_function",
  "__name__.split",
  "_build_pcollection",
  "_bytes_feature",
  "_feature",
  "_float_feature",
  "_hash_pa_array",
  "_int64_feature",
  "_other_versions_on_disk",
  "_str_to_version",
  "abc",
  "abc.ABC",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "apache_beam",
  "apache_beam.Map",
  "apache_beam.Values",
  "apache_beam.io.filebasedsink",
  "apache_beam.io.filebasedsink.FileBasedSink",
  "apache_beam.io.filesystem.CompressionTypes",
  "apache_beam.io.filesystems.FileSystems",
  "apache_beam.io.filesystems.FileSystems.create",
  "apache_beam.io.filesystems.FileSystems.match",
  "apache_beam.io.filesystems.FileSystems.open",
  "apache_beam.io.iobase.Write",
  "apache_beam.io.parquetio.WriteToParquet",
  "apache_beam.metrics.Metrics.counter",
  "apache_beam.metrics.MetricsFilter",
  "apache_beam.options.pipeline_options.PipelineOptions",
  "apache_beam.options.pipeline_options.TypeOptions",
  "apache_beam.pipeline.Pipeline",
  "apache_beam.ptransform_fn",
  "apache_beam.transforms.PTransform",
  "apply_function_on_filtered_inputs",
  "apply_offset_to_indices_table",
  "argparse.ArgumentParser",
  "argparse.Namespace",
  "array_feature",
  "arrow_dataset.Dataset.from_buffer",
  "arrow_dataset.Dataset.load_from_disk",
  "assert_slices_coverage",
  "builder_cls",
  "builder_cls.get_imported_module_dir",
  "class_type",
  "collections",
  "collections.abc.Iterable",
  "collections.abc.Mapping",
  "collections.defaultdict",
  "collections.namedtuple",
  "command",
  "contextlib",
  "contextlib.contextmanager",
  "copy",
  "copy.deepcopy",
  "dataclasses.field.name",
  "dataclasses.field.type",
  "dataset_dict.DatasetDict.load_from_disk",
  "datasets.__init__.__version__",
  "datasets.hf_api.HfFolder.path_token",
  "datetime.datetime",
  "datetime.datetime.now",
  "dill.Pickler.dispatch.copy",
  "dill.Pickler.save_global",
  "dill._dill.StockPickler.save_global",
  "dill._dill.log.info",
  "does_function_return_dict",
  "encode_example",
  "errno",
  "errno.EPIPE",
  "faiss",
  "faiss.IndexFlat",
  "faiss.StandardGpuResources",
  "faiss.index_cpu_to_gpu",
  "faiss.index_factory",
  "faiss.index_gpu_to_cpu",
  "faiss.read_index",
  "faiss.write_index",
  "fcntl",
  "features.Features.from_arrow_schema",
  "features.Features.from_dict",
  "filecmp",
  "filecmp.cmp",
  "fingerprint.Hasher.hash",
  "format_cache_file_name",
  "func",
  "function",
  "functools",
  "functools.lru_cache",
  "functools.partial",
  "functools.wraps",
  "get_builders",
  "getpass.getpass",
  "globalvars",
  "gzip",
  "gzip.open",
  "hashlib.sha256",
  "importlib",
  "importlib.import_module",
  "importlib.invalidate_caches",
  "incomplete_dir",
  "info.DatasetInfo.from_dict",
  "info.DatasetInfo.from_directory",
  "info.DatasetInfo.from_merge",
  "info.DatasetInfosDict.from_directory",
  "inspect",
  "inspect.getfile",
  "inspect.getmodule",
  "inspect.isabstract",
  "inspect.signature",
  "io",
  "io.BytesIO",
  "itertools",
  "itertools.chain",
  "json",
  "json.dump",
  "json.dumps",
  "json.load",
  "json.loads",
  "logging",
  "logging.CRITICAL",
  "logging.DEBUG",
  "logging.ERROR",
  "logging.FATAL",
  "logging.Handler",
  "logging.INFO",
  "logging.Logger",
  "logging.NOTSET",
  "logging.StreamHandler",
  "logging.WARN",
  "logging.WARNING",
  "logging.getLogger",
  "math",
  "math.ceil",
  "math.floor",
  "math.trunc",
  "metric_cls",
  "msvcrt",
  "multiprocess.Pool",
  "multiprocess.RLock",
  "multiprocessing.Pool",
  "multiprocessing.RLock",
  "numpy",
  "numpy.all",
  "numpy.arange",
  "numpy.argsort",
  "numpy.array",
  "numpy.asarray",
  "numpy.bool_",
  "numpy.concatenate",
  "numpy.dtype",
  "numpy.float32",
  "numpy.floating",
  "numpy.int64",
  "numpy.isnan",
  "numpy.issubdtype",
  "numpy.ndarray",
  "numpy.object",
  "numpy.random.Generator",
  "numpy.random.default_rng",
  "numpy.random.get_state",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.random.set_state",
  "numpy.sum",
  "numpy.vstack",
  "os",
  "os.DirEntry",
  "os.O_CREAT",
  "os.O_EXCL",
  "os.O_RDWR",
  "os.O_TRUNC",
  "os.O_WRONLY",
  "os.close",
  "os.environ",
  "os.environ.get",
  "os.getcwd",
  "os.getenv",
  "os.listdir",
  "os.makedirs",
  "os.open",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.getmtime",
  "os.path.getsize",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.remove",
  "os.rename",
  "os.rmdir",
  "os.scandir",
  "os.sep",
  "os.stat",
  "os.walk",
  "pandas",
  "pandas.DataFrame",
  "pandas.Series",
  "pandas.api.extensions.ExtensionArray",
  "pandas.api.extensions.ExtensionDtype",
  "passage_generator",
  "pathlib.Path",
  "pct_to_abs",
  "pickle",
  "pickle.PicklingError",
  "pickle.dumps",
  "pickle.loads",
  "platform",
  "platform.platform",
  "platform.python_version",
  "pyarrow",
  "pyarrow.Array",
  "pyarrow.ArrowInvalid",
  "pyarrow.Buffer",
  "pyarrow.BufferOutputStream",
  "pyarrow.BufferReader",
  "pyarrow.ChunkedArray",
  "pyarrow.DataType",
  "pyarrow.DictionaryType",
  "pyarrow.ExtensionArray",
  "pyarrow.ExtensionArray.from_storage",
  "pyarrow.Field",
  "pyarrow.FixedSizeListArray",
  "pyarrow.FixedSizeListType",
  "pyarrow.ListType",
  "pyarrow.PyExtensionType",
  "pyarrow.RecordBatch",
  "pyarrow.RecordBatch.from_arrays",
  "pyarrow.RecordBatchStreamWriter",
  "pyarrow.Schema",
  "pyarrow.StructType",
  "pyarrow.Table",
  "pyarrow.Table.from_arrays",
  "pyarrow.Table.from_batches",
  "pyarrow.Table.from_pandas",
  "pyarrow.Table.from_pydict",
  "pyarrow.__dict__",
  "pyarrow.__version__.split",
  "pyarrow.array",
  "pyarrow.concat_tables",
  "pyarrow.dictionary",
  "pyarrow.field",
  "pyarrow.int32",
  "pyarrow.int64",
  "pyarrow.ipc.open_stream",
  "pyarrow.lib.ArrowInvalid",
  "pyarrow.list_",
  "pyarrow.memory_map",
  "pyarrow.parquet",
  "pyarrow.parquet.ParquetFile",
  "pyarrow.parquet.ParquetWriter",
  "pyarrow.parquet.read_table",
  "pyarrow.schema",
  "pyarrow.string",
  "pyarrow.struct",
  "pyarrow.total_allocated_bytes",
  "pyarrow.types.is_boolean",
  "pyarrow.types.is_floating",
  "pyarrow.types.is_integer",
  "pyarrow.uint64",
  "re",
  "re.M",
  "re.MULTILINE",
  "re.X",
  "re.compile",
  "re.match",
  "re.sub",
  "regex",
  "regex.Regex",
  "regex.compile",
  "serialize_example",
  "shutil",
  "shutil.copy",
  "shutil.copyfile",
  "shutil.copyfileobj",
  "shutil.copytree",
  "shutil.disk_usage",
  "shutil.move",
  "shutil.rmtree",
  "socket",
  "socket.error",
  "splits.Split.TRAIN",
  "splits.SplitDict.from_split_dict",
  "sys",
  "sys.path.append",
  "sys.platform",
  "sys.version.split",
  "sys.version_info",
  "tarfile",
  "tarfile.is_tarfile",
  "tarfile.open",
  "temp_file_manager",
  "tempfile",
  "tempfile.NamedTemporaryFile",
  "tensorflow",
  "tensorflow.Tensor",
  "tensorflow.__version__",
  "tensorflow.config.list_physical_devices",
  "tensorflow.data.Dataset.from_generator",
  "tensorflow.data.experimental.TFRecordWriter",
  "tensorflow.executing_eagerly",
  "tensorflow.py_function",
  "tensorflow.python.context.context",
  "tensorflow.ragged.constant",
  "tensorflow.random.Generator.from_seed",
  "tensorflow.random.get_global_generator",
  "tensorflow.random.set_global_generator",
  "tensorflow.reshape",
  "tensorflow.string",
  "tensorflow.test.is_gpu_available",
  "tensorflow.train.BytesList",
  "tensorflow.train.Example",
  "tensorflow.train.Feature",
  "tensorflow.train.Features",
  "tensorflow.train.FloatList",
  "tensorflow.train.Int64List",
  "threading",
  "threading.Lock",
  "time",
  "time.sleep",
  "time.time",
  "torch",
  "torch.Tensor",
  "torch.__version__",
  "torch.cuda.get_rng_state_all",
  "torch.cuda.is_available",
  "torch.cuda.manual_seed_all",
  "torch.cuda.set_rng_state_all",
  "torch.random.get_rng_state",
  "torch.random.manual_seed",
  "torch.random.set_rng_state",
  "tqdm.auto",
  "tqdm.auto.tqdm",
  "tqdm.auto.tqdm.__name__",
  "tqdm.auto.tqdm.set_lock",
  "tqdm.tqdm.__name__",
  "tqdm.tqdm.set_lock",
  "transformers.AutoModel.from_pretrained",
  "transformers.AutoTokenizer.from_pretrained",
  "type.storage_dtype",
  "type.type",
  "types",
  "types.CodeType",
  "types.FunctionType",
  "types.append",
  "typing.Any",
  "typing.Callable",
  "typing.ClassVar",
  "typing.Dict",
  "typing.Generator",
  "typing.Generic",
  "typing.List",
  "typing.NamedTuple",
  "typing.Optional",
  "typing.Sequence",
  "typing.TYPE_CHECKING",
  "typing.Tuple",
  "typing.Union",
  "upload",
  "urllib",
  "urllib.parse",
  "urllib.parse.quote_plus",
  "urllib.parse.urlparse",
  "utils.Version",
  "utils.Version.from_dict",
  "utils.beam_utils.download_remote_to_local",
  "utils.beam_utils.upload_local_to_remote",
  "utils.cached_path",
  "utils.classproperty",
  "utils.download_manager.GenerateMode.FORCE_REDOWNLOAD",
  "utils.download_manager.GenerateMode.REUSE_CACHE_IF_EXISTS",
  "utils.download_manager.GenerateMode.REUSE_DATASET_IF_EXISTS",
  "utils.has_sufficient_disk_space",
  "utils.logging.get_logger",
  "utils.map_nested",
  "utils.memoize",
  "utils.size_str",
  "utils.temporary_assignment",
  "utils.tqdm",
  "utils.zip_dict",
  "uuid",
  "uuid.uuid4",
  "warnings",
  "xxhash",
  "xxhash.xxh64",
  "zipfile.ZipFile",
  "zipfile.is_zipfile"
 ],
 "deps": {
  "IPython": [],
  "NumExamplesMismatch": [],
  "PandasArrayExtensionArray": [],
  "SCRIPTS_VERSION": [],
  "SplitReadInstruction": [],
  "__future__": [],
  "__name__": [],
  "_build_pcollection": [],
  "_bytes_feature": [],
  "_feature": [],
  "_float_feature": [],
  "_hash_pa_array": [],
  "_int64_feature": [],
  "_other_versions_on_disk": [],
  "_str_to_version": [],
  "abc": [],
  "apache_beam": [],
  "apply_function_on_filtered_inputs": [],
  "apply_offset_to_indices_table": [],
  "argparse": [],
  "array_feature": [],
  "arrow_dataset": [],
  "assert_slices_coverage": [],
  "builder_cls": [],
  "class_type": [],
  "collections": [],
  "command": [],
  "contextlib": [],
  "copy": [],
  "dataclasses": [
   "dataclasses/conda-forge/noarch/dataclasses-0.8-pyh787bdff_0",
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ],
  "dataset_dict": [],
  "datasets": [],
  "datetime": [],
  "dill": [
   "dill/conda-forge/noarch/dill-0.3.2-pyh9f0ad1d_0"
  ],
  "does_function_return_dict": [],
  "elasticsearch": [
   "elasticsearch/conda-forge/noarch/elasticsearch-7.13.0-pyhd8ed1ab_0"
  ],
  "encode_example": [],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "errno": [],
  "faiss": [],
  "fcntl": [],
  "features": [],
  "filecmp": [],
  "fingerprint": [],
  "format_cache_file_name": [],
  "func": [],
  "function": [],
  "functools": [],
  "get_builders": [],
  "getpass": [],
  "globalvars": [],
  "gzip": [],
  "hashlib": [],
  "importlib": [],
  "incomplete_dir": [],
  "info": [],
  "inspect": [],
  "io": [],
  "itertools": [],
  "json": [],
  "logging": [],
  "math": [],
  "metric_cls": [],
  "msvcrt": [],
  "multiprocess": [],
  "multiprocessing": [],
  "numpy": [],
  "os": [],
  "pandas": [],
  "passage_generator": [],
  "pathlib": [],
  "pct_to_abs": [],
  "pickle": [],
  "platform": [],
  "pyarrow": [],
  "re": [],
  "regex": [],
  "requests": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "serialize_example": [],
  "shutil": [],
  "socket": [],
  "splits": [],
  "sys": [],
  "tarfile": [],
  "temp_file_manager": [],
  "tempfile": [],
  "tensorflow": [],
  "threading": [],
  "time": [],
  "torch": [],
  "tqdm": [
   "tqdm/conda-forge/noarch/tqdm-4.20.0-py_0"
  ],
  "transformers": [
   "transformers/conda-forge/noarch/transformers-4.4.2-pyhd8ed1ab_0"
  ],
  "type": [],
  "types": [],
  "typing": [],
  "typing_extensions": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "typing_extensions/conda-forge/noarch/typing_extensions-3.7.4.3-py_0"
  ],
  "upload": [],
  "urllib": [],
  "utils": [],
  "uuid": [],
  "warnings": [],
  "xxhash": [],
  "zipfile": []
 }
}