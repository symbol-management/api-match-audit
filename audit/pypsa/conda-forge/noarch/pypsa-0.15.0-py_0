{
 "bad": [
  "__version__",
  "as_branch_series",
  "attrs_match",
  "basemap_transform",
  "buses_indexer",
  "cartopy.crs.PlateCarree",
  "cartopy.crs.epsg",
  "cartopy.feature.BORDERS.with_scale",
  "cartopy.feature.LAND.with_scale",
  "cartopy.feature.OCEAN.with_scale",
  "cartopy.mpl.geoaxes.GeoAxesSubplot",
  "clear_indexedvar",
  "collections.Iterable",
  "collections.OrderedDict",
  "collections.Sequence",
  "community.best_partition",
  "components.Network",
  "components.SubNetwork",
  "contextlib.contextmanager",
  "contingency.calculate_BODF",
  "contingency.network_lpf_contingency",
  "contingency.network_sclopf",
  "descriptors.Dict",
  "descriptors.OrderedGraph",
  "descriptors.allocate_series_dataframes",
  "descriptors.degree",
  "descriptors.get_switchable_as_dense",
  "descriptors.get_switchable_as_iter",
  "ensure_dimensions",
  "extra_functionality",
  "functools.partial",
  "gc.collect",
  "gen_edges",
  "geo.haversine_pts",
  "get_shadows",
  "get_values",
  "glob.glob",
  "graph.adjacency_matrix",
  "graph.graph",
  "graph.incidence_matrix",
  "io.export_to_csv_folder",
  "io.export_to_hdf5",
  "io.export_to_netcdf",
  "io.import_components_from_dataframe",
  "io.import_from_csv_folder",
  "io.import_from_hdf5",
  "io.import_from_netcdf",
  "io.import_from_pandapower_net",
  "io.import_from_pypower_ppc",
  "io.import_series_from_dataframe",
  "is_same_indices",
  "itertools.repeat",
  "logging.INFO",
  "logging.basicConfig",
  "logging.getLogger",
  "math.pi",
  "matplotlib.collections.LineCollection",
  "matplotlib.collections.PatchCollection",
  "matplotlib.patches.FancyArrow",
  "matplotlib.patches.Wedge",
  "matplotlib.pyplot.gca",
  "mpl_toolkits.basemap.Basemap",
  "ndf",
  "networkx.Graph",
  "networkx.MultiGraph",
  "networkx.NetworkXError",
  "networkx.OrderedGraph",
  "networkx.adjacency_matrix",
  "networkx.connected_components",
  "networkx.convert.from_dict_of_dicts",
  "networkx.convert.to_networkx_graph",
  "networkx.cycle_basis",
  "networkx.minimum_spanning_tree",
  "networkx.shortest_path",
  "numpy.Inf",
  "numpy.arange",
  "numpy.arctan2",
  "numpy.array",
  "numpy.asarray",
  "numpy.complex",
  "numpy.concatenate",
  "numpy.conj",
  "numpy.cos",
  "numpy.deg2rad",
  "numpy.diag",
  "numpy.dtype",
  "numpy.empty",
  "numpy.exp",
  "numpy.fill_diagonal",
  "numpy.hstack",
  "numpy.isinf",
  "numpy.isnan",
  "numpy.linalg.norm",
  "numpy.max",
  "numpy.mean",
  "numpy.min",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.newaxis",
  "numpy.number",
  "numpy.ones",
  "numpy.pi",
  "numpy.r_",
  "numpy.random.uniform",
  "numpy.repeat",
  "numpy.sign",
  "numpy.sin",
  "numpy.sqrt",
  "numpy.sum",
  "numpy.typeDict.values",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "operator.itemgetter",
  "opf.network_lopf",
  "opf.network_opf",
  "opt.LConstraint",
  "opt.LExpression",
  "opt.empty_network",
  "opt.free_pyomo_initializers",
  "opt.l_constraint",
  "opt.l_objective",
  "opt.patch_optsolver_record_memusage_before_solving",
  "orig_apply_solver",
  "os.fdopen",
  "os.listdir",
  "os.mkdir",
  "os.path.basename",
  "os.path.exists",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.remove",
  "os.unlink",
  "pandas.DataFrame",
  "pandas.DatetimeIndex",
  "pandas.HDFStore",
  "pandas.Index",
  "pandas.MultiIndex",
  "pandas.MultiIndex.from_arrays",
  "pandas.MultiIndex.from_tuples",
  "pandas.Series",
  "pandas.concat",
  "pandas.cut",
  "pandas.isnull",
  "pandas.read_csv",
  "pf._as_snapshots",
  "pf.calculate_B_H",
  "pf.calculate_PTDF",
  "pf.calculate_Y",
  "pf.calculate_dependent_values",
  "pf.find_bus_controls",
  "pf.find_cycles",
  "pf.find_slack_bus",
  "pf.find_tree",
  "pf.network_lpf",
  "pf.network_pf",
  "pf.sub_network_lpf",
  "pf.sub_network_pf",
  "plot.iplot",
  "plot.plot",
  "plotly.offline.iplot",
  "pyomo.core.base.constraint._GeneralConstraintData",
  "pyomo.core.base.expr_coopr3._SumExpression",
  "pyomo.core.base.numvalue.NumericConstant",
  "pyomo.environ.Binary",
  "pyomo.environ.ConcreteModel",
  "pyomo.environ.Constraint",
  "pyomo.environ.NonNegativeReals",
  "pyomo.environ.Objective",
  "pyomo.environ.Reals",
  "pyomo.environ.SolverFactory",
  "pyomo.environ.Suffix",
  "pyomo.environ.Suffix.IMPORT",
  "pyomo.environ.Var",
  "pyomo.environ.minimize",
  "pyomo.solvers.plugins.solvers.persistent_solver.PersistentSolver",
  "pyproj.Proj",
  "pyproj.transform",
  "pypsa.components.Basic",
  "pypsa.components.Common",
  "pypsa.components.Component",
  "pypsa.components.SubNetwork",
  "pypsa.components._pd_version",
  "pypsa.components.component_attrs",
  "pypsa.components.components",
  "pypsa.components.dir_name",
  "pypsa.components.file_name",
  "pypsa.components.logger",
  "pypsa.components.standard_types_dir_name",
  "pypsa.contingency.logger",
  "pypsa.descriptors.Dict",
  "pypsa.descriptors.OrderedGraph",
  "pypsa.geo.haversine_pts",
  "pypsa.io.Exporter",
  "pypsa.io.ExporterCSV",
  "pypsa.io.ExporterHDF5",
  "pypsa.io.ExporterNetCDF",
  "pypsa.io.ImpExper",
  "pypsa.io.Importer",
  "pypsa.io.ImporterCSV",
  "pypsa.io.ImporterHDF5",
  "pypsa.io.ImporterNetCDF",
  "pypsa.io._export_to_exporter",
  "pypsa.io._import_from_importer",
  "pypsa.io.has_xarray",
  "pypsa.io.import_components_from_dataframe",
  "pypsa.io.import_series_from_dataframe",
  "pypsa.io.logger",
  "pypsa.networkclustering.Clustering",
  "pypsa.networkclustering._flatten_multiindex",
  "pypsa.networkclustering._make_consense",
  "pypsa.networkclustering._normed",
  "pypsa.networkclustering.aggregatebuses",
  "pypsa.networkclustering.aggregategenerators",
  "pypsa.networkclustering.aggregatelines",
  "pypsa.networkclustering.aggregateoneport",
  "pypsa.networkclustering.busmap_by_kmeans",
  "pypsa.networkclustering.busmap_by_length",
  "pypsa.networkclustering.busmap_by_linemask",
  "pypsa.networkclustering.busmap_by_louvain",
  "pypsa.networkclustering.busmap_by_rectangular_grid",
  "pypsa.networkclustering.busmap_by_spectral_clustering",
  "pypsa.networkclustering.busmap_by_stubs",
  "pypsa.networkclustering.get_buses_linemap_and_lines",
  "pypsa.networkclustering.get_clustering_from_busmap",
  "pypsa.opf._pd_version",
  "pypsa.opf.define_branch_extension_variables",
  "pypsa.opf.define_generator_variables_constraints",
  "pypsa.opf.define_global_constraints",
  "pypsa.opf.define_linear_objective",
  "pypsa.opf.define_link_flows",
  "pypsa.opf.define_nodal_balance_constraints",
  "pypsa.opf.define_nodal_balances",
  "pypsa.opf.define_passive_branch_constraints",
  "pypsa.opf.define_passive_branch_flows",
  "pypsa.opf.define_passive_branch_flows_with_PTDF",
  "pypsa.opf.define_passive_branch_flows_with_angles",
  "pypsa.opf.define_passive_branch_flows_with_cycles",
  "pypsa.opf.define_passive_branch_flows_with_kirchhoff",
  "pypsa.opf.define_storage_variables_constraints",
  "pypsa.opf.define_store_variables_constraints",
  "pypsa.opf.define_sub_network_balance_constraints",
  "pypsa.opf.define_sub_network_cycle_constraints",
  "pypsa.opf.extract_optimisation_results",
  "pypsa.opf.logger",
  "pypsa.opf.network_lopf_build_model",
  "pypsa.opf.network_lopf_prepare_solver",
  "pypsa.opf.network_lopf_solve",
  "pypsa.opt.LConstraint",
  "pypsa.opt.LExpression",
  "pypsa.opt._build_sum_expression",
  "pypsa.opt.empty_model",
  "pypsa.opt.logger",
  "pypsa.pf._allocate_pf_outputs",
  "pypsa.pf._as_snapshots",
  "pypsa.pf._network_prepare_and_run_pf",
  "pypsa.pf.apply_line_types",
  "pypsa.pf.apply_transformer_t_model",
  "pypsa.pf.apply_transformer_types",
  "pypsa.pf.calculate_B_H",
  "pypsa.pf.calculate_Y",
  "pypsa.pf.calculate_dependent_values",
  "pypsa.pf.find_bus_controls",
  "pypsa.pf.find_slack_bus",
  "pypsa.pf.logger",
  "pypsa.pf.newton_raphson_sparse",
  "pypsa.pf.wye_to_delta",
  "pypsa.plot._flow_ds_from_arg",
  "pypsa.plot.basemap_present",
  "pypsa.plot.cartopy_present",
  "pypsa.plot.compute_bbox_with_margins",
  "pypsa.plot.directed_flow",
  "pypsa.plot.draw_map_basemap",
  "pypsa.plot.draw_map_cartopy",
  "pypsa.plot.get_projection_from_crs",
  "pypsa.plot.logger",
  "pypsa.plot.plt_present",
  "pypsa.plot.pltly_present",
  "pypsa.plot.projected_area_factor",
  "re.compile",
  "reindex_maybe",
  "requests.RequestException",
  "resource.RUSAGE_SELF",
  "resource.getrusage",
  "scipy.sparse.coo_matrix",
  "scipy.sparse.csc_matrix",
  "scipy.sparse.csgraph.connected_components",
  "scipy.sparse.csr_matrix",
  "scipy.sparse.dok_matrix",
  "scipy.sparse.hstack",
  "scipy.sparse.issparse",
  "scipy.sparse.linalg.spsolve",
  "scipy.sparse.vstack",
  "set_from_series",
  "shapely.geometry.LineString",
  "shapely.ops.transform",
  "shapely.wkt.loads",
  "six.iteritems",
  "six.iterkeys",
  "six.itervalues",
  "six.moves.cPickle.dump",
  "six.moves.cPickle.load",
  "six.moves.map",
  "six.moves.range",
  "six.moves.reduce",
  "six.string_types",
  "sklearn.cluster.KMeans",
  "sklearn.cluster.spectral_clustering",
  "str.replace",
  "sub_network_pf_fun",
  "sub_network_prepare_fun",
  "tempfile.mkstemp",
  "textwrap.dedent",
  "time.time",
  "typ",
  "weakref.ref",
  "xarray.Dataset",
  "xarray.open_dataset"
 ],
 "deps": {
  "__version__": [],
  "as_branch_series": [],
  "attrs_match": [],
  "basemap_transform": [],
  "buses_indexer": [],
  "cartopy": [],
  "clear_indexedvar": [],
  "collections": [],
  "community": [],
  "components": [],
  "contextlib": [],
  "contingency": [],
  "descriptors": [],
  "ensure_dimensions": [],
  "extra_functionality": [],
  "functools": [],
  "gc": [],
  "gen_edges": [],
  "geo": [],
  "get_shadows": [],
  "get_values": [],
  "glob": [],
  "graph": [],
  "io": [],
  "is_same_indices": [],
  "itertools": [],
  "logging": [],
  "math": [],
  "matplotlib": [],
  "mpl_toolkits": [],
  "ndf": [],
  "networkx": [],
  "numpy": [],
  "operator": [],
  "opf": [],
  "opt": [],
  "orig_apply_solver": [],
  "os": [],
  "pandas": [],
  "pf": [],
  "plot": [],
  "plotly": [],
  "pyomo": [],
  "pyproj": [],
  "pypsa": [],
  "re": [],
  "reindex_maybe": [],
  "requests": [],
  "resource": [],
  "scipy": [],
  "set_from_series": [],
  "shapely": [],
  "six": [],
  "sklearn": [],
  "str": [],
  "sub_network_pf_fun": [],
  "sub_network_prepare_fun": [],
  "tempfile": [],
  "textwrap": [],
  "time": [],
  "typ": [],
  "weakref": [],
  "xarray": []
 }
}