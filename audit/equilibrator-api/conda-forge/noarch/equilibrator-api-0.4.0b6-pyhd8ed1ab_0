{
 "bad": [
  "Bounds.get_default_bounds",
  "SBtabTable.from_data_frame",
  "_version.get_versions",
  "collections.namedtuple",
  "component_contribution.predict.CCModelParameters.from_zenodo",
  "equilibrator_api.ComponentContribution",
  "equilibrator_api.Q_",
  "equilibrator_api.R",
  "equilibrator_api.Reaction",
  "equilibrator_api.Reaction.parse_formula",
  "equilibrator_api._version.version_json",
  "equilibrator_api.compatibility.logger",
  "equilibrator_api.component_contribution.ComponentContribution",
  "equilibrator_api.component_contribution.FARADAY",
  "equilibrator_api.component_contribution.Q_",
  "equilibrator_api.component_contribution.R",
  "equilibrator_api.component_contribution.default_physiological_ionic_strength",
  "equilibrator_api.component_contribution.default_physiological_p_h",
  "equilibrator_api.component_contribution.default_physiological_p_mg",
  "equilibrator_api.component_contribution.default_physiological_temperature",
  "equilibrator_api.component_contribution.default_rmse_inf",
  "equilibrator_api.component_contribution.find_most_abundance_ms",
  "equilibrator_api.component_contribution.predict_protons_and_charge",
  "equilibrator_api.default_T",
  "equilibrator_api.model.bounds.BaseBounds",
  "equilibrator_api.model.bounds.Bounds",
  "equilibrator_api.model.bounds.ComponentContribution",
  "equilibrator_api.model.bounds.Q_",
  "equilibrator_api.model.bounds.default_conc_lb",
  "equilibrator_api.model.bounds.default_conc_ub",
  "equilibrator_api.model.model.Bounds",
  "equilibrator_api.model.model.SBtabDocument",
  "equilibrator_api.model.model.SBtabError",
  "equilibrator_api.model.model.SBtabTable",
  "equilibrator_api.model.model.StoichiometricModel",
  "equilibrator_api.model.model.open_sbtabdoc",
  "equilibrator_api.phased_compound.AQUEOUS_PHASE_NAME",
  "equilibrator_api.phased_compound.Condition",
  "equilibrator_api.phased_compound.GAS_PHASE_NAME",
  "equilibrator_api.phased_compound.LIQUID_PHASE_NAME",
  "equilibrator_api.phased_compound.MicroSpecie",
  "equilibrator_api.phased_compound.NON_AQUEOUS_COMPOUND_DICT",
  "equilibrator_api.phased_compound.PHASED_COMPOUND_DICT",
  "equilibrator_api.phased_compound.PHASE_INFO_DICT",
  "equilibrator_api.phased_compound.PhaseInfo",
  "equilibrator_api.phased_compound.Q_",
  "equilibrator_api.phased_compound.SOLID_PHASE_NAME",
  "equilibrator_api.phased_reaction.PhasedReaction",
  "equilibrator_api.phased_reaction.Q_",
  "equilibrator_api.reaction_parser.POSSIBLE_REACTION_ARROWS",
  "equilibrator_api.reaction_parser._make_reaction_side_parser",
  "equilibrator_api.reaction_parser._parsed_compound",
  "equilibrator_cache.Compound",
  "equilibrator_cache.CompoundCache",
  "equilibrator_cache.CompoundMicrospecies",
  "equilibrator_cache.DEFAULT_ZENODO_DOI",
  "equilibrator_cache.PROTON_INCHI_KEY",
  "equilibrator_cache.Reaction",
  "equilibrator_cache.compatibility.map_cobra_metabolites",
  "equilibrator_cache.create_compound_cache_from_zenodo",
  "equilibrator_cache.exceptions.MissingDissociationConstantsException",
  "equilibrator_cache.reaction.create_stoichiometric_matrix_from_reactions",
  "equilibrator_cache.thermodynamic_constants.Q_",
  "equilibrator_cache.thermodynamic_constants.R",
  "equilibrator_cache.thermodynamic_constants._legendre_transform",
  "hashlib.md5",
  "json.loads",
  "logging.debug",
  "logging.getLogger",
  "logging.warning",
  "numpy.abs",
  "numpy.array",
  "numpy.eye",
  "numpy.inf",
  "numpy.linalg.inv",
  "numpy.linalg.pinv",
  "numpy.log",
  "numpy.ndarray",
  "operator.attrgetter",
  "pandas.DataFrame",
  "pandas.isnull",
  "pandas.read_csv",
  "phased_compound.PhasedCompound",
  "phased_reaction.PhasedReaction",
  "phased_reaction.PhasedReaction.parse_formula",
  "pkg_resources.resource_filename",
  "re.sub",
  "reaction_parser.make_reaction_parser",
  "standard_concentration.m_as",
  "sys.float_info.epsilon",
  "typing.Any",
  "typing.Callable",
  "typing.Dict",
  "typing.Iterable",
  "typing.List",
  "typing.Optional",
  "typing.TextIO",
  "typing.Tuple",
  "typing.Union",
  "ureg.Measurement",
  "ureg.Quantity",
  "ureg.check",
  "ureg.molar",
  "warnings.warn"
 ],
 "deps": {
  "Bounds": [],
  "SBtabTable": [],
  "_version": [],
  "collections": [],
  "component_contribution": [
   "component-contribution/conda-forge/noarch/component-contribution-0.4.0-pyhd8ed1ab_0"
  ],
  "equilibrator_api": [],
  "equilibrator_cache": [],
  "hashlib": [],
  "json": [],
  "logging": [],
  "numpy": [],
  "operator": [],
  "pandas": [],
  "phased_compound": [],
  "phased_reaction": [],
  "pkg_resources": [],
  "pyparsing": [
   "pyparsing/conda-forge/noarch/pyparsing-2.2.2-py_0"
  ],
  "re": [],
  "reaction_parser": [],
  "sbtab": [
   "sbtab/conda-forge/noarch/sbtab-0.9.78-pyhd8ed1ab_0"
  ],
  "slugify": [
   "awesome-slugify/conda-forge/noarch/awesome-slugify-1.6.5-py_3",
   "python-slugify/conda-forge/noarch/python-slugify-4.0.0-pyh9f0ad1d_1",
   "slugify/conda-forge/noarch/slugify-0.0.1-py_2"
  ],
  "standard_concentration": [],
  "sys": [],
  "typing": [],
  "ureg": [],
  "warnings": []
 }
}