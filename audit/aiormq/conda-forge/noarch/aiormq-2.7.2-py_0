{
 "bad": [
  "_test",
  "abc.abstractmethod",
  "asyncio.ALL_COMPLETED",
  "asyncio.AbstractEventLoop",
  "asyncio.CancelledError",
  "asyncio.Event",
  "asyncio.Future",
  "asyncio.IncompleteReadError",
  "asyncio.Lock",
  "asyncio.Queue",
  "asyncio.Task",
  "asyncio.gather",
  "asyncio.get_event_loop",
  "asyncio.open_connection",
  "asyncio.shield",
  "asyncio.sleep",
  "asyncio.wait",
  "auth.AuthMechanism",
  "base.Base",
  "base.task",
  "base64.b64decode",
  "binascii.hexlify",
  "cb",
  "channel.Channel",
  "collections.OrderedDict",
  "consumer",
  "contextlib.suppress",
  "exceptions",
  "exceptions.AuthenticationError",
  "exceptions.ChannelAccessRefused",
  "exceptions.ChannelClosed",
  "exceptions.ChannelLockedResource",
  "exceptions.ChannelNotFoundEntity",
  "exceptions.ChannelPreconditionFailed",
  "exceptions.ConnectionChannelError",
  "exceptions.ConnectionClosed",
  "exceptions.ConnectionCommandInvalid",
  "exceptions.ConnectionFrameError",
  "exceptions.ConnectionInternalError",
  "exceptions.ConnectionNotAllowed",
  "exceptions.ConnectionNotImplemented",
  "exceptions.ConnectionResourceError",
  "exceptions.ConnectionSyntaxError",
  "exceptions.ConnectionUnexpectedFrame",
  "exceptions.DeliveryError",
  "exceptions.DuplicateConsumerTag",
  "exceptions.IncompatibleProtocolError",
  "exceptions.InvalidFrameError",
  "exceptions.MethodNotImplemented",
  "exceptions.ProbableAuthenticationError",
  "func",
  "functools.partial",
  "functools.wraps",
  "io.BytesIO",
  "logging.getLogger",
  "os.urandom",
  "pamqp.ContentHeader",
  "pamqp.ProtocolHeader",
  "pamqp.body.ContentBody",
  "pamqp.heartbeat.Heartbeat",
  "pamqp.specification.AMQPFrameError",
  "pamqp.specification.AMQPInternalError",
  "pamqp.specification.AMQPSyntaxError",
  "pamqp.specification.Basic.Ack",
  "pamqp.specification.Basic.Cancel",
  "pamqp.specification.Basic.CancelOk",
  "pamqp.specification.Basic.Consume",
  "pamqp.specification.Basic.ConsumeOk",
  "pamqp.specification.Basic.Deliver",
  "pamqp.specification.Basic.Get",
  "pamqp.specification.Basic.GetEmpty",
  "pamqp.specification.Basic.GetOk",
  "pamqp.specification.Basic.Nack",
  "pamqp.specification.Basic.Properties",
  "pamqp.specification.Basic.Publish",
  "pamqp.specification.Basic.Qos",
  "pamqp.specification.Basic.QosOk",
  "pamqp.specification.Basic.Recover",
  "pamqp.specification.Basic.RecoverAsync",
  "pamqp.specification.Basic.RecoverOk",
  "pamqp.specification.Basic.Reject",
  "pamqp.specification.Basic.Return",
  "pamqp.specification.Channel.Close",
  "pamqp.specification.Channel.CloseOk",
  "pamqp.specification.Channel.Flow",
  "pamqp.specification.Channel.FlowOk",
  "pamqp.specification.Channel.Open",
  "pamqp.specification.Confirm.Select",
  "pamqp.specification.Connection.Close",
  "pamqp.specification.Connection.CloseOk",
  "pamqp.specification.Connection.Open",
  "pamqp.specification.Connection.Start",
  "pamqp.specification.Connection.StartOk",
  "pamqp.specification.Connection.TuneOk",
  "pamqp.specification.Exchange.Bind",
  "pamqp.specification.Exchange.BindOk",
  "pamqp.specification.Exchange.Declare",
  "pamqp.specification.Exchange.DeclareOk",
  "pamqp.specification.Exchange.Delete",
  "pamqp.specification.Exchange.DeleteOk",
  "pamqp.specification.Exchange.Unbind",
  "pamqp.specification.Exchange.UnbindOk",
  "pamqp.specification.Frame",
  "pamqp.specification.Queue.Bind",
  "pamqp.specification.Queue.BindOk",
  "pamqp.specification.Queue.Declare",
  "pamqp.specification.Queue.DeclareOk",
  "pamqp.specification.Queue.Delete",
  "pamqp.specification.Queue.DeleteOk",
  "pamqp.specification.Queue.Purge",
  "pamqp.specification.Queue.PurgeOk",
  "pamqp.specification.Queue.Unbind",
  "pamqp.specification.Queue.UnbindOk",
  "pamqp.specification.REPLY_SUCCESS",
  "pamqp.specification.Tx.Commit",
  "pamqp.specification.Tx.CommitOk",
  "pamqp.specification.Tx.Rollback",
  "pamqp.specification.Tx.RollbackOk",
  "pamqp.specification.Tx.Select",
  "pamqp.specification.Tx.SelectOk",
  "platform.python_build",
  "platform.python_implementation",
  "platform.python_version",
  "ssl.CERT_NONE",
  "ssl.Purpose.CLIENT_AUTH",
  "ssl.Purpose.SERVER_AUTH",
  "ssl.create_default_context",
  "tools.censor_url",
  "tools.shield",
  "types.ArgumentsType",
  "types.ConfirmationFrameType",
  "types.ConsumerCallback",
  "types.DeliveredMessage",
  "types.DrainResult",
  "types.SSLCerts",
  "types.URLorStr",
  "typing.Optional",
  "typing.Tuple",
  "typing.Type",
  "typing.TypeVar",
  "typing.Union",
  "version.__version__",
  "yarl.DEFAULT_PORTS",
  "yarl.URL"
 ],
 "deps": {
  "_test": [],
  "abc": [],
  "aiormq": [
   "aiormq/conda-forge/noarch/aiormq-2.7.2-py_0",
   "aiormq/conda-forge/noarch/aiormq-3.0.1-py_0"
  ],
  "asyncio": [],
  "auth": [],
  "base": [],
  "base64": [],
  "binascii": [],
  "cb": [],
  "channel": [],
  "collections": [],
  "consumer": [],
  "contextlib": [],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "exceptions": [],
  "func": [],
  "functools": [],
  "io": [],
  "logging": [],
  "os": [],
  "pamqp": [],
  "platform": [],
  "ssl": [],
  "tools": [],
  "types": [],
  "typing": [],
  "version": [],
  "yarl": []
 }
}