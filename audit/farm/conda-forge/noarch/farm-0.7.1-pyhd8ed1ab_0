{
 "bad": [
  "__future__.absolute_import",
  "__future__.division",
  "__future__.print_function",
  "__future__.unicode_literals",
  "_download_extract_downstream_data",
  "_save_word2vec_format",
  "abc",
  "abc.ABC",
  "abc.abstractmethod",
  "apex.amp",
  "apex.amp.initialize",
  "apex.amp.master_params",
  "apex.amp.scale_loss",
  "apex.normalization.fused_layer_norm.FusedLayerNorm",
  "apex.parallel.convert_syncbn_model",
  "argparse",
  "argparse.ArgumentParser",
  "argparse.Namespace",
  "ascii.split",
  "chunk",
  "collections",
  "collections.Counter",
  "collections.OrderedDict",
  "collections.abc.Iterable",
  "contextlib.ExitStack",
  "copy",
  "copy.deepcopy",
  "dict.items",
  "farm.__init__.rlimit",
  "farm.modeling.adaptive_model.connect_heads_with_processor",
  "farm.modeling.adaptive_model.language_model.language",
  "farm.modeling.adaptive_model.language_model.model",
  "farm.modeling.adaptive_model.language_model.model.base_model_prefix",
  "farm.modeling.adaptive_model.language_model.model.config",
  "farm.modeling.adaptive_model.language_model.model.config.finetuning_task",
  "farm.modeling.adaptive_model.language_model.model.config.id2label",
  "farm.modeling.adaptive_model.language_model.model.config.label2id",
  "farm.modeling.adaptive_model.language_model.model.config.language",
  "farm.modeling.adaptive_model.language_model.model.config.num_labels",
  "farm.modeling.adaptive_model.language_model.model.pooler",
  "farm.modeling.adaptive_model.prediction_heads",
  "farm.modeling.adaptive_model.prediction_heads.model_type",
  "farm.modeling.prediction_head.RegressionHead.load",
  "farm.modeling.wordembedding_utils.EMBEDDING_VOCAB_FILES_MAP.keys",
  "farm.visual.ascii.images.WORKER_F.split",
  "farm.visual.ascii.images.WORKER_M.split",
  "farm.visual.ascii.images.WORKER_X.split",
  "fasttext",
  "fasttext.load_model",
  "filter_elements_per_worker",
  "flask.request.get_json",
  "flask_restplus.Api",
  "flask_restplus.Resource",
  "func",
  "functools.partial",
  "functools.reduce",
  "functools.wraps",
  "get_iter_start_pos",
  "hashlib",
  "hashlib.md5",
  "hashlib.sha256",
  "head",
  "head.__class__.__name__",
  "head.decoder.weight.shape",
  "head.model_type",
  "head.ph_output_type",
  "importlib.import_module",
  "inspect",
  "inspect.getmembers",
  "inspect.signature",
  "int.from_bytes",
  "io",
  "io.open",
  "itertools.chain",
  "itertools.groupby",
  "itertools.islice",
  "json",
  "json.JSONEncoder",
  "json.JSONEncoder.default",
  "json.dump",
  "json.dumps",
  "json.load",
  "json.loads",
  "logging",
  "logging.INFO",
  "logging.WARNING",
  "logging.basicConfig",
  "logging.getLogger",
  "logging.info",
  "loss_fct",
  "lower",
  "m",
  "map.append",
  "math.ceil",
  "matplotlib",
  "matplotlib.pyplot",
  "matplotlib.use",
  "merge_fn",
  "merge_start_of_word",
  "metric_func",
  "multiprocessing",
  "multiprocessing.Pool",
  "multiprocessing.cpu_count",
  "nll_criterion",
  "numbers",
  "numbers.Number",
  "numpy",
  "numpy.all",
  "numpy.argmax",
  "numpy.argsort",
  "numpy.array",
  "numpy.asarray",
  "numpy.ascontiguousarray",
  "numpy.ceil",
  "numpy.clip",
  "numpy.concatenate",
  "numpy.cumsum",
  "numpy.delete",
  "numpy.dot",
  "numpy.ediff1d",
  "numpy.float32",
  "numpy.fromstring",
  "numpy.full",
  "numpy.hstack",
  "numpy.int32",
  "numpy.integer",
  "numpy.issubdtype",
  "numpy.linalg.norm",
  "numpy.ma.array",
  "numpy.max",
  "numpy.mean",
  "numpy.meshgrid",
  "numpy.ndarray",
  "numpy.newaxis",
  "numpy.ones_like",
  "numpy.random.get_state",
  "numpy.random.randint",
  "numpy.random.random",
  "numpy.random.random.choice",
  "numpy.random.random.randint",
  "numpy.random.random.random",
  "numpy.random.random.randrange",
  "numpy.random.random.sample",
  "numpy.random.random.shuffle",
  "numpy.random.seed",
  "numpy.random.set_state",
  "numpy.reshape",
  "numpy.searchsorted",
  "numpy.split",
  "numpy.sqrt",
  "numpy.stack",
  "numpy.sum",
  "numpy.triu_indices",
  "numpy.unique",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "onnxruntime",
  "onnxruntime.GraphOptimizationLevel.ORT_ENABLE_EXTENDED",
  "onnxruntime.InferenceSession",
  "onnxruntime.SessionOptions",
  "onnxruntime_tools.optimizer",
  "onnxruntime_tools.optimizer.optimize_model",
  "optim_constructor",
  "os",
  "os.environ",
  "os.getenv",
  "os.listdir",
  "os.makedirs",
  "os.name",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.path.realpath",
  "os.path.split",
  "os.path.splitext",
  "os.remove",
  "pandas",
  "pandas.DataFrame",
  "pandas.read_csv",
  "pathlib.Path",
  "pathlib.Path.joinpath",
  "pickle",
  "pickle.UnpicklingError",
  "pickle.dumps",
  "pickle.loads",
  "random",
  "random.randint",
  "random.random",
  "random.randrange",
  "random.sample",
  "random.seed",
  "random.shuffle",
  "re",
  "re.UNICODE",
  "re.compile",
  "re.sub",
  "remove_articles",
  "remove_punc",
  "report_fn",
  "resource",
  "resource.RLIMIT_NOFILE",
  "resource.getrlimit",
  "resource.setrlimit",
  "sched_constructor",
  "scipy.stats.pearsonr",
  "scipy.stats.spearmanr",
  "shutil",
  "shutil.rmtree",
  "sigmoid",
  "signal",
  "sim_func",
  "sklearn.cluster.KMeans",
  "sklearn.decomposition.PCA",
  "sklearn.decomposition.TruncatedSVD",
  "sklearn.metrics.classification_report",
  "sklearn.metrics.f1_score",
  "sklearn.metrics.matthews_corrcoef",
  "sklearn.metrics.mean_squared_error",
  "sklearn.metrics.r2_score",
  "sklearn.model_selection.KFold",
  "sklearn.model_selection.StratifiedKFold",
  "sklearn.preprocessing.MultiLabelBinarizer",
  "sklearn.preprocessing.StandardScaler",
  "sklearn.utils.class_weight.compute_class_weight",
  "softmax",
  "string",
  "string.punctuation",
  "string.whitespace",
  "sys",
  "sys.argv",
  "sys.exit",
  "sys.modules",
  "tarfile",
  "tarfile.open",
  "tempfile",
  "tempfile.NamedTemporaryFile",
  "time",
  "time.perf_counter",
  "tokenizers.Encoding",
  "tokenizers.Encoding.merge",
  "tokenizers.pre_tokenizers.WhitespaceSplit",
  "top_n_accuracy",
  "torch",
  "torch.ByteTensor",
  "torch.LongTensor",
  "torch.Tensor",
  "torch.argmax",
  "torch.backends.cudnn.benchmark",
  "torch.backends.cudnn.deterministic",
  "torch.cat",
  "torch.cuda.ByteTensor",
  "torch.cuda.Event",
  "torch.cuda.device_count",
  "torch.cuda.get_rng_state",
  "torch.cuda.is_available",
  "torch.cuda.manual_seed_all",
  "torch.cuda.set_device",
  "torch.cuda.set_rng_state",
  "torch.cuda.synchronize",
  "torch.device",
  "torch.distributed",
  "torch.distributed.ReduceOp.SUM",
  "torch.distributed.all_reduce",
  "torch.distributed.barrier",
  "torch.distributed.destroy_process_group",
  "torch.distributed.get_rank",
  "torch.distributed.get_world_size",
  "torch.distributed.group.WORLD",
  "torch.distributed.init_process_group",
  "torch.div",
  "torch.empty_like",
  "torch.float",
  "torch.float32",
  "torch.get_rng_state",
  "torch.hub._get_torch_home",
  "torch.load",
  "torch.long",
  "torch.manual_seed",
  "torch.matmul",
  "torch.max",
  "torch.mean",
  "torch.multiprocessing",
  "torch.multiprocessing.Pool",
  "torch.multiprocessing.cpu_count",
  "torch.multiprocessing.get_all_sharing_strategies",
  "torch.multiprocessing.set_sharing_strategy",
  "torch.nn",
  "torch.nn.BCEWithLogitsLoss",
  "torch.nn.BatchNorm1d",
  "torch.nn.CrossEntropyLoss",
  "torch.nn.DataParallel",
  "torch.nn.LayerNorm",
  "torch.nn.MSELoss",
  "torch.nn.Module",
  "torch.nn.ModuleList",
  "torch.nn.NLLLoss",
  "torch.nn.Parameter",
  "torch.nn.Sigmoid",
  "torch.nn.Softmax",
  "torch.nn.functional.cosine_similarity",
  "torch.nn.functional.log_softmax",
  "torch.nn.parallel.DistributedDataParallel",
  "torch.nn.utils.clip_grad_norm_",
  "torch.no_grad",
  "torch.nonzero",
  "torch.ones",
  "torch.optim",
  "torch.optim.LBFGS",
  "torch.save",
  "torch.set_rng_state",
  "torch.softmax",
  "torch.sort",
  "torch.stack",
  "torch.tensor",
  "torch.transpose",
  "torch.tril_indices",
  "torch.triu_indices",
  "torch.utils.data.ConcatDataset",
  "torch.utils.data.DataLoader",
  "torch.utils.data.Dataset",
  "torch.utils.data.IterableDataset",
  "torch.utils.data.Sampler",
  "torch.utils.data.Subset",
  "torch.utils.data.TensorDataset",
  "torch.utils.data.distributed.DistributedSampler",
  "torch.utils.data.get_worker_info",
  "torch.utils.data.sampler.RandomSampler",
  "torch.utils.data.sampler.SequentialSampler",
  "torch.zeros",
  "transformers.AlbertConfig.from_pretrained",
  "transformers.AlbertModel.from_pretrained",
  "transformers.AlbertTokenizer.from_pretrained",
  "transformers.AlbertTokenizerFast.from_pretrained",
  "transformers.AutoConfig.from_pretrained",
  "transformers.AutoModel.from_config",
  "transformers.AutoModel.from_pretrained",
  "transformers.AutoModelForQuestionAnswering.from_config",
  "transformers.AutoModelForQuestionAnswering.from_pretrained",
  "transformers.AutoModelForSequenceClassification.from_config",
  "transformers.AutoModelForSequenceClassification.from_pretrained",
  "transformers.AutoModelForTokenClassification.from_config",
  "transformers.AutoModelForTokenClassification.from_pretrained",
  "transformers.AutoModelWithLMHead.from_config",
  "transformers.BertConfig.from_pretrained",
  "transformers.BertModel.from_pretrained",
  "transformers.BertTokenizer.from_pretrained",
  "transformers.BertTokenizer.max_model_input_sizes.update",
  "transformers.BertTokenizer.pretrained_init_configuration.update",
  "transformers.BertTokenizer.pretrained_vocab_files_map.update",
  "transformers.BertTokenizerFast.from_pretrained",
  "transformers.CamembertConfig.from_pretrained",
  "transformers.CamembertModel.from_pretrained",
  "transformers.CamembertTokenizer.from_pretrained",
  "transformers.CamembertTokenizerFast.from_pretrained",
  "transformers.DPRConfig.from_pretrained",
  "transformers.DPRContextEncoder.from_pretrained",
  "transformers.DPRContextEncoderTokenizer.from_pretrained",
  "transformers.DPRContextEncoderTokenizerFast.from_pretrained",
  "transformers.DPRQuestionEncoder.from_pretrained",
  "transformers.DPRQuestionEncoderTokenizer.from_pretrained",
  "transformers.DPRQuestionEncoderTokenizerFast.from_pretrained",
  "transformers.DistilBertConfig.from_pretrained",
  "transformers.DistilBertModel.from_pretrained",
  "transformers.DistilBertTokenizer.from_pretrained",
  "transformers.DistilBertTokenizerFast.from_pretrained",
  "transformers.ElectraConfig.from_pretrained",
  "transformers.ElectraModel.from_pretrained",
  "transformers.ElectraTokenizer.from_pretrained",
  "transformers.ElectraTokenizerFast.from_pretrained",
  "transformers.RobertaConfig.from_pretrained",
  "transformers.RobertaModel.from_pretrained",
  "transformers.RobertaTokenizer.from_pretrained",
  "transformers.RobertaTokenizerFast.from_pretrained",
  "transformers.XLMRobertaConfig.from_pretrained",
  "transformers.XLMRobertaModel.from_pretrained",
  "transformers.XLMRobertaTokenizer.from_pretrained",
  "transformers.XLMRobertaTokenizerFast.from_pretrained",
  "transformers.XLNetConfig.from_pretrained",
  "transformers.XLNetModel.from_pretrained",
  "transformers.XLNetTokenizer.from_pretrained",
  "transformers.XLNetTokenizerFast.from_pretrained",
  "transformers.modeling_bert.BertConfig",
  "transformers.modeling_bert.BertConfig.from_json_file",
  "transformers.modeling_bert.BertForPreTraining",
  "transformers.modeling_bert.load_tf_weights_in_bert",
  "transformers.models.bert.modeling_bert.BertForPreTraining.from_pretrained",
  "typing.Any",
  "typing.Generator",
  "typing.List",
  "typing.Tuple",
  "typing.Union",
  "unicodedata",
  "unicodedata.category",
  "urllib.parse.urlparse",
  "urlparse.urlparse",
  "uuid",
  "uuid.uuid4",
  "warnings",
  "white_space_fix",
  "zipfile",
  "zipfile.ZipFile"
 ],
 "deps": {
  "__future__": [],
  "_download_extract_downstream_data": [],
  "_save_word2vec_format": [],
  "abc": [],
  "apex": [],
  "argparse": [],
  "ascii": [],
  "boto3": [
   "boto3/conda-forge/noarch/boto3-1.13.1-pyh9f0ad1d_0"
  ],
  "botocore": [
   "botocore/conda-forge/noarch/botocore-1.10.82-py_0"
  ],
  "chunk": [],
  "collections": [],
  "contextlib": [],
  "copy": [],
  "dict": [],
  "dill": [
   "dill/conda-forge/noarch/dill-0.3.2-pyh9f0ad1d_0"
  ],
  "dotmap": [
   "dotmap/conda-forge/noarch/dotmap-1.2.20-py_0"
  ],
  "farm": [],
  "fasttext": [],
  "filter_elements_per_worker": [],
  "flask": [
   "flask/conda-forge/noarch/flask-2.0.0-pyhd8ed1ab_0"
  ],
  "flask_cors": [
   "flask-cors/conda-forge/noarch/flask-cors-3.0.10-pyhd8ed1ab_0"
  ],
  "flask_restplus": [],
  "func": [],
  "functools": [],
  "get_iter_start_pos": [],
  "hashlib": [],
  "head": [],
  "importlib": [],
  "inspect": [],
  "int": [],
  "io": [],
  "itertools": [],
  "json": [],
  "logging": [],
  "loss_fct": [],
  "lower": [],
  "m": [],
  "map": [],
  "math": [],
  "matplotlib": [],
  "merge_fn": [],
  "merge_start_of_word": [],
  "metric_func": [],
  "mlflow": [
   "mlflow/conda-forge/noarch/mlflow-1.2.0-py_0"
  ],
  "multiprocessing": [],
  "nll_criterion": [],
  "numbers": [],
  "numpy": [],
  "onnxruntime": [],
  "onnxruntime_tools": [],
  "optim_constructor": [],
  "os": [],
  "pandas": [],
  "pathlib": [],
  "pickle": [],
  "random": [],
  "re": [],
  "remove_articles": [],
  "remove_punc": [],
  "report_fn": [],
  "requests": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "resource": [],
  "sched_constructor": [],
  "scipy": [],
  "seqeval": [
   "seqeval/conda-forge/noarch/seqeval-0.0.17-pyh9f0ad1d_0"
  ],
  "shutil": [],
  "sigmoid": [],
  "signal": [],
  "sim_func": [],
  "sklearn": [],
  "softmax": [],
  "statistics": [
   "statistics/conda-forge/noarch/statistics-1.0.3.5-py_1002"
  ],
  "string": [],
  "sys": [],
  "tarfile": [],
  "tempfile": [],
  "time": [],
  "tokenizers": [],
  "top_n_accuracy": [],
  "torch": [],
  "tqdm": [
   "tqdm/conda-forge/noarch/tqdm-4.20.0-py_0"
  ],
  "transformers": [
   "transformers/conda-forge/noarch/transformers-4.4.2-pyhd8ed1ab_0"
  ],
  "typing": [],
  "unicodedata": [],
  "urllib": [],
  "urlparse": [],
  "uuid": [],
  "warnings": [],
  "white_space_fix": [],
  "zipfile": []
 }
}