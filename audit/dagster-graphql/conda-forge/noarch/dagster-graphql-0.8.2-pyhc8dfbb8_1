{
 "bad": [
  "BarLogger",
  "EnumRegisteringMetaclass",
  "_f",
  "_yield_all",
  "a_solid_with_multilayered_config",
  "a_solid_with_three_field_config",
  "add_four",
  "apply_to_three",
  "client.query.EXECUTE_PLAN_MUTATION",
  "client.query.EXECUTE_RUN_IN_PROCESS_MUTATION",
  "client.query.LAUNCH_PIPELINE_EXECUTION_MUTATION",
  "composites_query.COMPOSITES_QUERY",
  "composites_query.COMPOSITES_QUERY_NESTED_DEPENDS_ON_DEPENDS_BY_CORE",
  "composites_query.NESTED_INPUT_DEPENDS_ON",
  "composites_query.NESTED_OUTPUT_DEPENDED_BY",
  "composites_query.PARENT_ID_QUERY",
  "composites_query.SOLID_ID_QUERY",
  "config_types.DauphinConfigType",
  "config_types.DauphinConfigTypeField",
  "config_types.to_dauphin_config_type",
  "dagster.DagsterEventType.STEP_FAILURE.value",
  "dagster.DagsterEventType.STEP_SKIPPED.value",
  "dagster.DagsterEventType.STEP_SUCCESS.value",
  "dagster.DagsterInstance.ephemeral",
  "dagster.DagsterInstance.local_temp",
  "dagster.EventMetadataEntry.float",
  "dagster.EventMetadataEntry.fspath",
  "dagster.EventMetadataEntry.json",
  "dagster.EventMetadataEntry.md",
  "dagster.EventMetadataEntry.path",
  "dagster.EventMetadataEntry.python_artifact",
  "dagster.EventMetadataEntry.text",
  "dagster.EventMetadataEntry.url",
  "dagster.Materialization.file",
  "dagster.PresetDefinition.from_files",
  "dagster.config.config_type.ConfigTypeKind.ANY",
  "dagster.config.config_type.ConfigTypeKind.ARRAY",
  "dagster.config.config_type.ConfigTypeKind.ENUM",
  "dagster.config.config_type.ConfigTypeKind.NONEABLE",
  "dagster.config.config_type.ConfigTypeKind.SCALAR",
  "dagster.config.config_type.ConfigTypeKind.SCALAR_UNION",
  "dagster.config.config_type.ConfigTypeKind.SELECTOR",
  "dagster.core.errors.DagsterInvalidConfigError.__class__.__name__",
  "dagster.core.events.DagsterEventType.ENGINE_EVENT",
  "dagster.core.events.DagsterEventType.OBJECT_STORE_OPERATION",
  "dagster.core.events.DagsterEventType.PIPELINE_FAILURE",
  "dagster.core.events.DagsterEventType.PIPELINE_INIT_FAILURE",
  "dagster.core.events.DagsterEventType.PIPELINE_START",
  "dagster.core.events.DagsterEventType.PIPELINE_SUCCESS",
  "dagster.core.events.DagsterEventType.STEP_EXPECTATION_RESULT",
  "dagster.core.events.DagsterEventType.STEP_FAILURE",
  "dagster.core.events.DagsterEventType.STEP_INPUT",
  "dagster.core.events.DagsterEventType.STEP_MATERIALIZATION",
  "dagster.core.events.DagsterEventType.STEP_MATERIALIZATION.value",
  "dagster.core.events.DagsterEventType.STEP_OUTPUT",
  "dagster.core.events.DagsterEventType.STEP_RESTARTED",
  "dagster.core.events.DagsterEventType.STEP_SKIPPED",
  "dagster.core.events.DagsterEventType.STEP_START",
  "dagster.core.events.DagsterEventType.STEP_SUCCESS",
  "dagster.core.events.DagsterEventType.STEP_UP_FOR_RETRY",
  "dagster.core.events.STEP_EVENTS.copy",
  "dagster.core.events.STEP_EVENTS.union",
  "dagster.core.host_representation.RepositoryLocationHandle.create_out_of_process_location",
  "dagster.core.host_representation.RepositorySelector.from_graphql_input",
  "dagster.core.host_representation.ScheduleSelector.from_graphql_input",
  "dagster.core.instance.InstanceType.EPHEMERAL",
  "dagster.core.scheduler.ScheduleTickStatus.FAILURE",
  "dagster.core.scheduler.ScheduleTickStatus.SUCCESS",
  "dagster.core.scheduler.scheduler.ScheduleStatus.RUNNING.value",
  "dagster.core.scheduler.scheduler.ScheduleStatus.STOPPED.value",
  "dagster.core.storage.compute_log_manager.ComputeIOType.STDERR",
  "dagster.core.storage.compute_log_manager.ComputeIOType.STDOUT",
  "dagster.core.storage.pipeline_run.PipelineRunStatus.NOT_STARTED",
  "dagster.core.storage.pipeline_run.PipelineRunStatus.STARTED",
  "dagster.core.storage.pipeline_run.PipelineRunStatus.SUCCESS",
  "dagster.core.types.dagster_type.DagsterTypeKind.LIST",
  "dagster.core.types.dagster_type.DagsterTypeKind.NOTHING",
  "dagster.core.types.dagster_type.DagsterTypeKind.NULLABLE",
  "dagster.seven.mock.MagicMock",
  "dagster_graphql.client.util.HANDLED_EVENTS.values",
  "dagster_graphql.dauphin.Argument",
  "dagster_graphql.dauphin.Boolean",
  "dagster_graphql.dauphin.Enum",
  "dagster_graphql.dauphin.Enum.from_enum",
  "dagster_graphql.dauphin.Field",
  "dagster_graphql.dauphin.Float",
  "dagster_graphql.dauphin.GenericScalar",
  "dagster_graphql.dauphin.ID",
  "dagster_graphql.dauphin.InputObjectType",
  "dagster_graphql.dauphin.Int",
  "dagster_graphql.dauphin.Interface",
  "dagster_graphql.dauphin.List",
  "dagster_graphql.dauphin.Mutation",
  "dagster_graphql.dauphin.NonNull",
  "dagster_graphql.dauphin.ObjectType",
  "dagster_graphql.dauphin.Scalar",
  "dagster_graphql.dauphin.String",
  "dagster_graphql.dauphin.Union",
  "dagster_graphql.dauphin.create_schema",
  "dagster_graphql.dauphin.non_null_list",
  "dagster_types.to_dauphin_dagster_type",
  "dauphin_registry.DauphinRegistry",
  "div_four",
  "emit_failed_expectation",
  "emit_successful_expectation",
  "emit_successful_expectation_no_metadata",
  "errors.DauphinDagsterTypeNotFoundError",
  "errors.DauphinError",
  "errors.DauphinPythonError",
  "execution.DauphinExecutionPlan",
  "execution.DauphinExecutionStep",
  "execution_queries.EXECUTE_RUN_IN_PROCESS_QUERY",
  "execution_queries.LAUNCH_PIPELINE_EXECUTION_QUERY",
  "execution_queries.LAUNCH_PIPELINE_EXECUTION_SNAPSHOT_FRIENDLY",
  "execution_queries.LAUNCH_PIPELINE_REEXECUTION_QUERY",
  "execution_queries.LAUNCH_PIPELINE_REEXECUTION_SNAPSHOT_QUERY",
  "execution_queries.PIPELINE_REEXECUTION_INFO_QUERY",
  "execution_queries.SUBSCRIPTION_QUERY",
  "external.ExternalPipeline",
  "external.ensure_valid_config",
  "external.ensure_valid_step_keys",
  "external.get_external_execution_plan_or_raise",
  "external.get_external_pipeline_or_raise",
  "fail",
  "fail_subset",
  "fn",
  "func",
  "get_input_one",
  "get_input_two",
  "graphql.error.base.GraphQLError",
  "graphql.execution.base.ResolveInfo",
  "graphql.execution.executors.gevent.GeventExecutor",
  "graphql.execution.executors.sync.SyncExecutor",
  "graphql.type.introspection.IntrospectionSchema",
  "graphql_context_test_suite.ExecutingGraphQLContextTestMatrix",
  "graphql_context_test_suite.GraphQLContextVariant",
  "graphql_context_test_suite.GraphQLContextVariant.all_readonly_variants",
  "graphql_context_test_suite.GraphQLContextVariant.all_variants",
  "graphql_context_test_suite.GraphQLContextVariant.asset_aware_sqlite_instance_in_process_env",
  "graphql_context_test_suite.GraphQLContextVariant.in_memory_instance_in_process_env",
  "graphql_context_test_suite.GraphQLContextVariant.readonly_in_memory_instance_in_process_env",
  "graphql_context_test_suite.GraphQLContextVariant.readonly_in_memory_instance_multi_location",
  "graphql_context_test_suite.GraphQLContextVariant.readonly_in_memory_instance_out_of_process_env",
  "graphql_context_test_suite.GraphQLContextVariant.readonly_sqlite_instance_in_process_env",
  "graphql_context_test_suite.GraphQLContextVariant.readonly_sqlite_instance_multi_location",
  "graphql_context_test_suite.GraphQLContextVariant.readonly_sqlite_instance_out_of_process_env",
  "graphql_context_test_suite.GraphQLContextVariant.sqlite_with_cli_api_run_launcher_in_process_env",
  "graphql_context_test_suite.ReadonlyGraphQLContextTestMatrix",
  "graphql_context_test_suite.make_graphql_context_test_suite",
  "graphql_context_test_suite.manage_graphql_context",
  "implementation.context.DagsterGraphQLContext",
  "implementation.utils.PipelineSelector",
  "materialize",
  "one",
  "os.path.exists",
  "os.path.isfile",
  "os.path.join",
  "pipeline_run_storage.PipelineRunObservableSubscribe",
  "production_query.PRODUCTION_QUERY",
  "pytest.fixture",
  "pytest.mark.asset_aware_instance",
  "pytest.mark.cli_api_run_launcher",
  "pytest.mark.graphql_context_test_suite",
  "pytest.mark.hosted_user_process_env",
  "pytest.mark.in_memory_instance",
  "pytest.mark.multi_location",
  "pytest.mark.out_of_process_env",
  "pytest.mark.parametrize",
  "pytest.mark.readonly",
  "pytest.mark.skipif",
  "pytest.mark.sqlite_instance",
  "pytest.mark.sync_run_launcher",
  "pytest.param",
  "pytest.raises",
  "pytest.yield_fixture",
  "query.EXECUTE_PLAN_MUTATION",
  "query.RAW_EXECUTE_PLAN_MUTATION",
  "reset",
  "resume_retry.compute_step_keys_to_execute",
  "return_any",
  "return_bool",
  "return_foo",
  "return_hello",
  "return_hello_world",
  "return_int",
  "return_one",
  "return_six",
  "return_str",
  "run_lifecycle.RunExecutionInfo",
  "run_lifecycle.create_valid_pipeline_run",
  "run_lifecycle.get_run_execution_info_for_created_run_or_error",
  "runs.DauphinPipelineRunStatus",
  "runs.DauphinStepEvent",
  "rx.Observable.create",
  "schedules.DauphinReconcileSchedulerStateMutation.Field",
  "schedules.DauphinStartScheduleMutation.Field",
  "schedules.DauphinStopRunningScheduleMutation.Field",
  "schema.create_schema",
  "schema.runs.DauphinRunGroup",
  "setup.PoorMansDataFrame",
  "setup.csv_hello_world",
  "setup.csv_hello_world_solids_config",
  "setup.csv_hello_world_solids_config_fs_storage",
  "setup.define_test_context",
  "setup.get_main_external_repo",
  "setup.get_retry_multi_execution_params",
  "setup.main_repo_location_name",
  "setup.main_repo_name",
  "setup.noop_pipeline",
  "setup.retry_config",
  "simple_solid",
  "snapshottest.Snapshot",
  "solid_A",
  "solid_B",
  "solid_B_prime",
  "solid_with_required_resource",
  "solids.DauphinSolidContainer",
  "solids.build_dauphin_solid_handles",
  "solids.build_dauphin_solids",
  "spawn",
  "spew",
  "static_function",
  "sum_inputs",
  "sys.exc_info",
  "sys.version_info",
  "sys.version_info.major",
  "takes_an_enum",
  "throw_a_thing",
  "ticks.tick_specific_data_from_dagster_tick",
  "time.sleep",
  "type.is_type_of",
  "util.HANDLED_EVENTS",
  "util.dagster_event_from_dict",
  "utils.ExecutionMetadata",
  "utils.ExecutionParams",
  "utils.PipelineSelector",
  "utils.UserFacingGraphQLError",
  "utils.capture_dauphin_error",
  "utils.execute_dagster_graphql",
  "utils.get_all_logs_for_finished_run_via_subscription",
  "utils.infer_pipeline_selector",
  "utils.sync_execute_get_events",
  "utils.sync_execute_get_run_log_data",
  "uuid.UUID"
 ],
 "deps": {
  "BarLogger": [],
  "EnumRegisteringMetaclass": [],
  "_f": [],
  "_yield_all": [],
  "a_solid_with_multilayered_config": [],
  "a_solid_with_three_field_config": [],
  "abc": [
   "python/conda-forge/linux-64/python-2.7.15-h721da81_1008",
   "python/conda-forge/linux-64/python-3.8.5-h425cb1d_2_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "add_four": [],
  "apply_to_three": [],
  "click": [
   "click/conda-forge/noarch/click-6.7-py_1",
   "click/conda-forge/noarch/click-7.1-pyh8c360ce_0"
  ],
  "client": [],
  "collections": [
   "python/conda-forge/linux-64/python-3.8.5-h425cb1d_2_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "composites_query": [],
  "config_types": [],
  "contextlib": [
   "python/conda-forge/linux-64/python-3.8.5-h425cb1d_2_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "copy": [
   "python/conda-forge/linux-64/python-3.8.5-h425cb1d_2_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "csv": [
   "python/conda-forge/linux-64/python-3.8.5-h425cb1d_2_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "dagster": [
   "dagster/conda-forge/linux-64/dagster-0.8.1-py38h32f6830_0"
  ],
  "dagster_graphql": [],
  "dagster_types": [],
  "datetime": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "dauphin_registry": [],
  "div_four": [],
  "emit_failed_expectation": [],
  "emit_successful_expectation": [],
  "emit_successful_expectation_no_metadata": [],
  "errors": [],
  "events": [
   "events/conda-forge/noarch/events-0.4-pyhd8ed1ab_0"
  ],
  "execution": [],
  "execution_queries": [],
  "external": [],
  "fail": [],
  "fail_subset": [],
  "fn": [],
  "func": [],
  "functools": [
   "python/conda-forge/linux-64/python-2.7.15-h721da81_1008",
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "future": [
   "future/conda-forge/linux-64/future-0.17.1-py36_1000"
  ],
  "get_input_one": [],
  "get_input_two": [],
  "graphene": [
   "graphene/conda-forge/noarch/graphene-2.1.8-py_0"
  ],
  "graphql": [
   "graphql-core/conda-forge/noarch/graphql-core-3.1.0-py_0"
  ],
  "graphql_context_test_suite": [],
  "implementation": [],
  "inspect": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "json": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "logging": [
   "python/conda-forge/linux-64/python-2.7.15-h721da81_1008",
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "materialize": [],
  "one": [],
  "os": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "pipeline_run_storage": [],
  "production_query": [],
  "pytest": [],
  "query": [],
  "re": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "requests": [
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "reset": [],
  "resume_retry": [],
  "return_any": [],
  "return_bool": [],
  "return_foo": [],
  "return_hello": [],
  "return_hello_world": [],
  "return_int": [],
  "return_one": [],
  "return_six": [],
  "return_str": [],
  "run_lifecycle": [],
  "runs": [],
  "rx": [],
  "schedules": [],
  "schema": [],
  "setup": [],
  "simple_solid": [],
  "six": [
   "lldb/conda-forge/linux-64/lldb-6.0.0-py35_0",
   "six/conda-forge/noarch/six-1.14.0-py_1"
  ],
  "snapshottest": [],
  "solid_A": [],
  "solid_B": [],
  "solid_B_prime": [],
  "solid_with_required_resource": [],
  "solids": [],
  "spawn": [],
  "spew": [],
  "static_function": [],
  "sum_inputs": [],
  "sys": [],
  "takes_an_enum": [],
  "throw_a_thing": [],
  "ticks": [],
  "time": [],
  "type": [],
  "util": [],
  "utils": [],
  "uuid": [],
  "version": [
   "telegram-send/conda-forge/noarch/telegram-send-0.25-py_0"
  ],
  "yaml": [
   "pyyaml/conda-forge/linux-64/pyyaml-3.13-py37h470a237_1"
  ]
 }
}