{
 "bad": [
  "ansible.constants.DEFAULT_ROLES_PATH",
  "ansible.plugins.loader.module_loader.add_directory",
  "ansible.utils.boolean",
  "ansiblelint.AnsibleLintRule",
  "ansiblelint.Match",
  "ansiblelint.RulesCollection",
  "ansiblelint.RulesCollection.create_from_directory",
  "ansiblelint.Runner",
  "ansiblelint.__main__.load_config",
  "ansiblelint.__main__.main",
  "ansiblelint.default_rulesdir",
  "ansiblelint.formatters.Formatter",
  "ansiblelint.formatters.ParseableFormatter",
  "ansiblelint.formatters.ParseableSeverityFormatter",
  "ansiblelint.formatters.QuietFormatter",
  "ansiblelint.generate_docs.DOC_HEADER",
  "ansiblelint.generate_docs.get_serialized_rules",
  "ansiblelint.generate_docs.import_all_rules",
  "ansiblelint.generate_docs.main",
  "ansiblelint.generate_docs.make_table",
  "ansiblelint.generate_docs.normalize_cell",
  "ansiblelint.generate_docs.rules",
  "ansiblelint.rules.BecomeUserWithoutBecomeRule._become_user_without_become",
  "ansiblelint.rules.UseHandlerRatherThanWhenChangedRule._changed_in_when",
  "ansiblelint.utils.BLOCK_NAME_TO_ACTION_TYPE_MAP",
  "ansiblelint.utils.DEFAULT_VAULT_PASSWORD",
  "ansiblelint.utils.FILENAME_KEY",
  "ansiblelint.utils.LINE_NUMBER_KEY",
  "ansiblelint.utils.VALID_KEYS",
  "ansiblelint.utils._append_skipped_rules",
  "ansiblelint.utils._get_rule_skips_from_yaml",
  "ansiblelint.utils._get_task_blocks_from_playbook",
  "ansiblelint.utils._get_tasks_from_blocks",
  "ansiblelint.utils._kv_to_dict",
  "ansiblelint.utils._load_library_if_exists",
  "ansiblelint.utils._look_for_role_files",
  "ansiblelint.utils._playbook_items",
  "ansiblelint.utils._rolepath",
  "ansiblelint.utils._roles_children",
  "ansiblelint.utils.add_action_type",
  "ansiblelint.utils.ansible_template",
  "ansiblelint.utils.append_children",
  "ansiblelint.utils.extract_from_list",
  "ansiblelint.utils.get_action_tasks",
  "ansiblelint.utils.get_first_cmd_arg",
  "ansiblelint.utils.get_playbooks_and_roles",
  "ansiblelint.utils.get_rule_skips_from_line",
  "ansiblelint.utils.is_playbook",
  "ansiblelint.utils.normalize_task",
  "ansiblelint.utils.normalize_task_v2",
  "ansiblelint.utils.normpath",
  "ansiblelint.utils.parse_yaml_from_file",
  "ansiblelint.utils.path_dwim",
  "ansiblelint.utils.play_children",
  "ansiblelint.utils.template",
  "ansiblelint.utils.tokenize",
  "ansiblelint.utils.yaml",
  "ansiblelint.version.__version__",
  "ansiblelint.versiontools.cut_local_version_on_upload",
  "ansiblelint.versiontools.get_version_from_scm_tag",
  "codecs.open",
  "collections.OrderedDict.fromkeys",
  "collections.defaultdict",
  "errno.EPIPE",
  "functools.reduce",
  "get_nested_tasks",
  "glob.glob",
  "imp.find_module",
  "imp.load_module",
  "importlib.import_module",
  "inspect.getargspec",
  "inspect.getmembers",
  "inspect.isclass",
  "inspect.ismodule",
  "itertools.product",
  "optparse.OptionParser",
  "os.getenv",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.isdir",
  "os.path.join",
  "os.path.relpath",
  "os.path.splitext",
  "os.pathsep",
  "os.walk",
  "pathlib2.Path",
  "pkg_resources.get_distribution",
  "pprint.PrettyPrinter",
  "re.DOTALL",
  "re.compile",
  "re.match",
  "re.sub",
  "subprocess.check_output",
  "sys.argv",
  "sys.exit",
  "sys.stderr",
  "sys.stdout",
  "sys.stdout.isatty",
  "traverse_yaml",
  "types.StringTypes",
  "yaml.YAMLError",
  "yaml.composer.Composer.compose_node",
  "yaml.load",
  "yaml.parser.ParserError",
  "yaml.safe_load",
  "yaml.scanner.ScannerError"
 ],
 "deps": {
  "ansible": [
   "ansible-base/conda-forge/noarch/ansible-base-2.10.1-py_0"
  ],
  "ansiblelint": [],
  "codecs": [],
  "collections": [],
  "errno": [],
  "functools": [],
  "get_nested_tasks": [],
  "glob": [],
  "imp": [],
  "importlib": [],
  "inspect": [],
  "itertools": [],
  "optparse": [],
  "os": [],
  "pathlib2": [],
  "pkg_resources": [],
  "pprint": [],
  "re": [],
  "setuptools_scm": [
   "setuptools-scm/conda-forge/noarch/setuptools-scm-4.0.0-pyh9f0ad1d_0",
   "setuptools-scm/conda-forge/noarch/setuptools-scm-5.0.1-pyhd3deb0d_0",
   "setuptools_scm/conda-forge/noarch/setuptools_scm-3.3.0-py_0"
  ],
  "six": [
   "six/conda-forge/noarch/six-1.14.0-py_1"
  ],
  "subprocess": [],
  "sys": [],
  "traverse_yaml": [],
  "types": [],
  "yaml": []
 }
}