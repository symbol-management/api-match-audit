{
 "bad": [
  "SimpleVoter",
  "abc.ABC",
  "abc.abstractmethod",
  "call_fn",
  "collections.Counter",
  "collections.Hashable",
  "collections.OrderedDict",
  "collections.defaultdict",
  "combiner_module",
  "create_dataloader",
  "create_dummy_task",
  "create_task",
  "dask.distributed.Client",
  "datetime.datetime",
  "func",
  "functools.partial",
  "glob",
  "glob.glob",
  "hashlib",
  "hashlib.sha1",
  "input.new_full",
  "input.new_zeros",
  "input.shape",
  "inspect",
  "inspect.getfullargspec",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "itertools.product",
  "json",
  "json.dump",
  "logging",
  "logging.INFO",
  "logging.basicConfig",
  "logging.error",
  "logging.info",
  "logging.warning",
  "mapper",
  "mapper_no_pre",
  "mapper_pre",
  "mapper_pre.reset_cache",
  "mapper_pre_2",
  "mapper_spark",
  "metric",
  "munkres.Munkres",
  "networkx.Graph",
  "networkx.chordal_graph_cliques",
  "networkx.is_chordal",
  "networkx.minimum_spanning_tree",
  "nlp",
  "numpy",
  "numpy.abs",
  "numpy.any",
  "numpy.around",
  "numpy.array",
  "numpy.array_equal",
  "numpy.ceil",
  "numpy.clip",
  "numpy.concatenate",
  "numpy.copy",
  "numpy.diag",
  "numpy.diagonal",
  "numpy.dtype",
  "numpy.empty",
  "numpy.errstate",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.eye",
  "numpy.int",
  "numpy.int64",
  "numpy.lib.recfunctions",
  "numpy.lib.recfunctions.append_fields",
  "numpy.log",
  "numpy.log10",
  "numpy.max",
  "numpy.mod",
  "numpy.multiply",
  "numpy.nan_to_num",
  "numpy.ndarray",
  "numpy.not_equal",
  "numpy.ones",
  "numpy.ones_like",
  "numpy.random.choice",
  "numpy.random.rand",
  "numpy.random.randint",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.ravel",
  "numpy.recarray",
  "numpy.shape",
  "numpy.sqrt",
  "numpy.sum",
  "numpy.testing.assert_array_almost_equal",
  "numpy.testing.assert_array_equal",
  "numpy.testing.assert_equal",
  "numpy.tile",
  "numpy.unique",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "os",
  "os.close",
  "os.makedirs",
  "os.path.dirname",
  "os.path.exists",
  "os.path.join",
  "os.path.split",
  "os.remove",
  "pandas",
  "pandas.DataFrame",
  "pandas.DataFrame.from_dict",
  "pandas.Index",
  "pandas.Series",
  "pandas.concat",
  "pandas.testing.assert_frame_equal",
  "pickle",
  "pickle.dump",
  "pickle.dumps",
  "pickle.load",
  "pickle.loads",
  "preprocessor",
  "pyspark.SparkContext.getOrCreate",
  "pytest",
  "pytest.mark.complex",
  "pytest.mark.spark",
  "random",
  "random.randint",
  "random.seed",
  "random.shuffle",
  "scheduler_class",
  "schedulers.batch_schedulers.get",
  "scipy.sparse",
  "scipy.sparse.diags",
  "shutil",
  "shutil.copyfile",
  "shutil.rmtree",
  "sklearn.metrics",
  "sklearn.metrics.accuracy_score",
  "sklearn.metrics.confusion_matrix",
  "sklearn.metrics.f1_score",
  "sklearn.metrics.fbeta_score",
  "sklearn.metrics.matthews_corrcoef",
  "sklearn.metrics.precision_score",
  "sklearn.metrics.recall_score",
  "sklearn.metrics.roc_auc_score",
  "snorkel.classification.DictDataset.from_tensors",
  "snorkel.classification.training.schedulers.__init__.SequentialScheduler",
  "snorkel.classification.training.schedulers.__init__.ShuffledScheduler",
  "spacy",
  "spacy.load",
  "split_words",
  "split_words_spark",
  "square_hit_tracker",
  "square_hit_tracker.n_hits",
  "tempfile",
  "tempfile.mkdtemp",
  "tempfile.mkstemp",
  "tf",
  "torch",
  "torch.FloatTensor",
  "torch.LongTensor",
  "torch.Tensor",
  "torch.all",
  "torch.allclose",
  "torch.any",
  "torch.cat",
  "torch.clamp",
  "torch.cuda.is_available",
  "torch.device",
  "torch.diag",
  "torch.eq",
  "torch.equal",
  "torch.eye",
  "torch.float32",
  "torch.from_numpy",
  "torch.full_like",
  "torch.isclose",
  "torch.isnan",
  "torch.load",
  "torch.long",
  "torch.manual_seed",
  "torch.nn",
  "torch.nn.DataParallel",
  "torch.nn.Identity",
  "torch.nn.Linear",
  "torch.nn.Module",
  "torch.nn.ModuleDict",
  "torch.nn.Parameter",
  "torch.nn.ReLU",
  "torch.nn.Sequential",
  "torch.nn.functional",
  "torch.nn.functional.cross_entropy",
  "torch.nn.functional.softmax",
  "torch.nn.utils.clip_grad_norm_",
  "torch.no_grad",
  "torch.norm",
  "torch.ones",
  "torch.optim",
  "torch.optim.Adam",
  "torch.optim.Adamax",
  "torch.optim.Optimizer",
  "torch.optim.SGD",
  "torch.optim.lr_scheduler.ExponentialLR",
  "torch.optim.lr_scheduler.LambdaLR",
  "torch.optim.lr_scheduler.StepLR",
  "torch.optim.lr_scheduler._LRScheduler",
  "torch.rand_like",
  "torch.save",
  "torch.stack",
  "torch.sum",
  "torch.tensor",
  "torch.utils.data.DataLoader",
  "torch.utils.data.Dataset",
  "torch.zeros",
  "tqdm.tqdm.pandas",
  "types.SimpleNamespace",
  "typing.Any",
  "typing.Callable",
  "typing.DefaultDict",
  "typing.Dict",
  "typing.Iterable",
  "typing.Iterator",
  "typing.List",
  "typing.Mapping",
  "typing.NamedTuple",
  "typing.Optional",
  "typing.Sequence",
  "typing.Set",
  "typing.Tuple",
  "typing.Union",
  "unittest",
  "unittest.TestCase",
  "unittest.main"
 ],
 "deps": {
  "SimpleVoter": [],
  "abc": [],
  "call_fn": [],
  "collections": [],
  "combiner_module": [],
  "create_dataloader": [],
  "create_dummy_task": [],
  "create_task": [],
  "dask": [
   "dask-core/conda-forge/noarch/dask-core-0.15.3-py_0"
  ],
  "datetime": [],
  "func": [],
  "functools": [],
  "glob": [],
  "hashlib": [],
  "input": [],
  "inspect": [],
  "itertools": [],
  "json": [],
  "logging": [],
  "mapper": [],
  "mapper_no_pre": [],
  "mapper_pre": [],
  "mapper_pre_2": [],
  "mapper_spark": [],
  "metric": [],
  "munkres": [],
  "networkx": [
   "networkx/conda-forge/noarch/networkx-2.3-py_0"
  ],
  "nlp": [],
  "numpy": [],
  "os": [],
  "pandas": [],
  "pickle": [],
  "preprocessor": [],
  "pyspark": [
   "pyspark/conda-forge/noarch/pyspark-3.0.1-pyh9f0ad1d_0"
  ],
  "pytest": [],
  "random": [],
  "scheduler_class": [],
  "schedulers": [],
  "scipy": [],
  "shutil": [],
  "sklearn": [],
  "snorkel": [],
  "spacy": [],
  "split_words": [],
  "split_words_spark": [],
  "square_hit_tracker": [],
  "tempfile": [],
  "tensorboardX": [
   "tensorboardx/conda-forge/noarch/tensorboardx-1.4-py_0"
  ],
  "tf": [],
  "torch": [],
  "tqdm": [
   "tqdm/conda-forge/noarch/tqdm-4.20.0-py_0"
  ],
  "types": [],
  "typing": [],
  "unittest": []
 }
}