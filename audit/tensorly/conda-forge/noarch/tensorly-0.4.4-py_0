{
 "bad": [
  "__name__.__dict__.keys",
  "_khatri_rao.khatri_rao",
  "_kronecker.kronecker",
  "_tensor_to_numpy",
  "_tucker.non_negative_tucker",
  "_tucker.partial_tucker",
  "_tucker.tucker",
  "backend",
  "backend.SVD_FUNS.items",
  "backend._get_backend_dir",
  "backend._get_backend_method",
  "backend.abs",
  "backend.all",
  "backend.arange",
  "backend.backend_context",
  "backend.clip",
  "backend.concatenate",
  "backend.conj",
  "backend.context",
  "backend.copy",
  "backend.core.Backend",
  "backend.dot",
  "backend.eye",
  "backend.float32",
  "backend.get_backend",
  "backend.is_tensor",
  "backend.kr",
  "backend.kron",
  "backend.max",
  "backend.mean",
  "backend.min",
  "backend.moveaxis",
  "backend.ndim",
  "backend.norm",
  "backend.ones",
  "backend.override_module_dispatch",
  "backend.partial_svd",
  "backend.prod",
  "backend.qr",
  "backend.reshape",
  "backend.shape",
  "backend.sign",
  "backend.solve",
  "backend.sparse_context",
  "backend.sqrt",
  "backend.stack",
  "backend.sum",
  "backend.tensor",
  "backend.to_numpy",
  "backend.transpose",
  "backend.where",
  "backend.zeros",
  "backend.zeros_like",
  "base.check_random_state",
  "base.fold",
  "base.partial_fold",
  "base.partial_tensor_to_vec",
  "base.partial_unfold",
  "base.partial_vec_to_tensor",
  "base.random_kruskal",
  "base.random_mps",
  "base.random_tucker",
  "base.tensor_to_vec",
  "base.unfold",
  "base.vec_to_tensor",
  "candecomp_parafac.initialize_factors",
  "candecomp_parafac.non_negative_parafac",
  "candecomp_parafac.parafac",
  "candecomp_parafac.randomised_parafac",
  "candecomp_parafac.sample_khatri_rao",
  "collections.abc.Mapping",
  "concurrent.futures.ThreadPoolExecutor",
  "contextlib.contextmanager",
  "contraction.contract",
  "copy.copy",
  "core.Backend",
  "core.Backend.abs",
  "core.Backend.all",
  "core.Backend.arange",
  "core.Backend.argmax",
  "core.Backend.argmin",
  "core.Backend.clip",
  "core.Backend.concatenate",
  "core.Backend.context",
  "core.Backend.copy",
  "core.Backend.dot",
  "core.Backend.eye",
  "core.Backend.is_tensor",
  "core.Backend.kr",
  "core.Backend.kron",
  "core.Backend.max",
  "core.Backend.mean",
  "core.Backend.min",
  "core.Backend.moveaxis",
  "core.Backend.ndim",
  "core.Backend.norm",
  "core.Backend.ones",
  "core.Backend.partial_svd",
  "core.Backend.prod",
  "core.Backend.qr",
  "core.Backend.reshape",
  "core.Backend.shape",
  "core.Backend.sign",
  "core.Backend.solve",
  "core.Backend.sqrt",
  "core.Backend.stack",
  "core.Backend.sum",
  "core.Backend.tensor",
  "core.Backend.to_numpy",
  "core.Backend.transpose",
  "core.Backend.where",
  "core.Backend.zeros",
  "core.Backend.zeros_like",
  "core.wrap",
  "cupy",
  "cupy.abs",
  "cupy.array",
  "cupy.asnumpy",
  "cupy.clip",
  "cupy.cuda.cusolver.CUSOLVERError",
  "cupy.float32",
  "cupy.linalg.solve",
  "cupy.linalg.svd",
  "cupy.max",
  "cupy.ndarray",
  "cupy.sqrt",
  "cupy.sum",
  "decomposition.matrix_product_state",
  "decomposition.non_negative_parafac",
  "decomposition.non_negative_tucker",
  "decomposition.parafac",
  "decomposition.partial_tucker",
  "decomposition.robust_pca",
  "decomposition.tucker",
  "distutils.version.LooseVersion",
  "evaluateGrid",
  "func",
  "functools.wraps",
  "generalised_inner_product.inner",
  "getEquispaceGrid",
  "getter_fun",
  "importlib.import_module",
  "inspect.signature",
  "itertools.permutations",
  "itertools.product",
  "kruskal_regression.KruskalRegressor",
  "kruskal_tensor.KruskalTensor",
  "kruskal_tensor._validate_kruskal_tensor",
  "kruskal_tensor.kruskal_mode_dot",
  "kruskal_tensor.kruskal_norm",
  "kruskal_tensor.kruskal_normalise",
  "kruskal_tensor.kruskal_to_tensor",
  "kruskal_tensor.kruskal_to_unfolded",
  "kruskal_tensor.kruskal_to_vec",
  "kruskal_tensor.unfolding_dot_khatri_rao",
  "math.sqrt",
  "metrics.regression.RMSE",
  "mps_decomposition.matrix_product_state",
  "mps_decomposition_cross.matrix_product_state_cross",
  "mps_tensor._validate_mps_tensor",
  "mps_tensor.mps_to_tensor",
  "mps_tensor.mps_to_unfolded",
  "mps_tensor.mps_to_vec",
  "mxnet.cpu",
  "mxnet.nd",
  "mxnet.nd.NDArray",
  "mxnet.nd.abs",
  "mxnet.nd.argmax",
  "mxnet.nd.argmin",
  "mxnet.nd.array",
  "mxnet.nd.concat",
  "mxnet.nd.linalg.gelqf",
  "mxnet.nd.linalg.syevd",
  "mxnet.nd.max",
  "mxnet.nd.maximum",
  "mxnet.nd.mean",
  "mxnet.nd.min",
  "mxnet.nd.minimum",
  "mxnet.nd.reshape",
  "mxnet.nd.sqrt",
  "mxnet.nd.sum",
  "mxnet.ndarray.dot",
  "mxnet.ndarray.reshape",
  "mxnet.ndarray.stack",
  "mxnet.ndarray.transpose",
  "n_mode_product.mode_dot",
  "n_mode_product.multi_mode_dot",
  "numpy",
  "numpy.abs",
  "numpy.arange",
  "numpy.array",
  "numpy.asarray",
  "numpy.clip",
  "numpy.complexfloating",
  "numpy.concatenate",
  "numpy.copy",
  "numpy.dot",
  "numpy.einsum",
  "numpy.eye",
  "numpy.finfo",
  "numpy.float",
  "numpy.float32",
  "numpy.float64",
  "numpy.inf",
  "numpy.int32",
  "numpy.int64",
  "numpy.issubdtype",
  "numpy.linalg",
  "numpy.linalg.matrix_rank",
  "numpy.linalg.qr",
  "numpy.linalg.solve",
  "numpy.max",
  "numpy.min",
  "numpy.ndarray",
  "numpy.ogrid",
  "numpy.ones",
  "numpy.pi",
  "numpy.prod",
  "numpy.random.RandomState",
  "numpy.random.normal",
  "numpy.random.rand",
  "numpy.random.randn",
  "numpy.random.random",
  "numpy.random.random_sample",
  "numpy.reshape",
  "numpy.sqrt",
  "numpy.sum",
  "numpy.testing.assert_",
  "numpy.testing.assert_array_almost_equal",
  "numpy.testing.assert_array_equal",
  "numpy.testing.assert_equal",
  "numpy.testing.assert_raises",
  "numpy.unravel_index",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "os.environ.get",
  "outer_product.outer",
  "proximal.procrustes",
  "proximal.soft_thresholding",
  "proximal.svd_thresholding",
  "pytest.importorskip",
  "pytest.mark.skipif",
  "pytest.mark.xfail",
  "pytest.skip",
  "random.check_random_state",
  "random.random_kruskal",
  "random.random_mps",
  "random.random_tucker",
  "regression.MSE",
  "regression.RMSE",
  "regression.correlation",
  "robust_decomposition.robust_pca",
  "scipy.linalg.eigh",
  "scipy.linalg.svd",
  "scipy.sparse.linalg.eigsh",
  "scipy.sparse.linalg.spsolve",
  "sparse.COO",
  "sparse.COO.from_numpy",
  "sparse.dot",
  "sparse.eye",
  "svd_fun",
  "synthetic.gen_image",
  "sys.modules.__class__",
  "sys.modules.__dict__.keys",
  "sys.modules.__dir__",
  "sys.modules.__getattr__",
  "sys.version_info",
  "tenalg.inner",
  "tenalg.khatri_rao",
  "tenalg.kronecker",
  "tenalg.mode_dot",
  "tenalg.multi_mode_dot",
  "tenalg.proximal.soft_thresholding",
  "tenalg.proximal.svd_thresholding",
  "tensorflow.Tensor",
  "tensorflow.abs",
  "tensorflow.argmax",
  "tensorflow.argmin",
  "tensorflow.clip_by_value",
  "tensorflow.concat",
  "tensorflow.constant",
  "tensorflow.contrib.eager.DEVICE_PLACEMENT_SILENT",
  "tensorflow.contrib.eager.enable_eager_execution",
  "tensorflow.diag",
  "tensorflow.eye",
  "tensorflow.identity",
  "tensorflow.linalg.qr",
  "tensorflow.linalg.solve",
  "tensorflow.norm",
  "tensorflow.ones",
  "tensorflow.range",
  "tensorflow.reduce_all",
  "tensorflow.reduce_max",
  "tensorflow.reduce_mean",
  "tensorflow.reduce_min",
  "tensorflow.reduce_prod",
  "tensorflow.reduce_sum",
  "tensorflow.reshape",
  "tensorflow.sign",
  "tensorflow.sqrt",
  "tensorflow.squeeze",
  "tensorflow.stack",
  "tensorflow.svd",
  "tensorflow.tensordot",
  "tensorflow.transpose",
  "tensorflow.where",
  "tensorflow.zeros",
  "tensorflow.zeros_like",
  "tensorly",
  "tensorly.SVD_FUNS",
  "tensorly.abs",
  "tensorly.all",
  "tensorly.arange",
  "tensorly.argmax",
  "tensorly.argmin",
  "tensorly.backend._DEFAULT_BACKEND",
  "tensorly.backend._KNOWN_BACKENDS",
  "tensorly.backend._LOADED_BACKENDS",
  "tensorly.backend._LOCAL_STATE",
  "tensorly.backend._get_backend_dir",
  "tensorly.backend._get_backend_method",
  "tensorly.backend.cupy_backend.CupyBackend",
  "tensorly.backend.cupy_backend.message",
  "tensorly.backend.dispatch",
  "tensorly.backend.get_backend",
  "tensorly.backend.initialize_backend",
  "tensorly.backend.is_tensor",
  "tensorly.backend.mxnet_backend.MxnetBackend",
  "tensorly.backend.mxnet_backend.message",
  "tensorly.backend.mxnet_backend.numpy",
  "tensorly.backend.numpy_backend.NumpyBackend",
  "tensorly.backend.override_module_dispatch",
  "tensorly.backend.pytorch_backend.PyTorchBackend",
  "tensorly.backend.pytorch_backend.message",
  "tensorly.backend.pytorch_backend.torch",
  "tensorly.backend.register_backend",
  "tensorly.backend.set_backend",
  "tensorly.backend.tensorflow_backend.Backend",
  "tensorly.backend.tensorflow_backend.TensorflowBackend",
  "tensorly.backend.tensorflow_backend._FUN_NAMES",
  "tensorly.backend.tensorflow_backend.message",
  "tensorly.backend.to_numpy",
  "tensorly.backend_context",
  "tensorly.base.partial_fold",
  "tensorly.base.partial_unfold",
  "tensorly.clip",
  "tensorly.concatenate",
  "tensorly.conj",
  "tensorly.context",
  "tensorly.contrib.decomposition.mps_decomposition_cross.left_right_ttcross_step",
  "tensorly.contrib.decomposition.mps_decomposition_cross.maxvol",
  "tensorly.contrib.decomposition.mps_decomposition_cross.right_left_ttcross_step",
  "tensorly.contrib.decomposition.tests.test_mps_decomposition_cross.skip_if_tensorflow",
  "tensorly.contrib.sparse.backend._KNOWN_BACKENDS",
  "tensorly.contrib.sparse.backend._LOADED_BACKENDS",
  "tensorly.contrib.sparse.backend._get_backend_dir",
  "tensorly.contrib.sparse.backend._get_backend_method",
  "tensorly.contrib.sparse.backend.backend",
  "tensorly.contrib.sparse.backend.dispatch_sparse",
  "tensorly.contrib.sparse.backend.numpy_backend.NumpySparseBackend",
  "tensorly.contrib.sparse.backend.numpy_backend._MIN_SPARSE_VERSION",
  "tensorly.contrib.sparse.backend.numpy_backend.is_sparse",
  "tensorly.contrib.sparse.backend.numpy_backend.sparse",
  "tensorly.contrib.sparse.backend.register_sparse_backend",
  "tensorly.contrib.sparse.backend.sparse_context",
  "tensorly.contrib.sparse.kruskal_tensor.unfolding_dot_khatri_rao",
  "tensorly.contrib.sparse.kruskal_to_tensor",
  "tensorly.contrib.sparse.sparse_dir",
  "tensorly.contrib.sparse.static_items",
  "tensorly.decomposition._tucker.partial_tucker",
  "tensorly.decomposition._tucker.tucker",
  "tensorly.decomposition.candecomp_parafac.initialize_factors",
  "tensorly.decomposition.candecomp_parafac.parafac",
  "tensorly.decomposition.candecomp_parafac.sample_khatri_rao",
  "tensorly.diag",
  "tensorly.dot",
  "tensorly.eps",
  "tensorly.eye",
  "tensorly.float32",
  "tensorly.fold",
  "tensorly.full_dir",
  "tensorly.get_backend",
  "tensorly.int64",
  "tensorly.kruskal_tensor.KruskalTensor",
  "tensorly.kruskal_tensor._validate_kruskal_tensor",
  "tensorly.kruskal_tensor.kruskal_to_tensor",
  "tensorly.kruskal_to_tensor",
  "tensorly.max",
  "tensorly.metrics.regression.MSE",
  "tensorly.metrics.regression.covariance",
  "tensorly.metrics.regression.variance",
  "tensorly.mps_tensor.mps_to_tensor",
  "tensorly.mps_to_tensor",
  "tensorly.ndim",
  "tensorly.norm",
  "tensorly.not_a_real_attribute",
  "tensorly.ones",
  "tensorly.partial_svd",
  "tensorly.qr",
  "tensorly.random.base.check_random_state",
  "tensorly.random.base.random_kruskal",
  "tensorly.random.base.random_tucker",
  "tensorly.random.check_random_state",
  "tensorly.random.random_kruskal",
  "tensorly.reshape",
  "tensorly.set_backend",
  "tensorly.shape",
  "tensorly.sign",
  "tensorly.solve",
  "tensorly.sqrt",
  "tensorly.sum",
  "tensorly.tenalg.inner",
  "tensorly.tenalg.khatri_rao",
  "tensorly.tenalg.mode_dot",
  "tensorly.tenalg.multi_mode_dot",
  "tensorly.tenalg.n_mode_product.mode_dot",
  "tensorly.tenalg.proximal.soft_thresholding",
  "tensorly.tensor",
  "tensorly.tensor_to_vec",
  "tensorly.testing.assert_",
  "tensorly.testing.assert_array_almost_equal",
  "tensorly.testing.assert_array_equal",
  "tensorly.testing.assert_equal",
  "tensorly.testing.assert_raises",
  "tensorly.to_numpy",
  "tensorly.transpose",
  "tensorly.tucker_tensor._validate_tucker_tensor",
  "tensorly.tucker_tensor.tucker_to_tensor",
  "tensorly.unfold",
  "tensorly.vec_to_tensor",
  "tensorly.where",
  "tensorly.zeros",
  "testing.assert_",
  "testing.assert_array_almost_equal",
  "testing.assert_array_equal",
  "testing.assert_equal",
  "testing.assert_raises",
  "threading.local",
  "torch.__version__",
  "torch.abs",
  "torch.arange",
  "torch.argmax",
  "torch.argmin",
  "torch.cat",
  "torch.clamp",
  "torch.float32",
  "torch.gels",
  "torch.gesv",
  "torch.int64",
  "torch.is_tensor",
  "torch.matmul",
  "torch.max",
  "torch.mean",
  "torch.min",
  "torch.norm",
  "torch.sqrt",
  "torch.stack",
  "torch.sum",
  "torch.svd",
  "torch.symeig",
  "torch.tensor",
  "tucker_regression.TuckerRegressor",
  "tucker_tensor._validate_tucker_tensor",
  "tucker_tensor.tucker_mode_dot",
  "tucker_tensor.tucker_to_tensor",
  "tucker_tensor.tucker_to_unfolded",
  "tucker_tensor.tucker_to_vec",
  "types.ModuleType",
  "warnings.warn"
 ],
 "deps": {
  "__name__": [],
  "_khatri_rao": [],
  "_kronecker": [],
  "_tensor_to_numpy": [],
  "_tucker": [],
  "backend": [],
  "base": [],
  "candecomp_parafac": [],
  "collections": [],
  "concurrent": [],
  "contextlib": [],
  "contraction": [],
  "copy": [],
  "core": [],
  "cupy": [],
  "decomposition": [],
  "distutils": [],
  "evaluateGrid": [],
  "func": [],
  "functools": [],
  "generalised_inner_product": [],
  "getEquispaceGrid": [],
  "getter_fun": [],
  "importlib": [],
  "inspect": [],
  "itertools": [],
  "kruskal_regression": [],
  "kruskal_tensor": [],
  "math": [],
  "metrics": [],
  "mps_decomposition": [],
  "mps_decomposition_cross": [],
  "mps_tensor": [],
  "mxnet": [],
  "n_mode_product": [],
  "numpy": [],
  "os": [],
  "outer_product": [],
  "proximal": [],
  "pytest": [],
  "random": [],
  "regression": [],
  "robust_decomposition": [],
  "scipy": [],
  "sparse": [
   "sparse/conda-forge/noarch/sparse-0.7.0-py_0"
  ],
  "svd_fun": [],
  "synthetic": [],
  "sys": [],
  "tenalg": [],
  "tensorflow": [],
  "tensorly": [],
  "testing": [],
  "threading": [],
  "torch": [],
  "tucker_regression": [],
  "tucker_tensor": [],
  "types": [],
  "warnings": []
 }
}