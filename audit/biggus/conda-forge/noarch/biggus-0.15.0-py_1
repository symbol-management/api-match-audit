{
 "bad": [
  "AllThreadedEngine",
  "BadArray",
  "Fake",
  "FakeAdapter",
  "FakeConcrete",
  "__future__.absolute_import",
  "__future__.division",
  "__future__.print_function",
  "_all_slices_inner",
  "_full_keys",
  "_sliced_shape",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "abc.abstractproperty",
  "adapt",
  "add",
  "bfunc",
  "biggus.ArrayStack.multidim_array_stack",
  "biggus.BroadcastArray._broadcast_numpy_array",
  "biggus.BroadcastArray._compute_broadcast_kwargs",
  "biggus.BroadcastArray.broadcast_arrays",
  "biggus.__file__",
  "biggus.engine.masked_arrays",
  "biggus.engine.ndarrays",
  "biggus.tests.__init__._KeyGen",
  "biggus.tests.mock.Mock",
  "biggus.tests.mock.patch",
  "biggus.tests.mock.sentinel.SHAPE",
  "biggus.tests.mock.sentinel.result",
  "biggus_fn",
  "clip_between",
  "collections",
  "collections.Iterable",
  "collections.Mapping",
  "collections.namedtuple",
  "contextlib.contextmanager",
  "copy",
  "copy.deepcopy",
  "divide",
  "floor_divide",
  "func",
  "functools",
  "functools.partial",
  "functools.wraps",
  "handler_class",
  "inspect",
  "inspect.getdoc",
  "itertools",
  "itertools.groupby",
  "itertools.permutations",
  "itertools.tee",
  "make_array",
  "masked_ufunc",
  "mock",
  "multiply",
  "nfunc",
  "np_fn",
  "numpy",
  "numpy.abs",
  "numpy.absolute",
  "numpy.add",
  "numpy.all",
  "numpy.arange",
  "numpy.arccos",
  "numpy.arccosh",
  "numpy.arcsin",
  "numpy.arcsinh",
  "numpy.arctan",
  "numpy.arctan2",
  "numpy.arctanh",
  "numpy.array",
  "numpy.array_equal",
  "numpy.asarray",
  "numpy.bitwise_and",
  "numpy.bitwise_or",
  "numpy.bitwise_xor",
  "numpy.bool",
  "numpy.broadcast",
  "numpy.broadcast_arrays",
  "numpy.ceil",
  "numpy.clip",
  "numpy.complex",
  "numpy.conj",
  "numpy.copysign",
  "numpy.cos",
  "numpy.cosh",
  "numpy.cumprod",
  "numpy.cumsum",
  "numpy.deg2rad",
  "numpy.diag",
  "numpy.divide",
  "numpy.dtype",
  "numpy.empty",
  "numpy.equal",
  "numpy.exp",
  "numpy.exp2",
  "numpy.expm1",
  "numpy.float",
  "numpy.float16",
  "numpy.float32",
  "numpy.float64",
  "numpy.floor",
  "numpy.floor_divide",
  "numpy.fmax",
  "numpy.fmin",
  "numpy.fmod",
  "numpy.greater",
  "numpy.greater_equal",
  "numpy.hypot",
  "numpy.int",
  "numpy.int16",
  "numpy.int32",
  "numpy.int8",
  "numpy.int_",
  "numpy.integer",
  "numpy.invert",
  "numpy.iscomplex",
  "numpy.isinf",
  "numpy.isnan",
  "numpy.isreal",
  "numpy.isscalar",
  "numpy.ldexp",
  "numpy.left_shift",
  "numpy.less",
  "numpy.less_equal",
  "numpy.lib.stride_tricks.as_strided",
  "numpy.linspace",
  "numpy.log",
  "numpy.log10",
  "numpy.log2",
  "numpy.logical_and",
  "numpy.logical_not",
  "numpy.logical_or",
  "numpy.logical_xor",
  "numpy.ma",
  "numpy.ma.MaskedArray",
  "numpy.ma.abs",
  "numpy.ma.add",
  "numpy.ma.arange",
  "numpy.ma.array",
  "numpy.ma.asarray",
  "numpy.ma.count",
  "numpy.ma.count_masked",
  "numpy.ma.data",
  "numpy.ma.empty",
  "numpy.ma.floor_divide",
  "numpy.ma.getmaskarray",
  "numpy.ma.isMaskedArray",
  "numpy.ma.mask",
  "numpy.ma.masked",
  "numpy.ma.masked_array",
  "numpy.ma.masked_equal",
  "numpy.ma.max",
  "numpy.ma.mean",
  "numpy.ma.min",
  "numpy.ma.multiply",
  "numpy.ma.nomask",
  "numpy.ma.power",
  "numpy.ma.sqrt",
  "numpy.ma.std",
  "numpy.ma.subtract",
  "numpy.ma.sum",
  "numpy.ma.testutils.assert_array_equal",
  "numpy.ma.true_divide",
  "numpy.ma.zeros",
  "numpy.max",
  "numpy.maximum",
  "numpy.mean",
  "numpy.min",
  "numpy.minimum",
  "numpy.modf",
  "numpy.multiply",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.ndindex",
  "numpy.negative",
  "numpy.newaxis",
  "numpy.newaxis.shape",
  "numpy.nextafter",
  "numpy.not_equal",
  "numpy.ones",
  "numpy.ones_like",
  "numpy.power",
  "numpy.prod",
  "numpy.product",
  "numpy.rad2deg",
  "numpy.random.random",
  "numpy.ravel_multi_index",
  "numpy.reciprocal",
  "numpy.require",
  "numpy.reshape",
  "numpy.right_shift",
  "numpy.rint",
  "numpy.rollaxis",
  "numpy.sctypes",
  "numpy.searchsorted",
  "numpy.sign",
  "numpy.signbit",
  "numpy.sin",
  "numpy.sinh",
  "numpy.sqrt",
  "numpy.square",
  "numpy.std",
  "numpy.subtract",
  "numpy.sum",
  "numpy.take",
  "numpy.tan",
  "numpy.tanh",
  "numpy.testing",
  "numpy.testing.assert_array_almost_equal",
  "numpy.testing.assert_array_equal",
  "numpy.true_divide",
  "numpy.trunc",
  "numpy.ufunc",
  "numpy.unique",
  "numpy.var",
  "numpy.zeros",
  "os",
  "os.path.abspath",
  "os.path.dirname",
  "os.path.exists",
  "os.path.join",
  "power",
  "six.moves.builtins",
  "six.moves.builtins.sum",
  "six.moves.filter",
  "six.moves.input",
  "six.moves.input.get",
  "six.moves.input.task_done",
  "six.moves.map",
  "six.moves.queue",
  "six.moves.queue.Queue",
  "six.moves.queue.put",
  "six.moves.range",
  "six.moves.zip",
  "size",
  "sub",
  "sys",
  "sys.version_info",
  "threading",
  "threading.Thread",
  "true_divide",
  "ufunc",
  "ufunc.__name__",
  "ufunc.nin",
  "unittest",
  "unittest.TestCase",
  "unittest.TestCase.assertRaisesRegexp",
  "unittest.main",
  "unittest.mock",
  "warnings",
  "warnings.catch_warnings",
  "warnings.simplefilter",
  "wrapped_fn"
 ],
 "deps": {
  "AllThreadedEngine": [],
  "BadArray": [],
  "Fake": [],
  "FakeAdapter": [],
  "FakeConcrete": [],
  "__future__": [],
  "_all_slices_inner": [],
  "_full_keys": [],
  "_sliced_shape": [],
  "abc": [],
  "adapt": [],
  "add": [],
  "bfunc": [],
  "biggus": [],
  "biggus_fn": [],
  "clip_between": [],
  "collections": [],
  "contextlib": [],
  "copy": [],
  "divide": [],
  "floor_divide": [],
  "func": [],
  "functools": [],
  "handler_class": [],
  "inspect": [],
  "itertools": [],
  "make_array": [],
  "masked_ufunc": [],
  "mock": [],
  "multiply": [],
  "nfunc": [],
  "np_fn": [],
  "numpy": [],
  "os": [],
  "pep8": [
   "pep8/conda-forge/noarch/pep8-1.7.1-py_0"
  ],
  "power": [],
  "six": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "size": [],
  "sub": [],
  "sys": [],
  "threading": [],
  "true_divide": [],
  "ufunc": [],
  "unittest": [],
  "warnings": [],
  "wrapped_fn": []
 }
}