{
 "bad": [
  "_migration_regex",
  "asset_solid",
  "callback",
  "collections.namedtuple",
  "contextlib.contextmanager",
  "dagster.AssetKey",
  "dagster.AssetMaterialization",
  "dagster.Field",
  "dagster.IntSource",
  "dagster.Output",
  "dagster.Selector",
  "dagster.StringSource",
  "dagster.check",
  "dagster.check.bool_param",
  "dagster.check.callable_param",
  "dagster.check.float_param",
  "dagster.check.inst_param",
  "dagster.check.int_param",
  "dagster.check.list_param",
  "dagster.check.numeric_param",
  "dagster.check.opt_str_param",
  "dagster.check.str_param",
  "dagster.core.errors.DagsterInstanceMigrationRequired",
  "dagster.core.events.log.EventRecord",
  "dagster.core.instance.DagsterInstance",
  "dagster.core.instance.DagsterInstance.from_config",
  "dagster.core.instance.DagsterInstance.from_ref",
  "dagster.core.instance.InstanceRef",
  "dagster.core.instance.InstanceRef.from_dir",
  "dagster.core.storage.event_log.AssetKeyTable",
  "dagster.core.storage.event_log.AssetKeyTable.c.asset_key",
  "dagster.core.storage.event_log.SqlEventLogStorage",
  "dagster.core.storage.event_log.SqlEventLogStorageMetadata",
  "dagster.core.storage.event_log.SqlEventLogStorageTable",
  "dagster.core.storage.event_log.SqlEventLogStorageTable.c.event",
  "dagster.core.storage.event_log.SqlEventLogStorageTable.c.id",
  "dagster.core.storage.event_log.SqlEventLogStorageTable.c.run_id",
  "dagster.core.storage.event_log.schema.AssetKeyTable",
  "dagster.core.storage.event_log.schema.AssetKeyTable.drop",
  "dagster.core.storage.event_log.schema.SqlEventLogStorageTable",
  "dagster.core.storage.event_log.schema.SqlEventLogStorageTable.drop",
  "dagster.core.storage.runs.DaemonHeartbeatsTable",
  "dagster.core.storage.runs.DaemonHeartbeatsTable.c.daemon_type",
  "dagster.core.storage.runs.RunStorageSqlMetadata",
  "dagster.core.storage.runs.RunStorageSqlMetadata.drop_all",
  "dagster.core.storage.runs.SqlRunStorage",
  "dagster.core.storage.schedules.ScheduleStorageSqlMetadata",
  "dagster.core.storage.schedules.ScheduleStorageSqlMetadata.drop_all",
  "dagster.core.storage.schedules.SqlScheduleStorage",
  "dagster.core.storage.sql.create_engine",
  "dagster.core.storage.sql.get_alembic_config",
  "dagster.core.storage.sql.handle_schema_errors",
  "dagster.core.storage.sql.run_alembic_upgrade",
  "dagster.core.storage.sql.stamp_alembic_rev",
  "dagster.core.storage.tags.PARTITION_NAME_TAG",
  "dagster.core.storage.tags.PARTITION_SET_TAG",
  "dagster.core.test_utils.environ",
  "dagster.core.test_utils.instance_for_test",
  "dagster.core.utils.check_dagster_package_version",
  "dagster.execute_pipeline",
  "dagster.pipeline",
  "dagster.serdes.ConfigurableClass",
  "dagster.serdes.ConfigurableClassData",
  "dagster.serdes.deserialize_json_to_dagster_namedtuple",
  "dagster.serdes.serialize_dagster_namedtuple",
  "dagster.solid",
  "dagster.utils.file_relative_path",
  "dagster.utils.test.postgres_instance.TestPostgresInstance",
  "dagster.utils.test.postgres_instance.TestPostgresInstance.docker_service_up_or_skip",
  "dagster.utils.test.postgres_instance.TestPostgresInstance.get_hostname",
  "dagster.utils.test.schedule_storage.TestScheduleStorage",
  "dagster.utils.utc_datetime_from_timestamp",
  "dagster_postgres.__init__.__version__",
  "dagster_postgres.event_log.PostgresEventLogStorage.create_clean_storage",
  "dagster_postgres.run_storage.PostgresRunStorage.create_clean_storage",
  "dagster_postgres.schedule_storage.PostgresScheduleStorage.create_clean_storage",
  "dagster_tests.core_tests.storage_tests.utils.event_log_storage.TestEventLogStorage",
  "dagster_tests.core_tests.storage_tests.utils.event_log_storage.create_test_event_log_record",
  "dagster_tests.core_tests.storage_tests.utils.run_storage.TestRunStorage",
  "errno",
  "errno.EINTR",
  "fcntl",
  "fcntl.F_GETFL",
  "fcntl.F_SETFL",
  "fcntl.fcntl",
  "int.from_bytes",
  "logging",
  "logging.warning",
  "noop_solid",
  "os",
  "os.O_NONBLOCK",
  "os.environ.copy",
  "os.path.join",
  "os.pipe",
  "os.read",
  "psycopg2",
  "psycopg2.DatabaseError",
  "psycopg2.IntegrityError",
  "psycopg2.OperationalError",
  "psycopg2.ProgrammingError",
  "psycopg2.connect",
  "psycopg2.errorcodes",
  "psycopg2.errorcodes.DUPLICATE_TABLE",
  "psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT",
  "pytest",
  "pytest.fixture",
  "pytest.mark.skip",
  "pytest.raises",
  "re",
  "re.escape",
  "select",
  "select.error",
  "select.select",
  "signal",
  "signal.Signals",
  "signal.set_wakeup_fd",
  "signal.signal",
  "simple_solid",
  "sqlalchemy",
  "sqlalchemy.create_engine",
  "sqlalchemy.dialects.postgresql.insert",
  "sqlalchemy.engine.Engine",
  "sqlalchemy.exc.DatabaseError",
  "sqlalchemy.exc.IntegrityError",
  "sqlalchemy.exc.OperationalError",
  "sqlalchemy.exc.ProgrammingError",
  "sqlalchemy.pool.NullPool",
  "sqlalchemy.select",
  "subprocess",
  "subprocess.check_call",
  "sys",
  "sys.byteorder",
  "sys.platform",
  "tempfile",
  "tempfile.TemporaryDirectory",
  "threading",
  "threading.Event",
  "threading.Thread",
  "time",
  "time.sleep",
  "urllib.parse.quote_plus"
 ],
 "deps": {
  "_migration_regex": [],
  "asset_solid": [],
  "callback": [],
  "collections": [],
  "contextlib": [],
  "dagster": [],
  "dagster_postgres": [],
  "dagster_tests": [],
  "errno": [],
  "fcntl": [],
  "int": [],
  "logging": [],
  "noop_solid": [],
  "os": [],
  "psycopg2": [],
  "pytest": [],
  "re": [],
  "select": [],
  "signal": [],
  "simple_solid": [],
  "sqlalchemy": [],
  "subprocess": [],
  "sys": [],
  "tempfile": [],
  "threading": [],
  "time": [],
  "urllib": [],
  "yaml": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ]
 }
}