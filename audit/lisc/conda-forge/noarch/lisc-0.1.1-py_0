{
 "bad": [
  "Articles",
  "ArticlesAll",
  "BaseArticles",
  "Dependency",
  "EUtils",
  "MetaData",
  "OpenCitations",
  "SCDB",
  "URLs",
  "bs4.BeautifulSoup",
  "bs4.element.ResultSet",
  "bs4.element.Tag",
  "catch_none",
  "check_args",
  "check_directory",
  "check_ext",
  "check_file_structure",
  "collect_citations",
  "collect_counts",
  "collect_info",
  "collect_words",
  "collections.Counter",
  "collections.namedtuple",
  "combine_lists",
  "compute_association_index",
  "compute_normalization",
  "conv_freqs",
  "convert_string",
  "copy.deepcopy",
  "count_elements",
  "create_wordcloud",
  "datetime.datetime.now",
  "extract",
  "extract_add_info",
  "func",
  "functools.wraps",
  "get_cmap",
  "get_max_length",
  "get_wait_time",
  "ids_to_str",
  "importlib.import_module",
  "join",
  "json.dump",
  "json.loads",
  "lisc.analysis.counts.compute_association_index",
  "lisc.analysis.counts.compute_normalization",
  "lisc.collect.citations.get_citation_data",
  "lisc.collect.collect_counts",
  "lisc.collect.collect_words",
  "lisc.collect.counts.get_count",
  "lisc.collect.info.get_db_info",
  "lisc.collect.process.extract",
  "lisc.collect.process.ids_to_str",
  "lisc.collect.process.process_authors",
  "lisc.collect.process.process_ids",
  "lisc.collect.process.process_pub_date",
  "lisc.collect.utils.join",
  "lisc.collect.utils.mk_comp",
  "lisc.collect.utils.mk_term",
  "lisc.collect.words.extract_add_info",
  "lisc.collect.words.get_articles",
  "lisc.core.decorators.catch_none",
  "lisc.core.errors.InconsistentDataError",
  "lisc.core.modutils.Dependency",
  "lisc.core.modutils.safe_import",
  "lisc.data.Articles",
  "lisc.data.ArticlesAll",
  "lisc.data.Term",
  "lisc.data.articles.Articles",
  "lisc.data.articles_all._count_authors",
  "lisc.data.articles_all._count_end_authors",
  "lisc.data.articles_all._fix_author_names",
  "lisc.data.base_articles.BaseArticles",
  "lisc.data.base_articles.BaseArticles.__init__",
  "lisc.data.meta_data.MetaData",
  "lisc.data.term.Term",
  "lisc.data.utils.combine_lists",
  "lisc.data.utils.convert_string",
  "lisc.data.utils.count_elements",
  "lisc.data.utils.lower_list",
  "lisc.objects.Counts",
  "lisc.objects.Words",
  "lisc.objects.base.Base",
  "lisc.objects.base.Base.__init__",
  "lisc.objects.counts.Counts",
  "lisc.objects.utils.get_max_length",
  "lisc.objects.utils.wrap",
  "lisc.objects.words.Words",
  "lisc.plts.counts.hier",
  "lisc.plts.counts.plt",
  "lisc.plts.counts.sns",
  "lisc.plts.utils.check_args",
  "lisc.plts.utils.check_ax",
  "lisc.plts.utils.get_cmap",
  "lisc.plts.utils.plt",
  "lisc.plts.utils.savefig",
  "lisc.plts.utils.sns",
  "lisc.plts.wordcloud.conv_freqs",
  "lisc.plts.wordcloud.create_wordcloud",
  "lisc.plts.wordcloud.wc",
  "lisc.plts.words.plt",
  "lisc.requester.Requester",
  "lisc.tests.conftest.plt",
  "lisc.tests.test_objects_counts.check_funcs",
  "lisc.tests.test_objects_counts.drop_data",
  "lisc.tests.utils.TestDB",
  "lisc.tests.utils.create_files",
  "lisc.tests.utils.load_arts",
  "lisc.tests.utils.load_arts_all",
  "lisc.tests.utils.load_base",
  "lisc.tests.utils.optional_test",
  "lisc.tests.utils.plot_test",
  "lisc.tests.utils.plt",
  "lisc.urls.eutils.EUtils",
  "lisc.urls.eutils.get_wait_time",
  "lisc.urls.open_citations.OpenCitations",
  "lisc.urls.urls.URLs",
  "lisc.urls.urls.URLs.__init__",
  "lisc.urls.utils.make_segments",
  "lisc.urls.utils.make_settings",
  "lisc.urls.utils.prepend",
  "lisc.utils.db.SCDB",
  "lisc.utils.db.SCDB.__init__",
  "lisc.utils.db.STRUCTURE",
  "lisc.utils.db.check_directory",
  "lisc.utils.db.check_file_structure",
  "lisc.utils.db.create_file_structure",
  "lisc.utils.io.check_ext",
  "lisc.utils.io.load_terms_file",
  "lisc.utils.io.parse_json_data",
  "load_object",
  "load_terms_file",
  "lower_list",
  "make_segments",
  "make_settings",
  "mk_comp",
  "mk_term",
  "nltk.FreqDist",
  "nltk.corpus.stopwords.words",
  "nltk.download",
  "nltk.word_tokenize",
  "numpy.argmax",
  "numpy.array",
  "numpy.array_equal",
  "numpy.fill_diagonal",
  "numpy.ones",
  "numpy.tile",
  "numpy.where",
  "numpy.zeros",
  "os.getcwd",
  "os.listdir",
  "os.mkdir",
  "os.path.basename",
  "os.path.exists",
  "os.path.join",
  "os.sep",
  "os.walk",
  "pickle.dump",
  "pickle.load",
  "pkg_resources.resource_filename",
  "plot_clustermap",
  "plot_dendrogram",
  "plot_matrix",
  "plot_wordcloud",
  "plot_years",
  "prepend",
  "process_authors",
  "process_ids",
  "process_pub_date",
  "py.test.raises",
  "pytest.fixture",
  "random.randint",
  "requests.get",
  "save_object",
  "shutil.rmtree",
  "test_1",
  "test_2",
  "time.sleep",
  "time.strftime",
  "time.time",
  "wrap"
 ],
 "deps": {
  "Articles": [],
  "ArticlesAll": [],
  "BaseArticles": [],
  "Dependency": [],
  "EUtils": [],
  "MetaData": [],
  "OpenCitations": [],
  "SCDB": [],
  "URLs": [],
  "bs4": [],
  "catch_none": [],
  "check_args": [],
  "check_directory": [],
  "check_ext": [],
  "check_file_structure": [],
  "collect_citations": [],
  "collect_counts": [],
  "collect_info": [],
  "collect_words": [],
  "collections": [],
  "combine_lists": [],
  "compute_association_index": [],
  "compute_normalization": [],
  "conv_freqs": [],
  "convert_string": [],
  "copy": [],
  "count_elements": [],
  "create_wordcloud": [],
  "datetime": [],
  "extract": [],
  "extract_add_info": [],
  "func": [],
  "functools": [],
  "get_cmap": [],
  "get_max_length": [],
  "get_wait_time": [],
  "ids_to_str": [],
  "importlib": [],
  "join": [],
  "json": [],
  "lisc": [],
  "load_object": [],
  "load_terms_file": [],
  "lower_list": [],
  "make_segments": [],
  "make_settings": [],
  "mk_comp": [],
  "mk_term": [],
  "nltk": [],
  "numpy": [],
  "os": [],
  "pickle": [],
  "pkg_resources": [],
  "plot_clustermap": [],
  "plot_dendrogram": [],
  "plot_matrix": [],
  "plot_wordcloud": [],
  "plot_years": [],
  "prepend": [],
  "process_authors": [],
  "process_ids": [],
  "process_pub_date": [],
  "py": [],
  "pytest": [],
  "random": [],
  "requests": [],
  "save_object": [],
  "shutil": [],
  "test_1": [],
  "test_2": [],
  "time": [],
  "wrap": []
 }
}