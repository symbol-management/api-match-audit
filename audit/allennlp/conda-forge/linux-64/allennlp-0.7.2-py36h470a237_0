{
 "bad": [
  "FakeEvaluate",
  "FakeModel",
  "FakeTable",
  "FakeWorld",
  "MetaDataCheckWrapper",
  "MyVocabulary",
  "Net",
  "QIterable",
  "Scorer",
  "Scorer.b_cubed",
  "Scorer.ceafe",
  "Scorer.muc",
  "WaitingIterator",
  "__future__.print_function",
  "_do_layer_norm",
  "_get_combination_dim",
  "_highway_lstm_layer.ffi",
  "_highway_lstm_layer.lib",
  "_jsonnet",
  "_jsonnet.evaluate_file",
  "_jsonnet.evaluate_snippet",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "accuracy",
  "accuracy.correct_count",
  "accuracy.get_metric",
  "accuracy.reset",
  "accuracy.total_count",
  "activation",
  "add_matching_result",
  "allennlp.__file__",
  "allennlp.commands.train.Trainer.from_params",
  "allennlp.common.Params.from_file",
  "allennlp.common.Registrable._registry",
  "allennlp.common.Registrable._registry.items",
  "allennlp.common.Registrable._registry.values",
  "allennlp.common.Tqdm.tqdm",
  "allennlp.common.configuration.BASE_CONFIG",
  "allennlp.common.registrable.Registrable._registry",
  "allennlp.common.registrable.Registrable._registry.get",
  "allennlp.common.testing.AllenNlpTestCase.FIXTURES_ROOT",
  "allennlp.common.testing.AllenNlpTestCase.PROJECT_ROOT",
  "allennlp.custom_extensions._ext.highway_lstm_layer.__init__.__all__",
  "allennlp.custom_extensions._ext.highway_lstm_layer.__init__._import_symbols",
  "allennlp.custom_extensions._ext.highway_lstm_layer.highway_lstm_backward_cuda",
  "allennlp.custom_extensions._ext.highway_lstm_layer.highway_lstm_forward_cuda",
  "allennlp.data.DataIterator.from_params",
  "allennlp.data.DatasetReader.from_params",
  "allennlp.data.DatasetReader.register",
  "allennlp.data.Vocabulary.by_name",
  "allennlp.data.Vocabulary.from_instances",
  "allennlp.data.Vocabulary.from_params",
  "allennlp.data.Vocabulary.list_available",
  "allennlp.data.dataset_readers.DatasetReader.from_params",
  "allennlp.data.dataset_readers.QuACReader.from_params",
  "allennlp.data.dataset_readers.SquadReader.from_params",
  "allennlp.data.dataset_readers.StanfordSentimentTreeBankDatasetReader.from_params",
  "allennlp.data.dataset_readers.TriviaQaReader.from_params",
  "allennlp.data.dataset_readers.WikiTablesDatasetReader.from_params",
  "allennlp.data.dataset_readers.dataset_reader.DatasetReader.by_name",
  "allennlp.data.dataset_readers.dataset_reader.DatasetReader.from_params",
  "allennlp.data.dataset_readers.dataset_reader.DatasetReader.register",
  "allennlp.data.fields.LabelField._already_warned_namespaces",
  "allennlp.data.fields.MultiLabelField._already_warned_namespaces",
  "allennlp.data.fields.SequenceLabelField._already_warned_namespaces",
  "allennlp.data.instance.count_vocab_items",
  "allennlp.data.iterators.BasicIterator.from_params",
  "allennlp.data.iterators.BucketIterator.from_params",
  "allennlp.data.iterators.DataIterator.from_params",
  "allennlp.data.iterators.data_iterator.DataIterator.by_name",
  "allennlp.data.iterators.data_iterator.DataIterator.from_params",
  "allennlp.data.iterators.data_iterator.DataIterator.register",
  "allennlp.data.token_indexers.elmo_indexer.ELMoCharacterMapper.bos_token",
  "allennlp.data.token_indexers.elmo_indexer.ELMoCharacterMapper.eos_token",
  "allennlp.data.token_indexers.token_indexer.TokenIndexer.by_name",
  "allennlp.data.token_indexers.token_indexer.TokenIndexer.register",
  "allennlp.data.tokenizers.WordTokenizer.from_params",
  "allennlp.data.tokenizers.tokenizer.Tokenizer.by_name",
  "allennlp.data.tokenizers.tokenizer.Tokenizer.register",
  "allennlp.data.tokenizers.word_splitter.WordSplitter.from_params",
  "allennlp.data.vocabulary.Vocabulary.register",
  "allennlp.models.BidirectionalAttentionFlow.get_best_span",
  "allennlp.models.Model.from_params",
  "allennlp.models.Model.load",
  "allennlp.models.model.Model.from_params",
  "allennlp.models.model.Model.register",
  "allennlp.models.simple_tagger.SimpleTagger.from_params",
  "allennlp.models.simple_tagger.__file__",
  "allennlp.modules.Attention.by_name",
  "allennlp.modules.BiMpmMatching.from_params",
  "allennlp.modules.Elmo.from_params",
  "allennlp.modules.FeedForward.from_params",
  "allennlp.modules.Maxout.from_params",
  "allennlp.modules.Seq2SeqEncoder.from_params",
  "allennlp.modules.Seq2VecEncoder.from_params",
  "allennlp.modules.TextFieldEmbedder.from_params",
  "allennlp.modules.attention.BilinearAttention.from_params",
  "allennlp.modules.attention.attention.Attention.from_params",
  "allennlp.modules.attention.attention.Attention.register",
  "allennlp.modules.attention.legacy_attention.Attention.register",
  "allennlp.modules.attention.legacy_attention.LegacyAttention.from_params",
  "allennlp.modules.matrix_attention.BilinearMatrixAttention.from_params",
  "allennlp.modules.matrix_attention.matrix_attention.MatrixAttention.from_params",
  "allennlp.modules.matrix_attention.matrix_attention.MatrixAttention.register",
  "allennlp.modules.seq2seq_encoders.IntraSentenceAttentionEncoder.from_params",
  "allennlp.modules.seq2seq_encoders.MultiHeadSelfAttention.from_params",
  "allennlp.modules.seq2seq_encoders.Seq2SeqEncoder.from_params",
  "allennlp.modules.seq2seq_encoders.__init__._Seq2SeqWrapper",
  "allennlp.modules.seq2seq_encoders.__init__.logger",
  "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder.by_name",
  "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder.register",
  "allennlp.modules.seq2vec_encoders.BagOfEmbeddingsEncoder.from_params",
  "allennlp.modules.seq2vec_encoders.CnnEncoder.from_params",
  "allennlp.modules.seq2vec_encoders.__init__._Seq2VecWrapper",
  "allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder.by_name",
  "allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder.from_params",
  "allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder.register",
  "allennlp.modules.similarity_functions.BilinearSimilarity.from_params",
  "allennlp.modules.similarity_functions.CosineSimilarity.from_params",
  "allennlp.modules.similarity_functions.DotProductSimilarity.from_params",
  "allennlp.modules.similarity_functions.LinearSimilarity.from_params",
  "allennlp.modules.similarity_functions.MultiHeadedSimilarity.from_params",
  "allennlp.modules.similarity_functions.SimilarityFunction.by_name",
  "allennlp.modules.similarity_functions.similarity_function.SimilarityFunction.register",
  "allennlp.modules.span_extractors.SpanExtractor.from_params",
  "allennlp.modules.span_extractors.span_extractor.SpanExtractor.register",
  "allennlp.modules.text_field_embedders.BasicTextFieldEmbedder.from_params",
  "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder.by_name",
  "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder.register",
  "allennlp.modules.token_embedders.ElmoTokenEmbedder.from_params",
  "allennlp.modules.token_embedders.Embedding.from_params",
  "allennlp.modules.token_embedders.OpenaiTransformerEmbedder.from_params",
  "allennlp.modules.token_embedders.TokenCharactersEncoder.from_params",
  "allennlp.modules.token_embedders.token_embedder.TokenEmbedder.by_name",
  "allennlp.modules.token_embedders.token_embedder.TokenEmbedder.from_params",
  "allennlp.modules.token_embedders.token_embedder.TokenEmbedder.register",
  "allennlp.nn.Activation.by_name",
  "allennlp.nn.Initializer.by_name",
  "allennlp.nn.Initializer.from_params",
  "allennlp.nn.InitializerApplicator.from_params",
  "allennlp.nn.RegularizerApplicator.from_params",
  "allennlp.nn.regularizers.RegularizerApplicator.from_params",
  "allennlp.nn.regularizers.regularizer.Regularizer.by_name",
  "allennlp.nn.regularizers.regularizer.Regularizer.register",
  "allennlp.nn.util.pad_sequence_to_length",
  "allennlp.predictors.Predictor.from_archive",
  "allennlp.predictors.Predictor.register",
  "allennlp.predictors.bidaf.__file__",
  "allennlp.predictors.predictor.Predictor.register",
  "allennlp.semparse.contexts.TableQuestionContext.normalize_string",
  "allennlp.semparse.contexts.TableQuestionContext.read_from_file",
  "allennlp.semparse.contexts.TableQuestionKnowledgeGraph._get_cell_parts",
  "allennlp.semparse.contexts.TableQuestionKnowledgeGraph._get_numbers_from_tokens",
  "allennlp.semparse.contexts.TableQuestionKnowledgeGraph._should_split_column_cells",
  "allennlp.semparse.contexts.TableQuestionKnowledgeGraph.read_from_file",
  "allennlp.semparse.contexts.TableQuestionKnowledgeGraph.read_from_json",
  "allennlp.semparse.contexts.TableQuestionKnowledgeGraph.read_from_lines",
  "allennlp.semparse.contexts.quarel_utils.LEXICAL_CUES",
  "allennlp.semparse.type_declarations.wikitables_lambda_dcs.ARG_EXTREME_TYPE.resolve",
  "allennlp.semparse.type_declarations.wikitables_lambda_dcs.COUNT_TYPE.resolve",
  "allennlp.semparse.type_declarations.wikitables_lambda_dcs.REVERSE_TYPE.resolve",
  "allennlp.semparse.type_declarations.wikitables_lambda_dcs.name_mapper.get_alias",
  "allennlp.state_machines.BeamSearch.from_params",
  "allennlp.training.Trainer.from_params",
  "allennlp.training.learning_rate_schedulers.LearningRateScheduler.by_name",
  "allennlp.training.metrics.ConllCorefScores.get_predicted_clusters",
  "allennlp.training.metrics.EvalbBracketingScorer.clean_evalb",
  "allennlp.training.metrics.EvalbBracketingScorer.compile_evalb",
  "allennlp.training.metrics.Metric.from_params",
  "allennlp.training.metrics.metric.Metric.register",
  "allennlp.training.trainer.Trainer.by_name",
  "allennlp.training.trainer.Trainer.list_available",
  "argparse",
  "argparse.ArgumentParser",
  "argparse.FileType",
  "argparse.Namespace",
  "argparse._SubParsersAction",
  "assemble_subtree",
  "atexit",
  "atexit.register",
  "attention",
  "attention._normalize",
  "attention._similarity_function.__class__.__name__",
  "attribute_function",
  "augmented_lstm",
  "backward_layer",
  "bidaf_ensemble",
  "bilinear",
  "bilinear._bias",
  "bilinear._weight_matrix",
  "bilinear._weight_matrix.size",
  "block",
  "boto3",
  "boto3.client",
  "boto3.resource",
  "botocore.exceptions.ClientError",
  "bz2",
  "char_conv_i",
  "check_num_tokens",
  "cnn_encoder",
  "codecs",
  "codecs.open",
  "collections",
  "collections.Counter",
  "collections.MutableMapping",
  "collections.OrderedDict",
  "collections.abc.Sequence",
  "collections.defaultdict",
  "collections.deque",
  "collections.namedtuple",
  "comparison_function",
  "conllu.parser.DEFAULT_FIELDS",
  "conllu.parser.parse_line",
  "constructor",
  "conv",
  "conv.bias.data.copy_",
  "conv.bias.requires_grad",
  "conv.weight.data.copy_",
  "conv.weight.data.shape",
  "conv.weight.requires_grad",
  "convolution",
  "convolution_layer",
  "copy",
  "copy.copy",
  "copy.deepcopy",
  "copy_token_at_index",
  "cosine_similarity",
  "count_function",
  "covariance",
  "covariance.get_metric",
  "covariance.reset",
  "create_parameter",
  "csv",
  "csv.QUOTE_NONE",
  "csv.reader",
  "csv.writer",
  "ctypes.c_int64",
  "ctypes.c_uint64",
  "ctypes.c_void_p",
  "ctypes.cast",
  "ctypes.py_object",
  "ctypes.sizeof",
  "datetime",
  "datetime.datetime",
  "datetime.datetime.fromtimestamp",
  "datetime.datetime.now",
  "datetime.timedelta",
  "defaultdict",
  "dict.__setitem__",
  "difflib",
  "difflib.SequenceMatcher",
  "digit_to_query_time",
  "distributed",
  "distributed_embedding",
  "dot_product",
  "dropout",
  "editdistance",
  "editdistance.eval",
  "elmo",
  "elmo_bilm",
  "elmo_bilm.eval",
  "elmo_token_embedder",
  "embedder",
  "embedder.named_parameters",
  "embedding",
  "embedding.weight",
  "embedding.weight.grad",
  "embedding.weight.grad.coalesce",
  "embedding_layer",
  "embedding_layer.weight.data",
  "embedding_layer.weight.data.numpy",
  "encoder",
  "encoder._states",
  "evalb_scorer",
  "evalb_scorer.get_metric",
  "extract_bmes_tag_label",
  "extractor",
  "extractor._end_sentinel.data",
  "extractor._start_sentinel.data",
  "extractor.get_input_dim",
  "extractor.get_output_dim",
  "f",
  "f1_measure",
  "f1_measure._false_negatives",
  "f1_measure._false_positives",
  "f1_measure._true_negatives",
  "f1_measure._true_positives",
  "f1_measure.get_metric",
  "f1_measure.reset",
  "fe",
  "feature_extractor",
  "feedforward",
  "feedforward_layer_norm",
  "filecmp",
  "filecmp.cmp",
  "flaky.flaky",
  "flask",
  "flask.Flask",
  "flask.Response",
  "flask.jsonify",
  "flask.request",
  "flask.request.args.get",
  "flask.request.get_json",
  "flask.request.method",
  "flask.send_file",
  "flask.send_from_directory",
  "flask.testing",
  "flask.testing.FlaskClient",
  "flask_cors.CORS",
  "forward_layer",
  "from_list",
  "ftfy",
  "ftfy.fix_text",
  "func",
  "function",
  "functools.partial",
  "functools.wraps",
  "get_approximate_times",
  "get_buffer",
  "get_date_from_utterance",
  "get_file_info",
  "get_tag",
  "gevent.pywsgi.WSGIServer",
  "glob",
  "glob.glob",
  "gzip",
  "gzip.open",
  "h5py",
  "h5py.File",
  "h5py.special_dtype",
  "has_tensor",
  "hashlib.sha256",
  "highway",
  "implementation",
  "importlib",
  "importlib.import_module",
  "importlib.invalidate_caches",
  "init_and_restore_scheduler",
  "initializer",
  "initializers",
  "inspect",
  "inspect.Parameter.empty",
  "inspect.getfullargspec",
  "inspect.isclass",
  "inspect.isfunction",
  "inspect.ismethod",
  "inspect.signature",
  "instances",
  "io",
  "io.BytesIO",
  "io.StringIO",
  "io.TextIOWrapper",
  "is_prevent",
  "iterator",
  "iterator._batch_size",
  "iterator._create_batches",
  "iterator.index_with",
  "iterator2",
  "itertools",
  "itertools.chain",
  "itertools.count",
  "itertools.groupby",
  "itertools.islice",
  "itertools.product",
  "itertools.zip_longest",
  "json",
  "json.dump",
  "json.dumps",
  "json.load",
  "json.loads",
  "layer",
  "layer_norm",
  "linear",
  "linear._bias",
  "linear._weight_vector",
  "linear._weight_vector.size",
  "loaded_model",
  "log_recursively",
  "logging",
  "logging.DEBUG",
  "logging.FileHandler",
  "logging.Formatter",
  "logging.INFO",
  "logging.WARNING",
  "logging.basicConfig",
  "logging.getLogger",
  "logging.info",
  "logging.warning",
  "lower",
  "lstm",
  "lstm._states.size",
  "lstm.lstm_layers",
  "lstm.state_linearity.bias.data.numpy",
  "lzma",
  "mae",
  "mae.get_metric",
  "mae.reset",
  "make_sparse",
  "make_state",
  "mark_tag",
  "math",
  "math.ceil",
  "math.exp",
  "math.floor",
  "math.isinf",
  "math.isnan",
  "math.log",
  "math.pi",
  "math.sqrt",
  "matplotlib",
  "matplotlib.pyplot",
  "matplotlib.pyplot.plot",
  "matplotlib.pyplot.savefig",
  "matplotlib.pyplot.xlabel",
  "matplotlib.pyplot.xscale",
  "matplotlib.pyplot.ylabel",
  "matplotlib.use",
  "maxout",
  "method",
  "metric",
  "metric._count",
  "metric._entropy",
  "metric._false_negatives",
  "metric._false_negatives.keys",
  "metric._false_positives",
  "metric._false_positives.keys",
  "metric._ignore_classes",
  "metric._label_vocabulary",
  "metric._true_positives",
  "metric._true_positives.keys",
  "metric.get_metric",
  "metric.reset",
  "mixture",
  "mixture.gamma.data",
  "mixture.scalar_parameters",
  "mixture.scalar_parameters.data",
  "ml_bw",
  "ml_bw.get_output_dim",
  "ml_fw",
  "ml_fw.get_output_dim",
  "model",
  "model.named_parameters",
  "model.zero_grad",
  "moto.mock_s3",
  "multiprocessing",
  "multiprocessing.Process",
  "multiprocessing.get_logger",
  "nbconvert.preprocessors.ExecutePreprocessor",
  "nbconvert.preprocessors.execute.CellExecutionError",
  "nbformat",
  "nbformat.read",
  "neighbor_encoder",
  "new_embedder",
  "nlp",
  "nltk.Tree",
  "nltk.Tree.fromstring",
  "nltk.bigrams",
  "nltk.corpus.reader.bracket_parse.BracketParseCorpusReader",
  "nltk.metrics.distance.edit_distance",
  "nltk.ngrams",
  "nltk.sem.logic.ANY_TYPE",
  "nltk.sem.logic.ANY_TYPE.str",
  "nltk.sem.logic.ApplicationExpression",
  "nltk.sem.logic.BasicType",
  "nltk.sem.logic.ComplexType",
  "nltk.sem.logic.ComplexType.__hash__",
  "nltk.sem.logic.ConstantExpression",
  "nltk.sem.logic.EntityType",
  "nltk.sem.logic.Expression",
  "nltk.sem.logic.LambdaExpression",
  "nltk.sem.logic.LogicParser",
  "nltk.sem.logic.TRUTH_TYPE",
  "nltk.sem.logic.Type",
  "nltk.sem.logic.Variable",
  "nltk.stem.PorterStemmer",
  "nltk.tree.Tree",
  "nltk.tree.Tree.fromstring",
  "node_constuctor",
  "number_comparison",
  "numpy",
  "numpy.all",
  "numpy.allclose",
  "numpy.arange",
  "numpy.argmax",
  "numpy.array",
  "numpy.array_equal",
  "numpy.asarray",
  "numpy.average",
  "numpy.clip",
  "numpy.concatenate",
  "numpy.corrcoef",
  "numpy.cos",
  "numpy.cov",
  "numpy.cumsum",
  "numpy.dot",
  "numpy.equal",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.eye",
  "numpy.float32",
  "numpy.inf",
  "numpy.int32",
  "numpy.isnan",
  "numpy.linalg.norm",
  "numpy.load",
  "numpy.log",
  "numpy.max",
  "numpy.mean",
  "numpy.min",
  "numpy.ndarray",
  "numpy.number",
  "numpy.ones",
  "numpy.pi",
  "numpy.prod",
  "numpy.random.rand",
  "numpy.random.randint",
  "numpy.random.randn",
  "numpy.random.seed",
  "numpy.save",
  "numpy.split",
  "numpy.sqrt",
  "numpy.stack",
  "numpy.std",
  "numpy.sum",
  "numpy.testing.assert_allclose",
  "numpy.testing.assert_almost_equal",
  "numpy.testing.assert_approx_equal",
  "numpy.testing.assert_array_almost_equal",
  "numpy.testing.assert_array_equal",
  "numpy.testing.assert_array_less",
  "numpy.testing.assert_equal",
  "numpy.transpose",
  "numpy.triu",
  "numpy.zeros",
  "numpydoc.docscrape.NumpyDocString",
  "object.__init__",
  "operator",
  "order_dict",
  "os",
  "os.chdir",
  "os.environ",
  "os.environ.get",
  "os.getcwd",
  "os.getenv",
  "os.listdir",
  "os.makedirs",
  "os.mkdir",
  "os.pardir",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.isdir",
  "os.path.join",
  "os.path.realpath",
  "os.path.split",
  "os.path.splitext",
  "os.remove",
  "os.stat",
  "os.system",
  "os.walk",
  "overrides.overrides",
  "params",
  "params_get",
  "parsimonious.Grammar",
  "parsimonious.ParseError",
  "parsimonious.exceptions.ParseError",
  "parsimonious.exceptions.UndefinedLabel",
  "parsimonious.exceptions.VisitationError",
  "parsimonious.expressions.Expression",
  "parsimonious.expressions.Literal",
  "parsimonious.expressions.OneOf",
  "parsimonious.expressions.Sequence",
  "parsimonious.grammar.Grammar",
  "parsimonious.nodes.Node",
  "parsimonious.nodes.NodeVisitor",
  "pathlib",
  "pathlib.Path",
  "pathlib.Path.home",
  "pearson_correlation",
  "pearson_correlation.get_metric",
  "pearson_correlation.reset",
  "pkgutil",
  "pkgutil.walk_packages",
  "pm_map_match_to_query_value",
  "pop_replace_append",
  "process_stack",
  "projection",
  "pruner",
  "pytest",
  "pytest.approx",
  "pytest.main",
  "pytest.mark.java",
  "pytest.mark.parametrize",
  "pytest.mark.skip",
  "pytest.mark.skipif",
  "pytest.mark.xfail",
  "pytest.raises",
  "pytest.warns",
  "pytorch_lstm",
  "pytorch_pretrained_bert.modeling.BertConfig",
  "pytorch_pretrained_bert.modeling.BertModel",
  "pytorch_pretrained_bert.optimization.BertAdam",
  "pytorch_pretrained_bert.tokenization.BasicTokenizer",
  "pytorch_pretrained_bert.tokenization.BertTokenizer",
  "random",
  "random.seed",
  "random.shuffle",
  "random.uniform",
  "re",
  "re.U",
  "re.compile",
  "re.escape",
  "re.findall",
  "re.finditer",
  "re.fullmatch",
  "re.match",
  "re.search",
  "re.split",
  "re.sub",
  "recall",
  "recall.correct_count",
  "recall.get_metric",
  "recall.total_count",
  "recurse",
  "regularizer",
  "regularizer_type",
  "remove_articles",
  "remove_punc",
  "replace_label",
  "requests",
  "requests.get",
  "requests.head",
  "resource",
  "responses",
  "responses.GET",
  "responses.HEAD",
  "responses.activate",
  "responses.add",
  "responses.add_callback",
  "responses.calls",
  "sampled_softmax",
  "sanitizer",
  "scalar_mix",
  "scatter_map",
  "scorer",
  "scorer.get_metric",
  "set.intersection",
  "set_comparison",
  "shutil",
  "shutil.copy",
  "shutil.copyfile",
  "shutil.copyfileobj",
  "shutil.rmtree",
  "similarity",
  "simple_transition_system.SimpleState",
  "simple_transition_system.SimpleTransitionFunction",
  "six.reraise",
  "sklearn.utils.linear_assignment_.linear_assignment",
  "softmax",
  "spacy",
  "spacy.cli.download.download",
  "spacy.lang.en.tag_map.TAG_MAP",
  "spacy.language.Language",
  "spacy.load",
  "spacy.tokens.Token",
  "sqlite3",
  "sqlite3.Cursor",
  "sqlite3.Error",
  "sqlite3.connect",
  "sqlparse",
  "sqlparse.format",
  "str.isdigit",
  "string",
  "string.Template",
  "string.punctuation",
  "subclass",
  "subclass._module_class",
  "submodel",
  "subprocess",
  "subprocess.PIPE",
  "subprocess.Popen",
  "subprocess.STDOUT",
  "subprocess.check_call",
  "subprocess.check_output",
  "subprocess.run",
  "substitute",
  "sys",
  "sys.argv",
  "sys.argv.extend",
  "sys.exc_info",
  "sys.exit",
  "sys.maxsize",
  "sys.modules",
  "sys.path.insert",
  "sys.path.remove",
  "sys.platform",
  "sys.stderr",
  "sys.stdin",
  "sys.stdout",
  "sys.stdout.isatty",
  "sys.version_info",
  "tags_to_spans_function",
  "tarfile",
  "tarfile.open",
  "tempfile",
  "tempfile.NamedTemporaryFile",
  "tempfile.mkdtemp",
  "tensorboardX.SummaryWriter",
  "test_block_is_orthogonal",
  "textwrap",
  "textwrap.wrap",
  "time",
  "time.gmtime",
  "time.sleep",
  "time.strftime",
  "time.time",
  "tlo_embedder",
  "token_embedder",
  "torch",
  "torch.ByteTensor",
  "torch.FloatTensor",
  "torch.IntTensor",
  "torch.LongTensor",
  "torch.Size",
  "torch.Storage",
  "torch.Tensor",
  "torch.__version__",
  "torch.abs",
  "torch.addmm",
  "torch.arange",
  "torch.autograd.Function",
  "torch.autograd.Variable",
  "torch.bmm",
  "torch.cat",
  "torch.chunk",
  "torch.clamp",
  "torch.cos",
  "torch.cuda",
  "torch.cuda.LongTensor",
  "torch.cuda.device_count",
  "torch.cuda.is_available",
  "torch.cuda.manual_seed_all",
  "torch.diag",
  "torch.equal",
  "torch.exp",
  "torch.eye",
  "torch.float",
  "torch.from_numpy",
  "torch.gather",
  "torch.ge",
  "torch.isnan",
  "torch.load",
  "torch.log",
  "torch.log1p",
  "torch.long",
  "torch.manual_seed",
  "torch.matmul",
  "torch.max",
  "torch.min",
  "torch.mul",
  "torch.multiprocessing.Manager",
  "torch.multiprocessing.Process",
  "torch.multiprocessing.Queue",
  "torch.multiprocessing.get_logger",
  "torch.multiprocessing.log_to_stderr",
  "torch.nn",
  "torch.nn.Conv1d",
  "torch.nn.Dropout",
  "torch.nn.ELU",
  "torch.nn.Embedding",
  "torch.nn.GRU",
  "torch.nn.Hardtanh",
  "torch.nn.LSTM",
  "torch.nn.LeakyReLU",
  "torch.nn.Linear",
  "torch.nn.LogSigmoid",
  "torch.nn.Module",
  "torch.nn.ModuleDict",
  "torch.nn.ModuleList",
  "torch.nn.PReLU",
  "torch.nn.Parameter",
  "torch.nn.ParameterList",
  "torch.nn.RNN",
  "torch.nn.RNNBase",
  "torch.nn.ReLU",
  "torch.nn.ReLU6",
  "torch.nn.Sequential",
  "torch.nn.Sigmoid",
  "torch.nn.Softmax",
  "torch.nn.Softplus",
  "torch.nn.Softshrink",
  "torch.nn.Softsign",
  "torch.nn.Tanh",
  "torch.nn.Tanhshrink",
  "torch.nn.Threshold",
  "torch.nn.functional",
  "torch.nn.functional.cosine_similarity",
  "torch.nn.functional.cross_entropy",
  "torch.nn.functional.dropout",
  "torch.nn.functional.embedding",
  "torch.nn.functional.glu",
  "torch.nn.functional.log_softmax",
  "torch.nn.functional.nll_loss",
  "torch.nn.functional.relu",
  "torch.nn.functional.softmax",
  "torch.nn.init",
  "torch.nn.init.calculate_gain",
  "torch.nn.init.constant_",
  "torch.nn.init.dirac_",
  "torch.nn.init.eye_",
  "torch.nn.init.kaiming_normal_",
  "torch.nn.init.kaiming_uniform_",
  "torch.nn.init.normal_",
  "torch.nn.init.orthogonal_",
  "torch.nn.init.sparse_",
  "torch.nn.init.uniform_",
  "torch.nn.init.xavier_normal_",
  "torch.nn.init.xavier_uniform",
  "torch.nn.init.xavier_uniform_",
  "torch.nn.modules.Dropout",
  "torch.nn.modules.Linear",
  "torch.nn.modules.linear.Linear",
  "torch.nn.modules.rnn.GRUCell",
  "torch.nn.modules.rnn.LSTM",
  "torch.nn.modules.rnn.LSTMCell",
  "torch.nn.parallel._functions.Scatter",
  "torch.nn.parallel._functions.Scatter.apply",
  "torch.nn.parallel.parallel_apply",
  "torch.nn.parallel.replicate",
  "torch.nn.parallel.scatter_gather.gather",
  "torch.nn.parameter.Parameter",
  "torch.nn.utils.rnn.PackedSequence",
  "torch.nn.utils.rnn.pack_padded_sequence",
  "torch.nn.utils.rnn.pad_packed_sequence",
  "torch.no_grad",
  "torch.norm",
  "torch.ones",
  "torch.ones_like",
  "torch.optim.ASGD",
  "torch.optim.Adadelta",
  "torch.optim.Adagrad",
  "torch.optim.Adam",
  "torch.optim.Adamax",
  "torch.optim.Optimizer",
  "torch.optim.RMSprop",
  "torch.optim.SGD",
  "torch.optim.SparseAdam",
  "torch.optim.lr_scheduler",
  "torch.optim.lr_scheduler.ExponentialLR",
  "torch.optim.lr_scheduler.MultiStepLR",
  "torch.optim.lr_scheduler.ReduceLROnPlateau",
  "torch.optim.lr_scheduler.StepLR",
  "torch.pow",
  "torch.prod",
  "torch.rand",
  "torch.randint",
  "torch.randn",
  "torch.save",
  "torch.sigmoid",
  "torch.sin",
  "torch.sort",
  "torch.split",
  "torch.sqrt",
  "torch.stack",
  "torch.sum",
  "torch.tanh",
  "torch.tensor",
  "torch.transpose",
  "torch.uint8",
  "torch.utils.ffi._wrap_function",
  "torch.utils.ffi.create_extension",
  "torch.where",
  "torch.zeros",
  "torch.zeros_like",
  "tqdm",
  "tqdm.tqdm",
  "tqdm.tqdm.monitor_interval",
  "traceback",
  "traceback.print_exc",
  "transformer",
  "transformer.dump_weights",
  "transformer_encoder",
  "transformer_encoder.get_attention_masks",
  "typing.Any",
  "typing.Callable",
  "typing.DefaultDict",
  "typing.Deque",
  "typing.Dict",
  "typing.Generic",
  "typing.IO",
  "typing.Iterable",
  "typing.Iterator",
  "typing.List",
  "typing.Mapping",
  "typing.MutableMapping",
  "typing.NamedTuple",
  "typing.Optional",
  "typing.Sequence",
  "typing.Set",
  "typing.TextIO",
  "typing.Tuple",
  "typing.Type",
  "typing.TypeVar",
  "typing.Union",
  "typing.cast",
  "unicodedata",
  "unicodedata.category",
  "unicodedata.normalize",
  "unidecode.unidecode",
  "unittest.TestCase",
  "unsampled_softmax",
  "urllib.parse.urlparse",
  "val_iterator",
  "val_iterator.get_num_batches",
  "warnings",
  "warnings.catch_warnings",
  "warnings.filterwarnings",
  "warnings.warn",
  "white_space_fix",
  "zipfile",
  "zipfile.ZipFile"
 ],
 "deps": {
  "FakeEvaluate": [],
  "FakeModel": [],
  "FakeTable": [],
  "FakeWorld": [],
  "MetaDataCheckWrapper": [],
  "MyVocabulary": [],
  "Net": [],
  "QIterable": [],
  "Scorer": [],
  "WaitingIterator": [],
  "__future__": [],
  "_do_layer_norm": [],
  "_get_combination_dim": [],
  "_highway_lstm_layer": [],
  "_jsonnet": [],
  "abc": [],
  "accuracy": [],
  "activation": [],
  "add_matching_result": [],
  "allennlp": [],
  "argparse": [],
  "assemble_subtree": [],
  "atexit": [],
  "attention": [],
  "attribute_function": [],
  "augmented_lstm": [],
  "backward_layer": [],
  "bidaf_ensemble": [],
  "bilinear": [],
  "block": [],
  "boto3": [],
  "botocore": [],
  "bz2": [],
  "char_conv_i": [],
  "check_num_tokens": [],
  "cnn_encoder": [],
  "codecs": [],
  "collections": [],
  "comparison_function": [],
  "conllu": [],
  "constructor": [],
  "conv": [],
  "convolution": [],
  "convolution_layer": [],
  "copy": [],
  "copy_token_at_index": [],
  "cosine_similarity": [],
  "count_function": [],
  "covariance": [],
  "create_parameter": [],
  "csv": [],
  "ctypes": [],
  "datetime": [],
  "defaultdict": [],
  "dict": [],
  "difflib": [],
  "digit_to_query_time": [],
  "distributed": [],
  "distributed_embedding": [],
  "dot_product": [],
  "dropout": [],
  "editdistance": [],
  "elmo": [],
  "elmo_bilm": [],
  "elmo_token_embedder": [],
  "embedder": [],
  "embedding": [],
  "embedding_layer": [],
  "encoder": [],
  "evalb_scorer": [],
  "extract_bmes_tag_label": [],
  "extractor": [],
  "f": [],
  "f1_measure": [],
  "fe": [],
  "feature_extractor": [],
  "feedforward": [],
  "feedforward_layer_norm": [],
  "filecmp": [],
  "flaky": [],
  "flask": [],
  "flask_cors": [],
  "forward_layer": [],
  "from_list": [],
  "ftfy": [],
  "func": [],
  "function": [],
  "functools": [],
  "get_approximate_times": [],
  "get_buffer": [],
  "get_date_from_utterance": [],
  "get_file_info": [],
  "get_tag": [],
  "gevent": [],
  "glob": [],
  "gzip": [],
  "h5py": [],
  "has_tensor": [],
  "hashlib": [],
  "highway": [],
  "implementation": [],
  "importlib": [],
  "init_and_restore_scheduler": [],
  "initializer": [],
  "initializers": [],
  "inspect": [],
  "instances": [],
  "io": [],
  "is_prevent": [],
  "iterator": [],
  "iterator2": [],
  "itertools": [],
  "json": [],
  "layer": [],
  "layer_norm": [],
  "linear": [],
  "loaded_model": [],
  "log_recursively": [],
  "logging": [],
  "lower": [],
  "lstm": [],
  "lzma": [],
  "mae": [],
  "make_sparse": [],
  "make_state": [],
  "mark_tag": [],
  "math": [],
  "matplotlib": [],
  "maxout": [],
  "method": [],
  "metric": [],
  "mixture": [],
  "ml_bw": [],
  "ml_fw": [],
  "model": [],
  "moto": [],
  "multiprocessing": [],
  "nbconvert": [],
  "nbformat": [],
  "neighbor_encoder": [],
  "new_embedder": [],
  "nlp": [],
  "nltk": [],
  "node_constuctor": [],
  "number_comparison": [],
  "numpy": [],
  "numpydoc": [],
  "object": [],
  "operator": [],
  "order_dict": [],
  "os": [],
  "overrides": [],
  "params": [],
  "params_get": [],
  "parsimonious": [],
  "pathlib": [],
  "pearson_correlation": [],
  "pkgutil": [],
  "pm_map_match_to_query_value": [],
  "pop_replace_append": [],
  "process_stack": [],
  "projection": [],
  "pruner": [],
  "pytest": [],
  "pytorch_lstm": [],
  "pytorch_pretrained_bert": [],
  "random": [],
  "re": [],
  "recall": [],
  "recurse": [],
  "regularizer": [],
  "regularizer_type": [],
  "remove_articles": [],
  "remove_punc": [],
  "replace_label": [],
  "requests": [],
  "resource": [],
  "responses": [],
  "sampled_softmax": [],
  "sanitizer": [],
  "scalar_mix": [],
  "scatter_map": [],
  "scorer": [],
  "set": [],
  "set_comparison": [],
  "shutil": [],
  "similarity": [],
  "simple_transition_system": [],
  "six": [],
  "sklearn": [],
  "softmax": [],
  "spacy": [],
  "sqlite3": [],
  "sqlparse": [],
  "str": [],
  "string": [],
  "subclass": [],
  "submodel": [],
  "subprocess": [],
  "substitute": [],
  "sys": [],
  "tags_to_spans_function": [],
  "tarfile": [],
  "tempfile": [],
  "tensorboardX": [],
  "test_block_is_orthogonal": [],
  "textwrap": [],
  "time": [],
  "tlo_embedder": [],
  "token_embedder": [],
  "torch": [],
  "tqdm": [],
  "traceback": [],
  "transformer": [],
  "transformer_encoder": [],
  "typing": [],
  "unicodedata": [],
  "unidecode": [],
  "unittest": [],
  "unsampled_softmax": [],
  "urllib": [],
  "val_iterator": [],
  "warnings": [],
  "white_space_fix": [],
  "zipfile": []
 }
}