{
 "bad": [
  "C",
  "C.m2",
  "C.m3",
  "SomeRandomClass",
  "callable_",
  "collections.OrderedDict",
  "collections.abc.Set",
  "collections.defaultdict",
  "collections.deque",
  "common_cls",
  "func",
  "function",
  "function.understands",
  "function_list",
  "function_set",
  "function_tuple",
  "functools.lru_cache",
  "functools.wraps",
  "get_type_for_inst",
  "inspect.Parameter.empty",
  "inspect.getmro",
  "inspect.isclass",
  "inspect.iscoroutinefunction",
  "inspect.signature",
  "inspect.stack",
  "nptyping.NDArray",
  "nptyping.NDArray.type_of",
  "numpy.array",
  "numpy.ndarray",
  "re.findall",
  "super.__hash__",
  "sys.version_info",
  "sys.version_info.major",
  "sys.version_info.minor",
  "test_resources.hintable.TestHintable",
  "test_resources.some_module",
  "tests.classes.test_something.C1",
  "tests.classes.test_something.C2",
  "tests.classes.test_something.C3",
  "tests.classes.test_something.C4",
  "tests.classes.test_something.C5",
  "tests.classes.test_something.C6",
  "tests.classes.test_something.Inyerface",
  "tests.decorators.test_hintable.some_func",
  "tests.functions.test_common_ancestor.A",
  "tests.functions.test_common_ancestor.B",
  "tests.functions.test_common_ancestor.C",
  "tests.functions.test_common_ancestor.D",
  "tests.functions.test_common_ancestor.E",
  "tests.functions.test_get_mro.A",
  "tests.functions.test_get_mro.B",
  "tests.functions.test_get_mro.typing",
  "tests.functions.test_instance_of.A",
  "tests.functions.test_instance_of.B",
  "tests.functions.test_instance_of.C",
  "tests.functions.test_instance_of.D",
  "tests.functions.test_instance_of.E",
  "tests.functions.test_instance_of.F",
  "tests.functions.test_origin_and_alias.ListMock",
  "tests.functions.test_origin_and_alias.MetaMock",
  "tests.functions.test_origin_and_alias.Union",
  "tests.functions.test_subclass_of.A",
  "tests.functions.test_subclass_of.B",
  "tests.functions.test_subclass_of.C",
  "tests.functions.test_subclass_of.D",
  "tests.functions.test_subclass_of.E",
  "tests.functions.test_subclass_of.F",
  "tmap",
  "type.__getattr__",
  "types.FunctionType",
  "types.MethodType",
  "typing.AbstractSet",
  "typing.Any",
  "typing.Awaitable",
  "typing.Callable",
  "typing.DefaultDict",
  "typing.Deque",
  "typing.Dict",
  "typing.FrozenSet",
  "typing.Iterable",
  "typing.List",
  "typing.Optional",
  "typing.Sequence",
  "typing.Set",
  "typing.Tuple",
  "typing.Type",
  "typing.TypeVar",
  "typing.Union",
  "typing.__name__",
  "typing.get_type_hints",
  "typish.ClsDict",
  "typish.ClsFunction",
  "typish.EllipsisType",
  "typish.Empty",
  "typish.KT",
  "typish.Literal",
  "typish.LiteralAlias",
  "typish.LiteralAlias.from_literal",
  "typish.Module",
  "typish.NoneType",
  "typish.Something",
  "typish.State",
  "typish.SubscriptableType",
  "typish.T",
  "typish.TypingType",
  "typish.Unknown",
  "typish.VT",
  "typish._state.DEFAULT",
  "typish._state.State",
  "typish._types.Empty",
  "typish._types.KT",
  "typish._types.NoneType",
  "typish._types.T",
  "typish._types.Unknown",
  "typish._types.VT",
  "typish._types.typing",
  "typish.classes._cls_dict.ClsDict",
  "typish.classes._literal.LiteralAlias",
  "typish.classes._literal.LiteralAlias.from_literal",
  "typish.classes._literal._LiteralMeta",
  "typish.classes._literal.is_literal_type",
  "typish.classes._literal.typing",
  "typish.classes._something.Something",
  "typish.classes._something._SomethingMeta",
  "typish.classes._subscriptable_type.SubscriptableType",
  "typish.classes._subscriptable_type.SubscriptableType.__getattribute__",
  "typish.classes._subscriptable_type._SubscribedType",
  "typish.classes._union_type.UnionType",
  "typish.classes._union_type._UnionType",
  "typish.common_ancestor",
  "typish.common_ancestor_of_types",
  "typish.decorators._hintable._DEFAULT_PARAM_NAME",
  "typish.decorators._hintable._Hintable",
  "typish.decorators._hintable._get_wrapper",
  "typish.functions._common_ancestor._common_ancestor",
  "typish.functions._common_ancestor.common_ancestor",
  "typish.functions._common_ancestor.common_ancestor_of_types",
  "typish.functions._get_alias.get_alias",
  "typish.functions._get_args.get_args",
  "typish.functions._get_mro.get_mro",
  "typish.functions._get_mro.typing",
  "typish.functions._get_origin.get_origin",
  "typish.functions._get_origin.typing",
  "typish.functions._get_simple_name.get_simple_name",
  "typish.functions._get_type._flatten",
  "typish.functions._get_type._get_type_iterable",
  "typish.functions._get_type._get_type_lambda",
  "typish.functions._get_type._map_empty",
  "typish.functions._get_type.get_type",
  "typish.functions._get_type.types",
  "typish.functions._get_type_hints_of_callable.get_args_and_return_type",
  "typish.functions._instance_of._instance_of",
  "typish.functions._instance_of.instance_of",
  "typish.functions._is_from_typing.is_from_typing",
  "typish.functions._is_optional_type.is_optional_type",
  "typish.functions._is_type_annotation.is_type_annotation",
  "typish.functions._is_type_annotation.typing",
  "typish.functions._subclass_of._check_literal",
  "typish.functions._subclass_of._forward_subclass_check",
  "typish.functions._subclass_of._is_true_case",
  "typish.functions._subclass_of._subclass_of",
  "typish.functions._subclass_of._subclass_of_generic",
  "typish.functions._subclass_of._subclass_of_tuple",
  "typish.functions._subclass_of._tuple_args",
  "typish.functions._subclass_of.is_issubclass_case",
  "typish.functions._subclass_of.subclass_of",
  "typish.get_alias",
  "typish.get_args",
  "typish.get_args_and_return_type",
  "typish.get_mro",
  "typish.get_origin",
  "typish.get_type",
  "typish.get_type_hints_of_callable",
  "typish.hintable",
  "typish.instance_of",
  "typish.is_type_annotation",
  "typish.register_get_type",
  "typish.subclass_of",
  "unittest.TestCase",
  "unittest.skipUnless"
 ],
 "deps": {
  "C": [],
  "SomeRandomClass": [],
  "callable_": [],
  "collections": [],
  "common_cls": [],
  "func": [],
  "function": [],
  "function_list": [],
  "function_set": [],
  "function_tuple": [],
  "functools": [],
  "get_type_for_inst": [],
  "inspect": [],
  "nptyping": [],
  "numpy": [],
  "re": [],
  "super": [],
  "sys": [],
  "test_resources": [],
  "tests": [],
  "tmap": [],
  "type": [],
  "types": [],
  "typing": [],
  "typish": [],
  "unittest": []
 }
}