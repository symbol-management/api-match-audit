{
 "bad": [
  "Meta",
  "ModuleNotFound",
  "_build_subset",
  "_version.get_versions",
  "abc",
  "abc.ABC",
  "abc.abstractmethod",
  "alembic.context.begin_transaction",
  "alembic.context.config",
  "alembic.context.configure",
  "alembic.context.get_x_argument",
  "alembic.context.is_offline_mode",
  "alembic.context.run_migrations",
  "app.app.callback",
  "app.app.layout",
  "argparse",
  "argparse.ArgumentError",
  "argparse.ArgumentParser",
  "argparse.ArgumentTypeError",
  "asyncio",
  "asyncio.get_event_loop",
  "atexit",
  "atexit.unregister",
  "bcrypt",
  "bcrypt.checkpw",
  "bcrypt.gensalt",
  "bcrypt.hashpw",
  "body_model",
  "cleanup",
  "cli_utils.argparse_config_merge",
  "cli_utils.import_module",
  "cli_utils.read_config_file",
  "cluster_class",
  "collection.BaseProcedureDataset.DataModel",
  "collection.BaseProcedureDataset.DataModel.Config",
  "collection.Collection.DataModel",
  "collection_class",
  "collections",
  "collections.Mapping",
  "collections.abc.Iterable",
  "collections.defaultdict",
  "common_models.DriverEnum.__doc__",
  "common_models.Molecule.from_data",
  "common_models.ProtoModel.Config",
  "concurrent.futures.ProcessPoolExecutor",
  "concurrent.futures.ThreadPoolExecutor",
  "concurrent.futures.wait",
  "config.DatabaseSettings.field_names",
  "config.DatabaseSettings.help_info",
  "config.FractalConfig.help_info",
  "config.FractalServerSettings.field_names",
  "config.FractalServerSettings.help_info",
  "constants.get_scale",
  "contextlib",
  "contextlib.contextmanager",
  "copy",
  "copy.deepcopy",
  "count_gradient_evals",
  "count_gradients",
  "count_optimizations",
  "cryptography.hazmat.backends.default_backend",
  "cryptography.hazmat.primitives.asymmetric.rsa",
  "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key",
  "cryptography.hazmat.primitives.hashes",
  "cryptography.hazmat.primitives.hashes.SHA256",
  "cryptography.hazmat.primitives.serialization",
  "cryptography.hazmat.primitives.serialization.Encoding.PEM",
  "cryptography.hazmat.primitives.serialization.NoEncryption",
  "cryptography.hazmat.primitives.serialization.PrivateFormat.TraditionalOpenSSL",
  "cryptography.x509",
  "cryptography.x509.BasicConstraints",
  "cryptography.x509.CertificateBuilder",
  "cryptography.x509.DNSName",
  "cryptography.x509.IPAddress",
  "cryptography.x509.Name",
  "cryptography.x509.NameAttribute",
  "cryptography.x509.SubjectAlternativeName",
  "cryptography.x509.oid.NameOID",
  "cryptography.x509.oid.NameOID.COMMON_NAME",
  "dash_managers.layout",
  "dash_queue.layout",
  "dash_service.layout",
  "dask.distributed.Client",
  "dask.distributed.wait",
  "dataset.Dataset.DataModel",
  "datetime",
  "datetime.datetime",
  "datetime.datetime.fromtimestamp",
  "datetime.datetime.utcnow",
  "datetime.timedelta",
  "enum.Enum",
  "f",
  "flask.current_app.config",
  "flask.g.socket",
  "func",
  "functools.partial",
  "get_ipython",
  "glob",
  "glob.glob",
  "hashlib",
  "hashlib.sha1",
  "importlib",
  "importlib.import_module",
  "importlib.util.find_spec",
  "interface.models.ProtoModel.Config",
  "interface.models.task_models.PriorityEnum.HIGH",
  "interface.models.task_models.PriorityEnum.NORMAL",
  "itertools",
  "itertools.combinations",
  "json",
  "json.dump",
  "json.dumps",
  "json.load",
  "json.loads",
  "launcher",
  "logging",
  "logging.Formatter",
  "logging.INFO",
  "logging.config.fileConfig",
  "logging.getLogger",
  "math",
  "math.ceil",
  "math.factorial",
  "method",
  "models.Base.metadata.create_all",
  "models.Base.metadata.drop_all",
  "models.Molecule.from_data",
  "models.Molecule.from_file",
  "molecule.Molecule",
  "numpy",
  "numpy.abs",
  "numpy.allclose",
  "numpy.arange",
  "numpy.argmin",
  "numpy.argsort",
  "numpy.around",
  "numpy.array",
  "numpy.array_equal",
  "numpy.hstack",
  "numpy.mean",
  "numpy.min",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.random.random",
  "numpy.sum",
  "numpy.unique",
  "operator",
  "operator.attrgetter",
  "os",
  "os.chdir",
  "os.environ",
  "os.getcwd",
  "os.name.lower",
  "os.path.abspath",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "pandas",
  "pandas.DataFrame",
  "pandas.DataFrame.from_dict",
  "pandas.Series",
  "pandas.concat",
  "pandas.to_numeric",
  "parsl",
  "parsl.__version__",
  "parsl.addresses.address_by_hostname",
  "parsl.app.app.python_app",
  "parsl.config.Config",
  "parsl.executors.HighThroughputExecutor",
  "pathlib.Path",
  "pkgutil",
  "pkgutil.find_loader",
  "portal.FractalClient",
  "portal.Molecule",
  "portal.Molecule.from_data",
  "portal.collections.Dataset",
  "portal.collections.ReactionDataset",
  "portal.data.get_molecule",
  "portal.util.replace_dict_keys",
  "procedure_class",
  "provider_class",
  "psycopg2",
  "psycopg2._psycopg.OperationalError",
  "psycopg2.connect",
  "pytest",
  "pytest.approx",
  "pytest.fixture",
  "pytest.importorskip",
  "pytest.mark.parametrize",
  "pytest.mark.skip",
  "pytest.mark.skipif",
  "pytest.mark.slow",
  "pytest.mark.xfail",
  "pytest.param",
  "pytest.raises",
  "pytest.skip",
  "qcelemental.constants.conversion_factor",
  "qcelemental.models.AutodocBaseSettings",
  "qcelemental.models.ComputeError",
  "qcelemental.models.FailedOperation",
  "qcelemental.models.Molecule",
  "qcelemental.models.Optimization",
  "qcelemental.models.OptimizationInput",
  "qcelemental.models.ProtoModel",
  "qcelemental.models.Provenance",
  "qcelemental.models.Result",
  "qcelemental.models.ResultInput",
  "qcelemental.models.ResultProperties",
  "qcelemental.models.common_models.qcschema_optimization_output_default",
  "qcelemental.models.common_models.qcschema_output_default",
  "qcelemental.models.types.Array",
  "qcelemental.util.deserialize",
  "qcelemental.util.get_base_docs",
  "qcelemental.util.msgpackext_dumps",
  "qcelemental.util.msgpackext_loads",
  "qcelemental.util.serialize",
  "qcfractal.__init__.get_information",
  "qcfractal.dashboard.start_dashboard.dashboard_app.run_server",
  "qcfractal.dashboard.start_dashboard.dashboard_app.server.config",
  "qcfractal.interface.FractalClient.from_file",
  "qcfractal.interface.Molecule.from_data",
  "qcfractal.interface.__init__.get_information",
  "qcfractal.interface.__init__.versions",
  "qcfractal.interface.collections.Generic.from_server",
  "qcfractal.interface.collections.ReactionDataset.from_server",
  "qcfractal.interface.models.TaskStatusEnum.complete",
  "qcfractal.interface.models.TaskStatusEnum.error",
  "qcfractal.interface.models.TaskStatusEnum.running",
  "qcfractal.interface.models.TaskStatusEnum.waiting",
  "qcfractal.interface.models.records.RecordStatusEnum.incomplete",
  "qcfractal.interface.models.task_models.ManagerStatusEnum.inactive",
  "qcfractal.interface.models.task_models.PriorityEnum.NORMAL",
  "qcfractal.interface.models.task_models.TaskStatusEnum.waiting",
  "qcfractal.storage_sockets.models.Base.metadata",
  "qcfractal.storage_sockets.models.Base.metadata.create_all",
  "qcfractal.storage_sockets.models.BaseResultORM.id",
  "qcfractal.storage_sockets.models.BaseResultORM.id.in_",
  "qcfractal.storage_sockets.models.BaseResultORM.manager_name",
  "qcfractal.storage_sockets.models.QueueManagerORM.__dict__.keys",
  "qcfractal.storage_sockets.models.QueueManagerORM.completed",
  "qcfractal.storage_sockets.models.QueueManagerORM.failures",
  "qcfractal.storage_sockets.models.QueueManagerORM.modified_on",
  "qcfractal.storage_sockets.models.QueueManagerORM.returned",
  "qcfractal.storage_sockets.models.QueueManagerORM.submitted",
  "qcfractal.storage_sockets.models.ResultORM.id.in_",
  "qcfractal.storage_sockets.models.ServiceQueueORM.__dict__.keys",
  "qcfractal.storage_sockets.models.ServiceQueueORM.created_on",
  "qcfractal.storage_sockets.models.ServiceQueueORM.priority.desc",
  "qcfractal.storage_sockets.models.TaskQueueORM.base_result_id",
  "qcfractal.storage_sockets.models.TaskQueueORM.created_on",
  "qcfractal.storage_sockets.models.TaskQueueORM.id",
  "qcfractal.storage_sockets.models.TaskQueueORM.id.in_",
  "qcfractal.storage_sockets.models.TaskQueueORM.manager",
  "qcfractal.storage_sockets.models.TaskQueueORM.priority.desc",
  "qcfractal.storage_sockets.models.TaskQueueORM.procedure",
  "qcfractal.storage_sockets.models.TaskQueueORM.procedure.in_",
  "qcfractal.storage_sockets.models.VersionsORM.created_on.desc",
  "qcfractal.testing.fractal_compute_server.await_results",
  "qcfractal.testing.fractal_compute_server.await_services",
  "qcfractal.testing.fractal_compute_server.get_address",
  "qcfractal.testing.fractal_compute_server.list_current_tasks",
  "qcfractal.testing.fractal_compute_server.objects",
  "qcfractal.testing.fractal_compute_server.objects.queue_mark_complete",
  "qcfractal.testing.fractal_compute_server.storage.get_managers",
  "qcfractal.testing.fractal_compute_server.storage.manager_update",
  "qcfractal.testing.fractal_compute_server.storage.queue_get_next",
  "qcfractal.testing.fractal_compute_server.update_tasks",
  "qcfractal.testing.sqlalchemy_socket_fixture.Session",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_collection",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_keywords",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_molecules",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_procedures",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_results",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_user",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_collection",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_keywords",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_molecules",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_procedures",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_results",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_tasks",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_add_keywords_mixed",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_add_molecules_mixed",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_collections",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_keywords",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_managers",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_molecules",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_procedures",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_project_name",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_queue",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_results",
  "qcfractal.testing.sqlalchemy_socket_fixture.manager_update",
  "qcfractal.testing.sqlalchemy_socket_fixture.modify_user",
  "qcfractal.testing.sqlalchemy_socket_fixture.queue_reset_status",
  "qcfractal.testing.sqlalchemy_socket_fixture.remove_user",
  "qcfractal.testing.sqlalchemy_socket_fixture.verify_user",
  "qcfractal.testing.test_server.get_address",
  "random",
  "random.random",
  "re",
  "re.search",
  "records.RecordBase.Config",
  "response_model",
  "rfunc",
  "sched",
  "sched.scheduler",
  "secrets",
  "secrets.token_urlsafe",
  "shutil",
  "shutil.rmtree",
  "shutil.which",
  "signal",
  "signal.CTRL_BREAK_EVENT",
  "signal.SIGINT",
  "signal.SIGKILL",
  "signal.SIGTERM",
  "signal.signal",
  "socket",
  "socket.AF_INET",
  "socket.SHUT_RDWR",
  "socket.SOCK_STREAM",
  "socket.gethostbyname",
  "socket.gethostname",
  "socket.socket",
  "spin_up_test",
  "sqlalchemy.Binary",
  "sqlalchemy.Boolean",
  "sqlalchemy.Column",
  "sqlalchemy.DateTime",
  "sqlalchemy.Enum",
  "sqlalchemy.Float",
  "sqlalchemy.ForeignKey",
  "sqlalchemy.Index",
  "sqlalchemy.Integer",
  "sqlalchemy.JSON",
  "sqlalchemy.String",
  "sqlalchemy.Table",
  "sqlalchemy.UniqueConstraint",
  "sqlalchemy.and_",
  "sqlalchemy.case",
  "sqlalchemy.create_engine",
  "sqlalchemy.dialects.postgresql",
  "sqlalchemy.dialects.postgresql.BYTEA",
  "sqlalchemy.dialects.postgresql.JSON",
  "sqlalchemy.dialects.postgresql.aggregate_order_by",
  "sqlalchemy.engine_from_config",
  "sqlalchemy.exc.IntegrityError",
  "sqlalchemy.ext.declarative.as_declarative",
  "sqlalchemy.ext.hybrid.hybrid_property",
  "sqlalchemy.ext.orderinglist.ordering_list",
  "sqlalchemy.func",
  "sqlalchemy.func.array_agg",
  "sqlalchemy.inspect",
  "sqlalchemy.or_",
  "sqlalchemy.orm.column_property",
  "sqlalchemy.orm.joinedload",
  "sqlalchemy.orm.object_session",
  "sqlalchemy.orm.relationship",
  "sqlalchemy.orm.sessionmaker",
  "sqlalchemy.orm.with_polymorphic",
  "sqlalchemy.pool",
  "sqlalchemy.pool.NullPool",
  "sqlalchemy.select",
  "sqlalchemy.sql.expression.func",
  "sqlalchemy.sql.expression.func.count",
  "sqlalchemy.sql.functions.GenericFunction",
  "sqlalchemy.types.TypeDecorator",
  "sqlalchemy_socket.SQLAlchemySocket",
  "ssl",
  "statistics.wrap_statistics",
  "subprocess",
  "subprocess.CREATE_NEW_PROCESS_GROUP",
  "subprocess.PIPE",
  "subprocess.Popen",
  "subprocess.run",
  "super.__str__",
  "sys",
  "sys._called_from_test",
  "sys.exit",
  "sys.maxsize",
  "sys.platform.startswith",
  "sys.prefix",
  "sys.stderr",
  "task_models.PriorityEnum.__doc__",
  "tempfile",
  "tempfile.TemporaryDirectory",
  "test_helper.compare_lists",
  "threading",
  "threading.Event",
  "threading.Thread",
  "time",
  "time.sleep",
  "time.time",
  "tornado.ioloop",
  "tornado.ioloop.IOLoop",
  "tornado.ioloop.IOLoop.clear_current",
  "tornado.ioloop.IOLoop.clear_instance",
  "tornado.ioloop.IOLoop.current",
  "tornado.log",
  "tornado.options",
  "tornado.web",
  "traceback",
  "traceback.format_exc",
  "typing.Any",
  "typing.Callable",
  "typing.Dict",
  "typing.Hashable",
  "typing.List",
  "typing.Optional",
  "typing.Set",
  "typing.Tuple",
  "typing.Union",
  "uuid",
  "uuid.uuid4"
 ],
 "deps": {
  "Meta": [],
  "ModuleNotFound": [],
  "_build_subset": [],
  "_version": [],
  "abc": [],
  "alembic": [
   "alembic/conda-forge/noarch/alembic-1.0.7-py_0"
  ],
  "app": [],
  "argparse": [],
  "asyncio": [],
  "atexit": [],
  "bcrypt": [],
  "body_model": [],
  "cleanup": [],
  "cli_utils": [],
  "cluster_class": [],
  "collection": [],
  "collection_class": [],
  "collections": [],
  "common_models": [],
  "concurrent": [],
  "config": [],
  "constants": [],
  "contextlib": [],
  "copy": [],
  "count_gradient_evals": [],
  "count_gradients": [],
  "count_optimizations": [],
  "cryptography": [],
  "dash": [
   "dash/conda-forge/noarch/dash-0.32.2-py_0"
  ],
  "dash_bootstrap_components": [
   "dash-bootstrap-components/conda-forge/noarch/dash-bootstrap-components-0.9.1-pyh8c360ce_0"
  ],
  "dash_core_components": [
   "dash-core-components/conda-forge/noarch/dash-core-components-1.9.0-pyh9f0ad1d_0"
  ],
  "dash_html_components": [
   "dash-html-components/conda-forge/noarch/dash-html-components-1.0.0-py_0"
  ],
  "dash_managers": [],
  "dash_queue": [],
  "dash_service": [],
  "dash_table": [
   "dash-table/conda-forge/noarch/dash-table-4.11.2-pyhd8ed1ab_0"
  ],
  "dask": [],
  "dask_jobqueue": [
   "dask-jobqueue/conda-forge/noarch/dask-jobqueue-0.3.0-py_0"
  ],
  "dataset": [],
  "datetime": [],
  "enum": [],
  "f": [],
  "fireworks": [
   "fireworks/conda-forge/noarch/fireworks-1.9.6-py_0"
  ],
  "flask": [
   "flask/conda-forge/noarch/flask-2.0.0-pyhd8ed1ab_0"
  ],
  "func": [],
  "functools": [],
  "get_ipython": [],
  "glob": [],
  "hashlib": [],
  "importlib": [],
  "interface": [],
  "ipaddress": [
   "ipaddress/conda-forge/noarch/ipaddress-1.0.22-py_1"
  ],
  "itertools": [],
  "json": [],
  "launcher": [],
  "logging": [],
  "math": [],
  "method": [],
  "models": [],
  "molecule": [],
  "numpy": [],
  "operator": [],
  "os": [],
  "pandas": [],
  "parsl": [],
  "pathlib": [],
  "pkgutil": [],
  "plotly": [
   "plotly/conda-forge/noarch/plotly-4.4.1-py_0"
  ],
  "portal": [],
  "procedure_class": [],
  "provider_class": [],
  "psycopg2": [],
  "pydantic": [
   "pydantic/conda-forge/noarch/pydantic-0.18.1-py_1"
  ],
  "pytest": [],
  "qcelemental": [
   "qcelemental/conda-forge/noarch/qcelemental-0.1.3-py_0"
  ],
  "qcengine": [
   "qcengine/conda-forge/noarch/qcengine-0.10.0-py_0"
  ],
  "qcfractal": [],
  "qcportal": [
   "qcportal/conda-forge/noarch/qcportal-0.8.0-py_0"
  ],
  "random": [],
  "re": [],
  "records": [],
  "requests": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "response_model": [],
  "rfunc": [],
  "sched": [],
  "secrets": [],
  "shutil": [],
  "signal": [],
  "socket": [],
  "spin_up_test": [],
  "sqlalchemy": [],
  "sqlalchemy_socket": [],
  "ssl": [],
  "statistics": [],
  "subprocess": [],
  "super": [],
  "sys": [],
  "task_models": [],
  "tempfile": [],
  "test_helper": [],
  "threading": [],
  "time": [],
  "tornado": [],
  "torsiondrive": [
   "torsiondrive/conda-forge/noarch/torsiondrive-0.9.8.1-py_0"
  ],
  "traceback": [],
  "typing": [],
  "uuid": [],
  "yaml": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ]
 }
}