{
 "bad": [
  "_create_grant",
  "_extract_header",
  "_extract_payload",
  "_extract_signature",
  "_keys.ECKey.import_key",
  "_keys.RSAKey.import_key",
  "_sign",
  "_validate_alg_values",
  "_validate_boolean_value",
  "_validate_client",
  "_validate_numeric_time",
  "_verify_hash",
  "asyncio",
  "authlib.__init__.author",
  "authlib.__init__.homepage",
  "authlib.__init__.version",
  "authlib.common.urls.urlparse.parse_qsl",
  "authlib.common.urls.urlparse.urljoin",
  "authlib.common.urls.urlparse.urlparse",
  "authlib.common.urls.urlparse.urlunparse",
  "authlib.integrations.django_client.__init__.BaseOAuth",
  "authlib.integrations.django_client.__init__.DjangoIntegration",
  "authlib.integrations.django_client.__init__.DjangoRemoteApp",
  "authlib.integrations.starlette_client.__init__.BaseOAuth",
  "authlib.integrations.starlette_client.__init__.StarletteRemoteApp",
  "authlib.integrations.starlette_client.__init__.StartletteIntegration",
  "authlib.jose.JsonWebKey.import_key_set",
  "authlib.jose.__init__.ECKey",
  "authlib.jose.__init__.JWE_ALG_ALGORITHMS",
  "authlib.jose.__init__.JWE_ENC_ALGORITHMS",
  "authlib.jose.__init__.JWE_ZIP_ALGORITHMS",
  "authlib.jose.__init__.JsonWebEncryption",
  "authlib.jose.__init__.JsonWebKey",
  "authlib.jose.__init__.JsonWebSignature",
  "authlib.jose.__init__.JsonWebToken",
  "authlib.jose.__init__.OKPKey",
  "authlib.jose.__init__.OctKey",
  "authlib.jose.__init__.RSAKey",
  "authlib.jose.__init__.register_jwe_draft",
  "authlib.jose.__init__.register_jwe_rfc7518",
  "authlib.jose.__init__.register_jws_rfc7518",
  "authlib.jose.__init__.register_jws_rfc8037",
  "authlib.jose.jwt.decode",
  "authlib.jose.jwt.encode",
  "authlib.jose.rfc7515.JsonWebSignature.register_algorithm",
  "authlib.jose.rfc7516.JsonWebEncryption.register_algorithm",
  "authlib.oauth2.rfc6750.BearerToken.DEFAULT_EXPIRES_IN",
  "authlib.oauth2.rfc6750.BearerToken.GRANT_TYPES_EXPIRES_IN",
  "authlib.oauth2.rfc7523.JWTBearerGrant.GRANT_TYPE",
  "authlib.oauth2.rfc7523.JWTBearerGrant.sign",
  "base64",
  "base64.b64decode",
  "base64.urlsafe_b64decode",
  "base64.urlsafe_b64encode",
  "binascii",
  "binascii.Error",
  "binascii.a2b_base64",
  "binascii.a2b_hex",
  "binascii.b2a_base64",
  "binascii.b2a_hex",
  "binascii.hexlify",
  "calendar",
  "calendar.timegm",
  "client_cls",
  "cls",
  "collections.MutableMapping",
  "collections.OrderedDict",
  "collections.abc.MutableMapping",
  "compliance_fix",
  "contextlib.contextmanager",
  "cryptography.exceptions.InvalidSignature",
  "cryptography.exceptions.InvalidTag",
  "cryptography.hazmat.backends.default_backend",
  "cryptography.hazmat.primitives.asymmetric.ec",
  "cryptography.hazmat.primitives.asymmetric.ec.ECDH",
  "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
  "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKeyWithSerialization",
  "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers",
  "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
  "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
  "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
  "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1.name",
  "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
  "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1.name",
  "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
  "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1.name",
  "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key",
  "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey",
  "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey",
  "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey",
  "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey",
  "cryptography.hazmat.primitives.asymmetric.padding",
  "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
  "cryptography.hazmat.primitives.asymmetric.padding.OAEP",
  "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
  "cryptography.hazmat.primitives.asymmetric.padding.PSS",
  "cryptography.hazmat.primitives.asymmetric.rsa",
  "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyWithSerialization",
  "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
  "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
  "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
  "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key",
  "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmp1",
  "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmq1",
  "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_iqmp",
  "cryptography.hazmat.primitives.asymmetric.rsa.rsa_recover_prime_factors",
  "cryptography.hazmat.primitives.asymmetric.utils.decode_dss_signature",
  "cryptography.hazmat.primitives.asymmetric.utils.encode_dss_signature",
  "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey",
  "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey",
  "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey",
  "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey",
  "cryptography.hazmat.primitives.ciphers.Cipher",
  "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305",
  "cryptography.hazmat.primitives.ciphers.algorithms.AES",
  "cryptography.hazmat.primitives.ciphers.algorithms.AES.block_size",
  "cryptography.hazmat.primitives.ciphers.modes.CBC",
  "cryptography.hazmat.primitives.ciphers.modes.GCM",
  "cryptography.hazmat.primitives.hashes",
  "cryptography.hazmat.primitives.hashes.SHA1",
  "cryptography.hazmat.primitives.hashes.SHA256",
  "cryptography.hazmat.primitives.hashes.SHA384",
  "cryptography.hazmat.primitives.hashes.SHA512",
  "cryptography.hazmat.primitives.kdf.concatkdf.ConcatKDFHash",
  "cryptography.hazmat.primitives.keywrap.aes_key_unwrap",
  "cryptography.hazmat.primitives.keywrap.aes_key_wrap",
  "cryptography.hazmat.primitives.padding.PKCS7",
  "cryptography.hazmat.primitives.serialization.BestAvailableEncryption",
  "cryptography.hazmat.primitives.serialization.Encoding",
  "cryptography.hazmat.primitives.serialization.Encoding.DER",
  "cryptography.hazmat.primitives.serialization.Encoding.PEM",
  "cryptography.hazmat.primitives.serialization.Encoding.Raw",
  "cryptography.hazmat.primitives.serialization.NoEncryption",
  "cryptography.hazmat.primitives.serialization.PrivateFormat",
  "cryptography.hazmat.primitives.serialization.PrivateFormat.PKCS8",
  "cryptography.hazmat.primitives.serialization.PrivateFormat.Raw",
  "cryptography.hazmat.primitives.serialization.PublicFormat",
  "cryptography.hazmat.primitives.serialization.PublicFormat.Raw",
  "cryptography.hazmat.primitives.serialization.PublicFormat.SubjectPublicKeyInfo",
  "cryptography.hazmat.primitives.serialization.load_pem_private_key",
  "cryptography.hazmat.primitives.serialization.load_pem_public_key",
  "cryptography.hazmat.primitives.serialization.load_ssh_public_key",
  "cryptography.x509.load_pem_x509_certificate",
  "datetime",
  "datetime.datetime",
  "django.core.cache.cache.delete",
  "django.core.cache.cache.get",
  "django.core.cache.cache.set",
  "endpoint",
  "export_key",
  "ext",
  "f",
  "flask.Response",
  "flask._app_ctx_stack",
  "flask._app_ctx_stack.top",
  "flask.current_app",
  "flask.json",
  "flask.json.dumps",
  "flask.json.load",
  "flask.redirect",
  "flask.request",
  "flask.request.base_url",
  "flask.request.client_id",
  "flask.request.data",
  "flask.request.form.to_dict",
  "flask.request.full_path",
  "flask.request.get_json",
  "flask.request.headers",
  "flask.request.method",
  "flask.request.query_string",
  "flask.request.timestamp",
  "flask.request.token",
  "flask.request.url",
  "flask.session",
  "flask.session.pop",
  "flask.signals.Namespace",
  "func",
  "functools",
  "functools.partial",
  "functools.wraps",
  "generate_assertion",
  "hash_alg",
  "hashlib",
  "hashlib.sha1",
  "hashlib.sha256",
  "hashlib.sha384",
  "hashlib.sha512",
  "hmac",
  "hmac.compare_digest",
  "hmac.new",
  "hook",
  "httpx.AsyncClient",
  "httpx.Auth",
  "httpx.Client",
  "httpx.Request",
  "httpx.Response",
  "httpx._config.UNSET",
  "import_key",
  "json",
  "json.dumps",
  "json.loads",
  "key_func",
  "logging",
  "logging.getLogger",
  "model_class",
  "model_class.nonce",
  "models.JWSHeader.from_dict",
  "object.__getattribute__",
  "oct_key.OctKey.import_key",
  "okp_key.OKPKey.import_key",
  "os",
  "os.getenv",
  "os.urandom",
  "prepare_key",
  "prepare_raw_key",
  "query_client",
  "query_token",
  "random",
  "random.SystemRandom",
  "random.choice",
  "re",
  "re.DOTALL",
  "re.compile",
  "rfc6749.OAuth2Token.from_dict",
  "rfc7515.JsonWebSignature.ALGORITHMS_REGISTRY.keys",
  "rfc7515.JsonWebSignature.register_algorithm",
  "rfc7516.JsonWebEncryption.ALG_REGISTRY.keys",
  "rfc7516.JsonWebEncryption.ENC_REGISTRY.keys",
  "rfc7516.JsonWebEncryption.ZIP_REGISTRY.keys",
  "rfc7516.JsonWebEncryption.register_algorithm",
  "rfc7517.JsonWebKey.JWK_KEY_CLS",
  "rfc7517.JsonWebKey.import_key",
  "rfc7517.JsonWebKey.import_key_set",
  "rfc7518.ECDHAlgorithm.ALLOWED_KEY_CLS",
  "rfc7518.ECKey.kty",
  "rfc7518.OctKey.kty",
  "rfc7518.RSAKey.kty",
  "rfc8037.OKPKey.kty",
  "rsa.sign_sha1",
  "rsa.verify_sha1",
  "secret_generator",
  "sign",
  "signals.client_authenticated.send",
  "signals.token_authenticated.send",
  "signals.token_revoked.send",
  "sqlalchemy.Boolean",
  "sqlalchemy.Column",
  "sqlalchemy.Integer",
  "sqlalchemy.String",
  "sqlalchemy.Text",
  "sqlalchemy.UniqueConstraint",
  "string",
  "string.ascii_letters",
  "string.digits",
  "struct",
  "struct.pack",
  "struct.unpack",
  "sys",
  "sys.version_info",
  "time",
  "time.time",
  "token_generator",
  "token_model",
  "typing",
  "typing.Generator",
  "urllib.parse",
  "urllib.parse.parse_qsl",
  "urllib.parse.quote",
  "urllib.parse.unquote",
  "urllib.parse.urlencode",
  "urllib.parse.urlparse",
  "urllib.parse.urlunparse",
  "urllib.quote",
  "urllib.request.parse_http_list",
  "urllib.request.parse_keqv_list",
  "urllib.unquote",
  "urllib.urlencode",
  "urllib2.parse_http_list",
  "urllib2.parse_keqv_list",
  "urlparse",
  "uuid",
  "uuid.uuid4",
  "validate",
  "validate_array_value",
  "validator",
  "verify",
  "warnings",
  "warnings.simplefilter",
  "warnings.warn",
  "werkzeug.exceptions.HTTPException",
  "werkzeug.local.LocalProxy",
  "werkzeug.utils.import_string",
  "zlib",
  "zlib.MAX_WBITS",
  "zlib.compress",
  "zlib.decompress"
 ],
 "deps": {
  "_create_grant": [],
  "_extract_header": [],
  "_extract_payload": [],
  "_extract_signature": [],
  "_keys": [],
  "_sign": [],
  "_validate_alg_values": [],
  "_validate_boolean_value": [],
  "_validate_client": [],
  "_validate_numeric_time": [],
  "_verify_hash": [],
  "asyncio": [],
  "authlib": [],
  "base64": [],
  "binascii": [],
  "calendar": [],
  "client_cls": [],
  "cls": [],
  "collections": [],
  "compliance_fix": [],
  "contextlib": [],
  "cryptography": [],
  "datetime": [],
  "django": [
   "django/conda-forge/noarch/django-3.1.4-pyhd8ed1ab_0"
  ],
  "endpoint": [],
  "export_key": [],
  "ext": [],
  "f": [],
  "flask": [],
  "func": [],
  "functools": [],
  "generate_assertion": [],
  "hash_alg": [],
  "hashlib": [],
  "hmac": [],
  "hook": [],
  "httpx": [],
  "import_key": [],
  "json": [],
  "key_func": [],
  "logging": [],
  "model_class": [],
  "models": [],
  "object": [],
  "oct_key": [],
  "okp_key": [],
  "os": [],
  "prepare_key": [],
  "prepare_raw_key": [],
  "query_client": [],
  "query_token": [],
  "random": [],
  "re": [],
  "requests": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ],
  "rfc6749": [],
  "rfc7515": [],
  "rfc7516": [],
  "rfc7517": [],
  "rfc7518": [],
  "rfc8037": [],
  "rsa": [],
  "secret_generator": [],
  "sign": [],
  "signals": [],
  "sqlalchemy": [],
  "starlette": [
   "starlette/conda-forge/noarch/starlette-0.11.2-py_0"
  ],
  "string": [],
  "struct": [],
  "sys": [],
  "time": [],
  "token_generator": [],
  "token_model": [],
  "typing": [],
  "urllib": [],
  "urllib2": [],
  "urlparse": [],
  "uuid": [],
  "validate": [],
  "validate_array_value": [],
  "validator": [],
  "verify": [],
  "warnings": [],
  "werkzeug": [],
  "zlib": []
 }
}