{
 "bad": [
  "HDF5View",
  "Meta",
  "PlainTextView",
  "_build_subset",
  "_query_apply_coeffients",
  "_version.get_versions",
  "_write_dataset",
  "alembic.context.begin_transaction",
  "alembic.context.config",
  "alembic.context.configure",
  "alembic.context.get_x_argument",
  "alembic.context.is_offline_mode",
  "alembic.context.run_migrations",
  "atexit",
  "atexit.unregister",
  "bcrypt",
  "bcrypt.checkpw",
  "bcrypt.gensalt",
  "bcrypt.hashpw",
  "body_model",
  "cleanup",
  "cli_utils.argparse_config_merge",
  "cli_utils.import_module",
  "cli_utils.read_config_file",
  "cluster_class",
  "collection.BaseProcedureDataset.DataModel",
  "collection.BaseProcedureDataset.DataModel.Config",
  "collection.Collection.DataModel",
  "collection_class",
  "collections.Mapping",
  "collections.abc.Iterable",
  "common_models.DriverEnum.__doc__",
  "common_models.Molecule.from_data",
  "common_models.ProtoModel.Config",
  "config.DatabaseSettings.field_names",
  "config.DatabaseSettings.help_info",
  "config.FractalConfig.help_info",
  "config.FractalServerSettings.field_names",
  "config.FractalServerSettings.help_info",
  "count_gradient_evals",
  "count_gradients",
  "count_optimizations",
  "cryptography.hazmat.primitives.serialization.Encoding.PEM",
  "cryptography.hazmat.primitives.serialization.PrivateFormat.TraditionalOpenSSL",
  "cryptography.x509.oid.NameOID.COMMON_NAME",
  "dask.distributed.Client",
  "dask.distributed.wait",
  "dataset.Dataset.DataModel",
  "element_equal",
  "f",
  "func",
  "get_ipython",
  "h5py.string_dtype",
  "h5py.vlen_dtype",
  "hashlib.blake2b",
  "hashlib.sha1",
  "interface.models.CompressionEnum.lzma",
  "interface.models.KVStore.compress",
  "interface.models.ProtoModel.Config",
  "interface.models.records.RecordStatusEnum.complete",
  "interface.models.task_models.PriorityEnum.HIGH",
  "interface.models.task_models.PriorityEnum.NORMAL",
  "interface.models.task_models.TaskStatusEnum.running",
  "itertools",
  "itertools.combinations",
  "itertools.product",
  "launcher",
  "method",
  "models.Base.metadata.create_all",
  "models.Base.metadata.drop_all",
  "models.Molecule.from_data",
  "models.Molecule.from_file",
  "multiprocessing.set_start_method",
  "numpy.float64",
  "numpy.nan",
  "numpy.random.rand",
  "numpy.random.random",
  "os.chdir",
  "os.getcwd",
  "os.name.lower",
  "os.path.abspath",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.getsize",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.path.realpath",
  "pandas.DataFrame.from_dict",
  "pandas.MultiIndex.from_tuples",
  "portal.FractalClient",
  "portal.Molecule",
  "portal.Molecule.from_data",
  "portal.collections.Dataset",
  "portal.collections.ReactionDataset",
  "portal.data.get_molecule",
  "portal.models.KVStore",
  "portal.util.replace_dict_keys",
  "procedure_class",
  "provider_class",
  "psycopg2._psycopg.OperationalError",
  "pydantic.Field",
  "pydantic.root_validator",
  "pytest.mark.parametrize",
  "pytest.mark.skip",
  "pytest.mark.skipif",
  "pytest.mark.slow",
  "pytest.mark.xfail",
  "qcelemental.constants.Quantity",
  "qcelemental.constants.conversion_factor",
  "qcelemental.constants.ureg",
  "qcelemental.models.AtomicInput",
  "qcelemental.models.AtomicResult",
  "qcelemental.models.AutodocBaseSettings",
  "qcelemental.models.BasisSet",
  "qcelemental.models.ComputeError",
  "qcelemental.models.FailedOperation",
  "qcelemental.models.Molecule",
  "qcelemental.models.Optimization",
  "qcelemental.models.OptimizationInput",
  "qcelemental.models.OptimizationResult",
  "qcelemental.models.ProtoModel",
  "qcelemental.models.Provenance",
  "qcelemental.models.Result",
  "qcelemental.models.ResultInput",
  "qcelemental.models.ResultProperties",
  "qcelemental.models.common_models.qcschema_optimization_output_default",
  "qcelemental.models.common_models.qcschema_output_default",
  "qcelemental.models.procedures.OptimizationProtocols",
  "qcelemental.models.procedures.OptimizationProtocols.__base_doc__",
  "qcelemental.models.results.ResultProtocols",
  "qcelemental.models.results.ResultProtocols.__base_doc__",
  "qcelemental.models.results.WavefunctionProperties.__fields__.keys",
  "qcelemental.models.results.WavefunctionProperties._return_results_names",
  "qcelemental.models.types.Array",
  "qcelemental.molutil.order_molecular_formula",
  "qcelemental.util.deserialize",
  "qcelemental.util.get_base_docs",
  "qcelemental.util.msgpackext_dumps",
  "qcelemental.util.msgpackext_loads",
  "qcelemental.util.parse_version",
  "qcelemental.util.serialization.deserialize",
  "qcelemental.util.serialization.serialize",
  "qcelemental.util.serialize",
  "qcfractal.__init__.get_information",
  "qcfractal.interface.FractalClient.from_file",
  "qcfractal.interface.Molecule.from_data",
  "qcfractal.interface.__init__.get_information",
  "qcfractal.interface.__init__.versions",
  "qcfractal.interface.collections.Generic.from_server",
  "qcfractal.interface.collections.ReactionDataset.from_server",
  "qcfractal.interface.models.CompressionEnum.lzma",
  "qcfractal.interface.models.CompressionEnum.none",
  "qcfractal.interface.models.KVStore.compress",
  "qcfractal.interface.models.TaskStatusEnum.complete",
  "qcfractal.interface.models.TaskStatusEnum.error",
  "qcfractal.interface.models.TaskStatusEnum.running",
  "qcfractal.interface.models.TaskStatusEnum.waiting",
  "qcfractal.interface.models.records.RecordStatusEnum.complete",
  "qcfractal.interface.models.records.RecordStatusEnum.incomplete",
  "qcfractal.interface.models.task_models.ManagerStatusEnum.inactive",
  "qcfractal.interface.models.task_models.PriorityEnum.NORMAL",
  "qcfractal.interface.models.task_models.TaskStatusEnum.waiting",
  "qcfractal.procedures.__init__.OptimizationTasks",
  "qcfractal.procedures.__init__.SingleResultTasks",
  "qcfractal.procedures.__init__.__procedure_map",
  "qcfractal.procedures.__init__.supported_procedures",
  "qcfractal.storage_sockets.models.Base.metadata",
  "qcfractal.storage_sockets.models.Base.metadata.create_all",
  "qcfractal.storage_sockets.models.BaseResultORM.id",
  "qcfractal.storage_sockets.models.BaseResultORM.id.in_",
  "qcfractal.storage_sockets.models.BaseResultORM.manager_name",
  "qcfractal.storage_sockets.models.BaseResultORM.status",
  "qcfractal.storage_sockets.models.MoleculeORM.id",
  "qcfractal.storage_sockets.models.MoleculeORM.molecule_hash",
  "qcfractal.storage_sockets.models.QueueManagerLogORM.timestamp",
  "qcfractal.storage_sockets.models.QueueManagerORM.__dict__.keys",
  "qcfractal.storage_sockets.models.QueueManagerORM.completed",
  "qcfractal.storage_sockets.models.QueueManagerORM.failures",
  "qcfractal.storage_sockets.models.QueueManagerORM.modified_on",
  "qcfractal.storage_sockets.models.QueueManagerORM.returned",
  "qcfractal.storage_sockets.models.QueueManagerORM.submitted",
  "qcfractal.storage_sockets.models.ResultORM.basis",
  "qcfractal.storage_sockets.models.ResultORM.driver",
  "qcfractal.storage_sockets.models.ResultORM.id",
  "qcfractal.storage_sockets.models.ResultORM.id.in_",
  "qcfractal.storage_sockets.models.ResultORM.keywords",
  "qcfractal.storage_sockets.models.ResultORM.method",
  "qcfractal.storage_sockets.models.ResultORM.molecule",
  "qcfractal.storage_sockets.models.ResultORM.program",
  "qcfractal.storage_sockets.models.ServerStatsLogORM.timestamp",
  "qcfractal.storage_sockets.models.ServiceQueueORM.__dict__.keys",
  "qcfractal.storage_sockets.models.ServiceQueueORM.created_on",
  "qcfractal.storage_sockets.models.ServiceQueueORM.priority.desc",
  "qcfractal.storage_sockets.models.TaskQueueORM.base_result_id",
  "qcfractal.storage_sockets.models.TaskQueueORM.base_result_id.in_",
  "qcfractal.storage_sockets.models.TaskQueueORM.created_on",
  "qcfractal.storage_sockets.models.TaskQueueORM.id",
  "qcfractal.storage_sockets.models.TaskQueueORM.id.in_",
  "qcfractal.storage_sockets.models.TaskQueueORM.manager",
  "qcfractal.storage_sockets.models.TaskQueueORM.priority.desc",
  "qcfractal.storage_sockets.models.TaskQueueORM.procedure",
  "qcfractal.storage_sockets.models.TaskQueueORM.procedure.in_",
  "qcfractal.storage_sockets.models.TaskQueueORM.status",
  "qcfractal.storage_sockets.models.VersionsORM.created_on.desc",
  "qcfractal.testing.fractal_compute_server.await_results",
  "qcfractal.testing.fractal_compute_server.await_services",
  "qcfractal.testing.fractal_compute_server.client",
  "qcfractal.testing.fractal_compute_server.get_address",
  "qcfractal.testing.fractal_compute_server.list_current_tasks",
  "qcfractal.testing.fractal_compute_server.objects",
  "qcfractal.testing.fractal_compute_server.objects.queue_mark_complete",
  "qcfractal.testing.fractal_compute_server.storage.custom_query",
  "qcfractal.testing.fractal_compute_server.storage.get_managers",
  "qcfractal.testing.fractal_compute_server.storage.get_procedures",
  "qcfractal.testing.fractal_compute_server.storage.manager_update",
  "qcfractal.testing.fractal_compute_server.storage.queue_get_next",
  "qcfractal.testing.fractal_compute_server.update_services",
  "qcfractal.testing.fractal_compute_server.update_tasks",
  "qcfractal.testing.fractal_compute_server.view_handler.view_path",
  "qcfractal.testing.sqlalchemy_socket_fixture.Session",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_collection",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_keywords",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_molecules",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_procedures",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_results",
  "qcfractal.testing.sqlalchemy_socket_fixture.add_user",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_collection",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_keywords",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_molecules",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_procedures",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_results",
  "qcfractal.testing.sqlalchemy_socket_fixture.del_tasks",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_add_keywords_mixed",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_add_molecules_mixed",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_collections",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_keywords",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_kvstore",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_managers",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_molecules",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_procedures",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_project_name",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_queue",
  "qcfractal.testing.sqlalchemy_socket_fixture.get_results",
  "qcfractal.testing.sqlalchemy_socket_fixture.manager_update",
  "qcfractal.testing.sqlalchemy_socket_fixture.modify_user",
  "qcfractal.testing.sqlalchemy_socket_fixture.queue_reset_status",
  "qcfractal.testing.sqlalchemy_socket_fixture.remove_user",
  "qcfractal.testing.sqlalchemy_socket_fixture.verify_user",
  "qcfractal.testing.test_server.get_address",
  "re.M",
  "records.RecordBase.Config",
  "response_model",
  "rfunc",
  "signal.CTRL_BREAK_EVENT",
  "signal.SIGINT",
  "signal.SIGKILL",
  "signal.SIGTERM",
  "socket.AF_INET",
  "socket.SHUT_RDWR",
  "socket.SOCK_STREAM",
  "socket.gethostbyname",
  "socket.gethostname",
  "spin_up_test",
  "sqlalchemy.func.array_agg",
  "sqlalchemy.func.count",
  "sqlalchemy_socket.SQLAlchemySocket",
  "super.__str__",
  "sys",
  "sys._called_from_test",
  "sys.exit",
  "sys.maxsize",
  "sys.platform.startswith",
  "sys.prefix",
  "sys.stderr",
  "task_models.PriorityEnum.__doc__",
  "test_helper.compare_lists",
  "time",
  "time.sleep",
  "time.time"
 ],
 "deps": {
  "HDF5View": [],
  "Meta": [],
  "PlainTextView": [],
  "_build_subset": [],
  "_query_apply_coeffients": [],
  "_version": [],
  "_write_dataset": [],
  "abc": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "alembic": [
   "alembic/conda-forge/noarch/alembic-1.0.7-py_0"
  ],
  "argparse": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "asyncio": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "atexit": [],
  "bcrypt": [],
  "body_model": [],
  "bz2": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "cProfile": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "cleanup": [],
  "cli_utils": [],
  "cluster_class": [],
  "collection": [],
  "collection_class": [],
  "collections": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "common_models": [],
  "concurrent": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "config": [],
  "contextlib": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "copy": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "count_gradient_evals": [],
  "count_gradients": [],
  "count_optimizations": [],
  "cryptography": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "dask": [],
  "dask_jobqueue": [
   "dask-jobqueue/conda-forge/noarch/dask-jobqueue-0.3.0-py_0"
  ],
  "dataset": [],
  "datetime": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "distutils": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "element_equal": [],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "f": [],
  "fireworks": [
   "fireworks/conda-forge/noarch/fireworks-1.9.6-py_0"
  ],
  "func": [],
  "functools": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "get_ipython": [],
  "glob": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "gzip": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "h5py": [
   "h5py/conda-forge/linux-64/h5py-2.7.1-py36_1"
  ],
  "hashlib": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "importlib": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "interface": [],
  "io": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "ipaddress": [
   "ipaddress/conda-forge/noarch/ipaddress-1.0.22-py_1",
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "itertools": [],
  "json": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "launcher": [],
  "logging": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "lzma": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "math": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "method": [],
  "models": [],
  "multiprocessing": [],
  "numpy": [
   "numpy/conda-forge/linux-64/numpy-1.9.3-py27_blas_openblashb06ca3d_7"
  ],
  "operator": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "os": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "pandas": [
   "pandas/conda-forge/linux-64/pandas-0.25.0-py37hb3f55d8_0"
  ],
  "parsl": [
   "parsl/conda-forge/noarch/parsl-1.0.0-py_0"
  ],
  "pathlib": [
   "pathlib/conda-forge/noarch/pathlib-1.0.1-py_1",
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "pkgutil": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "plotly": [
   "plotly/conda-forge/noarch/plotly-4.4.1-py_0"
  ],
  "portal": [],
  "procedure_class": [],
  "provider_class": [],
  "psycopg2": [
   "psycopg2/conda-forge/linux-64/psycopg2-2.8.6-py39hba1e1b8_1"
  ],
  "pyarrow": [
   "pyarrow/conda-forge/linux-64/pyarrow-0.17.1-py36h57d41e7_33_cpu",
   "pyarrow/conda-forge/linux-64/pyarrow-1.0.1-py37he2832ee_38_cpu"
  ],
  "pydantic": [
   "pydantic/conda-forge/noarch/pydantic-0.18.1-py_1"
  ],
  "pytest": [
   "pytest/conda-forge/linux-64/pytest-4.6.3-py27_0",
   "pytest/conda-forge/linux-64/pytest-6.0.2-py36hc560c46_0"
  ],
  "qcelemental": [
   "qcelemental/conda-forge/noarch/qcelemental-0.1.3-py_0"
  ],
  "qcengine": [
   "qcengine/conda-forge/noarch/qcengine-0.10.0-py_0"
  ],
  "qcfractal": [],
  "qcportal": [
   "qcportal/conda-forge/noarch/qcportal-0.8.0-py_0"
  ],
  "random": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "re": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "records": [],
  "requests": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "requests_mock": [
   "requests-mock/conda-forge/noarch/requests-mock-1.9.1-pyhd8ed1ab_0"
  ],
  "response_model": [],
  "rfunc": [],
  "sched": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "secrets": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "shutil": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "signal": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "socket": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "spin_up_test": [],
  "sqlalchemy": [
   "sqlalchemy/conda-forge/linux-64/sqlalchemy-1.3.15-py36h8c4c3a4_1"
  ],
  "sqlalchemy_socket": [],
  "ssl": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "subprocess": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "super": [],
  "sys": [],
  "tarfile": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "task_models": [],
  "tempfile": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "test_helper": [],
  "threading": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "time": [],
  "tornado": [
   "tornado/conda-forge/linux-64/tornado-5.1.1-py36h97a6639_1"
  ],
  "torsiondrive": [
   "torsiondrive/conda-forge/noarch/torsiondrive-0.9.8.1-py_0"
  ],
  "tqdm": [
   "tqdm/conda-forge/noarch/tqdm-4.20.0-py_0"
  ],
  "traceback": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "typing": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "unicodedata": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "uuid": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "warnings": [
   "python/conda-forge/linux-64/python-3.6.11-h4d41432_0_cpython"
  ],
  "yaml": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "pyyaml/conda-forge/linux-64/pyyaml-5.4.1-py36h70b1f00_0"
  ]
 }
}