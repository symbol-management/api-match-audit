{
 "bad": [
  "IPython.embed",
  "_show_context_from_line",
  "_version.get_versions",
  "add_dict_to_table",
  "add_rbv",
  "aliases",
  "argparse.Action",
  "argparse.ArgumentParser",
  "argparse.FileType",
  "argparse.RawTextHelpFormatter",
  "ast.literal_eval",
  "build_func",
  "cls",
  "cls._load_path_hint",
  "code.determine_block_type",
  "code.get_pou_call_blocks",
  "code.program_name_from_declaration",
  "code.variables_from_declaration",
  "collections.ChainMap",
  "collections.OrderedDict",
  "collections.defaultdict",
  "compile.attributes",
  "configparser.ConfigParser",
  "conftest.PROJ_ROOT",
  "conftest.TEST_PATH",
  "conftest.TMC_ROOT",
  "conftest.lint_record",
  "db.LinterError",
  "db.process",
  "default_settings.unified_ordered_field_list.unified_lookup_list",
  "dictify_func",
  "func",
  "get_source_items",
  "getpass.getuser",
  "importlib.import_module",
  "itertools.product",
  "jinja2.ChoiceLoader",
  "jinja2.Environment",
  "jinja2.FileSystemLoader",
  "jinja2.PackageLoader",
  "jinja2.evalcontextfilter",
  "json.loads",
  "keyed_on",
  "line_to_dict",
  "linter.lint_db",
  "logging.basicConfig",
  "logging.getLogger",
  "lxml.etree.QName",
  "lxml.etree._Comment",
  "lxml.etree.parse",
  "math.floor",
  "math.log10",
  "os.listdir",
  "os.makedirs",
  "os.path.exists",
  "os.path.relpath",
  "os.path.splitext",
  "parser.Box",
  "parser.Declaration",
  "parser.Link",
  "parser.NC",
  "parser.SubItem",
  "parser.Symbol",
  "parser._ArrayItemProxy",
  "parser.add_argument",
  "parser.add_mutually_exclusive_group",
  "parser.description",
  "parser.formatter_class",
  "parser.parse",
  "parser.projects_from_solution",
  "parser.separate_by_classname",
  "parser_func",
  "pathlib.Path",
  "pathlib.PureWindowsPath",
  "pdb.set_trace",
  "pkg_resources.resource_filename",
  "pprint.pprint",
  "pragmas.dictify_config",
  "pragmas.expand_configurations_from_chain",
  "pragmas.find_pytmc_symbols",
  "pragmas.normalize_io",
  "pragmas.parse_archive_settings",
  "pragmas.parse_update_rate",
  "pragmas.record_packages_from_symbol",
  "pragmas.separate_configs_by_pv",
  "pragmas.split_pytmc_pragma",
  "pragmas.squash_configs",
  "pyPDB.dbd.yacc.parse",
  "pyPDB.dbdlint.DBSyntaxError",
  "pyPDB.dbdlint.Results",
  "pyPDB.dbdlint.dbdtree",
  "pyPDB.dbdlint.getargs",
  "pyPDB.dbdlint.walk",
  "pytest.fixture",
  "pytest.mark.parametrize",
  "pytest.mark.skip",
  "pytest.mark.xfail",
  "pytest.param",
  "pytest.raises",
  "pytest.xfail",
  "pytmc.__version__",
  "pytmc._version.version_json",
  "pytmc.bin.code.DESCRIPTION",
  "pytmc.bin.code.dump_source_code",
  "pytmc.bin.code.main",
  "pytmc.bin.db.DESCRIPTION",
  "pytmc.bin.db.LinterError",
  "pytmc.bin.db.logger",
  "pytmc.bin.db.main",
  "pytmc.bin.db.parser",
  "pytmc.bin.db.process",
  "pytmc.bin.db.validate_with_dbd",
  "pytmc.bin.debug.DESCRIPTION",
  "pytmc.bin.debug.TmcSummary",
  "pytmc.bin.debug._annotate_record_text",
  "pytmc.bin.debug._grep_record_names",
  "pytmc.bin.debug.create_debug_gui",
  "pytmc.bin.debug.logger",
  "pytmc.bin.iocboot.DESCRIPTION",
  "pytmc.bin.pragmalint.DESCRIPTION",
  "pytmc.bin.pragmalint.PRAGMA_LINE_RE",
  "pytmc.bin.pragmalint.PRAGMA_PV_LINE_RE",
  "pytmc.bin.pragmalint.PRAGMA_RE",
  "pytmc.bin.pragmalint.PRAGMA_SETTING_RE",
  "pytmc.bin.pragmalint.PRAGMA_START_RE",
  "pytmc.bin.pragmalint._build_map_of_offset_to_line_number",
  "pytmc.bin.pragmalint.find_pragmas",
  "pytmc.bin.pragmalint.lint_pragma",
  "pytmc.bin.pragmalint.lint_source",
  "pytmc.bin.pragmalint.logger",
  "pytmc.bin.pragmalint.main",
  "pytmc.bin.pragmalint.match_single_pragma",
  "pytmc.bin.pragmalint.pragmas",
  "pytmc.bin.pytmc.COMMANDS",
  "pytmc.bin.pytmc.COMMANDS.keys",
  "pytmc.bin.pytmc.DESCRIPTION",
  "pytmc.bin.pytmc.MODULES",
  "pytmc.bin.pytmc._build_commands",
  "pytmc.bin.pytmc._try_import",
  "pytmc.bin.pytmc.main",
  "pytmc.bin.stcmd.DESCRIPTION",
  "pytmc.bin.stcmd.get_name",
  "pytmc.bin.stcmd.jinja_filters",
  "pytmc.bin.stcmd.logger",
  "pytmc.bin.stcmd.main",
  "pytmc.bin.summary.DESCRIPTION",
  "pytmc.bin.summary.main",
  "pytmc.bin.summary.outline",
  "pytmc.bin.summary.summary",
  "pytmc.bin.types.DESCRIPTION",
  "pytmc.bin.types.TmcTypes",
  "pytmc.bin.types.create_types_gui",
  "pytmc.bin.types.find_data_types",
  "pytmc.bin.util.pytmc",
  "pytmc.bin.xmltranslate.DESCRIPTION",
  "pytmc.bin.xmltranslate.main",
  "pytmc.bin.xmltranslate.recursive",
  "pytmc.code.RE_ACTION",
  "pytmc.code.RE_FUNCTION",
  "pytmc.code.RE_FUNCTION_BLOCK",
  "pytmc.code.RE_PROGRAM",
  "pytmc.code.lines_between",
  "pytmc.code.logger",
  "pytmc.code.variables_from_declaration",
  "pytmc.default_settings.unified_ordered_field_list.unified_list",
  "pytmc.defaults.config",
  "pytmc.linter.DbdFile",
  "pytmc.linter.LinterResults",
  "pytmc.linter.lint_db",
  "pytmc.parser.Axis",
  "pytmc.parser.AxisPara",
  "pytmc.parser.BuiltinDataType",
  "pytmc.parser.DataType",
  "pytmc.parser.Declaration",
  "pytmc.parser.EncPara",
  "pytmc.parser.Encoder",
  "pytmc.parser.EnumInfo",
  "pytmc.parser.Implementation",
  "pytmc.parser.Link",
  "pytmc.parser.Module",
  "pytmc.parser.OwnerA",
  "pytmc.parser.OwnerB",
  "pytmc.parser.SLN_PROJECT_RE",
  "pytmc.parser.Symbol",
  "pytmc.parser.Symbol_DUT_MotionStage",
  "pytmc.parser.TWINCAT_TYPES",
  "pytmc.parser.T_MaxString",
  "pytmc.parser.TcModuleClass",
  "pytmc.parser.TopLevelProject",
  "pytmc.parser.TwincatItem",
  "pytmc.parser.Type",
  "pytmc.parser.USE_NAME_AS_PATH",
  "pytmc.parser._TmcItem",
  "pytmc.parser._TwincatProjectSubItem",
  "pytmc.parser._determine_path",
  "pytmc.parser.case_insensitive_path",
  "pytmc.parser.element_to_class_name",
  "pytmc.parser.get_pou_call_blocks",
  "pytmc.parser.logger",
  "pytmc.parser.parse",
  "pytmc.parser.separate_by_classname",
  "pytmc.parser.strip_namespace",
  "pytmc.parser.variables_from_declaration",
  "pytmc.pragmas.ARCHIVE_DEFAULT",
  "pytmc.pragmas.IO_INPUT",
  "pytmc.pragmas.IO_OUTPUT",
  "pytmc.pragmas.SingularChain",
  "pytmc.pragmas.UPDATE_RATE_DEFAULT",
  "pytmc.pragmas.VALID_POLL_RATES_HZ",
  "pytmc.pragmas._ARCHIVE_RE",
  "pytmc.pragmas._FIELD_FINDER",
  "pytmc.pragmas._LINE_FINDER",
  "pytmc.pragmas._LINE_PARSER",
  "pytmc.pragmas._UPDATE_RE",
  "pytmc.pragmas._parse_rate",
  "pytmc.pragmas.always_true",
  "pytmc.pragmas.chains_from_symbol",
  "pytmc.pragmas.dictify_config",
  "pytmc.pragmas.expand_configurations_from_chain",
  "pytmc.pragmas.find_pytmc_symbols",
  "pytmc.pragmas.get_pragma",
  "pytmc.pragmas.has_pragma",
  "pytmc.pragmas.normalize_config",
  "pytmc.pragmas.normalize_io",
  "pytmc.pragmas.parse_archive_settings",
  "pytmc.pragmas.parse_update_rate",
  "pytmc.pragmas.record_packages_from_symbol",
  "pytmc.pragmas.separate_configs_by_pv",
  "pytmc.pragmas.split_field",
  "pytmc.pragmas.split_pytmc_pragma",
  "pytmc.pragmas.squash_configs",
  "pytmc.record.BinaryRecordPackage",
  "pytmc.record.EPICSRecord",
  "pytmc.record.EnumRecordPackage",
  "pytmc.record.FloatRecordPackage",
  "pytmc.record.IntegerRecordPackage",
  "pytmc.record.MAX_ARCHIVE_ELEMENTS",
  "pytmc.record.MAX_DESC_FIELD_LENGTH",
  "pytmc.record.RecordPackage",
  "pytmc.record.RecordPackage.from_chain",
  "pytmc.record.StringRecordPackage",
  "pytmc.record.TwincatTypeRecordPackage",
  "pytmc.record.WaveformRecordPackage",
  "pytmc.record._default_jinja_env",
  "pytmc.record._truncate_middle",
  "pytmc.record._update_description",
  "pytmc.record.generate_archive_settings",
  "pytmc.record.logger",
  "pytmc.record.sort_fields",
  "qtpy.QtCore.Qt.Horizontal",
  "qtpy.QtCore.Qt.UserRole",
  "qtpy.QtCore.Qt.Vertical",
  "qtpy.QtCore.Signal",
  "qtpy.QtWidgets.QApplication",
  "qtpy.QtWidgets.QComboBox",
  "qtpy.QtWidgets.QFrame",
  "qtpy.QtWidgets.QHBoxLayout",
  "qtpy.QtWidgets.QListWidget",
  "qtpy.QtWidgets.QListWidgetItem",
  "qtpy.QtWidgets.QMainWindow",
  "qtpy.QtWidgets.QSplitter",
  "qtpy.QtWidgets.QTableWidget",
  "qtpy.QtWidgets.QTableWidgetItem",
  "qtpy.QtWidgets.QTextEdit",
  "qtpy.QtWidgets.QVBoxLayout",
  "re.MULTILINE",
  "re.compile",
  "record.RecordPackage.from_chain",
  "record.generate_archive_settings",
  "spec",
  "split_rtyp",
  "sys.exit",
  "sys.stderr",
  "sys.stdout",
  "test_xml_collector.make_mock_twincatitem",
  "test_xml_collector.make_mock_type",
  "tests.conftest.DBD_FILE",
  "tests.conftest.PROJ_ROOT",
  "tests.conftest.TEST_PATH",
  "tests.conftest.TMC_FILES",
  "tests.conftest.TMC_ROOT",
  "tests.conftest.TSPROJ_PROJECTS",
  "tests.conftest._generate_project_and_plcs",
  "tests.conftest.dbd_file",
  "tests.conftest.project_filename",
  "tests.test_archive.get_record_package",
  "tests.test_commandline.project_filename_linter_success",
  "tests.test_commandline.sys",
  "tests.test_lint.make_pragma",
  "tests.test_lint.make_source",
  "tests.test_lint.make_source_param",
  "tests.test_xml_collector.chain",
  "tests.test_xml_collector.make_mock_twincatitem",
  "tests.test_xml_collector.make_mock_type",
  "tests.test_xml_obj.branch_bool_pragma_string",
  "tests.test_xml_obj.leaf_bool_pragma_string",
  "tests.test_xml_obj.leaf_bool_pragma_string_single_line",
  "tests.test_xml_obj.leaf_bool_pragma_string_w_semicolon",
  "textwrap.indent",
  "to_dict",
  "types.SimpleNamespace",
  "typing.Generator",
  "typing.Optional",
  "typing.Type",
  "typing.Union",
  "util.heading",
  "util.python_debug_session",
  "util.sub_heading",
  "util.sub_sub_heading",
  "util.text_block",
  "xml.etree.ElementTree.parse"
 ],
 "deps": {
  "IPython": [],
  "_show_context_from_line": [],
  "_version": [],
  "add_dict_to_table": [],
  "add_rbv": [],
  "aliases": [],
  "argparse": [],
  "ast": [],
  "build_func": [],
  "cls": [],
  "code": [],
  "collections": [],
  "compile": [],
  "configparser": [],
  "conftest": [],
  "db": [],
  "default_settings": [],
  "dictify_func": [],
  "func": [],
  "get_source_items": [],
  "getpass": [],
  "importlib": [],
  "itertools": [],
  "jinja2": [],
  "json": [],
  "keyed_on": [],
  "line_to_dict": [],
  "linter": [],
  "logging": [],
  "lxml": [],
  "math": [],
  "os": [],
  "parser": [],
  "parser_func": [],
  "pathlib": [],
  "pdb": [],
  "pkg_resources": [],
  "pprint": [],
  "pragmas": [],
  "pyPDB": [],
  "pytest": [],
  "pytmc": [],
  "qtpy": [],
  "re": [],
  "record": [],
  "spec": [],
  "split_rtyp": [],
  "sys": [],
  "test_xml_collector": [],
  "tests": [],
  "textwrap": [],
  "to_dict": [],
  "types": [],
  "typing": [],
  "util": [],
  "xml": []
 }
}