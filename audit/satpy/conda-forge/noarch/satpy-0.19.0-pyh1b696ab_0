{
 "bad": [
  "FakeMod",
  "FakeZarr",
  "Foo",
  "MockScene",
  "PIL.Image.fromarray",
  "PIL.Image.new",
  "PIL.ImageDraw.Draw",
  "PIL.ImageFont.truetype",
  "Queue.Queue",
  "_area_id",
  "_calc_chunks",
  "_google_cloud_platform.get_bucket_files",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "abc.abstractproperty",
  "argparse.ArgumentParser",
  "bz2.BZ2File",
  "cls",
  "cmap_comp",
  "collections.Mapping",
  "collections.OrderedDict",
  "collections.OrderedDict.fromkeys",
  "collections.defaultdict",
  "collections.deque",
  "collections.namedtuple",
  "comp",
  "comp._refl3x",
  "comp.area",
  "comp.filename",
  "comp.transparency",
  "compositor",
  "compositor.id",
  "contextlib.closing",
  "copy.copy",
  "copy.deepcopy",
  "dask.distributed.get_client",
  "datetime.datetime",
  "datetime.datetime.combine",
  "datetime.datetime.fromtimestamp",
  "datetime.datetime.now",
  "datetime.datetime.strptime",
  "datetime.datetime.timestamp",
  "datetime.datetime.utcnow",
  "datetime.timedelta",
  "eccodes.codes_bufr_new_from_file",
  "eccodes.codes_bufr_new_from_samples",
  "eccodes.codes_get_array",
  "eccodes.codes_release",
  "eccodes.codes_set",
  "eccodes.codes_set_array",
  "errno.EEXIST",
  "filetype_cls",
  "fill_h5",
  "flatten",
  "fnmatch.fnmatch",
  "fun",
  "func",
  "functools.partial",
  "functools.reduce",
  "geotiepoints.SatelliteInterpolator",
  "geotiepoints.interpolator.Interpolator",
  "geotiepoints.metop20kmto1km",
  "geotiepoints.modisinterpolator.modis_1km_to_250m",
  "geotiepoints.modisinterpolator.modis_1km_to_500m",
  "geotiepoints.modisinterpolator.modis_5km_to_1km",
  "geotiepoints.multilinear.MultilinearInterpolator",
  "get_ipython",
  "get_lrec",
  "glob.glob",
  "glob.iglob",
  "h5py.Dataset",
  "h5py.File",
  "h5py._hl.base.Empty",
  "h5py.h5r.Reference",
  "h5py.h5r.get_name",
  "hashlib.sha1",
  "interpolation_function",
  "interpolator",
  "io.StringIO",
  "is_int",
  "itertools.product",
  "json.JSONEncoder",
  "json.dumps",
  "json.loads",
  "libtiff.TIFF.open",
  "loader",
  "logging.DEBUG",
  "logging.ERROR",
  "logging.Formatter",
  "logging.INFO",
  "logging.Logger",
  "logging.Logger.trace",
  "logging.NullHandler",
  "logging.StreamHandler",
  "logging.WARN",
  "logging.WARNING",
  "logging.addLevelName",
  "logging.basicConfig",
  "logging.getLogger",
  "make_xarray",
  "method_to_decorate",
  "mloader",
  "mock.MagicMock",
  "mock.patch",
  "mock.patch.dict",
  "mock_open",
  "netCDF4.Dataset",
  "netCDF4.Variable",
  "netCDF4.default_fillvals",
  "netCDF4.default_fillvals.get",
  "netcdf_utils.NetCDF4FileHandler",
  "numbers.Number",
  "numpy.NaN",
  "numpy.abs",
  "numpy.all",
  "numpy.allclose",
  "numpy.any",
  "numpy.append",
  "numpy.arange",
  "numpy.arccos",
  "numpy.arcsin",
  "numpy.arctan2",
  "numpy.argmax",
  "numpy.argmin",
  "numpy.array",
  "numpy.asanyarray",
  "numpy.asarray",
  "numpy.ascontiguousarray",
  "numpy.bitwise_and",
  "numpy.bitwise_or",
  "numpy.bool",
  "numpy.bool_",
  "numpy.byte",
  "numpy.bytes_",
  "numpy.ceil",
  "numpy.choose",
  "numpy.clip",
  "numpy.concatenate",
  "numpy.cos",
  "numpy.count_nonzero",
  "numpy.datetime64",
  "numpy.deg2rad",
  "numpy.divmod",
  "numpy.dstack",
  "numpy.dtype",
  "numpy.e",
  "numpy.empty",
  "numpy.empty_like",
  "numpy.equal",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.fabs",
  "numpy.finfo",
  "numpy.flipud",
  "numpy.float",
  "numpy.float32",
  "numpy.float64",
  "numpy.floating",
  "numpy.floor",
  "numpy.frombuffer",
  "numpy.fromfile",
  "numpy.full",
  "numpy.full_like",
  "numpy.generic",
  "numpy.histogram",
  "numpy.hstack",
  "numpy.iinfo",
  "numpy.indices",
  "numpy.inf",
  "numpy.int",
  "numpy.int16",
  "numpy.int32",
  "numpy.int8",
  "numpy.integer",
  "numpy.interp",
  "numpy.isclose",
  "numpy.isfinite",
  "numpy.isnan",
  "numpy.isnat",
  "numpy.isscalar",
  "numpy.issubdtype",
  "numpy.left_shift",
  "numpy.linspace",
  "numpy.load",
  "numpy.log",
  "numpy.log10",
  "numpy.logical_and",
  "numpy.logical_not",
  "numpy.logical_or",
  "numpy.ma.MaskedArray",
  "numpy.ma.arange",
  "numpy.ma.empty",
  "numpy.ma.getdata",
  "numpy.ma.getmask",
  "numpy.ma.masked_array",
  "numpy.ma.masked_invalid",
  "numpy.ma.masked_where",
  "numpy.ma.vstack",
  "numpy.max",
  "numpy.maximum",
  "numpy.mean",
  "numpy.memmap",
  "numpy.meshgrid",
  "numpy.min",
  "numpy.nan",
  "numpy.nanmax",
  "numpy.nanmean",
  "numpy.nanmin",
  "numpy.ndarray",
  "numpy.newaxis",
  "numpy.newaxis.astype",
  "numpy.nonzero",
  "numpy.object_",
  "numpy.ones",
  "numpy.pad",
  "numpy.pi",
  "numpy.polynomial.chebyshev.Chebyshev",
  "numpy.polyval",
  "numpy.power",
  "numpy.put",
  "numpy.rad2deg",
  "numpy.random.rand",
  "numpy.random.randint",
  "numpy.random.random",
  "numpy.random.uniform",
  "numpy.ravel_multi_index",
  "numpy.repeat",
  "numpy.require",
  "numpy.reshape",
  "numpy.right_shift",
  "numpy.rint",
  "numpy.rot90",
  "numpy.round",
  "numpy.save",
  "numpy.sin",
  "numpy.sqrt",
  "numpy.squeeze",
  "numpy.stack",
  "numpy.std",
  "numpy.string_",
  "numpy.sum",
  "numpy.testing.assert_allclose",
  "numpy.testing.assert_almost_equal",
  "numpy.testing.assert_approx_equal",
  "numpy.testing.assert_array_almost_equal",
  "numpy.testing.assert_array_equal",
  "numpy.testing.assert_array_less",
  "numpy.testing.assert_equal",
  "numpy.tile",
  "numpy.timedelta64",
  "numpy.uint16",
  "numpy.uint32",
  "numpy.uint64",
  "numpy.uint8",
  "numpy.unicode_",
  "numpy.unique",
  "numpy.void",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "os.chdir",
  "os.close",
  "os.environ",
  "os.environ.get",
  "os.environ.pop",
  "os.fdopen",
  "os.getcwd",
  "os.getenv",
  "os.listdir",
  "os.makedirs",
  "os.mkdir",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.join",
  "os.path.realpath",
  "os.path.sep",
  "os.path.split",
  "os.path.splitext",
  "os.remove",
  "os.rmdir",
  "p",
  "pandas.DatetimeIndex",
  "pandas.read_csv",
  "pkg_resources.DistributionNotFound",
  "pkg_resources.get_distribution",
  "pkg_resources.resource_filename",
  "pprint.pformat",
  "proj",
  "psp",
  "psp.get_angles",
  "pycoast.ContourWriterAGG.assert_called_with",
  "pycoast.ContourWriterAGG.return_value",
  "pydecorate.DecoratorAGG",
  "pygac.gac_calibration.calibrate_solar",
  "pygac.gac_calibration.calibrate_thermal",
  "pygac.gac_klm.GACKLMReader",
  "pygac.gac_pod.GACPODReader",
  "pygac.gac_pod.GACPODReader.return_value.get_angles.return_value",
  "pygac.gac_pod.GACPODReader.return_value.get_calibrated_channels.assert_called_once",
  "pygac.gac_pod.GACPODReader.return_value.get_calibrated_channels.return_value.__getitem__.return_value",
  "pygac.gac_pod.GACPODReader.return_value.get_lonlat.return_value",
  "pygac.gac_pod.GACPODReader.return_value.get_midnight_scanline.return_value",
  "pygac.gac_pod.GACPODReader.return_value.get_miss_lines.return_value",
  "pygac.gac_pod.GACPODReader.return_value.get_qual_flags.assert_called_once",
  "pygac.gac_pod.GACPODReader.return_value.get_qual_flags.return_value",
  "pygac.gac_pod.GACPODReader.return_value.get_times.return_value",
  "pygac.gac_pod.GACPODReader.return_value.get_tle_lines.return_value",
  "pygac.gac_pod.GACPODReader.return_value.mask",
  "pygac.gac_pod.GACPODReader.return_value.meta_data",
  "pygac.lac_klm.LACKLMReader",
  "pygac.lac_pod.LACPODReader",
  "pygrib.index",
  "pygrib.open",
  "pyhdf.SD.SD",
  "pyhdf.SD.SDC.CHAR",
  "pyhdf.SD.SDC.CREATE",
  "pyhdf.SD.SDC.FLOAT32",
  "pyhdf.SD.SDC.FLOAT64",
  "pyhdf.SD.SDC.INT16",
  "pyhdf.SD.SDC.INT32",
  "pyhdf.SD.SDC.INT8",
  "pyhdf.SD.SDC.READ",
  "pyhdf.SD.SDC.TRUNC",
  "pyhdf.SD.SDC.UCHAR",
  "pyhdf.SD.SDC.UINT16",
  "pyhdf.SD.SDC.UINT32",
  "pyhdf.SD.SDC.UINT8",
  "pyhdf.SD.SDC.WRITE",
  "pyhdf.SD.SDS",
  "pyhdf.error.HDF4Error",
  "pyninjotiff.ninjotiff.get_product_config",
  "pyninjotiff.ninjotiff.save",
  "pyproj.CRS",
  "pyproj.CRS.from_string",
  "pyproj.Geod",
  "pyproj.Proj",
  "pyproj.transform",
  "pyresample.bilinear.xarr.XArrayResamplerBilinear",
  "pyresample.boundary.AreaDefBoundary",
  "pyresample.boundary.Boundary",
  "pyresample.bucket.BucketResampler",
  "pyresample.ewa.fornav",
  "pyresample.ewa.ll2cr",
  "pyresample.geometry.AreaDefinition",
  "pyresample.geometry.BaseDefinition",
  "pyresample.geometry.StackedAreaDefinition",
  "pyresample.geometry.SwathDefinition",
  "pyresample.gradient.GradientSearchResampler",
  "pyresample.kd_tree.XArrayResamplerNN",
  "pyresample.parse_area_file",
  "pyresample.resampler.BaseResampler",
  "pyresample.utils.get_area_def",
  "pyresample.utils.get_area_def_from_raster",
  "pyresample.utils.parse_area_file",
  "pyresample.utils.proj4_radius_parameters",
  "pyresample.utils.proj4_str_to_dict",
  "pyspectral.atm_correction_ir.AtmosphericalCorrection",
  "pyspectral.blackbody.C_SPEED",
  "pyspectral.blackbody.H_PLANCK",
  "pyspectral.blackbody.K_BOLTZMANN",
  "pyspectral.blackbody.blackbody_wn_rad2temp",
  "pyspectral.near_infrared_reflectance.Calculator",
  "pyspectral.rayleigh.Rayleigh",
  "random.randrange",
  "rasterio.crs.CRS",
  "rasterio.crs.CRS.from_dict",
  "rasterio.open",
  "rasterio.windows.Window",
  "re",
  "re.DOTALL",
  "re.compile",
  "re.findall",
  "re.match",
  "re.search",
  "re.sub",
  "ref_cor",
  "ref_cor.attrs",
  "resampler_class",
  "satpy.DatasetID.from_dict",
  "satpy.MultiScene.from_files",
  "satpy.readers.OLD_READER_NAMES.keys",
  "satpy.readers.electrol_hrit.HRITGOMSEpilogueFileHandler.filename",
  "satpy.readers.electrol_hrit.HRITGOMSEpilogueFileHandler.mda",
  "satpy.readers.electrol_hrit.HRITGOMSPrologueFileHandler.filename",
  "satpy.readers.electrol_hrit.HRITGOMSPrologueFileHandler.mda",
  "satpy.readers.file_handlers.BaseFileHandler.__abstractmethods__",
  "satpy.readers.file_handlers.BaseFileHandler._abstractmethods__",
  "satpy.readers.goes_imager_hrit.HRITGOESFileHandler.filename",
  "satpy.readers.goes_imager_hrit.HRITGOESFileHandler.mda",
  "satpy.readers.goes_imager_hrit.HRITGOESPrologueFileHandler.filename",
  "satpy.readers.goes_imager_hrit.HRITGOESPrologueFileHandler.mda",
  "satpy.readers.goes_imager_hrit.SPACECRAFTS.get",
  "satpy.readers.goes_imager_nc.GOESEUMNCFileHandler._is_vis",
  "satpy.readers.goes_imager_nc.GOESNCFileHandler._is_vis",
  "satpy.readers.hdfeos_base.HDFEOSGeoReader.DATASET_NAMES",
  "satpy.readers.hdfeos_base.HDFEOSGeoReader.read_mda",
  "satpy.readers.hrit_base.base_hdr_map.copy",
  "satpy.readers.hrit_jma.HRITJMAFileHandler.filename",
  "satpy.readers.hrit_jma.HRITJMAFileHandler.mda",
  "satpy.readers.hrit_jma.PLATFORMS.items",
  "satpy.readers.netcdf_utils.netCDF4.Variable",
  "satpy.readers.seviri_base.CHANNEL_NAMES.items",
  "satpy.readers.seviri_base.CHANNEL_NAMES.values",
  "satpy.readers.seviri_l1b_native_hdr.GSDTRecords.gp_pk_header",
  "satpy.readers.seviri_l1b_native_hdr.GSDTRecords.gp_pk_sh1",
  "satpy.readers.seviri_l1b_native_hdr.native_header.itemsize",
  "satpy.readers.yaml_reader.GEOSegmentYAMLReader.__bases__",
  "scale_inplace",
  "scipy.interpolate.RectBivariateSpline",
  "scipy.interpolate.interp2d",
  "scipy.interpolate.interpnd.LinearNDInterpolator",
  "scipy.interpolate.interpnd._ndim_coords_from_arrays",
  "scipy.signal.convolve2d",
  "scipy.special.erf",
  "shutil.Error",
  "shutil.copyfileobj",
  "shutil.move",
  "shutil.rmtree",
  "shutil.which",
  "six.moves.configparser.ConfigParser",
  "six.moves.reduce",
  "socket.gethostname",
  "string.ascii_uppercase",
  "subprocess.PIPE",
  "subprocess.Popen",
  "sys.argv",
  "sys.exit",
  "sys.modules",
  "sys.platform.startswith",
  "sys.version_info",
  "sys.version_info.major",
  "tempfile.NamedTemporaryFile",
  "tempfile.gettempdir",
  "tempfile.mkdtemp",
  "tempfile.mkstemp",
  "test_abi_l1b.FakeDataset",
  "test_func",
  "threading.Lock",
  "threading.Thread",
  "tile_gen",
  "tile_gen.xy_factors",
  "time.mktime",
  "time.time",
  "timestamp_func",
  "tmp_mock",
  "traceback.print_exc",
  "trollimage.colormap.pubu.colors",
  "trollimage.colormap.pubu.values",
  "trollimage.xrimage.invert_scale_offset",
  "trollsift.parse",
  "tuple.__hash__",
  "unittest.TestCase",
  "unittest.TestLoader",
  "unittest.TestSuite",
  "unittest.main",
  "unittest.mock.ANY",
  "unittest.mock.MagicMock",
  "unittest.mock.Mock",
  "unittest.mock.call",
  "unittest.mock.mock_open",
  "unittest.mock.patch",
  "unittest.mock.patch.dict",
  "unittest.mock.patch.multiple",
  "unittest.mock.patch.object",
  "unittest.skipIf",
  "unittest2.TestCase",
  "unittest2.TestLoader",
  "unittest2.TestSuite",
  "unittest2.main",
  "unittest2.skip",
  "unittest2.skipIf",
  "urllib2.URLError",
  "urllib2.urlopen",
  "warnings.catch_warnings",
  "warnings.simplefilter",
  "warnings.warn",
  "weakref.WeakValueDictionary",
  "writer_class",
  "xml.etree.ElementTree.ElementTree",
  "xml.etree.ElementTree.parse",
  "xrda",
  "yaml.BaseLoader",
  "yaml.Loader",
  "yaml.SafeLoader",
  "yaml.YAMLError",
  "yaml.load"
 ],
 "deps": {
  "FakeMod": [],
  "FakeZarr": [],
  "Foo": [],
  "MockScene": [],
  "PIL": [],
  "Queue": [],
  "_area_id": [],
  "_calc_chunks": [],
  "_google_cloud_platform": [],
  "abc": [],
  "argparse": [],
  "bs4": [
   "beautifulsoup4/conda-forge/noarch/beautifulsoup4-4.9.1-py_1",
   "beautifulsoup4/conda-forge/noarch/beautifulsoup4-4.9.2-py_0"
  ],
  "bz2": [],
  "cls": [],
  "cmap_comp": [],
  "collections": [],
  "comp": [],
  "compositor": [],
  "contextlib": [],
  "copy": [],
  "dask": [
   "dask-core/conda-forge/noarch/dask-core-2.10.0-py_0",
   "dask-core/conda-forge/noarch/dask-core-2.8.1-py_0"
  ],
  "datetime": [],
  "eccodes": [],
  "errno": [],
  "filetype_cls": [],
  "fill_h5": [],
  "flatten": [],
  "fnmatch": [],
  "fun": [],
  "func": [],
  "functools": [],
  "geotiepoints": [],
  "geoviews": [
   "geoviews-core/conda-forge/noarch/geoviews-core-1.6.3-py_0"
  ],
  "get_ipython": [],
  "get_lrec": [],
  "glob": [],
  "glymur": [
   "glymur/conda-forge/noarch/glymur-0.8.15-pyh24bf2e0_1",
   "glymur/conda-forge/noarch/glymur-0.9.2-py_0"
  ],
  "h5netcdf": [
   "h5netcdf/conda-forge/noarch/h5netcdf-0.5.0-py_0",
   "h5netcdf/conda-forge/noarch/h5netcdf-0.8.0-py_0",
   "h5netcdf/conda-forge/noarch/h5netcdf-0.9.0-pyhd8ed1ab_0"
  ],
  "h5py": [],
  "hashlib": [],
  "interpolation_function": [],
  "interpolator": [],
  "io": [],
  "is_int": [],
  "itertools": [],
  "json": [],
  "libtiff": [],
  "loader": [],
  "logging": [],
  "make_xarray": [],
  "method_to_decorate": [],
  "mloader": [],
  "mock": [],
  "mock_open": [],
  "netCDF4": [],
  "netcdf_utils": [],
  "numbers": [],
  "numpy": [],
  "os": [],
  "p": [],
  "pandas": [],
  "pathlib": [
   "pathlib/conda-forge/noarch/pathlib-1.0.1-py_1"
  ],
  "pint": [
   "pint/conda-forge/noarch/pint-0.11-py_1",
   "pint/conda-forge/noarch/pint-0.13-py_0",
   "pint/conda-forge/noarch/pint-0.8.1-py_1"
  ],
  "pkg_resources": [],
  "pprint": [],
  "proj": [],
  "psp": [],
  "pycoast": [
   "pycoast/conda-forge/noarch/pycoast-1.4.0-pyh9f0ad1d_0"
  ],
  "pydecorate": [],
  "pygac": [],
  "pygrib": [],
  "pyhdf": [],
  "pyninjotiff": [],
  "pyorbital": [
   "pyorbital/conda-forge/noarch/pyorbital-1.3.1-py_0"
  ],
  "pyproj": [],
  "pyresample": [],
  "pyspectral": [],
  "random": [],
  "rasterio": [],
  "re": [],
  "ref_cor": [],
  "requests": [
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "resampler_class": [],
  "satpy": [
   "satpy/conda-forge/noarch/satpy-0.19.0-pyh1b696ab_0"
  ],
  "scale_inplace": [],
  "scipy": [],
  "shutil": [],
  "six": [
   "six/conda-forge/noarch/six-1.14.0-py_1"
  ],
  "socket": [],
  "string": [],
  "subprocess": [],
  "sys": [],
  "tempfile": [],
  "test_abi_l1b": [],
  "test_func": [],
  "threading": [],
  "tile_gen": [],
  "time": [],
  "timestamp_func": [],
  "tmp_mock": [],
  "traceback": [],
  "trollimage": [
   "trollimage/conda-forge/noarch/trollimage-1.5.7-py_0"
  ],
  "trollsift": [
   "trollsift/conda-forge/noarch/trollsift-0.3.1-py_0"
  ],
  "tuple": [],
  "unittest": [],
  "unittest2": [],
  "urllib2": [],
  "warnings": [],
  "weakref": [],
  "writer_class": [],
  "xarray": [
   "xarray/conda-forge/noarch/xarray-0.13.0-py_0",
   "xarray/conda-forge/noarch/xarray-0.17.0-pyhd8ed1ab_0"
  ],
  "xml": [],
  "xrda": [],
  "yaml": [],
  "zarr": [
   "zarr/conda-forge/noarch/zarr-2.2.0-py_1"
  ]
 }
}