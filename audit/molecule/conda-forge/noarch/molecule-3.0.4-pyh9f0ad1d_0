{
 "bad": [
  "AnsibleModule",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "abc.abstractproperty",
  "ansible.module_utils.basic.AnsibleModule",
  "ansible.module_utils.parsing.convert_bool.boolean",
  "ansible.release.__version__",
  "binascii.b2a_hex",
  "cerberus.Validator",
  "check_func",
  "click.Choice",
  "click.UNPROCESSED",
  "click.argument",
  "click.command",
  "click.group",
  "click.option",
  "click.pass_context",
  "click.testing.CliRunner",
  "click.version_option",
  "click_completion.init",
  "click_help_colors.HelpColorsCommand",
  "click_help_colors.HelpColorsGroup",
  "click_help_colors._colorize",
  "collections.Counter",
  "collections.UserList",
  "collections.abc.Mapping",
  "collections.defaultdict",
  "collections.namedtuple",
  "colorama.Back.RESET",
  "colorama.Back.WHITE",
  "colorama.Fore.BLACK",
  "colorama.Fore.CYAN",
  "colorama.Fore.GREEN",
  "colorama.Fore.RED",
  "colorama.Fore.RESET",
  "colorama.Fore.YELLOW",
  "colorama.Style.BRIGHT",
  "colorama.Style.RESET_ALL",
  "colorama.init",
  "command",
  "contextlib.contextmanager",
  "cookiecutter.exceptions.NonTemplatedInputDirException",
  "cookiecutter.main.cookiecutter",
  "copy.copy",
  "copy.deepcopy",
  "distutils.version.LooseVersion",
  "docker.from_env",
  "fcntl.ioctl",
  "fnmatch.fnmatch",
  "func",
  "functools.partial",
  "functools.reduce",
  "glob.glob",
  "inspect.getfile",
  "io.IOBase",
  "jinja2.Environment",
  "logging.CRITICAL",
  "logging.DEBUG",
  "logging.ERROR",
  "logging.Formatter",
  "logging.INFO",
  "logging.NOTSET",
  "logging.StreamHandler",
  "logging.WARN",
  "logging.addLevelName",
  "logging.getLogger",
  "logging.getLoggerClass",
  "logging.setLoggerClass",
  "molecule.__file__",
  "molecule.__version__",
  "molecule.api.Driver",
  "molecule.api.LOG",
  "molecule.api.UserListMap",
  "molecule.api.Verifier",
  "molecule.api.drivers",
  "molecule.api.verifiers",
  "molecule.command.base.Base",
  "molecule.command.base.LOG",
  "molecule.command.base.MOLECULE_DEFAULT_SCENARIO_NAME",
  "molecule.command.base.MOLECULE_GLOB",
  "molecule.command.base._get_subcommand",
  "molecule.command.base._verify_configs",
  "molecule.command.base.click_command_ex",
  "molecule.command.base.click_group_ex",
  "molecule.command.base.execute_cmdline_scenarios",
  "molecule.command.base.execute_scenario",
  "molecule.command.base.execute_subcommand",
  "molecule.command.base.get_configs",
  "molecule.command.check.Check",
  "molecule.command.check.MOLECULE_PARALLEL",
  "molecule.command.check.check",
  "molecule.command.cleanup.Cleanup",
  "molecule.command.cleanup.LOG",
  "molecule.command.cleanup.cleanup",
  "molecule.command.converge.Converge",
  "molecule.command.converge.converge",
  "molecule.command.create.Create",
  "molecule.command.create.LOG",
  "molecule.command.create.create",
  "molecule.command.dependency.Dependency",
  "molecule.command.dependency.dependency",
  "molecule.command.destroy.Destroy",
  "molecule.command.destroy.LOG",
  "molecule.command.destroy.MOLECULE_PARALLEL",
  "molecule.command.destroy.destroy",
  "molecule.command.drivers._print_tabulate_data",
  "molecule.command.drivers.drivers",
  "molecule.command.idempotence.Idempotence",
  "molecule.command.idempotence.LOG",
  "molecule.command.idempotence.idempotence",
  "molecule.command.init.base.Base",
  "molecule.command.init.init",
  "molecule.command.init.init.init",
  "molecule.command.init.role.LOG",
  "molecule.command.init.role.Role",
  "molecule.command.init.role.role",
  "molecule.command.init.scenario.LOG",
  "molecule.command.init.scenario.Scenario",
  "molecule.command.init.scenario._default_scenario_exists",
  "molecule.command.init.scenario._role_exists",
  "molecule.command.init.scenario.scenario",
  "molecule.command.lint.LOG",
  "molecule.command.lint.Lint",
  "molecule.command.lint.lint",
  "molecule.command.list.List",
  "molecule.command.list._print_tabulate_data",
  "molecule.command.list._print_yaml_data",
  "molecule.command.list.list",
  "molecule.command.login.Login",
  "molecule.command.login.login",
  "molecule.command.login.termios",
  "molecule.command.matrix.matrix",
  "molecule.command.prepare.LOG",
  "molecule.command.prepare.Prepare",
  "molecule.command.prepare.prepare",
  "molecule.command.reset.reset",
  "molecule.command.side_effect.LOG",
  "molecule.command.side_effect.SideEffect",
  "molecule.command.side_effect.side_effect",
  "molecule.command.syntax.Syntax",
  "molecule.command.syntax.syntax",
  "molecule.command.test.MOLECULE_PARALLEL",
  "molecule.command.test.test",
  "molecule.command.verify.Verify",
  "molecule.command.verify.verify",
  "molecule.config",
  "molecule.config.Config",
  "molecule.config.LOG",
  "molecule.config.MOLECULE_DEBUG",
  "molecule.config.MOLECULE_DIRECTORY",
  "molecule.config.MOLECULE_FILE",
  "molecule.config.MOLECULE_KEEP_STRING",
  "molecule.config.NewInitCaller",
  "molecule.config.action",
  "molecule.config.getoption",
  "molecule.config.molecule_directory",
  "molecule.config.molecule_file",
  "molecule.config.set_env_from_file",
  "molecule.dependency.ansible_galaxy.AnsibleGalaxy",
  "molecule.dependency.ansible_galaxy.base.AnsibleGalaxyBase",
  "molecule.dependency.ansible_galaxy.base.LOG",
  "molecule.dependency.ansible_galaxy.base.sh",
  "molecule.dependency.ansible_galaxy.collections.Collections",
  "molecule.dependency.ansible_galaxy.roles.Roles",
  "molecule.dependency.base.Base",
  "molecule.dependency.base.LOG",
  "molecule.dependency.gilt.Gilt",
  "molecule.dependency.gilt.LOG",
  "molecule.dependency.gilt.sh",
  "molecule.dependency.shell.LOG",
  "molecule.dependency.shell.Shell",
  "molecule.dependency.shell.sh",
  "molecule.driver.base.Status",
  "molecule.driver.delegated.Delegated",
  "molecule.driver.docker.Docker",
  "molecule.driver.docker.log",
  "molecule.driver.podman.Podman",
  "molecule.driver.podman.log",
  "molecule.interpolation.Interpolator",
  "molecule.interpolation.InvalidInterpolation",
  "molecule.interpolation.TemplateWithDefaults",
  "molecule.interpolation.string",
  "molecule.logger.CustomLogger",
  "molecule.logger.LogFilter",
  "molecule.logger.OUT",
  "molecule.logger.SUCCESS",
  "molecule.logger.TrailingNewlineFormatter",
  "molecule.logger._get_critical_handler",
  "molecule.logger._get_error_handler",
  "molecule.logger._get_info_handler",
  "molecule.logger._get_out_handler",
  "molecule.logger._get_success_handler",
  "molecule.logger._get_warn_handler",
  "molecule.logger.color_text",
  "molecule.logger.cyan_text",
  "molecule.logger.get_logger",
  "molecule.logger.green_text",
  "molecule.logger.red_text",
  "molecule.logger.should_do_markup",
  "molecule.logger.yellow_text",
  "molecule.model.schema_v3.Validator",
  "molecule.model.schema_v3.base_schema",
  "molecule.model.schema_v3.coerce_env",
  "molecule.model.schema_v3.dependency_command_nullable_schema",
  "molecule.model.schema_v3.platforms_docker_schema",
  "molecule.model.schema_v3.platforms_podman_schema",
  "molecule.model.schema_v3.pre_validate",
  "molecule.model.schema_v3.pre_validate_base_schema",
  "molecule.model.schema_v3.validate",
  "molecule.platforms.Platforms",
  "molecule.provisioner.ansible.Ansible",
  "molecule.provisioner.ansible.LOG",
  "molecule.provisioner.ansible.plugins.filter.molecule_core.from_yaml",
  "molecule.provisioner.ansible.plugins.filter.molecule_core.get_docker_networks",
  "molecule.provisioner.ansible.plugins.filter.molecule_core.header",
  "molecule.provisioner.ansible.plugins.filter.molecule_core.to_yaml",
  "molecule.provisioner.ansible_playbook.AnsiblePlaybook",
  "molecule.provisioner.ansible_playbook.LOG",
  "molecule.provisioner.ansible_playbooks.AnsiblePlaybooks",
  "molecule.provisioner.ansible_playbooks.LOG",
  "molecule.provisioner.base.Base",
  "molecule.scenario",
  "molecule.scenario.LOG",
  "molecule.scenario.Scenario",
  "molecule.scenario.ephemeral_directory",
  "molecule.scenarios.LOG",
  "molecule.scenarios.Scenarios",
  "molecule.shell.ENV_FILE",
  "molecule.shell.LOCAL_CONFIG",
  "molecule.shell._version_string",
  "molecule.shell.main",
  "molecule.state.InvalidState",
  "molecule.state.State",
  "molecule.state.VALID_KEYS",
  "molecule.status.get_status",
  "molecule.test.conftest.LOG",
  "molecule.test.conftest._rebake_command",
  "molecule.test.conftest.change_dir_to",
  "molecule.test.conftest.get_molecule_file",
  "molecule.test.conftest.is_subset",
  "molecule.test.conftest.molecule_directory",
  "molecule.test.conftest.molecule_project_directory",
  "molecule.test.conftest.molecule_scenario_directory",
  "molecule.test.conftest.random_string",
  "molecule.test.functional.conftest.LOG",
  "molecule.test.functional.conftest.MIN_PODMAN_VERSION",
  "molecule.test.functional.conftest.get_docker_executable",
  "molecule.test.functional.conftest.get_podman_executable",
  "molecule.test.functional.conftest.min_ansible",
  "molecule.test.functional.docker.test_scenarios.driver_name",
  "molecule.test.functional.docker.test_scenarios.scenario_name",
  "molecule.test.functional.test_command.driver_name",
  "molecule.test.functional.test_command.scenario_name",
  "molecule.test.resources.roles.testplugin.library.library.main",
  "molecule.test.resources.roles.testplugin.plugins.filters.core.filter",
  "molecule.test.scenarios.plugins.library.project_library.main",
  "molecule.test.scenarios.plugins.plugins.filters.project.project_filter",
  "molecule.test.unit.command.init.test_role._command_args",
  "molecule.test.unit.command.init.test_role._instance",
  "molecule.test.unit.command.init.test_scenario._command_args",
  "molecule.test.unit.command.init.test_scenario._instance",
  "molecule.test.unit.command.test_base.ExtendedBase",
  "molecule.test.unit.command.test_base._base_class",
  "molecule.test.unit.command.test_base._instance",
  "molecule.test.unit.command.test_base._patched_base_setup",
  "molecule.test.unit.command.test_base._patched_execute_scenario",
  "molecule.test.unit.command.test_base._patched_execute_subcommand",
  "molecule.test.unit.command.test_base._patched_manage_inventory",
  "molecule.test.unit.command.test_base._patched_print_matrix",
  "molecule.test.unit.command.test_base._patched_prune",
  "molecule.test.unit.command.test_base._patched_sysexit",
  "molecule.test.unit.command.test_base._patched_verify_configs",
  "molecule.test.unit.command.test_base._patched_write_config",
  "molecule.test.unit.command.test_check._patched_ansible_check",
  "molecule.test.unit.command.test_cleanup._patched_ansible_cleanup",
  "molecule.test.unit.command.test_destroy._patched_ansible_destroy",
  "molecule.test.unit.command.test_idempotence._instance",
  "molecule.test.unit.command.test_idempotence._patched_is_idempotent",
  "molecule.test.unit.command.test_login._instance",
  "molecule.test.unit.command.test_prepare._patched_ansible_prepare",
  "molecule.test.unit.command.test_side_effect._patched_ansible_side_effect",
  "molecule.test.unit.command.test_syntax._patched_ansible_syntax",
  "molecule.test.unit.conftest._molecule_dependency_galaxy_section_data",
  "molecule.test.unit.conftest._molecule_driver_section_data",
  "molecule.test.unit.conftest._molecule_platforms_section_data",
  "molecule.test.unit.conftest._molecule_provisioner_section_data",
  "molecule.test.unit.conftest._molecule_scenario_section_data",
  "molecule.test.unit.conftest._molecule_verifier_section_data",
  "molecule.test.unit.conftest.molecule_data",
  "molecule.test.unit.conftest.molecule_file_fixture",
  "molecule.test.unit.cookiecutter.test_molecule.CommandBase",
  "molecule.test.unit.cookiecutter.test_molecule._base_class",
  "molecule.test.unit.cookiecutter.test_molecule._command_args",
  "molecule.test.unit.cookiecutter.test_molecule._instance",
  "molecule.test.unit.cookiecutter.test_molecule._molecule_file",
  "molecule.test.unit.cookiecutter.test_molecule._role_directory",
  "molecule.test.unit.dependency.ansible_galaxy.test_collections._instance",
  "molecule.test.unit.dependency.ansible_galaxy.test_collections._patched_ansible_galaxy_has_requirements_file",
  "molecule.test.unit.dependency.ansible_galaxy.test_collections.role_file",
  "molecule.test.unit.dependency.ansible_galaxy.test_collections.roles_path",
  "molecule.test.unit.dependency.ansible_galaxy.test_roles._instance",
  "molecule.test.unit.dependency.ansible_galaxy.test_roles._patched_ansible_galaxy_has_requirements_file",
  "molecule.test.unit.dependency.ansible_galaxy.test_roles.role_file",
  "molecule.test.unit.dependency.ansible_galaxy.test_roles.roles_path",
  "molecule.test.unit.dependency.test_gilt._instance",
  "molecule.test.unit.dependency.test_gilt._patched_gilt_has_requirements_file",
  "molecule.test.unit.dependency.test_gilt.gilt_config",
  "molecule.test.unit.dependency.test_shell._instance",
  "molecule.test.unit.driver.test_delegated._instance",
  "molecule.test.unit.driver.test_docker._instance",
  "molecule.test.unit.model.v2.conftest._molecule_file",
  "molecule.test.unit.model.v2.test_pre_validate._env",
  "molecule.test.unit.model.v2.test_pre_validate._keep_string",
  "molecule.test.unit.model.v2.test_pre_validate._model_molecule_env_errors_section_data",
  "molecule.test.unit.model.v2.test_pre_validate._model_platforms_docker_errors_section_data",
  "molecule.test.unit.model.v2.test_pre_validate._model_platforms_docker_section_data",
  "molecule.test.unit.provisioner.test_ansible._instance",
  "molecule.test.unit.provisioner.test_ansible._patched_ansible_playbook",
  "molecule.test.unit.provisioner.test_ansible._patched_link_or_update_vars",
  "molecule.test.unit.provisioner.test_ansible._patched_remove_vars",
  "molecule.test.unit.provisioner.test_ansible._patched_write_inventory",
  "molecule.test.unit.provisioner.test_ansible_playbook._instance",
  "molecule.test.unit.provisioner.test_ansible_playbook._inventory_directory",
  "molecule.test.unit.provisioner.test_ansible_playbooks._instance",
  "molecule.test.unit.test_interpolation._instance",
  "molecule.test.unit.test_interpolation._mock_env",
  "molecule.test.unit.test_platforms._instance",
  "molecule.test.unit.test_scenario._instance",
  "molecule.test.unit.test_scenarios._instance",
  "molecule.test.unit.test_scenarios_ordered._instance",
  "molecule.test.unit.test_state._instance",
  "molecule.test.unit.test_status._instance",
  "molecule.test.unit.verifier.test_ansible._instance",
  "molecule.test.unit.verifier.test_ansible._patched_ansible_verify",
  "molecule.test.unit.verifier.test_testinfra._instance",
  "molecule.test.unit.verifier.test_testinfra.inventory_file",
  "molecule.util.LOG",
  "molecule.util.SafeDumper",
  "molecule.util._parallelize_platforms",
  "molecule.util.abs_path",
  "molecule.util.camelize",
  "molecule.util.file_prepender",
  "molecule.util.filter_verbose_permutation",
  "molecule.util.find_vcs_root",
  "molecule.util.instance_with_scenario_name",
  "molecule.util.lookup_config_file",
  "molecule.util.lru_cache",
  "molecule.util.merge",
  "molecule.util.merge_dicts",
  "molecule.util.molecule_prepender",
  "molecule.util.open_file",
  "molecule.util.os_walk",
  "molecule.util.print_debug",
  "molecule.util.print_environment_vars",
  "molecule.util.render_template",
  "molecule.util.run_command",
  "molecule.util.safe_dump",
  "molecule.util.safe_load",
  "molecule.util.safe_load_file",
  "molecule.util.strip_ansi_color",
  "molecule.util.strip_ansi_escape",
  "molecule.util.sysexit",
  "molecule.util.sysexit_with_message",
  "molecule.util.title",
  "molecule.util.underscore",
  "molecule.util.validate_parallel_cmd_args",
  "molecule.util.verbose_flag",
  "molecule.util.write_file",
  "molecule.verifier.ansible.Ansible",
  "molecule.verifier.ansible.log",
  "molecule.verifier.testinfra.LOG",
  "molecule.verifier.testinfra.Testinfra",
  "operator.itemgetter",
  "os.W_OK",
  "os.access",
  "os.chdir",
  "os.environ",
  "os.environ.copy",
  "os.environ.get",
  "os.getcwd",
  "os.getenv",
  "os.makedirs",
  "os.mkdir",
  "os.pardir",
  "os.path.abspath",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.isabs",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.islink",
  "os.path.join",
  "os.path.lexists",
  "os.path.pardir",
  "os.path.sep",
  "os.path.split",
  "os.popen",
  "os.remove",
  "os.removedirs",
  "os.sep",
  "os.symlink",
  "os.umask",
  "os.unlink",
  "os.urandom",
  "os.walk",
  "p",
  "parallelize",
  "pathlib.Path",
  "pexpect.spawn",
  "pkg_resources.DistributionNotFound",
  "pkg_resources.get_distribution",
  "pkg_resources.parse_version",
  "pkg_resources.require",
  "platform.system",
  "pluggy.PluginManager",
  "pytest.fail",
  "pytest.fixture",
  "pytest.helpers.get_molecule_file",
  "pytest.helpers.idempotence",
  "pytest.helpers.init_role",
  "pytest.helpers.init_scenario",
  "pytest.helpers.list",
  "pytest.helpers.list_with_format_plain",
  "pytest.helpers.login",
  "pytest.helpers.metadata_lint_update",
  "pytest.helpers.molecule_directory",
  "pytest.helpers.molecule_ephemeral_directory",
  "pytest.helpers.molecule_file",
  "pytest.helpers.molecule_scenario_directory",
  "pytest.helpers.os_split",
  "pytest.helpers.register",
  "pytest.helpers.run_command",
  "pytest.helpers.test",
  "pytest.helpers.verify",
  "pytest.helpers.write_molecule_file",
  "pytest.mark",
  "pytest.mark.extensive",
  "pytest.mark.parametrize",
  "pytest.mark.skip",
  "pytest.raises",
  "pytest.skip",
  "pytest.testinfra_hosts",
  "random.choice",
  "re.DOTALL",
  "re.compile",
  "re.match",
  "re.search",
  "re.sub",
  "requests.exceptions.ConnectionError",
  "sh.Command",
  "sh.ErrorReturnCode",
  "sh.ErrorReturnCode_1",
  "sh.ErrorReturnCode_2",
  "sh.ansible_galaxy",
  "sh.ansible_lint.bake",
  "sh.ansible_playbook",
  "sh.ansible_playbook.bake",
  "sh.docker.bake",
  "sh.gilt",
  "sh.ls",
  "sh.ls.bake",
  "sh.molecule.bake",
  "sh.pytest",
  "sh.which",
  "sh.yamllint.bake",
  "shlex.split",
  "shutil.copy",
  "shutil.rmtree",
  "signal.SIGWINCH",
  "signal.signal",
  "str.__lt__",
  "string.Template",
  "string.ascii_uppercase",
  "struct.pack",
  "struct.unpack",
  "subprocess.PIPE",
  "subprocess.STDOUT",
  "subprocess.check_output",
  "subprocess.run",
  "sys.exit",
  "sys.stderr",
  "sys.stdout",
  "sys.stdout.fileno",
  "sys.stdout.isatty",
  "sys.version_info",
  "tabulate.tabulate",
  "termios.TIOCGWINSZ",
  "testinfra.utils.ansible_runner.AnsibleRunner",
  "time.sleep",
  "traceback.format_exc",
  "tree_format.format_tree",
  "type.__call__",
  "uuid.uuid4",
  "yaml.SafeDumper",
  "yaml.dump",
  "yaml.safe_load",
  "yaml.scanner.ScannerError"
 ],
 "deps": {
  "AnsibleModule": [],
  "abc": [],
  "ansible": [],
  "binascii": [],
  "cerberus": [],
  "check_func": [],
  "click": [],
  "click_completion": [],
  "click_help_colors": [],
  "collections": [],
  "colorama": [],
  "command": [],
  "contextlib": [],
  "cookiecutter": [],
  "copy": [],
  "distutils": [],
  "docker": [],
  "fcntl": [],
  "fnmatch": [],
  "func": [],
  "functools": [],
  "glob": [],
  "inspect": [],
  "io": [],
  "jinja2": [],
  "logging": [],
  "molecule": [],
  "operator": [],
  "os": [],
  "p": [],
  "parallelize": [],
  "pathlib": [],
  "pexpect": [],
  "pkg_resources": [],
  "platform": [],
  "pluggy": [],
  "pytest": [],
  "random": [],
  "re": [],
  "requests": [],
  "sh": [],
  "shlex": [],
  "shutil": [],
  "signal": [],
  "str": [],
  "string": [],
  "struct": [],
  "subprocess": [],
  "sys": [],
  "tabulate": [],
  "termios": [],
  "testinfra": [],
  "time": [],
  "traceback": [],
  "tree_format": [],
  "type": [],
  "uuid": [],
  "yaml": []
 }
}