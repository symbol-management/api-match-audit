{
 "bad": [
  "CheckEqual",
  "CheckOrder",
  "Repr",
  "Sorted",
  "_FlagAlias",
  "_FlagOverrider",
  "__future__.absolute_import",
  "__future__.division",
  "__future__.print_function",
  "__name__.count",
  "_add_validator",
  "_get_first_part",
  "_makedirs_exist_ok",
  "_quote_long_string",
  "_rmtree_ignore_errors",
  "_run_init.done",
  "_update_class_dict_for_param_test_case",
  "absl._collections_abc.abc.Hashable",
  "absl._collections_abc.abc.Iterable",
  "absl._collections_abc.abc.Mapping",
  "absl._collections_abc.abc.Sequence",
  "absl._collections_abc.abc.Set",
  "absl._collections_abc.abc.Sized",
  "absl._enum_module.enum.Enum",
  "absl.flags.FLAGS.write_help_in_xml_format",
  "absl.flags.__init__.DEFINE_boolean",
  "absl.flags.__init__.DEFINE_string",
  "absl.flags.__init__.FlagValues",
  "absl.flags._helpers.SPECIAL_FLAGS._flags",
  "absl.flags._helpers.SPECIAL_FLAGS.name",
  "absl.flags._helpers.disclaim_module_ids.add",
  "absl.logging.__init__.ABSLHandler",
  "absl.logging.__init__.ABSLLogger",
  "absl.logging.__init__.DEBUG",
  "absl.logging.__init__.ERROR",
  "absl.logging.__init__.FATAL",
  "absl.logging.__init__.FLAGS",
  "absl.logging.__init__.INFO",
  "absl.logging.__init__.PythonFormatter",
  "absl.logging.__init__.PythonHandler",
  "absl.logging.__init__.WARNING",
  "absl.logging.__init__._ABSL_LOG_FATAL",
  "absl.logging.__init__._CPP_LEVEL_TO_NAMES",
  "absl.logging.__init__._CPP_NAME_TO_LEVELS",
  "absl.logging.__init__._CRITICAL_PREFIX",
  "absl.logging.__init__._LOGGING_FILE_PREFIX",
  "absl.logging.__init__._LoggerLevelsFlag",
  "absl.logging.__init__._StderrthresholdFlag",
  "absl.logging.__init__._THREAD_ID_MASK",
  "absl.logging.__init__._VerbosityFlag",
  "absl.logging.__init__._absl_handler",
  "absl.logging.__init__._absl_logger",
  "absl.logging.__init__._attempted_to_remove_stderr_stream_handlers",
  "absl.logging.__init__._get_next_log_count_per_token",
  "absl.logging.__init__._get_thread_id",
  "absl.logging.__init__._initialize",
  "absl.logging.__init__._is_absl_fatal_record",
  "absl.logging.__init__._is_non_absl_fatal_record",
  "absl.logging.__init__._log_counter_per_token",
  "absl.logging.__init__._log_timer_per_token",
  "absl.logging.__init__._seconds_have_elapsed",
  "absl.logging.__init__._warn_preinit_stderr",
  "absl.logging.__init__.error",
  "absl.logging.__init__.find_log_dir",
  "absl.logging.__init__.find_log_dir_and_names",
  "absl.logging.__init__.get_absl_handler",
  "absl.logging.__init__.get_absl_log_prefix",
  "absl.logging.__init__.get_absl_logger",
  "absl.logging.__init__.get_verbosity",
  "absl.logging.__init__.info",
  "absl.logging.__init__.level_warning",
  "absl.logging.__init__.log",
  "absl.logging.__init__.log_if",
  "absl.logging.__init__.warning",
  "addExpectedFailure",
  "addSkip",
  "addUnexpectedSuccess",
  "argparse",
  "argparse.Action",
  "argparse.ArgumentParser",
  "argparse.SUPPRESS",
  "atexit",
  "atexit.register",
  "cProfile",
  "cProfile.Profile",
  "callback",
  "collections",
  "collections.OrderedDict",
  "collections.abc",
  "collections.deque",
  "collections.namedtuple",
  "contextlib",
  "contextlib.ExitStack",
  "contextlib.contextmanager",
  "copy",
  "copy.deepcopy",
  "csv",
  "csv.Error",
  "csv.reader",
  "csv.writer",
  "ctypes",
  "ctypes.CDLL",
  "ctypes.c_ulong",
  "datetime",
  "datetime.datetime.fromtimestamp",
  "datetime.datetime.utcfromtimestamp",
  "datetime.timezone.utc",
  "delegate_get_names",
  "difflib",
  "difflib.ndiff",
  "distance",
  "errno",
  "errno.EEXIST",
  "errno.EPIPE",
  "exception_class",
  "faulthandler",
  "fcntl",
  "func",
  "function",
  "functools",
  "functools.total_ordering",
  "functools.wraps",
  "get_absl_handler",
  "get_absl_logger",
  "get_command_stderr",
  "get_command_string",
  "get_value",
  "getopt",
  "getpass",
  "getpass.getuser",
  "inspect",
  "inspect.getargspec",
  "inspect.getfullargspec",
  "inspect.isclass",
  "inspect.iscoroutinefunction",
  "inspect.isfunction",
  "inspect.ismethod",
  "io",
  "io.BytesIO",
  "io.StringIO",
  "io.open",
  "itertools",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "itertools.count",
  "itertools.cycle",
  "itertools.product",
  "json",
  "json.loads",
  "log",
  "log_if",
  "logging",
  "logging.CRITICAL",
  "logging.DEBUG",
  "logging.ERROR",
  "logging.FATAL",
  "logging.Formatter",
  "logging.Handler",
  "logging.INFO",
  "logging.NOTSET",
  "logging.StreamHandler",
  "logging.WARN",
  "logging.WARNING",
  "logging.basicConfig",
  "logging.error",
  "logging.getLogger",
  "logging.getLoggerClass",
  "logging.info",
  "logging.root.addHandler",
  "logging.root.handlers",
  "logging.root.removeHandler",
  "logging.root.setLevel",
  "logging.setLoggerClass",
  "make_bound_param_test",
  "metaclass",
  "mock",
  "object.__new__",
  "os",
  "os.W_OK",
  "os.abort",
  "os.access",
  "os.chmod",
  "os.close",
  "os.environ",
  "os.environ.get",
  "os.getenv",
  "os.getpid",
  "os.getuid",
  "os.makedirs",
  "os.name",
  "os.path.basename",
  "os.path.dirname",
  "os.path.exists",
  "os.path.expanduser",
  "os.path.isdir",
  "os.path.isfile",
  "os.path.islink",
  "os.path.join",
  "os.path.splitext",
  "os.sep",
  "os.stat",
  "os.symlink",
  "os.unlink",
  "pdb.runcall",
  "predicate",
  "profile",
  "random",
  "random.Random",
  "re",
  "re.M",
  "re.MULTILINE",
  "re.compile",
  "re.search",
  "re.sub",
  "retired_flag_func",
  "safe_repr",
  "setter",
  "shlex",
  "shlex.split",
  "shutil",
  "shutil.rmtree",
  "signal",
  "signal.SIGTERM",
  "six.moves.range",
  "six.moves.urllib",
  "six.moves.urllib.parse.parse_qs",
  "six.moves.urllib.parse.urlparse",
  "six.moves.xrange",
  "socket",
  "socket.gethostname",
  "startTestRun",
  "stat",
  "stat.S_IWUSR",
  "stopTestRun",
  "string",
  "string.whitespace",
  "struct",
  "struct.calcsize",
  "struct.error",
  "struct.unpack",
  "subprocess",
  "subprocess.PIPE",
  "subprocess.Popen",
  "subprocess.STDOUT",
  "sys",
  "sys.__stderr__",
  "sys.__stdout__",
  "sys._getframe",
  "sys.argv",
  "sys.exc_info",
  "sys.executable",
  "sys.exit",
  "sys.getrecursionlimit",
  "sys.modules",
  "sys.modules.__doc__",
  "sys.modules.get",
  "sys.path",
  "sys.stderr",
  "sys.stderr.write",
  "sys.stdout",
  "sys.stdout.isatty",
  "sys.version_info",
  "tempfile",
  "tempfile.gettempdir",
  "tempfile.mkdtemp",
  "tempfile.mkstemp",
  "termios",
  "testMethod",
  "test_method",
  "test_method.__doc__",
  "textwrap",
  "textwrap.TextWrapper",
  "textwrap.dedent",
  "thread",
  "threading",
  "threading.get_ident",
  "time",
  "time.localtime",
  "time.strftime",
  "time.time",
  "timeit",
  "timeit.default_timer",
  "traceback",
  "traceback._some_str",
  "traceback.format_exc",
  "traceback.format_exception",
  "traceback.print_exc",
  "traceback.print_stack",
  "type.__call__",
  "type.__new__",
  "types",
  "types.FunctionType",
  "types.GeneratorType",
  "types.ModuleType",
  "typing",
  "typing.Any",
  "typing.AnyStr",
  "typing.BinaryIO",
  "typing.Callable",
  "typing.ContextManager",
  "typing.IO",
  "typing.Iterator",
  "typing.List",
  "typing.Mapping",
  "typing.MutableMapping",
  "typing.MutableSequence",
  "typing.Optional",
  "typing.Sequence",
  "typing.TYPE_CHECKING",
  "typing.Text",
  "typing.TextIO",
  "typing.Tuple",
  "typing.Type",
  "typing.TypeVar",
  "typing.Union",
  "unicode",
  "unittest",
  "unittest.FunctionTestCase",
  "unittest.SkipTest",
  "unittest.TestCase",
  "unittest.TestLoader",
  "unittest.TestLoader.testMethodPrefix",
  "unittest.TestProgram",
  "unittest.TestResult",
  "unittest.TestResult.wasSuccessful",
  "unittest.TextTestResult",
  "unittest.TextTestRunner",
  "unittest.case",
  "unittest.case._ExpectedFailure",
  "unittest.case._Outcome",
  "unittest.case._SubTest",
  "unittest.case._UnexpectedSuccess",
  "unittest.expectedFailure",
  "unittest.mock",
  "unittest.skip",
  "unittest.skipIf",
  "unittest.skipUnless",
  "unittest.util.safe_repr",
  "unittest.util.strclass",
  "usage",
  "warnings",
  "warnings.warn",
  "xml.dom.minidom",
  "xml.dom.minidom.Document",
  "xml.sax.saxutils",
  "xml.sax.saxutils.escape"
 ],
 "deps": {
  "CheckEqual": [],
  "CheckOrder": [],
  "Repr": [],
  "Sorted": [],
  "_FlagAlias": [],
  "_FlagOverrider": [],
  "__future__": [],
  "__name__": [],
  "_add_validator": [],
  "_get_first_part": [],
  "_makedirs_exist_ok": [],
  "_quote_long_string": [],
  "_rmtree_ignore_errors": [],
  "_run_init": [],
  "_update_class_dict_for_param_test_case": [],
  "absl": [],
  "addExpectedFailure": [],
  "addSkip": [],
  "addUnexpectedSuccess": [],
  "argparse": [],
  "atexit": [],
  "cProfile": [],
  "callback": [],
  "collections": [],
  "contextlib": [],
  "copy": [],
  "csv": [],
  "ctypes": [],
  "datetime": [],
  "delegate_get_names": [],
  "difflib": [],
  "distance": [],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "errno": [],
  "exception_class": [],
  "faulthandler": [],
  "fcntl": [],
  "func": [],
  "function": [],
  "functools": [],
  "get_absl_handler": [],
  "get_absl_logger": [],
  "get_command_stderr": [],
  "get_command_string": [],
  "get_value": [],
  "getopt": [],
  "getpass": [],
  "inspect": [],
  "io": [],
  "itertools": [],
  "json": [],
  "log": [],
  "log_if": [],
  "logging": [],
  "make_bound_param_test": [],
  "metaclass": [],
  "mock": [],
  "object": [],
  "os": [],
  "pdb": [
   "pdbpp/conda-forge/noarch/pdbpp-0.9.5-py_1"
  ],
  "predicate": [],
  "profile": [],
  "random": [],
  "re": [],
  "retired_flag_func": [],
  "safe_repr": [],
  "setter": [],
  "shlex": [],
  "shutil": [],
  "signal": [],
  "six": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1",
   "privy/conda-forge/noarch/privy-6.0.0-py_0"
  ],
  "socket": [],
  "startTestRun": [],
  "stat": [],
  "stopTestRun": [],
  "string": [],
  "struct": [],
  "subprocess": [],
  "sys": [],
  "tempfile": [],
  "termios": [],
  "testMethod": [],
  "test_method": [],
  "textwrap": [],
  "thread": [],
  "threading": [],
  "time": [],
  "timeit": [],
  "traceback": [],
  "type": [],
  "types": [],
  "typing": [],
  "unicode": [],
  "unittest": [],
  "usage": [],
  "warnings": [],
  "xml": []
 }
}