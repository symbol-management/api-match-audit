{
 "bad": [
  "IPython.display.display",
  "Span",
  "Span.NULL_OFFSET_VALUE",
  "SpanArray",
  "SpanArray._from_sequence",
  "SpanDtype",
  "TokenSpan",
  "TokenSpan.NULL_OFFSET_VALUE",
  "TokenSpan.make_null",
  "TokenSpanArray",
  "TokenSpanArray._concat_same_type",
  "TokenSpanArray._from_factorized",
  "TokenSpanArray._from_sequence",
  "TokenSpanArray.make_array",
  "TokenSpanDtype",
  "_get_char_offsets",
  "_get_text",
  "_make_table",
  "add_embeddings",
  "add_token_classes",
  "align_bert_tokens_to_corpus_tokens",
  "cls",
  "combine_folds",
  "compute_accuracy_by_document",
  "compute_global_accuracy",
  "conll_2003_output_to_dataframes",
  "conll_2003_to_dataframes",
  "conll_to_bert",
  "consolidate",
  "download_file",
  "extract_dict",
  "extract_regex_tok",
  "iob_to_spans",
  "ipywidgets.IntProgress",
  "ipywidgets.Layout",
  "iter_gen",
  "lemmatize",
  "list_gen",
  "load_dict",
  "make_bert_tokens",
  "make_exploded_df",
  "make_span_from_entities",
  "make_table",
  "make_tokens",
  "make_tokens_and_features",
  "matches_regex_f",
  "numpy.all",
  "numpy.any",
  "numpy.append",
  "numpy.arange",
  "numpy.argwhere",
  "numpy.array",
  "numpy.array_equal",
  "numpy.asarray",
  "numpy.ascontiguousarray",
  "numpy.bool",
  "numpy.char.lower",
  "numpy.concatenate",
  "numpy.cumsum",
  "numpy.empty",
  "numpy.equal",
  "numpy.floor",
  "numpy.full",
  "numpy.full_like",
  "numpy.insert",
  "numpy.int",
  "numpy.int32",
  "numpy.int64",
  "numpy.integer",
  "numpy.intp",
  "numpy.isnan",
  "numpy.isscalar",
  "numpy.issubdtype",
  "numpy.logical_and",
  "numpy.logical_not",
  "numpy.logical_or",
  "numpy.math.isnan",
  "numpy.max",
  "numpy.maximum",
  "numpy.min",
  "numpy.minimum",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.object",
  "numpy.object_",
  "numpy.ones",
  "numpy.prod",
  "numpy.ravel",
  "numpy.repeat",
  "numpy.roll",
  "numpy.stack",
  "numpy.str_",
  "numpy.sum",
  "numpy.testing.assert_array_equal",
  "numpy.testing.assert_equal",
  "numpy.unique",
  "numpy.vectorize",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "op",
  "op.__name__",
  "os.environ.get",
  "os.path.exists",
  "os.path.join",
  "pandas.Categorical",
  "pandas.Categorical.from_codes",
  "pandas.CategoricalDtype",
  "pandas.DataFrame",
  "pandas.Int32Dtype",
  "pandas.NA",
  "pandas.Series",
  "pandas.SparseArray",
  "pandas.StringDtype",
  "pandas.__version__",
  "pandas.api.extensions.ExtensionArray",
  "pandas.api.extensions.ExtensionDtype",
  "pandas.api.extensions.ExtensionScalarOpsMixin",
  "pandas.api.extensions.no_default",
  "pandas.api.extensions.register_extension_dtype",
  "pandas.api.extensions.register_series_accessor",
  "pandas.api.extensions.take",
  "pandas.api.types.infer_dtype",
  "pandas.api.types.is_bool_dtype",
  "pandas.api.types.is_list_like",
  "pandas.api.types.is_object_dtype",
  "pandas.api.types.is_string_dtype",
  "pandas.api.types.pandas_dtype",
  "pandas.array",
  "pandas.compat.set_function_name",
  "pandas.concat",
  "pandas.core.dtypes.generic.ABCDataFrame",
  "pandas.core.dtypes.generic.ABCIndexClass",
  "pandas.core.dtypes.generic.ABCPandasArray",
  "pandas.core.dtypes.generic.ABCSeries",
  "pandas.core.indexers.check_array_indexer",
  "pandas.core.indexers.validate_indices",
  "pandas.date_range",
  "pandas.isna",
  "pandas.merge",
  "pandas.read_feather",
  "pandas.read_parquet",
  "pandas.reset_option",
  "pandas.set_option",
  "pandas.testing.assert_frame_equal",
  "pandas.testing.assert_series_equal",
  "pandas.tests.extension.base.BaseArithmeticOpsTests",
  "pandas.tests.extension.base.BaseArithmeticOpsTests.divmod_exc",
  "pandas.tests.extension.base.BaseArithmeticOpsTests.frame_scalar_exc",
  "pandas.tests.extension.base.BaseArithmeticOpsTests.series_array_exc",
  "pandas.tests.extension.base.BaseArithmeticOpsTests.series_scalar_exc",
  "pandas.tests.extension.base.BaseBooleanReduceTests",
  "pandas.tests.extension.base.BaseCastingTests",
  "pandas.tests.extension.base.BaseComparisonOpsTests",
  "pandas.tests.extension.base.BaseConstructorsTests",
  "pandas.tests.extension.base.BaseDtypeTests",
  "pandas.tests.extension.base.BaseGetitemTests",
  "pandas.tests.extension.base.BaseGroupbyTests",
  "pandas.tests.extension.base.BaseInterfaceTests",
  "pandas.tests.extension.base.BaseMethodsTests",
  "pandas.tests.extension.base.BaseMissingTests",
  "pandas.tests.extension.base.BaseNumericReduceTests",
  "pandas.tests.extension.base.BaseParsingTests",
  "pandas.tests.extension.base.BasePrintingTests",
  "pandas.tests.extension.base.BaseReshapingTests",
  "pandas.tests.extension.base.BaseSetitemTests",
  "pandas.tests.extension.base.BaseUnaryOpsTests",
  "pandas.tests.extension.conftest.as_series",
  "pandas.tests.extension.conftest.fillna_method",
  "pandas.tests.extension.conftest.use_numpy",
  "parse_response",
  "pyarrow.Array.from_buffers",
  "pyarrow.ExtensionArray.from_storage",
  "pyarrow.ListArray.from_arrays",
  "pyarrow.PyExtensionType.__init__",
  "pyarrow.RecordBatch.from_arrays",
  "pyarrow.StructArray.from_arrays",
  "pyarrow.Table.from_arrays",
  "pyarrow.Table.from_batches",
  "pyarrow.Table.from_pandas",
  "pytest.fixture",
  "pytest.mark.parametrize",
  "pytest.mark.skip",
  "pytest.mark.skipif",
  "pytest.raises",
  "pytest.skip",
  "regex.Regex",
  "regex.compile",
  "regex.sub",
  "seq_to_windows",
  "spans_to_iob",
  "tempfile.TemporaryDirectory",
  "text_extensions_for_pandas.SpanDtype.name",
  "text_extensions_for_pandas.TokenSpanDtype.name",
  "text_extensions_for_pandas.array.span.Span.NULL_OFFSET_VALUE",
  "text_extensions_for_pandas.array.token_span.TokenSpan.USE_TOKEN_OFFSETS_IN_REPR",
  "textwrap.dedent",
  "textwrap.shorten",
  "time.time",
  "token_features_to_tree",
  "torch.tensor",
  "transformers.BertModel.from_pretrained",
  "transformers.BertTokenizerFast.from_pretrained",
  "transformers.PreTrainedTokenizerFast",
  "typing.Any",
  "warnings.simplefilter",
  "warnings.warn",
  "windows_to_seq"
 ],
 "deps": {
  "IPython": [],
  "Span": [],
  "SpanArray": [],
  "SpanDtype": [],
  "TokenSpan": [],
  "TokenSpanArray": [],
  "TokenSpanDtype": [],
  "_get_char_offsets": [],
  "_get_text": [],
  "_make_table": [],
  "add_embeddings": [],
  "add_token_classes": [],
  "align_bert_tokens_to_corpus_tokens": [],
  "cls": [],
  "combine_folds": [],
  "compute_accuracy_by_document": [],
  "compute_global_accuracy": [],
  "conll_2003_output_to_dataframes": [],
  "conll_2003_to_dataframes": [],
  "conll_to_bert": [],
  "consolidate": [],
  "distutils": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "download_file": [],
  "extract_dict": [],
  "extract_regex_tok": [],
  "ibm_cloud_sdk_core": [
   "ibm-cloud-sdk-core/conda-forge/noarch/ibm-cloud-sdk-core-3.1.0-pyh9f0ad1d_0"
  ],
  "ibm_watson": [
   "ibm-watson/conda-forge/noarch/ibm-watson-4.6.0-pyh9f0ad1d_0"
  ],
  "iob_to_spans": [],
  "ipywidgets": [],
  "iter_gen": [],
  "json": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "lemmatize": [],
  "list_gen": [],
  "load_dict": [],
  "make_bert_tokens": [],
  "make_exploded_df": [],
  "make_span_from_entities": [],
  "make_table": [],
  "make_tokens": [],
  "make_tokens_and_features": [],
  "matches_regex_f": [],
  "memoized_property": [
   "memoized-property/conda-forge/noarch/memoized-property-1.0.3-py_0"
  ],
  "numpy": [],
  "op": [],
  "os": [],
  "pandas": [],
  "parse_response": [],
  "pyarrow": [
   "pyarrow/conda-forge/linux-64/pyarrow-1.0.1-py37h72578d1_5_cuda",
   "pyarrow/conda-forge/linux-64/pyarrow-2.0.0-py37h4aec6bf_9_cpu"
  ],
  "pytest": [],
  "re": [
   "python/conda-forge/linux-64/python-3.8.5-h6f2ec95_1_cpython"
  ],
  "regex": [],
  "requests": [
   "requests/conda-forge/noarch/requests-2.23.0-pyh8c360ce_2"
  ],
  "seq_to_windows": [],
  "spacy": [
   "spacy/conda-forge/linux-64/spacy-2.1.6-py37hc9558a2_0"
  ],
  "spans_to_iob": [],
  "tempfile": [],
  "text_extensions_for_pandas": [],
  "textwrap": [],
  "time": [],
  "token_features_to_tree": [],
  "torch": [],
  "transformers": [],
  "typing": [],
  "unittest": [
   "python/conda-forge/linux-64/python-2.7.15-h721da81_1008"
  ],
  "warnings": [],
  "windows_to_seq": []
 }
}