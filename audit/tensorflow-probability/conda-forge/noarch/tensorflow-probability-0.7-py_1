{
 "bad": [
  "Decoder",
  "Encoder",
  "ExpForwardOnly",
  "ExpInverseOnly",
  "FeatureNdimsKernel",
  "HasFields",
  "IndepBern1d",
  "IndepBern1dSliceable",
  "InnerResults",
  "KernelFn",
  "Model",
  "MyDist",
  "MyDistException",
  "NoFields",
  "Results",
  "Sub1",
  "Sub11",
  "Sub2",
  "TerribleDistribution",
  "_BareBonesBijector",
  "_add",
  "_assert_shape",
  "_batch_of_zeros_with_rightmost_singletons",
  "_batch_univariate_softmax",
  "_bootstrap_results",
  "_broadcast",
  "_check",
  "_check2d",
  "_check2d_rows",
  "_compute",
  "_compute_quantiles",
  "_convert_to_tensor",
  "_create_polynomial",
  "_do_update",
  "_expand_is_accepted_like",
  "_expand_scalar",
  "_expand_tensor",
  "_expand_x_fn",
  "_expected_cdf",
  "_expected_pdf",
  "_explore",
  "_get_batch_ndims",
  "_get_final_shape",
  "_get_indices",
  "_get_ndims",
  "_get_rank",
  "_hessian_diag_elt_with_l2",
  "_impl",
  "_importance_sampler_positive_f",
  "_joint_log_prob",
  "_kernel_fn",
  "_lbeta",
  "_make",
  "_make_convex_combined_log_prob_fn",
  "_mask_if_invalid",
  "_maybe_append",
  "_maybe_attach_assertion",
  "_maybe_make_callable",
  "_maybe_make_callable_from_linop",
  "_maybe_make_linop",
  "_maybe_seed",
  "_mutant_part",
  "_neg_log_likelihood",
  "_pad",
  "_powerset",
  "_recreate_kernel",
  "_scalar_univariate_softmax",
  "_set_event_shape",
  "_sliced_maker",
  "_static_event_size",
  "_std_samples_with_gradients",
  "_step_along_direction",
  "_strip",
  "_swap",
  "_where",
  "_zeros_like",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "abc.abstractproperty",
  "absl.app.run",
  "absl.flags.DEFINE_bool",
  "absl.flags.DEFINE_enum",
  "absl.flags.DEFINE_float",
  "absl.flags.DEFINE_string",
  "absl.flags.FLAGS",
  "absl.logging.info",
  "absl.logging.warning",
  "absl.testing.flagsaver.flagsaver",
  "absl.testing.parameterized.TestCase",
  "absl.testing.parameterized.named_parameters",
  "absl.testing.parameterized.parameters",
  "actual_hypersphere_volume",
  "actual_mvn_log_prob",
  "additional_check",
  "assert_catches_mistake",
  "assert_ops",
  "attr",
  "bar",
  "base_template",
  "batch_gather",
  "bijector_class",
  "bootstrap_fn",
  "broadcast_fn",
  "build_assign_op",
  "build_loss",
  "build_loss_fn",
  "build_variational_loss",
  "call_fldj",
  "camel_to_snake",
  "cast",
  "cauchy_function",
  "cauchy_new_state_fn",
  "cdf_op",
  "chain",
  "check",
  "check_catches_mistake",
  "check_consistency",
  "check_is_scalar",
  "cloudpickle.CloudPickler",
  "cloudpickle.CloudPickler.__init__",
  "cloudpickle.CloudPickler.dispatch",
  "cloudpickle.CloudPickler.save_reduce",
  "cls",
  "codecs.decode",
  "codecs.encode",
  "collections.Counter",
  "collections.Mapping",
  "collections.OrderedDict",
  "collections.Sequence",
  "collections.namedtuple",
  "computation",
  "constraint",
  "constraint_fn",
  "construct_monte_carlo_csiszar_f_divergence",
  "contextlib.contextmanager",
  "control",
  "convergence_criteria_fn",
  "convert_to_tensor_fn",
  "convolution_op",
  "copy.copy",
  "cos",
  "coshe",
  "cov_step",
  "covariance_entry",
  "create_component",
  "ctt",
  "d",
  "d0",
  "d0._dist_fn_args",
  "d0._dist_fn_wrapped",
  "d0_",
  "d1",
  "d1._dist_fn_args",
  "d1._dist_fn_wrapped",
  "d1_",
  "decoder",
  "decoder_model",
  "decorator.decorator",
  "default_init",
  "delta",
  "dist",
  "dist.batch_shape",
  "dist.cdf",
  "dist.copy",
  "dist.entropy",
  "dist.log_prob",
  "dist.mean",
  "dist.mode",
  "dist.name",
  "dist.prob",
  "dist.sample",
  "dist.stddev",
  "dist.variance",
  "dist_cls",
  "dist_fn",
  "distribution_b",
  "distribution_cls",
  "distribution_cls.__init__.__doc__",
  "distribution_cls.__name__",
  "do_padding",
  "dt",
  "dtype",
  "encoder",
  "encoder.predict_on_batch",
  "entropy_alt",
  "eval_secant2",
  "eval_update",
  "event",
  "event_shape",
  "events",
  "exchange_proposed_fn",
  "expand_x_fn",
  "expected_log_prob",
  "expected_lp",
  "f",
  "fake_distribution",
  "fdf",
  "fdf.num_calls",
  "filter_step",
  "fn",
  "fn1",
  "fn2",
  "fn_broadcast",
  "fn_slice",
  "foo",
  "fun",
  "func",
  "func1",
  "func2",
  "func_estimate",
  "functools.partial",
  "functools.reduce",
  "functools.wraps",
  "g",
  "generate_one",
  "get_dim_size",
  "get_fn",
  "get_half_cauchy_func",
  "get_name",
  "get_observation_matrix_for_timestep",
  "get_observation_noise_for_timestep",
  "get_results",
  "get_shape_tensor",
  "get_tensor_shape",
  "get_transition_matrix_for_timestep",
  "get_transition_noise_for_timestep",
  "get_val_and_grad_fn",
  "getter",
  "grad_and_hessian_loss_fn",
  "gradp",
  "gradq",
  "h",
  "half_normal_function",
  "halfway",
  "hashlib.md5",
  "hashlib.sha512",
  "histograms",
  "hypothesis.HealthCheck.too_slow",
  "hypothesis.extra.numpy.arange",
  "hypothesis.extra.numpy.array",
  "hypothesis.extra.numpy.array_shapes",
  "hypothesis.extra.numpy.arrays",
  "hypothesis.extra.numpy.bool",
  "hypothesis.extra.numpy.concatenate",
  "hypothesis.extra.numpy.diag",
  "hypothesis.extra.numpy.finfo",
  "hypothesis.extra.numpy.float32",
  "hypothesis.extra.numpy.float64",
  "hypothesis.extra.numpy.int64",
  "hypothesis.extra.numpy.linalg.inv",
  "hypothesis.extra.numpy.linalg.pinv",
  "hypothesis.extra.numpy.linalg.solve",
  "hypothesis.extra.numpy.matmul",
  "hypothesis.extra.numpy.min",
  "hypothesis.extra.numpy.ndindex",
  "hypothesis.extra.numpy.newaxis",
  "hypothesis.extra.numpy.ones",
  "hypothesis.extra.numpy.random.random",
  "hypothesis.extra.numpy.random.seed",
  "hypothesis.extra.numpy.random.uniform",
  "hypothesis.extra.numpy.stack",
  "hypothesis.extra.numpy.swapaxes",
  "hypothesis.extra.numpy.testing.assert_array_equal",
  "hypothesis.extra.numpy.zeros",
  "hypothesis.given",
  "hypothesis.settings",
  "hypothesis.strategies.booleans",
  "hypothesis.strategies.complex_numbers",
  "hypothesis.strategies.composite",
  "hypothesis.strategies.data",
  "hypothesis.strategies.floats",
  "hypothesis.strategies.integers",
  "hypothesis.strategies.just",
  "hypothesis.strategies.lists",
  "hypothesis.strategies.one_of",
  "hypothesis.strategies.permutations",
  "hypothesis.strategies.tuples",
  "importlib.import_module",
  "increase_rank",
  "init",
  "init_clone",
  "initializer",
  "input.dtype",
  "input.shape",
  "inspect.cleandoc",
  "inspect.getargspec",
  "inspect.getcallargs",
  "inspect.getfullargspec",
  "inspect.isclass",
  "int.from_bytes",
  "integrator",
  "interceptor",
  "io.BytesIO",
  "is_diagonal",
  "is_last_day_of_season",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "itertools.combinations",
  "itertools.product",
  "jacobian_fn",
  "jacobian_fn_mat",
  "jitter",
  "k",
  "kernel_initializer",
  "kernel_results_cls",
  "kl_divergence_fn",
  "kl_fn",
  "layer",
  "layer.bias_posterior_tensor",
  "layer.get_losses_for",
  "layer.kernel_posterior_tensor",
  "layer.losses",
  "layer.losses.shape",
  "layer.seed",
  "layer.trainable_weights",
  "layer_one",
  "layer_two",
  "loc",
  "loc_scale_fn",
  "log_gamma_log_prob",
  "log_joint",
  "log_joint_builtin",
  "log_joint_fn",
  "log_joint_scoped",
  "log_joint_transformed",
  "log_joint_wrapped",
  "log_prob_fn",
  "logging.warning",
  "logits",
  "loop_body",
  "loop_fn",
  "m",
  "m.weights",
  "made",
  "made._input_order",
  "made.trainable_variables",
  "make_bijector",
  "make_distribution",
  "make_distribution_fn",
  "make_fn",
  "make_kernel_fn",
  "make_loop_body",
  "make_ph",
  "make_shape_tensor",
  "make_trick_fun",
  "make_variational",
  "mask_if_invalid",
  "math.log",
  "math.pi",
  "math.sqrt",
  "maybe_flatten",
  "maybe_stop",
  "mcem_iter",
  "mean_fn",
  "mean_step",
  "merge_doc",
  "method",
  "mixture_func",
  "mk_ind_norm",
  "model",
  "model.compile",
  "model.fit",
  "model.get_weights",
  "model.layers.trainable",
  "model.layers.weights.shape",
  "model.layers.weights.trainable",
  "model.log_prob",
  "model.losses",
  "model.save",
  "model.weights",
  "model.weights.dtype",
  "model_copy",
  "model_copy.predict",
  "monte_carlo_hypersphere_volume",
  "ndims_fn",
  "net",
  "new_fn",
  "noncentered_horseshoe_prior",
  "normal",
  "normal_differential_entropy",
  "normal_with_unknown_mean",
  "np_f",
  "np_softmax",
  "npdt",
  "numpy.abs",
  "numpy.all",
  "numpy.amax",
  "numpy.amin",
  "numpy.any",
  "numpy.arange",
  "numpy.arcsinh",
  "numpy.argsort",
  "numpy.array",
  "numpy.array_equal",
  "numpy.asarray",
  "numpy.asscalar",
  "numpy.bincount",
  "numpy.block",
  "numpy.bool",
  "numpy.broadcast",
  "numpy.broadcast_to",
  "numpy.ceil",
  "numpy.complex",
  "numpy.complex128",
  "numpy.complex64",
  "numpy.concatenate",
  "numpy.conj",
  "numpy.conjugate",
  "numpy.cos",
  "numpy.cosh",
  "numpy.count_nonzero",
  "numpy.cov",
  "numpy.cumsum",
  "numpy.diag",
  "numpy.diagonal",
  "numpy.diff",
  "numpy.divide",
  "numpy.dot",
  "numpy.double",
  "numpy.dtype",
  "numpy.e",
  "numpy.einsum",
  "numpy.equal",
  "numpy.errstate",
  "numpy.euler_gamma",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.expm1",
  "numpy.eye",
  "numpy.fabs",
  "numpy.fill_diagonal",
  "numpy.finfo",
  "numpy.flip",
  "numpy.float",
  "numpy.float128",
  "numpy.float16",
  "numpy.float16.get",
  "numpy.float32",
  "numpy.float32.get",
  "numpy.float64",
  "numpy.float64.get",
  "numpy.floor",
  "numpy.full",
  "numpy.generic",
  "numpy.greater",
  "numpy.half",
  "numpy.histogram",
  "numpy.hstack",
  "numpy.iinfo",
  "numpy.inf",
  "numpy.int",
  "numpy.int16",
  "numpy.int32",
  "numpy.int64",
  "numpy.int8",
  "numpy.integer",
  "numpy.isclose",
  "numpy.isfinite",
  "numpy.isinf",
  "numpy.isnan",
  "numpy.isneginf",
  "numpy.isposinf",
  "numpy.issubdtype",
  "numpy.less",
  "numpy.linalg.cholesky",
  "numpy.linalg.det",
  "numpy.linalg.eig",
  "numpy.linalg.inv",
  "numpy.linalg.norm",
  "numpy.linalg.qr",
  "numpy.linalg.solve",
  "numpy.linspace",
  "numpy.log",
  "numpy.log1p",
  "numpy.log2",
  "numpy.logaddexp",
  "numpy.logical_and",
  "numpy.logical_not",
  "numpy.logical_or",
  "numpy.logspace",
  "numpy.math.lgamma",
  "numpy.matmul",
  "numpy.matrix",
  "numpy.max",
  "numpy.maximum",
  "numpy.mean",
  "numpy.median",
  "numpy.meshgrid",
  "numpy.mgrid.reshape",
  "numpy.min",
  "numpy.minimum",
  "numpy.multiply",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.ndenumerate",
  "numpy.ndindex",
  "numpy.negative",
  "numpy.newaxis",
  "numpy.nextafter",
  "numpy.nonzero",
  "numpy.object",
  "numpy.ones",
  "numpy.ones_like",
  "numpy.pad",
  "numpy.percentile",
  "numpy.pi",
  "numpy.polyfit",
  "numpy.polynomial.hermite.hermgauss",
  "numpy.power",
  "numpy.prod",
  "numpy.product",
  "numpy.r_",
  "numpy.random",
  "numpy.random.RandomState",
  "numpy.random.beta",
  "numpy.random.choice",
  "numpy.random.dirichlet",
  "numpy.random.gamma",
  "numpy.random.geometric",
  "numpy.random.normal",
  "numpy.random.permutation",
  "numpy.random.rand",
  "numpy.random.randint",
  "numpy.random.randn",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.random.shuffle",
  "numpy.random.standard_normal",
  "numpy.random.uniform",
  "numpy.ravel",
  "numpy.reshape",
  "numpy.roll",
  "numpy.rollaxis",
  "numpy.round",
  "numpy.sign",
  "numpy.sin",
  "numpy.sinh",
  "numpy.size",
  "numpy.sort",
  "numpy.split",
  "numpy.sqrt",
  "numpy.square",
  "numpy.squeeze",
  "numpy.stack",
  "numpy.std",
  "numpy.str",
  "numpy.sum",
  "numpy.swapaxes",
  "numpy.take",
  "numpy.tanh",
  "numpy.testing.assert_allclose",
  "numpy.testing.assert_array_less",
  "numpy.tile",
  "numpy.trace",
  "numpy.transpose",
  "numpy.tril",
  "numpy.triu",
  "numpy.triu_indices",
  "numpy.uint16",
  "numpy.uint32",
  "numpy.uint64",
  "numpy.uint8",
  "numpy.unique",
  "numpy.var",
  "numpy.vectorize",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "objective_fn",
  "objective_function",
  "observation_fn",
  "observed_log_joint_fn",
  "ode_fn",
  "ode_fn_vec",
  "one_step_fn",
  "operator.abs",
  "operator.add",
  "operator.and_",
  "operator.floordiv",
  "operator.ge",
  "operator.gt",
  "operator.le",
  "operator.lt",
  "operator.mod",
  "operator.mul",
  "operator.neg",
  "operator.or_",
  "operator.pow",
  "operator.sub",
  "operator.truediv",
  "operator.xor",
  "original_fn",
  "os.environ.get",
  "os.urandom",
  "part_converged",
  "pickle.loads",
  "pprint.pprint",
  "prior_model",
  "prior_model.trainable_variables",
  "probs",
  "proposal_log_prob_fn",
  "psd",
  "pushforward_latents_step",
  "pushforward_step",
  "quantized_log_prob",
  "random_orthogonal_matrix",
  "random_with_shape",
  "rastrigin",
  "re.compile",
  "re.escape",
  "re.sub",
  "ref",
  "rejection_sample_with_gradient",
  "reshape_output",
  "rosenbrock",
  "run",
  "run_one",
  "s",
  "sample",
  "sample_chain",
  "scale",
  "scale_tril",
  "scaled_identity",
  "scipy.fftpack.dct",
  "scipy.interpolate.interp1d",
  "scipy.linalg.cholesky",
  "scipy.linalg.circulant",
  "scipy.linalg.solve_triangular",
  "scipy.optimize.newton",
  "scipy.special.digamma",
  "scipy.special.expit",
  "scipy.special.gamma",
  "scipy.special.gammaln",
  "scipy.special.i0",
  "scipy.special.i1",
  "scipy.special.ive",
  "scipy.stats.binom.cdf",
  "scipy.stats.binom.mean",
  "scipy.stats.binom.pmf",
  "scipy.stats.binom.var",
  "scipy.stats.chi.cdf",
  "scipy.stats.chi.entropy",
  "scipy.stats.chi.logpdf",
  "scipy.stats.chi.mean",
  "scipy.stats.chi.var",
  "scipy.stats.chi2.cdf",
  "scipy.stats.chi2.entropy",
  "scipy.stats.chi2.logpdf",
  "scipy.stats.chi2.mean",
  "scipy.stats.chi2.var",
  "scipy.stats.frechet_r",
  "scipy.stats.geom.cdf",
  "scipy.stats.geom.entropy",
  "scipy.stats.geom.logcdf",
  "scipy.stats.geom.logpmf",
  "scipy.stats.geom.mean",
  "scipy.stats.geom.std",
  "scipy.stats.geom.var",
  "scipy.stats.gumbel_r",
  "scipy.stats.gumbel_r.cdf",
  "scipy.stats.gumbel_r.logcdf",
  "scipy.stats.gumbel_r.logpdf",
  "scipy.stats.gumbel_r.mean",
  "scipy.stats.gumbel_r.pdf",
  "scipy.stats.gumbel_r.std",
  "scipy.stats.gumbel_r.var",
  "scipy.stats.halfcauchy.cdf",
  "scipy.stats.halfcauchy.entropy",
  "scipy.stats.halfcauchy.logcdf",
  "scipy.stats.halfcauchy.logpdf",
  "scipy.stats.halfcauchy.median",
  "scipy.stats.halfcauchy.pdf",
  "scipy.stats.halfcauchy.ppf",
  "scipy.stats.invgamma",
  "scipy.stats.invgamma.cdf",
  "scipy.stats.invgamma.entropy",
  "scipy.stats.invgamma.logpdf",
  "scipy.stats.invgamma.mean",
  "scipy.stats.invgamma.var",
  "scipy.stats.invgauss",
  "scipy.stats.ks_2samp",
  "scipy.stats.kstest",
  "scipy.stats.logistic.cdf",
  "scipy.stats.logistic.entropy",
  "scipy.stats.logistic.logcdf",
  "scipy.stats.logistic.logpdf",
  "scipy.stats.logistic.logsf",
  "scipy.stats.logistic.mean",
  "scipy.stats.logistic.sf",
  "scipy.stats.logistic.var",
  "scipy.stats.lognorm",
  "scipy.stats.lognorm.logpdf",
  "scipy.stats.multivariate_normal",
  "scipy.stats.nbinom.logcdf",
  "scipy.stats.nbinom.logpmf",
  "scipy.stats.nbinom.mean",
  "scipy.stats.nbinom.std",
  "scipy.stats.nbinom.var",
  "scipy.stats.norm",
  "scipy.stats.norm.cdf",
  "scipy.stats.norm.logpdf",
  "scipy.stats.pareto",
  "scipy.stats.poisson.cdf",
  "scipy.stats.poisson.logcdf",
  "scipy.stats.poisson.logpmf",
  "scipy.stats.poisson.mean",
  "scipy.stats.poisson.pmf",
  "scipy.stats.poisson.std",
  "scipy.stats.poisson.var",
  "scipy.stats.special_ortho_group.rvs",
  "scipy.stats.triang",
  "scipy.stats.uniform.cdf",
  "scipy.stats.vonmises",
  "scipy.stats.vonmises.cdf",
  "scipy.stats.vonmises.entropy",
  "scipy.stats.vonmises.logpdf",
  "scipy.stats.vonmises.pdf",
  "scipy.stats.zipf.cdf",
  "scipy.stats.zipf.logcdf",
  "scipy.stats.zipf.logpmf",
  "scipy.stats.zipf.mean",
  "scipy.stats.zipf.pmf",
  "scipy.stats.zipf.std",
  "scipy.stats.zipf.var",
  "scipy_f",
  "seed",
  "seed.original_seed",
  "seed_gen",
  "seed_hi",
  "seed_lo",
  "seed_stream",
  "setter",
  "shape_fn",
  "shape_tensor_fn",
  "sin",
  "sinhe",
  "six.PY2",
  "six.PY3",
  "six.add_metaclass",
  "six.iteritems",
  "six.iterkeys",
  "six.string_types",
  "slicer",
  "smooth_step",
  "sp_func",
  "square",
  "squared_frobenius_norm",
  "static_fn",
  "stop",
  "stopping_condition",
  "stopping_policy_fn",
  "stream",
  "strm",
  "strm1",
  "strm2",
  "strm3",
  "sys",
  "sys.modules",
  "sys.stdout.flush",
  "t",
  "target_fn",
  "target_log_prob",
  "target_log_prob_fn",
  "tensorflow",
  "tensorflow.Assert",
  "tensorflow.DType",
  "tensorflow.GradientTape",
  "tensorflow.Graph",
  "tensorflow.IndexedSlices",
  "tensorflow.SparseTensor",
  "tensorflow.Tensor",
  "tensorflow.Tensor.OVERLOADABLE_OPERATORS.union",
  "tensorflow.Tensor.__abs__",
  "tensorflow.Tensor.__add__",
  "tensorflow.Tensor.__and__",
  "tensorflow.Tensor.__bool__",
  "tensorflow.Tensor.__div__",
  "tensorflow.Tensor.__floordiv__",
  "tensorflow.Tensor.__ge__",
  "tensorflow.Tensor.__getitem__",
  "tensorflow.Tensor.__gt__",
  "tensorflow.Tensor.__invert__",
  "tensorflow.Tensor.__iter__",
  "tensorflow.Tensor.__le__",
  "tensorflow.Tensor.__lt__",
  "tensorflow.Tensor.__matmul__",
  "tensorflow.Tensor.__mod__",
  "tensorflow.Tensor.__mul__",
  "tensorflow.Tensor.__neg__",
  "tensorflow.Tensor.__nonzero__",
  "tensorflow.Tensor.__or__",
  "tensorflow.Tensor.__pow__",
  "tensorflow.Tensor.__radd__",
  "tensorflow.Tensor.__rand__",
  "tensorflow.Tensor.__rdiv__",
  "tensorflow.Tensor.__rfloordiv__",
  "tensorflow.Tensor.__rmatmul__",
  "tensorflow.Tensor.__rmod__",
  "tensorflow.Tensor.__rmul__",
  "tensorflow.Tensor.__ror__",
  "tensorflow.Tensor.__rpow__",
  "tensorflow.Tensor.__rsub__",
  "tensorflow.Tensor.__rtruediv__",
  "tensorflow.Tensor.__rxor__",
  "tensorflow.Tensor.__sub__",
  "tensorflow.Tensor.__truediv__",
  "tensorflow.Tensor.__xor__",
  "tensorflow.TensorArray",
  "tensorflow.TensorShape",
  "tensorflow.Variable",
  "tensorflow.__version__",
  "tensorflow.abs",
  "tensorflow.add",
  "tensorflow.add_n",
  "tensorflow.argmax",
  "tensorflow.argsort",
  "tensorflow.as_dtype",
  "tensorflow.atan2",
  "tensorflow.bfloat16",
  "tensorflow.bool",
  "tensorflow.broadcast_dynamic_shape",
  "tensorflow.broadcast_static_shape",
  "tensorflow.broadcast_to",
  "tensorflow.cast",
  "tensorflow.clip_by_value",
  "tensorflow.compat.dimension_value",
  "tensorflow.compat.v1.AUTO_REUSE",
  "tensorflow.compat.v1.ConfigProto",
  "tensorflow.compat.v1.Print",
  "tensorflow.compat.v1.Session",
  "tensorflow.compat.v1.SparseTensorValue",
  "tensorflow.compat.v1.assert_equal",
  "tensorflow.compat.v1.assert_greater",
  "tensorflow.compat.v1.assert_greater_equal",
  "tensorflow.compat.v1.assert_integer",
  "tensorflow.compat.v1.assert_less",
  "tensorflow.compat.v1.assert_less_equal",
  "tensorflow.compat.v1.assert_near",
  "tensorflow.compat.v1.assert_non_negative",
  "tensorflow.compat.v1.assert_non_positive",
  "tensorflow.compat.v1.assert_none_equal",
  "tensorflow.compat.v1.assert_positive",
  "tensorflow.compat.v1.assert_rank",
  "tensorflow.compat.v1.assert_rank_at_least",
  "tensorflow.compat.v1.assert_rank_in",
  "tensorflow.compat.v1.assert_scalar",
  "tensorflow.compat.v1.assign",
  "tensorflow.compat.v1.assign_add",
  "tensorflow.compat.v1.batch_gather",
  "tensorflow.compat.v1.colocate_with",
  "tensorflow.compat.v1.enable_eager_execution",
  "tensorflow.compat.v1.get_default_graph",
  "tensorflow.compat.v1.get_variable",
  "tensorflow.compat.v1.get_variable_scope",
  "tensorflow.compat.v1.global_variables_initializer",
  "tensorflow.compat.v1.glorot_normal_initializer",
  "tensorflow.compat.v1.initialize_all_variables",
  "tensorflow.compat.v1.initializers.constant",
  "tensorflow.compat.v1.initializers.random_normal",
  "tensorflow.compat.v1.initializers.variables",
  "tensorflow.compat.v1.initializers.zeros",
  "tensorflow.compat.v1.layers.BatchNormalization",
  "tensorflow.compat.v1.layers.Dense",
  "tensorflow.compat.v1.layers.dense",
  "tensorflow.compat.v1.logging.vlog",
  "tensorflow.compat.v1.logging.warn",
  "tensorflow.compat.v1.logging.warning",
  "tensorflow.compat.v1.make_template",
  "tensorflow.compat.v1.name_scope",
  "tensorflow.compat.v1.placeholder",
  "tensorflow.compat.v1.placeholder_with_default",
  "tensorflow.compat.v1.random.set_random_seed",
  "tensorflow.compat.v1.reset_default_graph",
  "tensorflow.compat.v1.scatter_add",
  "tensorflow.compat.v1.set_random_seed",
  "tensorflow.compat.v1.setdiff1d",
  "tensorflow.compat.v1.test.compute_gradient_error",
  "tensorflow.compat.v1.train.AdamOptimizer",
  "tensorflow.compat.v1.train.get_or_create_global_step",
  "tensorflow.compat.v1.train.polynomial_decay",
  "tensorflow.compat.v1.trainable_variables",
  "tensorflow.compat.v1.variable_scope",
  "tensorflow.compat.v1.where",
  "tensorflow.compat.v1.while_loop",
  "tensorflow.compat.v2",
  "tensorflow.compat.v2.Assert",
  "tensorflow.compat.v2.GradientTape",
  "tensorflow.compat.v2.IndexedSlices",
  "tensorflow.compat.v2.SparseTensor",
  "tensorflow.compat.v2.Tensor",
  "tensorflow.compat.v2.TensorArray",
  "tensorflow.compat.v2.TensorShape",
  "tensorflow.compat.v2.Variable",
  "tensorflow.compat.v2.abs",
  "tensorflow.compat.v2.add_n",
  "tensorflow.compat.v2.argmax",
  "tensorflow.compat.v2.argmin",
  "tensorflow.compat.v2.argsort",
  "tensorflow.compat.v2.as_dtype",
  "tensorflow.compat.v2.asinh",
  "tensorflow.compat.v2.assert_near",
  "tensorflow.compat.v2.atan",
  "tensorflow.compat.v2.atanh",
  "tensorflow.compat.v2.bool",
  "tensorflow.compat.v2.bool.get",
  "tensorflow.compat.v2.boolean_mask",
  "tensorflow.compat.v2.broadcast_dynamic_shape",
  "tensorflow.compat.v2.broadcast_static_shape",
  "tensorflow.compat.v2.broadcast_to",
  "tensorflow.compat.v2.cast",
  "tensorflow.compat.v2.clip_by_value",
  "tensorflow.compat.v2.compat.dimension_value",
  "tensorflow.compat.v2.concat",
  "tensorflow.compat.v2.cond",
  "tensorflow.compat.v2.constant",
  "tensorflow.compat.v2.control_dependencies",
  "tensorflow.compat.v2.convert_to_tensor",
  "tensorflow.compat.v2.cos",
  "tensorflow.compat.v2.cosh",
  "tensorflow.compat.v2.cumsum",
  "tensorflow.compat.v2.custom_gradient",
  "tensorflow.compat.v2.debugging.check_numerics",
  "tensorflow.compat.v2.dynamic_partition",
  "tensorflow.compat.v2.dynamic_stitch",
  "tensorflow.compat.v2.einsum",
  "tensorflow.compat.v2.ensure_shape",
  "tensorflow.compat.v2.equal",
  "tensorflow.compat.v2.errors.InvalidArgumentError",
  "tensorflow.compat.v2.executing_eagerly",
  "tensorflow.compat.v2.exp",
  "tensorflow.compat.v2.expand_dims",
  "tensorflow.compat.v2.eye",
  "tensorflow.compat.v2.fill",
  "tensorflow.compat.v2.float16",
  "tensorflow.compat.v2.float16.get",
  "tensorflow.compat.v2.float32",
  "tensorflow.compat.v2.float32.get",
  "tensorflow.compat.v2.float64",
  "tensorflow.compat.v2.float64.get",
  "tensorflow.compat.v2.floor",
  "tensorflow.compat.v2.foldl",
  "tensorflow.compat.v2.gather",
  "tensorflow.compat.v2.gather_nd",
  "tensorflow.compat.v2.get_static_value",
  "tensorflow.compat.v2.greater",
  "tensorflow.compat.v2.group",
  "tensorflow.compat.v2.identity",
  "tensorflow.compat.v2.initializers.deserialize",
  "tensorflow.compat.v2.initializers.serialize",
  "tensorflow.compat.v2.int16",
  "tensorflow.compat.v2.int16.get",
  "tensorflow.compat.v2.int32",
  "tensorflow.compat.v2.int32.get",
  "tensorflow.compat.v2.int64",
  "tensorflow.compat.v2.int64.get",
  "tensorflow.compat.v2.int64.max",
  "tensorflow.compat.v2.int8.get",
  "tensorflow.compat.v2.is_tensor",
  "tensorflow.compat.v2.keras.initializers.GlorotNormal",
  "tensorflow.compat.v2.less",
  "tensorflow.compat.v2.linalg",
  "tensorflow.compat.v2.linalg.LinearOperator",
  "tensorflow.compat.v2.linalg.LinearOperatorDiag",
  "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
  "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
  "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
  "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
  "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
  "tensorflow.compat.v2.linalg.band_part",
  "tensorflow.compat.v2.linalg.cholesky",
  "tensorflow.compat.v2.linalg.cholesky_solve",
  "tensorflow.compat.v2.linalg.det",
  "tensorflow.compat.v2.linalg.diag",
  "tensorflow.compat.v2.linalg.diag_part",
  "tensorflow.compat.v2.linalg.eye",
  "tensorflow.compat.v2.linalg.matmul",
  "tensorflow.compat.v2.linalg.matrix_transpose",
  "tensorflow.compat.v2.linalg.matvec",
  "tensorflow.compat.v2.linalg.norm",
  "tensorflow.compat.v2.linalg.qr",
  "tensorflow.compat.v2.linalg.set_diag",
  "tensorflow.compat.v2.linalg.slogdet",
  "tensorflow.compat.v2.linalg.tensor_diag_part",
  "tensorflow.compat.v2.linalg.triangular_solve",
  "tensorflow.compat.v2.linspace",
  "tensorflow.compat.v2.logging.warn",
  "tensorflow.compat.v2.logical_and",
  "tensorflow.compat.v2.logical_not",
  "tensorflow.compat.v2.logical_or",
  "tensorflow.compat.v2.map_fn",
  "tensorflow.compat.v2.math",
  "tensorflow.compat.v2.math.acos",
  "tensorflow.compat.v2.math.bessel_i0e",
  "tensorflow.compat.v2.math.bessel_i1e",
  "tensorflow.compat.v2.math.betainc",
  "tensorflow.compat.v2.math.ceil",
  "tensorflow.compat.v2.math.conj",
  "tensorflow.compat.v2.math.count_nonzero",
  "tensorflow.compat.v2.math.cumprod",
  "tensorflow.compat.v2.math.cumsum",
  "tensorflow.compat.v2.math.digamma",
  "tensorflow.compat.v2.math.erf",
  "tensorflow.compat.v2.math.erfc",
  "tensorflow.compat.v2.math.exp",
  "tensorflow.compat.v2.math.expm1",
  "tensorflow.compat.v2.math.igamma",
  "tensorflow.compat.v2.math.igammac",
  "tensorflow.compat.v2.math.invert_permutation",
  "tensorflow.compat.v2.math.is_inf",
  "tensorflow.compat.v2.math.is_nan",
  "tensorflow.compat.v2.math.is_strictly_increasing",
  "tensorflow.compat.v2.math.lbeta",
  "tensorflow.compat.v2.math.lgamma",
  "tensorflow.compat.v2.math.log",
  "tensorflow.compat.v2.math.log1p",
  "tensorflow.compat.v2.math.log_sigmoid",
  "tensorflow.compat.v2.math.multiply_no_nan",
  "tensorflow.compat.v2.math.reciprocal",
  "tensorflow.compat.v2.math.reduce_max",
  "tensorflow.compat.v2.math.reduce_mean",
  "tensorflow.compat.v2.math.rsqrt",
  "tensorflow.compat.v2.math.squared_difference",
  "tensorflow.compat.v2.math.xlogy",
  "tensorflow.compat.v2.math.zeta",
  "tensorflow.compat.v2.matmul",
  "tensorflow.compat.v2.maximum",
  "tensorflow.compat.v2.minimum",
  "tensorflow.compat.v2.name_scope",
  "tensorflow.compat.v2.nest.assert_same_structure",
  "tensorflow.compat.v2.nest.flatten",
  "tensorflow.compat.v2.nest.is_nested",
  "tensorflow.compat.v2.nest.map_structure",
  "tensorflow.compat.v2.nest.pack_sequence_as",
  "tensorflow.compat.v2.newaxis",
  "tensorflow.compat.v2.nn.l2_normalize",
  "tensorflow.compat.v2.nn.log_softmax",
  "tensorflow.compat.v2.nn.relu",
  "tensorflow.compat.v2.nn.sigmoid",
  "tensorflow.compat.v2.nn.sigmoid_cross_entropy_with_logits",
  "tensorflow.compat.v2.nn.softmax",
  "tensorflow.compat.v2.nn.softmax_cross_entropy_with_logits",
  "tensorflow.compat.v2.nn.softplus",
  "tensorflow.compat.v2.nn.sparse_softmax_cross_entropy_with_logits",
  "tensorflow.compat.v2.nn.tanh",
  "tensorflow.compat.v2.nn.top_k",
  "tensorflow.compat.v2.no_op",
  "tensorflow.compat.v2.norm",
  "tensorflow.compat.v2.one_hot",
  "tensorflow.compat.v2.ones",
  "tensorflow.compat.v2.ones_like",
  "tensorflow.compat.v2.optimizers.Adam",
  "tensorflow.compat.v2.optimizers.Optimizer",
  "tensorflow.compat.v2.optimizers.SGD",
  "tensorflow.compat.v2.pad",
  "tensorflow.compat.v2.random.categorical",
  "tensorflow.compat.v2.random.gamma",
  "tensorflow.compat.v2.random.normal",
  "tensorflow.compat.v2.random.poisson",
  "tensorflow.compat.v2.random.uniform",
  "tensorflow.compat.v2.range",
  "tensorflow.compat.v2.rank",
  "tensorflow.compat.v2.reduce_all",
  "tensorflow.compat.v2.reduce_any",
  "tensorflow.compat.v2.reduce_logsumexp",
  "tensorflow.compat.v2.reduce_max",
  "tensorflow.compat.v2.reduce_mean",
  "tensorflow.compat.v2.reduce_prod",
  "tensorflow.compat.v2.reduce_sum",
  "tensorflow.compat.v2.reshape",
  "tensorflow.compat.v2.reverse",
  "tensorflow.compat.v2.round",
  "tensorflow.compat.v2.scan",
  "tensorflow.compat.v2.searchsorted",
  "tensorflow.compat.v2.shape",
  "tensorflow.compat.v2.sigmoid",
  "tensorflow.compat.v2.sign",
  "tensorflow.compat.v2.signal.dct",
  "tensorflow.compat.v2.signal.idct",
  "tensorflow.compat.v2.sin",
  "tensorflow.compat.v2.sinh",
  "tensorflow.compat.v2.size",
  "tensorflow.compat.v2.slice",
  "tensorflow.compat.v2.sort",
  "tensorflow.compat.v2.split",
  "tensorflow.compat.v2.sqrt",
  "tensorflow.compat.v2.square",
  "tensorflow.compat.v2.squeeze",
  "tensorflow.compat.v2.stack",
  "tensorflow.compat.v2.stop_gradient",
  "tensorflow.compat.v2.tan",
  "tensorflow.compat.v2.test.TestCase",
  "tensorflow.compat.v2.test.main",
  "tensorflow.compat.v2.tile",
  "tensorflow.compat.v2.transpose",
  "tensorflow.compat.v2.uint16.get",
  "tensorflow.compat.v2.uint8.get",
  "tensorflow.compat.v2.unstack",
  "tensorflow.compat.v2.while_loop",
  "tensorflow.compat.v2.zeros",
  "tensorflow.compat.v2.zeros_like",
  "tensorflow.complex",
  "tensorflow.complex128",
  "tensorflow.concat",
  "tensorflow.cond",
  "tensorflow.constant",
  "tensorflow.control_dependencies",
  "tensorflow.convert_to_tensor",
  "tensorflow.cos",
  "tensorflow.cumsum",
  "tensorflow.custom_gradient",
  "tensorflow.debugging.assert_same_float_dtype",
  "tensorflow.debugging.check_numerics",
  "tensorflow.debugging.is_numeric_tensor",
  "tensorflow.device",
  "tensorflow.dtypes.int32",
  "tensorflow.equal",
  "tensorflow.errors.InvalidArgumentError",
  "tensorflow.errors.UnimplementedError",
  "tensorflow.executing_eagerly",
  "tensorflow.exp",
  "tensorflow.expand_dims",
  "tensorflow.eye",
  "tensorflow.fill",
  "tensorflow.float16",
  "tensorflow.float32",
  "tensorflow.float64",
  "tensorflow.floor",
  "tensorflow.function",
  "tensorflow.gather",
  "tensorflow.gather_nd",
  "tensorflow.get_static_value",
  "tensorflow.gradients",
  "tensorflow.greater_equal",
  "tensorflow.group",
  "tensorflow.half",
  "tensorflow.hessians",
  "tensorflow.histogram_fixed_width",
  "tensorflow.identity",
  "tensorflow.int16",
  "tensorflow.int32",
  "tensorflow.int64",
  "tensorflow.int8",
  "tensorflow.is_tensor",
  "tensorflow.keras",
  "tensorflow.keras.Input",
  "tensorflow.keras.Model",
  "tensorflow.keras.Sequential",
  "tensorflow.keras.activations.get",
  "tensorflow.keras.activations.serialize",
  "tensorflow.keras.backend.floatx",
  "tensorflow.keras.constraints.get",
  "tensorflow.keras.initializers.Initializer",
  "tensorflow.keras.initializers.get",
  "tensorflow.keras.initializers.serialize",
  "tensorflow.keras.layers",
  "tensorflow.keras.layers.BatchNormalization",
  "tensorflow.keras.layers.Dense",
  "tensorflow.keras.layers.InputLayer",
  "tensorflow.keras.layers.InputSpec",
  "tensorflow.keras.layers.Lambda",
  "tensorflow.keras.layers.Layer",
  "tensorflow.keras.models.Sequential",
  "tensorflow.keras.regularizers.Regularizer",
  "tensorflow.keras.regularizers.get",
  "tensorflow.keras.utils.CustomObjectScope",
  "tensorflow.keras.utils.deserialize_keras_object",
  "tensorflow.keras.utils.get_custom_objects",
  "tensorflow.keras.utils.serialize_keras_object",
  "tensorflow.less",
  "tensorflow.linalg",
  "tensorflow.linalg.LinearOperatorBlockDiag",
  "tensorflow.linalg.LinearOperatorDiag",
  "tensorflow.linalg.LinearOperatorFullMatrix",
  "tensorflow.linalg.LinearOperatorIdentity",
  "tensorflow.linalg.LinearOperatorLowRankUpdate",
  "tensorflow.linalg.LinearOperatorLowerTriangular",
  "tensorflow.linalg.band_part",
  "tensorflow.linalg.cholesky",
  "tensorflow.linalg.cholesky_solve",
  "tensorflow.linalg.det",
  "tensorflow.linalg.diag",
  "tensorflow.linalg.diag_part",
  "tensorflow.linalg.eigh",
  "tensorflow.linalg.eye",
  "tensorflow.linalg.lstsq",
  "tensorflow.linalg.lu",
  "tensorflow.linalg.matmul",
  "tensorflow.linalg.matrix_transpose",
  "tensorflow.linalg.matvec",
  "tensorflow.linalg.norm",
  "tensorflow.linalg.qr",
  "tensorflow.linalg.set_diag",
  "tensorflow.linalg.slogdet",
  "tensorflow.linalg.solve",
  "tensorflow.linalg.svd",
  "tensorflow.linalg.tensor_diag",
  "tensorflow.linalg.triangular_solve",
  "tensorflow.linspace",
  "tensorflow.logical_and",
  "tensorflow.logical_not",
  "tensorflow.logical_or",
  "tensorflow.map_fn",
  "tensorflow.math.abs",
  "tensorflow.math.add_n",
  "tensorflow.math.bessel_i0e",
  "tensorflow.math.bessel_i1e",
  "tensorflow.math.betainc",
  "tensorflow.math.bincount",
  "tensorflow.math.ceil",
  "tensorflow.math.conj",
  "tensorflow.math.count_nonzero",
  "tensorflow.math.digamma",
  "tensorflow.math.equal",
  "tensorflow.math.exp",
  "tensorflow.math.expm1",
  "tensorflow.math.floordiv",
  "tensorflow.math.floormod",
  "tensorflow.math.invert_permutation",
  "tensorflow.math.is_finite",
  "tensorflow.math.is_inf",
  "tensorflow.math.is_nan",
  "tensorflow.math.is_strictly_increasing",
  "tensorflow.math.l2_normalize",
  "tensorflow.math.lgamma",
  "tensorflow.math.log",
  "tensorflow.math.log1p",
  "tensorflow.math.maximum",
  "tensorflow.math.minimum",
  "tensorflow.math.nextafter",
  "tensorflow.math.polyval",
  "tensorflow.math.reciprocal",
  "tensorflow.math.reduce_all",
  "tensorflow.math.reduce_max",
  "tensorflow.math.reduce_mean",
  "tensorflow.math.reduce_min",
  "tensorflow.math.reduce_sum",
  "tensorflow.math.rsqrt",
  "tensorflow.math.softplus",
  "tensorflow.math.sqrt",
  "tensorflow.math.squared_difference",
  "tensorflow.math.top_k",
  "tensorflow.matmul",
  "tensorflow.maximum",
  "tensorflow.meshgrid",
  "tensorflow.minimum",
  "tensorflow.multiply",
  "tensorflow.nest.assert_same_structure",
  "tensorflow.nest.flatten",
  "tensorflow.nest.map_structure",
  "tensorflow.nest.pack_sequence_as",
  "tensorflow.newaxis",
  "tensorflow.newaxis.batch_shape",
  "tensorflow.newaxis.event_shape",
  "tensorflow.newaxis.shape",
  "tensorflow.newaxis.shape.as_list",
  "tensorflow.nn.bias_add",
  "tensorflow.nn.l2_normalize",
  "tensorflow.nn.log_softmax",
  "tensorflow.nn.moments",
  "tensorflow.nn.relu",
  "tensorflow.nn.sigmoid",
  "tensorflow.nn.softmax",
  "tensorflow.nn.softplus",
  "tensorflow.nn.top_k",
  "tensorflow.norm",
  "tensorflow.not_equal",
  "tensorflow.one_hot",
  "tensorflow.ones",
  "tensorflow.ones_like",
  "tensorflow.pad",
  "tensorflow.pow",
  "tensorflow.python.client.session",
  "tensorflow.python.client.session.register_session_run_conversion_functions",
  "tensorflow.python.framework.composite_tensor.CompositeTensor",
  "tensorflow.python.framework.ops.EagerTensor",
  "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
  "tensorflow.python.framework.tensor_util.constant_value_as_shape",
  "tensorflow.python.framework.test_util.TensorFlowTestCase",
  "tensorflow.python.framework.test_util.VectorDistributionTestHelpers",
  "tensorflow.python.framework.test_util.enable_control_flow_v2",
  "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
  "tensorflow.python.framework.test_util.run_deprecated_v1",
  "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
  "tensorflow.python.keras.testing_utils.layer_test",
  "tensorflow.python.keras.utils.generic_utils.func_dump",
  "tensorflow.python.keras.utils.generic_utils.func_load",
  "tensorflow.python.keras.utils.tf_utils.register_symbolic_tensor_type",
  "tensorflow.python.layers.utils.conv_output_length",
  "tensorflow.python.layers.utils.convert_data_format",
  "tensorflow.python.layers.utils.normalize_data_format",
  "tensorflow.python.layers.utils.normalize_padding",
  "tensorflow.python.layers.utils.normalize_tuple",
  "tensorflow.python.ops.array_ops.prevent_gradient",
  "tensorflow.python.ops.control_flow_ops._case_helper",
  "tensorflow.python.ops.control_flow_util.GraphOrParentsInXlaContext",
  "tensorflow.python.ops.gen_array_ops.unique_with_counts_v2",
  "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
  "tensorflow.python.ops.gradient_checker_v2.max_error",
  "tensorflow.python.ops.linalg.linear_operator_addition.add_operators",
  "tensorflow.python.ops.linalg.linear_operator_util.matrix_triangular_solve_with_broadcast",
  "tensorflow.python.ops.nn_ops.Convolution",
  "tensorflow.python.ops.parallel_for.gradients.batch_jacobian",
  "tensorflow.python.ops.random_ops.parameterized_truncated_normal",
  "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
  "tensorflow.python.ops.unconnected_gradients.UnconnectedGradients.NONE",
  "tensorflow.python.platform.test.main",
  "tensorflow.python.pywrap_tensorflow.TF_TryEvaluateConstant_wrapper",
  "tensorflow.python.training.training_ops.resource_apply_gradient_descent",
  "tensorflow.python.util.all_util.remove_undocumented",
  "tensorflow.python.util.deprecation.deprecated",
  "tensorflow.python.util.deprecation.deprecated_args",
  "tensorflow.python.util.deprecation.silence",
  "tensorflow.python.util.nest._is_namedtuple",
  "tensorflow.python.util.nest.flatten_up_to",
  "tensorflow.python.util.nest.get_traverse_shallow_structure",
  "tensorflow.python.util.nest.map_structure_up_to",
  "tensorflow.python.util.tf_inspect._inspect.getargvalues",
  "tensorflow.python.util.tf_inspect._inspect.stack",
  "tensorflow.python.util.tf_inspect.getdoc",
  "tensorflow.python.util.tf_inspect.getfullargspec",
  "tensorflow.python.util.tf_inspect.getmro",
  "tensorflow.python.util.tf_inspect.isclass",
  "tensorflow.qint16",
  "tensorflow.qint16.as_numpy_dtype",
  "tensorflow.random.categorical",
  "tensorflow.random.gamma",
  "tensorflow.random.normal",
  "tensorflow.random.poisson",
  "tensorflow.random.shuffle",
  "tensorflow.random.uniform",
  "tensorflow.range",
  "tensorflow.rank",
  "tensorflow.reduce_all",
  "tensorflow.reduce_any",
  "tensorflow.reduce_logsumexp",
  "tensorflow.reduce_max",
  "tensorflow.reduce_mean",
  "tensorflow.reduce_min",
  "tensorflow.reduce_prod",
  "tensorflow.reduce_sum",
  "tensorflow.register_tensor_conversion_function",
  "tensorflow.reshape",
  "tensorflow.reverse",
  "tensorflow.roll",
  "tensorflow.round",
  "tensorflow.scan",
  "tensorflow.searchsorted",
  "tensorflow.shape",
  "tensorflow.sigmoid",
  "tensorflow.sign",
  "tensorflow.signal.fft",
  "tensorflow.signal.ifft",
  "tensorflow.sin",
  "tensorflow.size",
  "tensorflow.slice",
  "tensorflow.sort",
  "tensorflow.sparse.reshape",
  "tensorflow.sparse.slice",
  "tensorflow.sparse.sparse_dense_matmul",
  "tensorflow.sparse.to_dense",
  "tensorflow.split",
  "tensorflow.sqrt",
  "tensorflow.square",
  "tensorflow.squeeze",
  "tensorflow.stack",
  "tensorflow.stop_gradient",
  "tensorflow.string",
  "tensorflow.tensor_scatter_nd_add",
  "tensorflow.tensordot",
  "tensorflow.test.Benchmark",
  "tensorflow.test.TestCase",
  "tensorflow.test.is_gpu_available",
  "tensorflow.test.main",
  "tensorflow.tile",
  "tensorflow.transpose",
  "tensorflow.tuple",
  "tensorflow.uint16",
  "tensorflow.unique",
  "tensorflow.unstack",
  "tensorflow.while_loop",
  "tensorflow.xla.experimental.compile",
  "tensorflow.zeros",
  "tensorflow.zeros_like",
  "tensorflow_probability._ensure_tf_install",
  "tensorflow_probability.bijectors",
  "tensorflow_probability.bijectors.ConditionalBijector",
  "tensorflow_probability.bijectors.Exp",
  "tensorflow_probability.bijectors.Reshape",
  "tensorflow_probability.bijectors.Sigmoid",
  "tensorflow_probability.bijectors.Softplus",
  "tensorflow_probability.distributions",
  "tensorflow_probability.distributions.Bernoulli",
  "tensorflow_probability.distributions.Bernoulli.__init__.__doc__",
  "tensorflow_probability.distributions.Distribution",
  "tensorflow_probability.distributions.LinearGaussianStateSpaceModel",
  "tensorflow_probability.distributions.MultivariateNormalDiag",
  "tensorflow_probability.distributions.MultivariateNormalFullCovariance",
  "tensorflow_probability.distributions.Normal",
  "tensorflow_probability.distributions.SeedStream",
  "tensorflow_probability.distributions.TransformedDistribution",
  "tensorflow_probability.distributions.TruncatedNormal",
  "tensorflow_probability.distributions.VariationalGaussianProcess",
  "tensorflow_probability.distributions.VariationalGaussianProcess.optimal_variational_posterior",
  "tensorflow_probability.distributions.VonMisesFisher",
  "tensorflow_probability.distributions.Wishart",
  "tensorflow_probability.distributions.__dict__",
  "tensorflow_probability.edward2",
  "tensorflow_probability.edward2.Bernoulli",
  "tensorflow_probability.edward2.Bernoulli.__doc__",
  "tensorflow_probability.edward2.Bernoulli.__name__",
  "tensorflow_probability.edward2.Dirichlet",
  "tensorflow_probability.edward2.Normal",
  "tensorflow_probability.edward2.Poisson",
  "tensorflow_probability.edward2.RandomVariable",
  "tensorflow_probability.edward2.__dict__",
  "tensorflow_probability.edward2.as_random_variable",
  "tensorflow_probability.edward2.get_next_interceptor",
  "tensorflow_probability.edward2.interceptable",
  "tensorflow_probability.edward2.interception",
  "tensorflow_probability.edward2.make_log_joint_fn",
  "tensorflow_probability.edward2.make_value_setter",
  "tensorflow_probability.edward2.tape",
  "tensorflow_probability.glm.Bernoulli",
  "tensorflow_probability.glm.BernoulliNormalCDF",
  "tensorflow_probability.glm.CustomExponentialFamily",
  "tensorflow_probability.glm.GammaExp",
  "tensorflow_probability.glm.GammaSoftplus",
  "tensorflow_probability.glm.LogNormal",
  "tensorflow_probability.glm.LogNormalSoftplus",
  "tensorflow_probability.glm.Normal",
  "tensorflow_probability.glm.NormalReciprocal",
  "tensorflow_probability.glm.Poisson",
  "tensorflow_probability.glm.PoissonSoftplus",
  "tensorflow_probability.glm.fit",
  "tensorflow_probability.glm.fit_sparse",
  "tensorflow_probability.glm.fit_sparse_one_step",
  "tensorflow_probability.layers",
  "tensorflow_probability.layers.BlockwiseInitializer",
  "tensorflow_probability.layers.Convolution1DFlipout",
  "tensorflow_probability.layers.Convolution1DReparameterization",
  "tensorflow_probability.layers.Convolution2DFlipout",
  "tensorflow_probability.layers.Convolution2DReparameterization",
  "tensorflow_probability.layers.Convolution3DFlipout",
  "tensorflow_probability.layers.Convolution3DReparameterization",
  "tensorflow_probability.layers.DenseFlipout",
  "tensorflow_probability.layers.DenseLocalReparameterization",
  "tensorflow_probability.layers.DenseReparameterization",
  "tensorflow_probability.layers.DenseVariational",
  "tensorflow_probability.layers.DistributionLambda",
  "tensorflow_probability.layers.VariableLayer",
  "tensorflow_probability.layers.VariationalGaussianProcess",
  "tensorflow_probability.layers.default_mean_field_normal_fn",
  "tensorflow_probability.layers.default_multivariate_normal_fn",
  "tensorflow_probability.math.batch_interp_regular_1d_grid",
  "tensorflow_probability.math.batch_interp_regular_nd_grid",
  "tensorflow_probability.math.cholesky_concat",
  "tensorflow_probability.math.custom_gradient",
  "tensorflow_probability.math.dense_to_sparse",
  "tensorflow_probability.math.diag_jacobian",
  "tensorflow_probability.math.interp_regular_1d_grid",
  "tensorflow_probability.math.lu_matrix_inverse",
  "tensorflow_probability.math.lu_reconstruct",
  "tensorflow_probability.math.lu_solve",
  "tensorflow_probability.math.matrix_rank",
  "tensorflow_probability.math.ode.BDF",
  "tensorflow_probability.math.ode.ChosenBySolver",
  "tensorflow_probability.math.pinv",
  "tensorflow_probability.math.pivoted_cholesky",
  "tensorflow_probability.math.random_rademacher",
  "tensorflow_probability.math.random_rayleigh",
  "tensorflow_probability.math.secant_root",
  "tensorflow_probability.math.sparse_or_dense_matmul",
  "tensorflow_probability.math.sparse_or_dense_matvecmul",
  "tensorflow_probability.math.value_and_gradient",
  "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
  "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
  "tensorflow_probability.mcmc.MetropolisHastings",
  "tensorflow_probability.mcmc.RandomWalkMetropolis",
  "tensorflow_probability.mcmc.ReplicaExchangeMC",
  "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
  "tensorflow_probability.mcmc.SliceSampler",
  "tensorflow_probability.mcmc.TransformedTransitionKernel",
  "tensorflow_probability.mcmc.TransitionKernel",
  "tensorflow_probability.mcmc.UncalibratedHamiltonianMonteCarlo",
  "tensorflow_probability.mcmc.default_exchange_proposed_fn",
  "tensorflow_probability.mcmc.effective_sample_size",
  "tensorflow_probability.mcmc.make_simple_step_size_update_policy",
  "tensorflow_probability.mcmc.potential_scale_reduction",
  "tensorflow_probability.mcmc.random_walk_normal_fn",
  "tensorflow_probability.mcmc.random_walk_uniform_fn",
  "tensorflow_probability.mcmc.sample_annealed_importance_chain",
  "tensorflow_probability.mcmc.sample_chain",
  "tensorflow_probability.mcmc.sample_halton_sequence",
  "tensorflow_probability.monte_carlo.expectation",
  "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
  "tensorflow_probability.optimizer.VariationalSGD",
  "tensorflow_probability.optimizer.bfgs_minimize",
  "tensorflow_probability.optimizer.converged_all",
  "tensorflow_probability.optimizer.converged_any",
  "tensorflow_probability.optimizer.differential_evolution_minimize",
  "tensorflow_probability.optimizer.lbfgs_minimize",
  "tensorflow_probability.optimizer.linesearch.hager_zhang",
  "tensorflow_probability.optimizer.nelder_mead_minimize",
  "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize",
  "tensorflow_probability.optimizer.proximal_hessian_sparse_one_step",
  "tensorflow_probability.positive_semidefinite_kernels",
  "tensorflow_probability.positive_semidefinite_kernels.ExpSinSquared",
  "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
  "tensorflow_probability.positive_semidefinite_kernels.Linear",
  "tensorflow_probability.positive_semidefinite_kernels.MaternFiveHalves",
  "tensorflow_probability.positive_semidefinite_kernels.MaternOneHalf",
  "tensorflow_probability.positive_semidefinite_kernels.MaternThreeHalves",
  "tensorflow_probability.positive_semidefinite_kernels.Polynomial",
  "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic",
  "tensorflow_probability.positive_semidefinite_kernels.SchurComplement",
  "tensorflow_probability.python._allowed_symbols",
  "tensorflow_probability.python.bijectors.AbsoluteValue",
  "tensorflow_probability.python.bijectors.Affine",
  "tensorflow_probability.python.bijectors.AffineLinearOperator",
  "tensorflow_probability.python.bijectors.AffineScalar",
  "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
  "tensorflow_probability.python.bijectors.BatchNormalization",
  "tensorflow_probability.python.bijectors.Bijector",
  "tensorflow_probability.python.bijectors.Blockwise",
  "tensorflow_probability.python.bijectors.Chain",
  "tensorflow_probability.python.bijectors.CholeskyOuterProduct",
  "tensorflow_probability.python.bijectors.CholeskyToInvCholesky",
  "tensorflow_probability.python.bijectors.ConditionalBijector",
  "tensorflow_probability.python.bijectors.CorrelationCholesky",
  "tensorflow_probability.python.bijectors.Cumsum",
  "tensorflow_probability.python.bijectors.DiscreteCosineTransform",
  "tensorflow_probability.python.bijectors.Exp",
  "tensorflow_probability.python.bijectors.Expm1",
  "tensorflow_probability.python.bijectors.FillTriangular",
  "tensorflow_probability.python.bijectors.Gumbel",
  "tensorflow_probability.python.bijectors.Identity",
  "tensorflow_probability.python.bijectors.Inline",
  "tensorflow_probability.python.bijectors.Invert",
  "tensorflow_probability.python.bijectors.IteratedSigmoidCentered",
  "tensorflow_probability.python.bijectors.Kumaraswamy",
  "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
  "tensorflow_probability.python.bijectors.MatrixInverseTriL",
  "tensorflow_probability.python.bijectors.MatvecLU",
  "tensorflow_probability.python.bijectors.NormalCDF",
  "tensorflow_probability.python.bijectors.Permute",
  "tensorflow_probability.python.bijectors.PowerTransform",
  "tensorflow_probability.python.bijectors.RealNVP",
  "tensorflow_probability.python.bijectors.Reciprocal",
  "tensorflow_probability.python.bijectors.Reshape",
  "tensorflow_probability.python.bijectors.ScaleTriL",
  "tensorflow_probability.python.bijectors.Sigmoid",
  "tensorflow_probability.python.bijectors.SinhArcsinh",
  "tensorflow_probability.python.bijectors.SoftmaxCentered",
  "tensorflow_probability.python.bijectors.Softplus",
  "tensorflow_probability.python.bijectors.Softsign",
  "tensorflow_probability.python.bijectors.Square",
  "tensorflow_probability.python.bijectors.Tanh",
  "tensorflow_probability.python.bijectors.TransformDiagonal",
  "tensorflow_probability.python.bijectors.Transpose",
  "tensorflow_probability.python.bijectors.Weibull",
  "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue",
  "tensorflow_probability.python.bijectors.affine",
  "tensorflow_probability.python.bijectors.affine.Affine",
  "tensorflow_probability.python.bijectors.affine._as_tensor",
  "tensorflow_probability.python.bijectors.affine.dtype",
  "tensorflow_probability.python.bijectors.affine.scale",
  "tensorflow_probability.python.bijectors.affine.shift",
  "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
  "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar",
  "tensorflow_probability.python.bijectors.affine_scalar_test.tfb",
  "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization",
  "tensorflow_probability.python.bijectors.batch_normalization._undo_batch_normalization",
  "tensorflow_probability.python.bijectors.bijector",
  "tensorflow_probability.python.bijectors.bijector.Bijector",
  "tensorflow_probability.python.bijectors.bijector.ConditionalBijector",
  "tensorflow_probability.python.bijectors.bijector.HashableWeakRef",
  "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict",
  "tensorflow_probability.python.bijectors.bijector._Mapping",
  "tensorflow_probability.python.bijectors.bijector._get_current_graph",
  "tensorflow_probability.python.bijectors.bijector._is_injective",
  "tensorflow_probability.python.bijectors.bijector.dtype",
  "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
  "tensorflow_probability.python.bijectors.bijector.graph_parents",
  "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims",
  "tensorflow_probability.python.bijectors.bijector.is_constant_jacobian",
  "tensorflow_probability.python.bijectors.bijector.name",
  "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian",
  "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian",
  "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector",
  "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector",
  "tensorflow_probability.python.bijectors.bijector_test.mock",
  "tensorflow_probability.python.bijectors.bijector_test.tfb",
  "tensorflow_probability.python.bijectors.bijector_test.tfd",
  "tensorflow_probability.python.bijectors.bijector_test.try_import",
  "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
  "tensorflow_probability.python.bijectors.bijector_test_util.assert_finite",
  "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency",
  "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_decreasing",
  "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_increasing",
  "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_monotonic",
  "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
  "tensorflow_probability.python.bijectors.blockwise.Blockwise",
  "tensorflow_probability.python.bijectors.blockwise._validate_block_sizes",
  "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete",
  "tensorflow_probability.python.bijectors.categorical_to_discrete._maybe_check_valid_map_values",
  "tensorflow_probability.python.bijectors.chain.Chain",
  "tensorflow_probability.python.bijectors.chain._compute_min_event_ndims",
  "tensorflow_probability.python.bijectors.chain._use_static_shape",
  "tensorflow_probability.python.bijectors.chain_test.ShapeChanging",
  "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct",
  "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky",
  "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector",
  "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky",
  "tensorflow_probability.python.bijectors.cumsum.Cumsum",
  "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest",
  "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform",
  "tensorflow_probability.python.bijectors.exp.Exp",
  "tensorflow_probability.python.bijectors.expm1.Expm1",
  "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
  "tensorflow_probability.python.bijectors.fill_triangular.vector_size_to_square_matrix_size",
  "tensorflow_probability.python.bijectors.gumbel.Gumbel",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.BIJECTOR_SUPPORTS",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.BijectorSupport",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.INSTANTIABLE_BIJECTORS",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.SPECIAL_BIJECTORS",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.Support",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.bijector_supports",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.instantiable_bijectors",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.tfb",
  "tensorflow_probability.python.bijectors.hypothesis_testlib.unconstrained_bijectors",
  "tensorflow_probability.python.bijectors.identity.Identity",
  "tensorflow_probability.python.bijectors.inline.Inline",
  "tensorflow_probability.python.bijectors.invert.Invert",
  "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered",
  "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest",
  "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy",
  "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveLayer",
  "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork",
  "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_EXCLUSIVE",
  "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_INCLUSIVE",
  "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow",
  "tensorflow_probability.python.bijectors.masked_autoregressive._create_degrees",
  "tensorflow_probability.python.bijectors.masked_autoregressive._create_input_order",
  "tensorflow_probability.python.bijectors.masked_autoregressive._create_masks",
  "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask",
  "tensorflow_probability.python.bijectors.masked_autoregressive._gen_slices",
  "tensorflow_probability.python.bijectors.masked_autoregressive._list",
  "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_constraint",
  "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_initializer",
  "tensorflow_probability.python.bijectors.masked_autoregressive.masked_dense",
  "tensorflow_probability.python.bijectors.masked_autoregressive_default_template",
  "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest",
  "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_shift_and_log_scale_fn",
  "tensorflow_probability.python.bijectors.masked_autoregressive_test.masked_autoregressive_2d_template",
  "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfk",
  "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfkl",
  "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL",
  "tensorflow_probability.python.bijectors.matveclu.MatvecLU",
  "tensorflow_probability.python.bijectors.matveclu_test.trainable_lu_factorization",
  "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF",
  "tensorflow_probability.python.bijectors.ordered.Ordered",
  "tensorflow_probability.python.bijectors.ordered_test.tfb",
  "tensorflow_probability.python.bijectors.permute.Permute",
  "tensorflow_probability.python.bijectors.power_transform.PowerTransform",
  "tensorflow_probability.python.bijectors.real_nvp.RealNVP",
  "tensorflow_probability.python.bijectors.real_nvp_default_template",
  "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest",
  "tensorflow_probability.python.bijectors.reciprocal.Reciprocal",
  "tensorflow_probability.python.bijectors.reshape.Reshape",
  "tensorflow_probability.python.bijectors.reshape._maybe_check_valid_shape",
  "tensorflow_probability.python.bijectors.reshape._replace_event_shape_in_shape_tensor",
  "tensorflow_probability.python.bijectors.reshape._replace_event_shape_in_tensorshape",
  "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest",
  "tensorflow_probability.python.bijectors.scale_tril.ScaleTriL",
  "tensorflow_probability.python.bijectors.sigmoid.Sigmoid",
  "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh",
  "tensorflow_probability.python.bijectors.sinh_arcsinh._sqrtx2p1",
  "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered",
  "tensorflow_probability.python.bijectors.softmax_centered_test.rng",
  "tensorflow_probability.python.bijectors.softplus.Softplus",
  "tensorflow_probability.python.bijectors.softplus_test.rng",
  "tensorflow_probability.python.bijectors.softsign.Softsign",
  "tensorflow_probability.python.bijectors.square.Square",
  "tensorflow_probability.python.bijectors.tanh.Tanh",
  "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal",
  "tensorflow_probability.python.bijectors.transpose.Transpose",
  "tensorflow_probability.python.bijectors.transpose._maybe_validate_perm",
  "tensorflow_probability.python.bijectors.transpose._maybe_validate_rightmost_transposed_ndims",
  "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest",
  "tensorflow_probability.python.bijectors.weibull.Weibull",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.BenchmarkTfFunctionConfig",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_CPU",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_GPU",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_EAGER",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_FUNCTION",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_XLA",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._merge_dicts",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies",
  "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.default_benchmark_config",
  "tensorflow_probability.python.distributions",
  "tensorflow_probability.python.distributions.Autoregressive",
  "tensorflow_probability.python.distributions.Bernoulli",
  "tensorflow_probability.python.distributions.Bernoulli.logits",
  "tensorflow_probability.python.distributions.Bernoulli.probs",
  "tensorflow_probability.python.distributions.Categorical",
  "tensorflow_probability.python.distributions.Deterministic",
  "tensorflow_probability.python.distributions.Distribution",
  "tensorflow_probability.python.distributions.Distribution.log_prob",
  "tensorflow_probability.python.distributions.Distribution.mean",
  "tensorflow_probability.python.distributions.Distribution.mode",
  "tensorflow_probability.python.distributions.Distribution.prob",
  "tensorflow_probability.python.distributions.Distribution.sample",
  "tensorflow_probability.python.distributions.Distribution.stddev",
  "tensorflow_probability.python.distributions.Distribution.variance",
  "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED",
  "tensorflow_probability.python.distributions.Gamma",
  "tensorflow_probability.python.distributions.GaussianProcess",
  "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
  "tensorflow_probability.python.distributions.HalfNormal",
  "tensorflow_probability.python.distributions.Independent",
  "tensorflow_probability.python.distributions.InverseGamma",
  "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
  "tensorflow_probability.python.distributions.LogNormal",
  "tensorflow_probability.python.distributions.Logistic",
  "tensorflow_probability.python.distributions.Mixture",
  "tensorflow_probability.python.distributions.MixtureSameFamily",
  "tensorflow_probability.python.distributions.MultivariateNormalDiag",
  "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
  "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator",
  "tensorflow_probability.python.distributions.MultivariateNormalTriL",
  "tensorflow_probability.python.distributions.Normal",
  "tensorflow_probability.python.distributions.OneHotCategorical",
  "tensorflow_probability.python.distributions.Poisson",
  "tensorflow_probability.python.distributions.SeedStream",
  "tensorflow_probability.python.distributions.StudentT",
  "tensorflow_probability.python.distributions.StudentTProcess",
  "tensorflow_probability.python.distributions.TransformedDistribution",
  "tensorflow_probability.python.distributions.VariationalGaussianProcess",
  "tensorflow_probability.python.distributions.__dict__",
  "tensorflow_probability.python.distributions.autoregressive.Autoregressive",
  "tensorflow_probability.python.distributions.autoregressive_test.tfb",
  "tensorflow_probability.python.distributions.autoregressive_test.tfd",
  "tensorflow_probability.python.distributions.batch_reshape.BatchReshape",
  "tensorflow_probability.python.distributions.batch_reshape.calculate_reshape",
  "tensorflow_probability.python.distributions.batch_reshape.validate_init_args_statically",
  "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest",
  "tensorflow_probability.python.distributions.batch_reshape_test.tfd",
  "tensorflow_probability.python.distributions.batch_shape",
  "tensorflow_probability.python.distributions.batch_shape_tensor",
  "tensorflow_probability.python.distributions.bernoulli.Bernoulli",
  "tensorflow_probability.python.distributions.bernoulli_test._MakeSlicer",
  "tensorflow_probability.python.distributions.bernoulli_test.entropy",
  "tensorflow_probability.python.distributions.bernoulli_test.make_bernoulli",
  "tensorflow_probability.python.distributions.bernoulli_test.make_slicer",
  "tensorflow_probability.python.distributions.bernoulli_test.special",
  "tensorflow_probability.python.distributions.bernoulli_test.tfd",
  "tensorflow_probability.python.distributions.bernoulli_test.try_import",
  "tensorflow_probability.python.distributions.beta",
  "tensorflow_probability.python.distributions.beta.Beta",
  "tensorflow_probability.python.distributions.beta._beta_sample_note",
  "tensorflow_probability.python.distributions.beta.sample",
  "tensorflow_probability.python.distributions.beta_test.special",
  "tensorflow_probability.python.distributions.beta_test.stats",
  "tensorflow_probability.python.distributions.beta_test.tfd",
  "tensorflow_probability.python.distributions.beta_test.try_import",
  "tensorflow_probability.python.distributions.binomial.Binomial",
  "tensorflow_probability.python.distributions.binomial._bdtr",
  "tensorflow_probability.python.distributions.binomial._binomial_sample_note",
  "tensorflow_probability.python.distributions.binomial_test.tfd",
  "tensorflow_probability.python.distributions.blockwise.Blockwise",
  "tensorflow_probability.python.distributions.blockwise._event_size",
  "tensorflow_probability.python.distributions.blockwise._flatten",
  "tensorflow_probability.python.distributions.blockwise._is_iterable",
  "tensorflow_probability.python.distributions.blockwise._maybe_validate_distributions",
  "tensorflow_probability.python.distributions.blockwise_test.tfd",
  "tensorflow_probability.python.distributions.categorical.Categorical",
  "tensorflow_probability.python.distributions.categorical._broadcast_cat_event_and_params",
  "tensorflow_probability.python.distributions.categorical_test.make_categorical",
  "tensorflow_probability.python.distributions.categorical_test.tfd",
  "tensorflow_probability.python.distributions.cauchy.Cauchy",
  "tensorflow_probability.python.distributions.cauchy_test.stats",
  "tensorflow_probability.python.distributions.cauchy_test.tfd",
  "tensorflow_probability.python.distributions.cauchy_test.try_import",
  "tensorflow_probability.python.distributions.chi.Chi",
  "tensorflow_probability.python.distributions.chi2",
  "tensorflow_probability.python.distributions.chi2.Chi2",
  "tensorflow_probability.python.distributions.chi2.Chi2WithAbsDf",
  "tensorflow_probability.python.distributions.chi2.sample",
  "tensorflow_probability.python.distributions.chi2_test.tfd",
  "tensorflow_probability.python.distributions.chi_test.tfd",
  "tensorflow_probability.python.distributions.conditional_distribution_test.tfd",
  "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation",
  "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.tfd",
  "tensorflow_probability.python.distributions.deterministic.Deterministic",
  "tensorflow_probability.python.distributions.deterministic.VectorDeterministic",
  "tensorflow_probability.python.distributions.deterministic._BaseDeterministic",
  "tensorflow_probability.python.distributions.deterministic._get_tol",
  "tensorflow_probability.python.distributions.deterministic_test.rng",
  "tensorflow_probability.python.distributions.deterministic_test.tfd",
  "tensorflow_probability.python.distributions.dirichlet.Dirichlet",
  "tensorflow_probability.python.distributions.dirichlet._dirichlet_sample_note",
  "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial",
  "tensorflow_probability.python.distributions.dirichlet_multinomial._dirichlet_multinomial_sample_note",
  "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd",
  "tensorflow_probability.python.distributions.dirichlet_test.special",
  "tensorflow_probability.python.distributions.dirichlet_test.stats",
  "tensorflow_probability.python.distributions.dirichlet_test.tfd",
  "tensorflow_probability.python.distributions.dirichlet_test.try_import",
  "tensorflow_probability.python.distributions.distribution",
  "tensorflow_probability.python.distributions.distribution.ConditionalDistribution",
  "tensorflow_probability.python.distributions.distribution.Distribution",
  "tensorflow_probability.python.distributions.distribution.Distribution.sample",
  "tensorflow_probability.python.distributions.distribution._ALWAYS_COPY_PUBLIC_METHOD_WRAPPERS",
  "tensorflow_probability.python.distributions.distribution._BaseDistribution",
  "tensorflow_probability.python.distributions.distribution._DISTRIBUTION_PUBLIC_METHOD_WRAPPERS",
  "tensorflow_probability.python.distributions.distribution._DistributionMeta",
  "tensorflow_probability.python.distributions.distribution._PrettyDict",
  "tensorflow_probability.python.distributions.distribution.__class__",
  "tensorflow_probability.python.distributions.distribution._convert_to_tensor",
  "tensorflow_probability.python.distributions.distribution._copy_fn",
  "tensorflow_probability.python.distributions.distribution._graph_parents",
  "tensorflow_probability.python.distributions.distribution._recursively_replace_dict_for_pretty_dict",
  "tensorflow_probability.python.distributions.distribution._remove_dict_keys_with_value",
  "tensorflow_probability.python.distributions.distribution._str_dtype",
  "tensorflow_probability.python.distributions.distribution._str_tensorshape",
  "tensorflow_probability.python.distributions.distribution._update_docstring",
  "tensorflow_probability.python.distributions.distribution.batch_shape",
  "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
  "tensorflow_probability.python.distributions.distribution.dtype",
  "tensorflow_probability.python.distributions.distribution.is_scalar_batch",
  "tensorflow_probability.python.distributions.distribution.is_scalar_event",
  "tensorflow_probability.python.distributions.distribution.name",
  "tensorflow_probability.python.distributions.distribution.reparameterization_type",
  "tensorflow_probability.python.distributions.distribution_properties_test.CONSTRAINTS",
  "tensorflow_probability.python.distributions.distribution_properties_test.FLAGS",
  "tensorflow_probability.python.distributions.distribution_properties_test.INSTANTIABLE_DISTS",
  "tensorflow_probability.python.distributions.distribution_properties_test.MUTEX_PARAMS",
  "tensorflow_probability.python.distributions.distribution_properties_test.SPECIAL_DISTS",
  "tensorflow_probability.python.distributions.distribution_properties_test.assert_shapes_unchanged",
  "tensorflow_probability.python.distributions.distribution_properties_test.batch_shapes",
  "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_params",
  "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_shapes",
  "tensorflow_probability.python.distributions.distribution_properties_test.constraint_for",
  "tensorflow_probability.python.distributions.distribution_properties_test.distributions",
  "tensorflow_probability.python.distributions.distribution_properties_test.ensure_high_gt_low",
  "tensorflow_probability.python.distributions.distribution_properties_test.fix_triangular",
  "tensorflow_probability.python.distributions.distribution_properties_test.fix_wishart",
  "tensorflow_probability.python.distributions.distribution_properties_test.generate_outcomes",
  "tensorflow_probability.python.distributions.distribution_properties_test.hypothesis_max_examples",
  "tensorflow_probability.python.distributions.distribution_properties_test.identity_fn",
  "tensorflow_probability.python.distributions.distribution_properties_test.independents",
  "tensorflow_probability.python.distributions.distribution_properties_test.instantiable_dists",
  "tensorflow_probability.python.distributions.distribution_properties_test.maybe_seed",
  "tensorflow_probability.python.distributions.distribution_properties_test.mixtures_same_family",
  "tensorflow_probability.python.distributions.distribution_properties_test.positive_definite",
  "tensorflow_probability.python.distributions.distribution_properties_test.sigmoid_plus_eps",
  "tensorflow_probability.python.distributions.distribution_properties_test.single_param",
  "tensorflow_probability.python.distributions.distribution_properties_test.softplus_plus_eps",
  "tensorflow_probability.python.distributions.distribution_properties_test.stringify_slices",
  "tensorflow_probability.python.distributions.distribution_properties_test.symmetric",
  "tensorflow_probability.python.distributions.distribution_properties_test.tfd",
  "tensorflow_probability.python.distributions.distribution_properties_test.transformed_distributions",
  "tensorflow_probability.python.distributions.distribution_properties_test.valid_slices",
  "tensorflow_probability.python.distributions.distribution_test.DictDistribution",
  "tensorflow_probability.python.distributions.distribution_test.DistributionTest",
  "tensorflow_probability.python.distributions.distribution_test.Dummy",
  "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution",
  "tensorflow_probability.python.distributions.distribution_test.TupleDistribution",
  "tensorflow_probability.python.distributions.distribution_test.tfd",
  "tensorflow_probability.python.distributions.empirical.Empirical",
  "tensorflow_probability.python.distributions.empirical._broadcast_event_and_samples",
  "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest",
  "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest",
  "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest",
  "tensorflow_probability.python.distributions.empirical_test.entropy",
  "tensorflow_probability.python.distributions.empirical_test.random_samples",
  "tensorflow_probability.python.distributions.empirical_test.tfd",
  "tensorflow_probability.python.distributions.exponential",
  "tensorflow_probability.python.distributions.exponential.Exponential",
  "tensorflow_probability.python.distributions.exponential.cdf",
  "tensorflow_probability.python.distributions.exponential.entropy",
  "tensorflow_probability.python.distributions.exponential.log_prob",
  "tensorflow_probability.python.distributions.exponential.log_survival_function",
  "tensorflow_probability.python.distributions.exponential.mean",
  "tensorflow_probability.python.distributions.exponential.prob",
  "tensorflow_probability.python.distributions.exponential.sample",
  "tensorflow_probability.python.distributions.exponential.variance",
  "tensorflow_probability.python.distributions.exponential_test.stats",
  "tensorflow_probability.python.distributions.exponential_test.tfd",
  "tensorflow_probability.python.distributions.exponential_test.try_import",
  "tensorflow_probability.python.distributions.fill_triangular",
  "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete",
  "tensorflow_probability.python.distributions.finite_discrete._maybe_validate_args",
  "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest",
  "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest",
  "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest",
  "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest",
  "tensorflow_probability.python.distributions.gamma.Gamma",
  "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma",
  "tensorflow_probability.python.distributions.gamma_gamma_test.tfd",
  "tensorflow_probability.python.distributions.gamma_test.special",
  "tensorflow_probability.python.distributions.gamma_test.stats",
  "tensorflow_probability.python.distributions.gamma_test.tfd",
  "tensorflow_probability.python.distributions.gamma_test.try_import",
  "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
  "tensorflow_probability.python.distributions.gaussian_process._add_diagonal_shift",
  "tensorflow_probability.python.distributions.gaussian_process._assert_kl_compatible",
  "tensorflow_probability.python.distributions.gaussian_process._kl_compatible_gp",
  "tensorflow_probability.python.distributions.gaussian_process._kl_gp_compatible",
  "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel",
  "tensorflow_probability.python.distributions.gaussian_process_regression_model._is_empty_observation_data",
  "tensorflow_probability.python.distributions.gaussian_process_regression_model._validate_observation_data",
  "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest",
  "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._np_kernel_matrix_fn",
  "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest",
  "tensorflow_probability.python.distributions.geometric.Geometric",
  "tensorflow_probability.python.distributions.geometric_test.tfd",
  "tensorflow_probability.python.distributions.gumbel.Gumbel",
  "tensorflow_probability.python.distributions.gumbel_test._GumbelTest",
  "tensorflow_probability.python.distributions.gumbel_test.tfd",
  "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy",
  "tensorflow_probability.python.distributions.half_cauchy.check_arg_in_support",
  "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest",
  "tensorflow_probability.python.distributions.half_cauchy_test.tfd",
  "tensorflow_probability.python.distributions.half_normal.HalfNormal",
  "tensorflow_probability.python.distributions.half_normal_test.stats",
  "tensorflow_probability.python.distributions.half_normal_test.tfd",
  "tensorflow_probability.python.distributions.half_normal_test.try_import",
  "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel",
  "tensorflow_probability.python.distributions.hidden_markov_model._extract_log_probs",
  "tensorflow_probability.python.distributions.hidden_markov_model._log_matrix_vector",
  "tensorflow_probability.python.distributions.hidden_markov_model._log_vector_matrix",
  "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest",
  "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd",
  "tensorflow_probability.python.distributions.horseshoe.Horseshoe",
  "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest",
  "tensorflow_probability.python.distributions.horseshoe_test.tfd",
  "tensorflow_probability.python.distributions.independent.Independent",
  "tensorflow_probability.python.distributions.independent_test.stats",
  "tensorflow_probability.python.distributions.independent_test.tfd",
  "tensorflow_probability.python.distributions.independent_test.try_import",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.FLAGS",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_3x3_volumes",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_4x4_volumes",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_5x5_volumes",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.ctv_debatched",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.main",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._det_large_enough_mask",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._psd_mask",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._uniform_correlation_like_matrix",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.compute_true_volumes",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.optimize",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.stats",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.try_import",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.four_by_four_volume",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.three_by_three_volume",
  "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.two_by_two_volume",
  "tensorflow_probability.python.distributions.internal.moving_stats.assign_log_moving_mean_exp",
  "tensorflow_probability.python.distributions.internal.moving_stats.assign_moving_mean_variance",
  "tensorflow_probability.python.distributions.internal.slicing.ALL_SLICE",
  "tensorflow_probability.python.distributions.internal.slicing.PROVENANCE_ATTR",
  "tensorflow_probability.python.distributions.internal.slicing._apply_single_step",
  "tensorflow_probability.python.distributions.internal.slicing._apply_slice_sequence",
  "tensorflow_probability.python.distributions.internal.slicing._slice_params_to_dict",
  "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
  "tensorflow_probability.python.distributions.internal.slicing.batch_slice",
  "tensorflow_probability.python.distributions.internal.slicing_test._MakeSlices",
  "tensorflow_probability.python.distributions.internal.slicing_test.make_slices",
  "tensorflow_probability.python.distributions.internal.statistical_testing._batch_sort_vector",
  "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates",
  "tensorflow_probability.python.distributions.internal.statistical_testing._dkwm_cdf_envelope",
  "tensorflow_probability.python.distributions.internal.statistical_testing._do_maximum_mean",
  "tensorflow_probability.python.distributions.internal.statistical_testing._itemwise_error_rate",
  "tensorflow_probability.python.distributions.internal.statistical_testing._maximum_mean",
  "tensorflow_probability.python.distributions.internal.statistical_testing._minimum_mean",
  "tensorflow_probability.python.distributions.internal.statistical_testing._move_dim_and_sort",
  "tensorflow_probability.python.distributions.internal.statistical_testing._random_unit_hypersphere",
  "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample",
  "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm",
  "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample",
  "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
  "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample",
  "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm",
  "tensorflow_probability.python.distributions.internal.statistical_testing.empirical_cdfs",
  "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance",
  "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance_two_sample",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm_two_sample",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_test",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_two_sample_test",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_test",
  "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_two_sample_test",
  "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm",
  "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma",
  "tensorflow_probability.python.distributions.inverse_gamma._InverseGammaWithSoftplusConcentrationScale",
  "tensorflow_probability.python.distributions.inverse_gamma._rate_deprecator",
  "tensorflow_probability.python.distributions.inverse_gamma._scale_deprecator",
  "tensorflow_probability.python.distributions.inverse_gamma_test.tfd",
  "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian",
  "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest",
  "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
  "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd",
  "tensorflow_probability.python.distributions.joint_distribution.JointDistribution",
  "tensorflow_probability.python.distributions.joint_distribution.maybe_check_wont_broadcast",
  "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine",
  "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
  "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd",
  "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed",
  "tensorflow_probability.python.distributions.joint_distribution_named._Node",
  "tensorflow_probability.python.distributions.joint_distribution_named._best_order",
  "tensorflow_probability.python.distributions.joint_distribution_named._convert_to_dict",
  "tensorflow_probability.python.distributions.joint_distribution_named._depth",
  "tensorflow_probability.python.distributions.joint_distribution_named._is_dict_like",
  "tensorflow_probability.python.distributions.joint_distribution_named._prob_chain_rule_flatten",
  "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd",
  "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential",
  "tensorflow_probability.python.distributions.joint_distribution_sequential._get_required_args",
  "tensorflow_probability.python.distributions.joint_distribution_sequential._make_summary_statistic",
  "tensorflow_probability.python.distributions.joint_distribution_sequential._resolve_distribution_names",
  "tensorflow_probability.python.distributions.joint_distribution_sequential._unify_call_signature",
  "tensorflow_probability.python.distributions.joint_distribution_sequential_test.Dummy",
  "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
  "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
  "tensorflow_probability.python.distributions.kl_divergence",
  "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
  "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES",
  "tensorflow_probability.python.distributions.kullback_leibler._dist_classes",
  "tensorflow_probability.python.distributions.kullback_leibler._registered_kl",
  "tensorflow_probability.python.distributions.kullback_leibler._summarize_registered_kls",
  "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs",
  "tensorflow_probability.python.distributions.kullback_leibler.cross_entropy",
  "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
  "tensorflow_probability.python.distributions.kullback_leibler_test._DIVERGENCES",
  "tensorflow_probability.python.distributions.kullback_leibler_test._registered_kl",
  "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy",
  "tensorflow_probability.python.distributions.kumaraswamy._harmonic_number",
  "tensorflow_probability.python.distributions.kumaraswamy_test._harmonic_number",
  "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_cdf",
  "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_mode",
  "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_moment",
  "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
  "tensorflow_probability.python.distributions.kumaraswamy_test.special",
  "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
  "tensorflow_probability.python.distributions.kumaraswamy_test.tfd",
  "tensorflow_probability.python.distributions.kumaraswamy_test.try_import",
  "tensorflow_probability.python.distributions.laplace.Laplace",
  "tensorflow_probability.python.distributions.laplace_test.stats",
  "tensorflow_probability.python.distributions.laplace_test.tfd",
  "tensorflow_probability.python.distributions.laplace_test.try_import",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.BackwardPassState",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.KalmanFilterState",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm._broadcast_to_shape",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm._check_equal_shape",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm._propagate_cov",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm._propagate_mean",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.backward_smoothing_update",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_sample_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.kalman_transition",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.tfl",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfl",
  "tensorflow_probability.python.distributions.lkj.LKJ",
  "tensorflow_probability.python.distributions.lkj._replicate",
  "tensorflow_probability.python.distributions.lkj._uniform_unit_norm",
  "tensorflow_probability.python.distributions.lkj_test._det_ok_mask",
  "tensorflow_probability.python.distributions.lkj_test.tfd",
  "tensorflow_probability.python.distributions.lkj_test.volume_bounds",
  "tensorflow_probability.python.distributions.logistic.Logistic",
  "tensorflow_probability.python.distributions.logistic_test.tfd",
  "tensorflow_probability.python.distributions.lognormal.LogNormal",
  "tensorflow_probability.python.distributions.lognormal_test.tfd",
  "tensorflow_probability.python.distributions.mixture.Mixture",
  "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily",
  "tensorflow_probability.python.distributions.mixture_same_family._outer_squared_difference",
  "tensorflow_probability.python.distributions.mixture_same_family._prevent_2nd_derivative",
  "tensorflow_probability.python.distributions.mixture_same_family._value_and_batch_jacobian",
  "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest",
  "tensorflow_probability.python.distributions.mixture_same_family_test.tfd",
  "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark",
  "tensorflow_probability.python.distributions.mixture_test.MixtureTest",
  "tensorflow_probability.python.distributions.mixture_test._mixture_stddev_np",
  "tensorflow_probability.python.distributions.mixture_test._set_seed",
  "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes",
  "tensorflow_probability.python.distributions.mixture_test._test_capture_mvndiag_sample_outputs",
  "tensorflow_probability.python.distributions.mixture_test._test_capture_normal_sample_outputs",
  "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
  "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture",
  "tensorflow_probability.python.distributions.mixture_test.tfd",
  "tensorflow_probability.python.distributions.multinomial.Multinomial",
  "tensorflow_probability.python.distributions.multinomial._multinomial_sample_note",
  "tensorflow_probability.python.distributions.multinomial.draw_sample",
  "tensorflow_probability.python.distributions.multinomial_test.tfd",
  "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator",
  "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape",
  "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape",
  "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd",
  "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag",
  "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiagWithSoftplusScale",
  "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank",
  "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd",
  "tensorflow_probability.python.distributions.mvn_diag_test.tfd",
  "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance",
  "tensorflow_probability.python.distributions.mvn_full_covariance_test._compute_non_batch_kl",
  "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng",
  "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd",
  "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
  "tensorflow_probability.python.distributions.mvn_linear_operator._mvn_sample_note",
  "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd",
  "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL",
  "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest",
  "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest",
  "tensorflow_probability.python.distributions.mvn_tril_test._MakeSlicer",
  "tensorflow_probability.python.distributions.mvn_tril_test._compute_non_batch_kl",
  "tensorflow_probability.python.distributions.mvn_tril_test.make_slicer",
  "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
  "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial",
  "tensorflow_probability.python.distributions.negative_binomial_test.tfd",
  "tensorflow_probability.python.distributions.normal.Normal",
  "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tfd",
  "tensorflow_probability.python.distributions.normal_test.stats",
  "tensorflow_probability.python.distributions.normal_test.tfd",
  "tensorflow_probability.python.distributions.normal_test.try_import",
  "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical",
  "tensorflow_probability.python.distributions.onehot_categorical_test.make_onehot_categorical",
  "tensorflow_probability.python.distributions.onehot_categorical_test.tfd",
  "tensorflow_probability.python.distributions.pareto.Pareto",
  "tensorflow_probability.python.distributions.pareto_test.tfd",
  "tensorflow_probability.python.distributions.poisson.Poisson",
  "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound",
  "tensorflow_probability.python.distributions.poisson_lognormal.concat_vectors",
  "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_quantiles",
  "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest",
  "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd",
  "tensorflow_probability.python.distributions.poisson_test.PoissonTest",
  "tensorflow_probability.python.distributions.poisson_test.tfd",
  "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution",
  "tensorflow_probability.python.distributions.quantized_distribution._cdf_base_note",
  "tensorflow_probability.python.distributions.quantized_distribution._cdf_note",
  "tensorflow_probability.python.distributions.quantized_distribution._log_cdf_note",
  "tensorflow_probability.python.distributions.quantized_distribution._log_prob_note",
  "tensorflow_probability.python.distributions.quantized_distribution._log_sf_note",
  "tensorflow_probability.python.distributions.quantized_distribution._logsum_expbig_minus_expsmall",
  "tensorflow_probability.python.distributions.quantized_distribution._prob_base_note",
  "tensorflow_probability.python.distributions.quantized_distribution._prob_note",
  "tensorflow_probability.python.distributions.quantized_distribution._sf_base_note",
  "tensorflow_probability.python.distributions.quantized_distribution._sf_note",
  "tensorflow_probability.python.distributions.quantized_distribution_test.rng",
  "tensorflow_probability.python.distributions.quantized_distribution_test.tfd",
  "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli",
  "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd",
  "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical",
  "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical",
  "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.analytical_pdf",
  "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.make_relaxed_categorical",
  "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd",
  "tensorflow_probability.python.distributions.sample.Sample",
  "tensorflow_probability.python.distributions.sample._make_summary_statistic",
  "tensorflow_probability.python.distributions.sample_test.tfb",
  "tensorflow_probability.python.distributions.sample_test.tfd",
  "tensorflow_probability.python.distributions.seed_stream.SeedStream",
  "tensorflow_probability.python.distributions.seed_stream_test.tfd",
  "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh",
  "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng",
  "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd",
  "tensorflow_probability.python.distributions.softplus_inverse",
  "tensorflow_probability.python.distributions.student_t.StudentT",
  "tensorflow_probability.python.distributions.student_t_process.StudentTProcess",
  "tensorflow_probability.python.distributions.student_t_process._add_diagonal_shift",
  "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest",
  "tensorflow_probability.python.distributions.student_t_test.stats",
  "tensorflow_probability.python.distributions.student_t_test.tfd",
  "tensorflow_probability.python.distributions.student_t_test.try_import",
  "tensorflow_probability.python.distributions.transformed_distribution.ConditionalTransformedDistribution",
  "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution",
  "tensorflow_probability.python.distributions.transformed_distribution._default_kwargs_split_fn",
  "tensorflow_probability.python.distributions.transformed_distribution._is_scalar_from_shape_tensor",
  "tensorflow_probability.python.distributions.transformed_distribution._pick_scalar_condition",
  "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform",
  "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest",
  "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest",
  "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
  "tensorflow_probability.python.distributions.transformed_distribution_test.tfd",
  "tensorflow_probability.python.distributions.triangular.Triangular",
  "tensorflow_probability.python.distributions.triangular._broadcast_to",
  "tensorflow_probability.python.distributions.triangular_test._TriangularTest",
  "tensorflow_probability.python.distributions.triangular_test.tfd",
  "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal",
  "tensorflow_probability.python.distributions.truncated_normal_test.EPSILON",
  "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase",
  "tensorflow_probability.python.distributions.truncated_normal_test.scipy_trunc_norm_dist",
  "tensorflow_probability.python.distributions.truncated_normal_test.stats",
  "tensorflow_probability.python.distributions.truncated_normal_test.tfd",
  "tensorflow_probability.python.distributions.truncated_normal_test.try_import",
  "tensorflow_probability.python.distributions.uniform.Uniform",
  "tensorflow_probability.python.distributions.uniform_test.stats",
  "tensorflow_probability.python.distributions.uniform_test.tfd",
  "tensorflow_probability.python.distributions.uniform_test.try_import",
  "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess",
  "tensorflow_probability.python.distributions.variational_gaussian_process._add_diagonal_shift",
  "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system",
  "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system_vec",
  "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest",
  "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture",
  "tensorflow_probability.python.distributions.vector_diffeomixture.add",
  "tensorflow_probability.python.distributions.vector_diffeomixture.concat_vectors",
  "tensorflow_probability.python.distributions.vector_diffeomixture.determine_batch_event_shapes",
  "tensorflow_probability.python.distributions.vector_diffeomixture.interpolate_loc",
  "tensorflow_probability.python.distributions.vector_diffeomixture.interpolate_scale",
  "tensorflow_probability.python.distributions.vector_diffeomixture.linop_scale",
  "tensorflow_probability.python.distributions.vector_diffeomixture.maybe_check_quadrature_param",
  "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles",
  "tensorflow_probability.python.distributions.vector_diffeomixture.softmax",
  "tensorflow_probability.python.distributions.vector_diffeomixture_test.rng",
  "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd",
  "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag",
  "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd",
  "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator",
  "tensorflow_probability.python.distributions.vector_exponential_linear_operator._mvn_sample_note",
  "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag",
  "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest",
  "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd",
  "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator",
  "tensorflow_probability.python.distributions.vector_laplace_linear_operator._mvn_sample_note",
  "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag",
  "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
  "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd",
  "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
  "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest",
  "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT",
  "tensorflow_probability.python.distributions.von_mises.VonMises",
  "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_normal",
  "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_series",
  "tensorflow_probability.python.distributions.von_mises.random_von_mises",
  "tensorflow_probability.python.distributions.von_mises.von_mises_cdf",
  "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher",
  "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive",
  "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest",
  "tensorflow_probability.python.distributions.von_mises_test.tfd",
  "tensorflow_probability.python.distributions.wishart.Wishart",
  "tensorflow_probability.python.distributions.wishart._WishartLinearOperator",
  "tensorflow_probability.python.distributions.wishart_test.chol",
  "tensorflow_probability.python.distributions.wishart_test.make_pd",
  "tensorflow_probability.python.distributions.wishart_test.tfd",
  "tensorflow_probability.python.distributions.wishart_test.wishart_var",
  "tensorflow_probability.python.distributions.zipf.Zipf",
  "tensorflow_probability.python.distributions.zipf_test.tfd",
  "tensorflow_probability.python.edward2._allowed_symbols",
  "tensorflow_probability.python.edward2.generated_random_variables._build_custom_rv",
  "tensorflow_probability.python.edward2.generated_random_variables._make_random_variable",
  "tensorflow_probability.python.edward2.generated_random_variables._simple_name",
  "tensorflow_probability.python.edward2.generated_random_variables.rv_dict",
  "tensorflow_probability.python.edward2.generated_random_variables.rv_dict.keys",
  "tensorflow_probability.python.edward2.interceptor._InterceptorStack",
  "tensorflow_probability.python.edward2.interceptor._interceptor_stack",
  "tensorflow_probability.python.edward2.interceptor.get_next_interceptor",
  "tensorflow_probability.python.edward2.interceptor.interceptable",
  "tensorflow_probability.python.edward2.interceptor.interception",
  "tensorflow_probability.python.edward2.program_transformations._get_function_inputs",
  "tensorflow_probability.python.edward2.program_transformations_test.tfd",
  "tensorflow_probability.python.edward2.random_variable.RandomVariable",
  "tensorflow_probability.python.edward2.random_variable._numpy_text",
  "tensorflow_probability.python.edward2.random_variable._operator",
  "tensorflow_probability.python.edward2.random_variable._session_run_conversion_feed_function",
  "tensorflow_probability.python.edward2.random_variable._session_run_conversion_feed_function_for_partial_run",
  "tensorflow_probability.python.edward2.random_variable._session_run_conversion_fetch_function",
  "tensorflow_probability.python.edward2.random_variable._tensor_conversion_function",
  "tensorflow_probability.python.edward2.random_variable_test.FakeDistribution",
  "tensorflow_probability.python.edward2.random_variable_test.tfd",
  "tensorflow_probability.python.glm._allowed_symbols",
  "tensorflow_probability.python.glm.family.CustomExponentialFamily",
  "tensorflow_probability.python.glm.family.ExponentialFamily",
  "tensorflow_probability.python.glm.family_test._GLMTestHarness",
  "tensorflow_probability.python.glm.family_test.make_lognormal",
  "tensorflow_probability.python.glm.family_test.tfd",
  "tensorflow_probability.python.glm.fisher_scoring.calculate_linear_predictor",
  "tensorflow_probability.python.glm.fisher_scoring.convergence_criteria_small_relative_norm_weights_change",
  "tensorflow_probability.python.glm.fisher_scoring.fit_one_step",
  "tensorflow_probability.python.glm.fisher_scoring.num_cols",
  "tensorflow_probability.python.glm.fisher_scoring.prepare_args",
  "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast",
  "tensorflow_probability.python.glm.fisher_scoring_test.tfd",
  "tensorflow_probability.python.glm.proximal_hessian._grad_neg_log_likelihood_and_fim",
  "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest",
  "tensorflow_probability.python.glm.proximal_hessian_test.tfd",
  "tensorflow_probability.python.internal.assert_util.assert_equal",
  "tensorflow_probability.python.internal.assert_util.assert_finite",
  "tensorflow_probability.python.internal.assert_util.assert_greater",
  "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
  "tensorflow_probability.python.internal.assert_util.assert_integer",
  "tensorflow_probability.python.internal.assert_util.assert_less",
  "tensorflow_probability.python.internal.assert_util.assert_less_equal",
  "tensorflow_probability.python.internal.assert_util.assert_near",
  "tensorflow_probability.python.internal.assert_util.assert_non_negative",
  "tensorflow_probability.python.internal.assert_util.assert_non_positive",
  "tensorflow_probability.python.internal.assert_util.assert_none_equal",
  "tensorflow_probability.python.internal.assert_util.assert_positive",
  "tensorflow_probability.python.internal.assert_util.assert_rank",
  "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
  "tensorflow_probability.python.internal.assert_util.assert_rank_at_most",
  "tensorflow_probability.python.internal.backend.numpy",
  "tensorflow_probability.python.internal.backend.numpy.array._ones_like",
  "tensorflow_probability.python.internal.backend.numpy.array._shape",
  "tensorflow_probability.python.internal.backend.numpy.array._size",
  "tensorflow_probability.python.internal.backend.numpy.array._transpose",
  "tensorflow_probability.python.internal.backend.numpy.array._zeros_like",
  "tensorflow_probability.python.internal.backend.numpy.array.shape",
  "tensorflow_probability.python.internal.backend.numpy.compat.v2.Variable",
  "tensorflow_probability.python.internal.backend.numpy.control_flow._while_loop",
  "tensorflow_probability.python.internal.backend.numpy.internal.utils._FakeModule",
  "tensorflow_probability.python.internal.backend.numpy.internal.utils.common_dtype",
  "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring",
  "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype",
  "tensorflow_probability.python.internal.backend.numpy.linalg._matrix_transpose",
  "tensorflow_probability.python.internal.backend.numpy.linalg.eye",
  "tensorflow_probability.python.internal.backend.numpy.linalg.matmul",
  "tensorflow_probability.python.internal.backend.numpy.math._astuple",
  "tensorflow_probability.python.internal.backend.numpy.math._max_mask_non_finite",
  "tensorflow_probability.python.internal.backend.numpy.math.scipy_special",
  "tensorflow_probability.python.internal.backend.numpy.math.softmax",
  "tensorflow_probability.python.internal.backend.numpy.misc._argsort",
  "tensorflow_probability.python.internal.backend.numpy.misc._sort",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_INFINITY",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_NAN",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.NUMPY_TEST_CASES",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test._getattr",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test._maybe_convert_to_tensors",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.array_and_axis",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.complex_numbers",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.matmul_compatible_pair",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.n_same_shape",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.non_zero_floats",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.positive_floats",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.psd_matrix",
  "tensorflow_probability.python.internal.backend.numpy.numpy_test.single_array",
  "tensorflow_probability.python.internal.backend.numpy.ops._NullContext",
  "tensorflow_probability.python.internal.backend.numpy.ops._broadcast_static_shape",
  "tensorflow_probability.python.internal.backend.numpy.ops._constant",
  "tensorflow_probability.python.internal.backend.numpy.ops._control_dependencies",
  "tensorflow_probability.python.internal.backend.numpy.ops._convert_to_tensor",
  "tensorflow_probability.python.internal.backend.numpy.random_generators._categorical",
  "tensorflow_probability.python.internal.backend.numpy.random_generators._gamma",
  "tensorflow_probability.python.internal.backend.numpy.random_generators._normal",
  "tensorflow_probability.python.internal.backend.numpy.random_generators._poisson",
  "tensorflow_probability.python.internal.backend.numpy.random_generators._shape",
  "tensorflow_probability.python.internal.backend.numpy.random_generators._uniform",
  "tensorflow_probability.python.internal.backend.numpy.test.TestCase",
  "tensorflow_probability.python.internal.backend.numpy.v1._placeholder_with_default",
  "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
  "tensorflow_probability.python.internal.distribution_util._convert_to_tensor",
  "tensorflow_probability.python.internal.distribution_util._is_integer_like_by_dtype",
  "tensorflow_probability.python.internal.distribution_util._is_known_dtype",
  "tensorflow_probability.python.internal.distribution_util._is_known_signed_by_dtype",
  "tensorflow_probability.python.internal.distribution_util._is_known_unsigned_by_dtype",
  "tensorflow_probability.python.internal.distribution_util._largest_integer_by_dtype",
  "tensorflow_probability.python.internal.distribution_util._smallest_integer_by_dtype",
  "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
  "tensorflow_probability.python.internal.distribution_util.assert_symmetric",
  "tensorflow_probability.python.internal.distribution_util.dimension_size",
  "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape",
  "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
  "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
  "tensorflow_probability.python.internal.distribution_util.expand_to_vector",
  "tensorflow_probability.python.internal.distribution_util.fill_triangular",
  "tensorflow_probability.python.internal.distribution_util.fill_triangular_inverse",
  "tensorflow_probability.python.internal.distribution_util.gen_new_seed",
  "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
  "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
  "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale",
  "tensorflow_probability.python.internal.distribution_util.is_distribution_instance",
  "tensorflow_probability.python.internal.distribution_util.log_combinations",
  "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
  "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis",
  "tensorflow_probability.python.internal.distribution_util.make_tril_scale",
  "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
  "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
  "tensorflow_probability.python.internal.distribution_util.mixture_stddev",
  "tensorflow_probability.python.internal.distribution_util.move_dimension",
  "tensorflow_probability.python.internal.distribution_util.pad",
  "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
  "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments",
  "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition",
  "tensorflow_probability.python.internal.distribution_util.pick_vector",
  "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape",
  "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
  "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
  "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
  "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp",
  "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
  "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape",
  "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
  "tensorflow_probability.python.internal.distribution_util.softplus_inverse",
  "tensorflow_probability.python.internal.distribution_util.tridiag",
  "tensorflow_probability.python.internal.distribution_util.with_dependencies",
  "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest",
  "tensorflow_probability.python.internal.distribution_util_test._PadTest",
  "tensorflow_probability.python.internal.distribution_util_test._logit",
  "tensorflow_probability.python.internal.distribution_util_test._make_diag_scale",
  "tensorflow_probability.python.internal.distribution_util_test._make_tril_scale",
  "tensorflow_probability.python.internal.distribution_util_test._matrix_diag",
  "tensorflow_probability.python.internal.distribution_util_test._powerset",
  "tensorflow_probability.python.internal.distribution_util_test.special",
  "tensorflow_probability.python.internal.distribution_util_test.try_import",
  "tensorflow_probability.python.internal.dtype_util._assert_same_base_type",
  "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
  "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
  "tensorflow_probability.python.internal.dtype_util.base_dtype",
  "tensorflow_probability.python.internal.dtype_util.base_equal",
  "tensorflow_probability.python.internal.dtype_util.common_dtype",
  "tensorflow_probability.python.internal.dtype_util.is_complex",
  "tensorflow_probability.python.internal.dtype_util.is_floating",
  "tensorflow_probability.python.internal.dtype_util.is_integer",
  "tensorflow_probability.python.internal.dtype_util.max",
  "tensorflow_probability.python.internal.dtype_util.min",
  "tensorflow_probability.python.internal.dtype_util.name",
  "tensorflow_probability.python.internal.dtype_util.size",
  "tensorflow_probability.python.internal.dtype_util_test.ed",
  "tensorflow_probability.python.internal.monte_carlo._get_samples",
  "tensorflow_probability.python.internal.monte_carlo._logspace_mean",
  "tensorflow_probability.python.internal.monte_carlo._sample_max",
  "tensorflow_probability.python.internal.monte_carlo._sample_mean",
  "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler",
  "tensorflow_probability.python.internal.nest_util._expand_as_kwargs",
  "tensorflow_probability.python.internal.nest_util._force_leaf",
  "tensorflow_probability.python.internal.nest_util._get_shallow_structure",
  "tensorflow_probability.python.internal.nest_util._is_namedtuple",
  "tensorflow_probability.python.internal.nest_util._maybe_convertible_to_tensor",
  "tensorflow_probability.python.internal.nest_util._nested_convert_to_tensor",
  "tensorflow_probability.python.internal.nest_util.broadcast_structure",
  "tensorflow_probability.python.internal.nest_util.call_fn",
  "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor",
  "tensorflow_probability.python.internal.nest_util.expand_as_args",
  "tensorflow_probability.python.internal.nest_util_test.LeafDict",
  "tensorflow_probability.python.internal.nest_util_test.LeafList",
  "tensorflow_probability.python.internal.nest_util_test.LeafNamedTuple",
  "tensorflow_probability.python.internal.nest_util_test.LeafTuple",
  "tensorflow_probability.python.internal.nest_util_test.NamedTuple",
  "tensorflow_probability.python.internal.nest_util_test.Tensor",
  "tensorflow_probability.python.internal.prefer_static._copy_docstring",
  "tensorflow_probability.python.internal.prefer_static._get_static_predicate",
  "tensorflow_probability.python.internal.prefer_static._maybe_get_static_args",
  "tensorflow_probability.python.internal.prefer_static._numpy_dtype",
  "tensorflow_probability.python.internal.prefer_static._ones_like",
  "tensorflow_probability.python.internal.prefer_static._prefer_static",
  "tensorflow_probability.python.internal.prefer_static._shape",
  "tensorflow_probability.python.internal.prefer_static._zeros_like",
  "tensorflow_probability.python.internal.prefer_static.case",
  "tensorflow_probability.python.internal.prefer_static.concat",
  "tensorflow_probability.python.internal.prefer_static.cond",
  "tensorflow_probability.python.internal.prefer_static.equal",
  "tensorflow_probability.python.internal.prefer_static.greater",
  "tensorflow_probability.python.internal.prefer_static.less",
  "tensorflow_probability.python.internal.prefer_static.logical_and",
  "tensorflow_probability.python.internal.prefer_static.logical_not",
  "tensorflow_probability.python.internal.prefer_static.logical_or",
  "tensorflow_probability.python.internal.prefer_static.maximum",
  "tensorflow_probability.python.internal.prefer_static.ones",
  "tensorflow_probability.python.internal.prefer_static.ones_like",
  "tensorflow_probability.python.internal.prefer_static.range",
  "tensorflow_probability.python.internal.prefer_static.rank",
  "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
  "tensorflow_probability.python.internal.prefer_static.reduce_all",
  "tensorflow_probability.python.internal.prefer_static.reduce_any",
  "tensorflow_probability.python.internal.prefer_static.reduce_prod",
  "tensorflow_probability.python.internal.prefer_static.shape",
  "tensorflow_probability.python.internal.prefer_static.zeros",
  "tensorflow_probability.python.internal.prefer_static_test.raise_exception",
  "tensorflow_probability.python.internal.prefer_static_test.raise_exception_in_eager_mode",
  "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
  "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
  "tensorflow_probability.python.internal.reparameterization.ReparameterizationType",
  "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_LOWER",
  "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_UPPER",
  "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_LOWER",
  "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_UPPER",
  "tensorflow_probability.python.internal.special_math._double_factorial",
  "tensorflow_probability.python.internal.special_math._log_ndtr_asymptotic_series",
  "tensorflow_probability.python.internal.special_math._log_ndtr_lower",
  "tensorflow_probability.python.internal.special_math._ndtr",
  "tensorflow_probability.python.internal.special_math._ndtri",
  "tensorflow_probability.python.internal.special_math.erfinv",
  "tensorflow_probability.python.internal.special_math.log_cdf_laplace",
  "tensorflow_probability.python.internal.special_math.log_ndtr",
  "tensorflow_probability.python.internal.special_math.ndtr",
  "tensorflow_probability.python.internal.special_math.ndtri",
  "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
  "tensorflow_probability.python.internal.special_math_test.GridSpec",
  "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest",
  "tensorflow_probability.python.internal.special_math_test.NdtrTest",
  "tensorflow_probability.python.internal.special_math_test._check_strictly_increasing",
  "tensorflow_probability.python.internal.special_math_test._make_grid",
  "tensorflow_probability.python.internal.special_math_test.special",
  "tensorflow_probability.python.internal.special_math_test.stats",
  "tensorflow_probability.python.internal.special_math_test.try_import",
  "tensorflow_probability.python.internal.tensorshape_util.as_list",
  "tensorflow_probability.python.internal.tensorshape_util.assert_has_rank",
  "tensorflow_probability.python.internal.tensorshape_util.concatenate",
  "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
  "tensorflow_probability.python.internal.tensorshape_util.dims",
  "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with",
  "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
  "tensorflow_probability.python.internal.tensorshape_util.merge_with",
  "tensorflow_probability.python.internal.tensorshape_util.num_elements",
  "tensorflow_probability.python.internal.tensorshape_util.rank",
  "tensorflow_probability.python.internal.tensorshape_util.set_shape",
  "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least",
  "tensorflow_probability.python.internal.test_case.TestCase",
  "tensorflow_probability.python.internal.test_case_test._TestCaseTest",
  "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers",
  "tensorflow_probability.python.internal.test_util.FLAGS",
  "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers",
  "tensorflow_probability.python.internal.test_util._compute_rank_and_fullsize_reqd",
  "tensorflow_probability.python.internal.test_util._vec_outer_square",
  "tensorflow_probability.python.internal.test_util.broadcasting_shapes",
  "tensorflow_probability.python.internal.test_util.derandomize_hypothesis",
  "tensorflow_probability.python.internal.test_util.test_seed",
  "tensorflow_probability.python.internal.test_util.test_seed_stream",
  "tensorflow_probability.python.layers.conv_variational.Conv1DFlipout",
  "tensorflow_probability.python.layers.conv_variational.Conv1DReparameterization",
  "tensorflow_probability.python.layers.conv_variational.Conv2DFlipout",
  "tensorflow_probability.python.layers.conv_variational.Conv2DReparameterization",
  "tensorflow_probability.python.layers.conv_variational.Conv3DFlipout",
  "tensorflow_probability.python.layers.conv_variational.Conv3DReparameterization",
  "tensorflow_probability.python.layers.conv_variational._ConvFlipout",
  "tensorflow_probability.python.layers.conv_variational._ConvReparameterization",
  "tensorflow_probability.python.layers.conv_variational._ConvVariational",
  "tensorflow_probability.python.layers.conv_variational.doc_args",
  "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution",
  "tensorflow_probability.python.layers.conv_variational_test.ConvVariational",
  "tensorflow_probability.python.layers.conv_variational_test.Counter",
  "tensorflow_probability.python.layers.conv_variational_test.MockDistribution",
  "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence",
  "tensorflow_probability.python.layers.conv_variational_test.channels_first_to_last",
  "tensorflow_probability.python.layers.conv_variational_test.channels_last_to_first",
  "tensorflow_probability.python.layers.conv_variational_test.tfd",
  "tensorflow_probability.python.layers.dense_variational.DenseFlipout",
  "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization",
  "tensorflow_probability.python.layers.dense_variational.DenseReparameterization",
  "tensorflow_probability.python.layers.dense_variational._DenseVariational",
  "tensorflow_probability.python.layers.dense_variational.doc_args",
  "tensorflow_probability.python.layers.dense_variational_test.Counter",
  "tensorflow_probability.python.layers.dense_variational_test.MockDistribution",
  "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence",
  "tensorflow_probability.python.layers.dense_variational_test.tfd",
  "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational",
  "tensorflow_probability.python.layers.dense_variational_v2._make_kl_divergence_penalty",
  "tensorflow_probability.python.layers.dense_variational_v2_test.create_dataset",
  "tensorflow_probability.python.layers.dense_variational_v2_test.negloglik",
  "tensorflow_probability.python.layers.dense_variational_v2_test.posterior_mean_field",
  "tensorflow_probability.python.layers.dense_variational_v2_test.prior_trainable",
  "tensorflow_probability.python.layers.dense_variational_v2_test.tfd",
  "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical",
  "tensorflow_probability.python.layers.distribution_layer.DistributionLambda",
  "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli",
  "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic",
  "tensorflow_probability.python.layers.distribution_layer.IndependentNormal",
  "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson",
  "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss",
  "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer",
  "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic",
  "tensorflow_probability.python.layers.distribution_layer.MixtureNormal",
  "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily",
  "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL",
  "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical",
  "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess",
  "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler",
  "tensorflow_probability.python.layers.distribution_layer._deserialize",
  "tensorflow_probability.python.layers.distribution_layer._deserialize_function",
  "tensorflow_probability.python.layers.distribution_layer._event_size",
  "tensorflow_probability.python.layers.distribution_layer._get_convert_to_tensor_fn",
  "tensorflow_probability.python.layers.distribution_layer._make_kl_divergence_fn",
  "tensorflow_probability.python.layers.distribution_layer._serialize",
  "tensorflow_probability.python.layers.distribution_layer._serialize_function",
  "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest",
  "tensorflow_probability.python.layers.distribution_layer_test._IndependentBernoulliTest",
  "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest",
  "tensorflow_probability.python.layers.distribution_layer_test._IndependentLogisticTest",
  "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest",
  "tensorflow_probability.python.layers.distribution_layer_test._IndependentPoissonTest",
  "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest",
  "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest",
  "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest",
  "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest",
  "tensorflow_probability.python.layers.distribution_layer_test._logit_avg_expit",
  "tensorflow_probability.python.layers.distribution_layer_test._vec_pad",
  "tensorflow_probability.python.layers.distribution_layer_test.tfb",
  "tensorflow_probability.python.layers.distribution_layer_test.tfd",
  "tensorflow_probability.python.layers.distribution_layer_test.tfk",
  "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
  "tensorflow_probability.python.layers.distribution_layer_test.tfpl",
  "tensorflow_probability.python.layers.initializers.BlockwiseInitializer",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._DistributionAndTensorCoercibleMeta",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercibleMeta",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._get_tensor_like_attributes",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._value",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._wrap_method",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.Normal",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
  "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd",
  "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple",
  "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._from_components",
  "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple",
  "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform",
  "tensorflow_probability.python.layers.masked_autoregressive_test.tfb",
  "tensorflow_probability.python.layers.masked_autoregressive_test.tfd",
  "tensorflow_probability.python.layers.masked_autoregressive_test.tfk",
  "tensorflow_probability.python.layers.masked_autoregressive_test.tfkl",
  "tensorflow_probability.python.layers.masked_autoregressive_test.tfpl",
  "tensorflow_probability.python.layers.util.default_loc_scale_fn",
  "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
  "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
  "tensorflow_probability.python.layers.util.deserialize_function",
  "tensorflow_probability.python.layers.util.serialize_function",
  "tensorflow_probability.python.layers.variable_input.VariableLayer",
  "tensorflow_probability.python.layers.variable_input_test.tfd",
  "tensorflow_probability.python.math._allowed_symbols",
  "tensorflow_probability.python.math.custom_gradient.identity",
  "tensorflow_probability.python.math.custom_gradient.is_list_like",
  "tensorflow_probability.python.math.diag_jacobian",
  "tensorflow_probability.python.math.diag_jacobian._is_list_like",
  "tensorflow_probability.python.math.diag_jacobian_test.tfd",
  "tensorflow_probability.python.math.gradient.value_and_gradient",
  "tensorflow_probability.python.math.interpolation._assert_ndims_statically",
  "tensorflow_probability.python.math.interpolation._batch_gather_with_broadcast",
  "tensorflow_probability.python.math.interpolation._batch_interp_with_gather_nd",
  "tensorflow_probability.python.math.interpolation._binary_count",
  "tensorflow_probability.python.math.interpolation._interp_regular_1d_grid_impl",
  "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_batch_interpolation",
  "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_non_batch_interpolation",
  "tensorflow_probability.python.math.linalg._get_shape",
  "tensorflow_probability.python.math.linalg._invert_permutation",
  "tensorflow_probability.python.math.linalg._lu_reconstruct_assertions",
  "tensorflow_probability.python.math.linalg._lu_solve_assertions",
  "tensorflow_probability.python.math.linalg._maybe_validate_matrix",
  "tensorflow_probability.python.math.linalg._sparse_block_diag",
  "tensorflow_probability.python.math.linalg._sparse_tensor_dense_matmul",
  "tensorflow_probability.python.math.linalg._swap_m_with_i",
  "tensorflow_probability.python.math.linalg.lu_reconstruct",
  "tensorflow_probability.python.math.linalg.lu_solve",
  "tensorflow_probability.python.math.linalg.sparse_or_dense_matmul",
  "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul",
  "tensorflow_probability.python.math.linalg_test._CholeskyExtend",
  "tensorflow_probability.python.math.linalg_test._LUMatrixInverse",
  "tensorflow_probability.python.math.linalg_test._LUReconstruct",
  "tensorflow_probability.python.math.linalg_test._LUSolve",
  "tensorflow_probability.python.math.linalg_test._MatrixRankTest",
  "tensorflow_probability.python.math.linalg_test._PinvTest",
  "tensorflow_probability.python.math.linalg_test._PivotedCholesky",
  "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul",
  "tensorflow_probability.python.math.log1psquare",
  "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient",
  "tensorflow_probability.python.math.numeric.log1psquare",
  "tensorflow_probability.python.math.numeric.soft_threshold",
  "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad32",
  "tensorflow_probability.python.math.numeric_test.Log1pSquareTest32",
  "tensorflow_probability.python.math.ode.base.ChosenBySolver",
  "tensorflow_probability.python.math.ode.base.Diagnostics",
  "tensorflow_probability.python.math.ode.base.Results",
  "tensorflow_probability.python.math.ode.base.Solver",
  "tensorflow_probability.python.math.ode.bdf._BDFDiagnostics",
  "tensorflow_probability.python.math.ode.bdf._BDFIterand",
  "tensorflow_probability.python.math.ode.bdf._BDFSolverInternalState",
  "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
  "tensorflow_probability.python.math.ode.bdf_util.ORDERS",
  "tensorflow_probability.python.math.ode.bdf_util.RECIPROCAL_SUMS",
  "tensorflow_probability.python.math.ode.bdf_util._NewtonIterand",
  "tensorflow_probability.python.math.ode.bdf_util.error_ratio",
  "tensorflow_probability.python.math.ode.bdf_util.first_step_size",
  "tensorflow_probability.python.math.ode.bdf_util.interpolate_backward_differences",
  "tensorflow_probability.python.math.ode.bdf_util.interpolation_matrix",
  "tensorflow_probability.python.math.ode.bdf_util.newton",
  "tensorflow_probability.python.math.ode.bdf_util.newton_qr",
  "tensorflow_probability.python.math.ode.bdf_util.update_backward_differences",
  "tensorflow_probability.python.math.ode.ode_test._ATOL",
  "tensorflow_probability.python.math.ode.ode_test._RTOL",
  "tensorflow_probability.python.math.ode.util.assert_increasing",
  "tensorflow_probability.python.math.ode.util.assert_nonnegative",
  "tensorflow_probability.python.math.ode.util.assert_positive",
  "tensorflow_probability.python.math.ode.util.error_if_not_real_or_complex",
  "tensorflow_probability.python.math.ode.util.error_if_not_vector",
  "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat",
  "tensorflow_probability.python.math.ode.util.get_ode_fn_vec",
  "tensorflow_probability.python.math.ode.util.next_step_size",
  "tensorflow_probability.python.math.random_ops_test._RandomRademacher",
  "tensorflow_probability.python.math.random_ops_test._RandomRayleigh",
  "tensorflow_probability.python.math.random_rademacher",
  "tensorflow_probability.python.math.root_search.RootSearchResults",
  "tensorflow_probability.python.mcmc.HamiltonianMonteCarlo",
  "tensorflow_probability.python.mcmc.SimpleStepSizeAdaptation",
  "tensorflow_probability.python.mcmc.TransformedTransitionKernel",
  "tensorflow_probability.python.mcmc.diagnostic._axis_size",
  "tensorflow_probability.python.mcmc.diagnostic._broadcast_maybelist_arg",
  "tensorflow_probability.python.mcmc.diagnostic._effective_sample_size_single_state",
  "tensorflow_probability.python.mcmc.diagnostic._is_list_like",
  "tensorflow_probability.python.mcmc.diagnostic._potential_scale_reduction_single_state",
  "tensorflow_probability.python.mcmc.diagnostic._reduce_variance",
  "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest",
  "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest",
  "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest",
  "tensorflow_probability.python.mcmc.diagnostic_test.rng",
  "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness",
  "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc",
  "tensorflow_probability.python.mcmc.eight_schools_hmc.eight_schools_joint_log_prob",
  "tensorflow_probability.python.mcmc.eight_schools_hmc.mvn",
  "tensorflow_probability.python.mcmc.eight_schools_hmc.tfd",
  "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo",
  "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarloExtraKernelResults",
  "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo",
  "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarloKernelResults",
  "tensorflow_probability.python.mcmc.hmc._compute_log_acceptance_correction",
  "tensorflow_probability.python.mcmc.hmc._log_sum_sq",
  "tensorflow_probability.python.mcmc.hmc._prepare_args",
  "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists",
  "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest",
  "tensorflow_probability.python.mcmc.hmc_test._reduce_variance",
  "tensorflow_probability.python.mcmc.hmc_test._set_seed",
  "tensorflow_probability.python.mcmc.hmc_test.tfb",
  "tensorflow_probability.python.mcmc.hmc_test.tfd",
  "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.LeapfrogIntegrator",
  "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator",
  "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._find_best_interval_idx",
  "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._left_doubling_increments",
  "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._sample_with_shrinkage",
  "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance",
  "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_bounds_by_doubling",
  "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_sampler_one_dim",
  "tensorflow_probability.python.mcmc.internal.util._choose_base_case",
  "tensorflow_probability.python.mcmc.internal.util._is_tensor_like",
  "tensorflow_probability.python.mcmc.internal.util._value_and_gradients",
  "tensorflow_probability.python.mcmc.internal.util.choose",
  "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results",
  "tensorflow_probability.python.mcmc.internal.util.is_list_like",
  "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like",
  "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter",
  "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter",
  "tensorflow_probability.python.mcmc.internal.util.make_name",
  "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads",
  "tensorflow_probability.python.mcmc.internal.util.safe_sum",
  "tensorflow_probability.python.mcmc.internal.util.set_doc",
  "tensorflow_probability.python.mcmc.internal.util.smart_for_loop",
  "tensorflow_probability.python.mcmc.internal.util.trace_scan",
  "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors",
  "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNew",
  "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNoParameters",
  "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerOld",
  "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperNew",
  "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperOld",
  "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
  "tensorflow_probability.python.mcmc.internal.util_test.TensorConvertible",
  "tensorflow_probability.python.mcmc.internal.util_test.WrapperResults",
  "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn",
  "tensorflow_probability.python.mcmc.internal.util_test.tfd",
  "tensorflow_probability.python.mcmc.kernel.TransitionKernel",
  "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm",
  "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin",
  "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevinKernelResults",
  "tensorflow_probability.python.mcmc.langevin._compute_log_acceptance_correction",
  "tensorflow_probability.python.mcmc.langevin._euler_method",
  "tensorflow_probability.python.mcmc.langevin._get_drift",
  "tensorflow_probability.python.mcmc.langevin._maybe_broadcast_volatility",
  "tensorflow_probability.python.mcmc.langevin._maybe_call_volatility_fn_and_grads",
  "tensorflow_probability.python.mcmc.langevin._prepare_args",
  "tensorflow_probability.python.mcmc.langevin_test.tfd",
  "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings",
  "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastingsKernelResults",
  "tensorflow_probability.python.mcmc.metropolis_hastings.has_target_log_prob",
  "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel",
  "tensorflow_probability.python.mcmc.metropolis_hastings_test.InnerKernelResultsWithCorrection",
  "tensorflow_probability.python.mcmc.metropolis_hastings_test.InnerKernelResultsWithoutCorrection",
  "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn",
  "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn",
  "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis",
  "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk",
  "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalkResults",
  "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn",
  "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd",
  "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMCKernelResults",
  "tensorflow_probability.python.mcmc.replica_exchange_mc._get_field",
  "tensorflow_probability.python.mcmc.replica_exchange_mc._replica_log_prob_fn",
  "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn",
  "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed",
  "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tfd",
  "tensorflow_probability.python.mcmc.sample.CheckpointableStatesAndTrace",
  "tensorflow_probability.python.mcmc.sample.StatesAndTrace",
  "tensorflow_probability.python.mcmc.sample_annealed_importance.AISResults",
  "tensorflow_probability.python.mcmc.sample_annealed_importance_test._compute_sample_variance",
  "tensorflow_probability.python.mcmc.sample_annealed_importance_test._maybe_seed",
  "tensorflow_probability.python.mcmc.sample_annealed_importance_test.tfd",
  "tensorflow_probability.python.mcmc.sample_chain",
  "tensorflow_probability.python.mcmc.sample_halton_sequence._MAX_DIMENSION",
  "tensorflow_probability.python.mcmc.sample_halton_sequence._base_expansion_size",
  "tensorflow_probability.python.mcmc.sample_halton_sequence._get_indices",
  "tensorflow_probability.python.mcmc.sample_halton_sequence._get_permutations",
  "tensorflow_probability.python.mcmc.sample_halton_sequence._randomize",
  "tensorflow_probability.python.mcmc.sample_halton_sequence_test._set_seed",
  "tensorflow_probability.python.mcmc.sample_halton_sequence_test.tfd",
  "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel",
  "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernelResults",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptationResults",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation._get_differing_dims",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_log_accept_prob_getter_fn",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_getter_fn",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_setter_fn",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation._maybe_validate_target_accept_prob",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation._reduce_logmeanexp",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernelResults",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernelResults",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernelResults",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationStaticBroadcastingTest",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._set_seed",
  "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.tfd",
  "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSamplerKernelResults",
  "tensorflow_probability.python.mcmc.slice_sampler_kernel._choose_random_direction",
  "tensorflow_probability.python.mcmc.slice_sampler_kernel._maybe_call_fn",
  "tensorflow_probability.python.mcmc.slice_sampler_kernel._prepare_args",
  "tensorflow_probability.python.mcmc.slice_sampler_kernel._right_pad",
  "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next",
  "tensorflow_probability.python.mcmc.slice_sampler_test.tfd",
  "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness",
  "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc",
  "tensorflow_probability.python.mcmc.text_messages_hmc.text_messages_joint_log_prob",
  "tensorflow_probability.python.mcmc.text_messages_hmc.tfd",
  "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernelResults",
  "tensorflow_probability.python.mcmc.transformed_kernel.forward_log_det_jacobian_fn",
  "tensorflow_probability.python.mcmc.transformed_kernel.forward_transform_fn",
  "tensorflow_probability.python.mcmc.transformed_kernel.inverse_transform_fn",
  "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel",
  "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernelResults",
  "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest",
  "tensorflow_probability.python.mcmc.transformed_kernel_test._maybe_seed",
  "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb",
  "tensorflow_probability.python.mcmc.transformed_kernel_test.tfd",
  "tensorflow_probability.python.monte_carlo._allowed_symbols",
  "tensorflow_probability.python.monte_carlo.expectation",
  "tensorflow_probability.python.monte_carlo.expectation._get_samples",
  "tensorflow_probability.python.monte_carlo.expectation_test.tfd",
  "tensorflow_probability.python.optimizer._allowed_symbols",
  "tensorflow_probability.python.optimizer.bfgs.BfgsOptimizerResults",
  "tensorflow_probability.python.optimizer.bfgs._batch_transpose",
  "tensorflow_probability.python.optimizer.bfgs._bfgs_inv_hessian_update",
  "tensorflow_probability.python.optimizer.bfgs._get_search_direction",
  "tensorflow_probability.python.optimizer.bfgs._inv_hessian_control_inputs",
  "tensorflow_probability.python.optimizer.bfgs._mul_right",
  "tensorflow_probability.python.optimizer.bfgs._tensor_product",
  "tensorflow_probability.python.optimizer.bfgs._update_inv_hessian",
  "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn",
  "tensorflow_probability.python.optimizer.bfgs_test._norm",
  "tensorflow_probability.python.optimizer.bfgs_utils.ValueAndGradient",
  "tensorflow_probability.python.optimizer.bfgs_utils._broadcast",
  "tensorflow_probability.python.optimizer.bfgs_utils._check_convergence",
  "tensorflow_probability.python.optimizer.bfgs_utils._restrict_along_direction",
  "tensorflow_probability.python.optimizer.bfgs_utils._update_position",
  "tensorflow_probability.python.optimizer.bfgs_utils.converged_all",
  "tensorflow_probability.python.optimizer.bfgs_utils.get_initial_state_args",
  "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step",
  "tensorflow_probability.python.optimizer.bfgs_utils.norm",
  "tensorflow_probability.python.optimizer.bfgs_utils.update_fields",
  "tensorflow_probability.python.optimizer.differential_evolution.DifferentialEvolutionOptimizerResults",
  "tensorflow_probability.python.optimizer.differential_evolution._DifferentialEvolutionOptimizerResults",
  "tensorflow_probability.python.optimizer.differential_evolution._MinimizeLoopVars",
  "tensorflow_probability.python.optimizer.differential_evolution._binary_crossover",
  "tensorflow_probability.python.optimizer.differential_evolution._check_convergence",
  "tensorflow_probability.python.optimizer.differential_evolution._check_failure",
  "tensorflow_probability.python.optimizer.differential_evolution._ensure_list",
  "tensorflow_probability.python.optimizer.differential_evolution._find_best_in_population",
  "tensorflow_probability.python.optimizer.differential_evolution._get_initial_args",
  "tensorflow_probability.python.optimizer.differential_evolution._get_mixing_indices",
  "tensorflow_probability.python.optimizer.differential_evolution._get_mutants",
  "tensorflow_probability.python.optimizer.differential_evolution._get_starting_population",
  "tensorflow_probability.python.optimizer.differential_evolution.one_step",
  "tensorflow_probability.python.optimizer.lbfgs.LBfgsOptimizerResults",
  "tensorflow_probability.python.optimizer.lbfgs._get_initial_state",
  "tensorflow_probability.python.optimizer.lbfgs._get_search_direction",
  "tensorflow_probability.python.optimizer.lbfgs._make_empty_queue_for",
  "tensorflow_probability.python.optimizer.lbfgs._queue_push",
  "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn",
  "tensorflow_probability.python.optimizer.lbfgs_test._norm",
  "tensorflow_probability.python.optimizer.linesearch._allowed_symbols",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang.HagerZhangLineSearchResult",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._bracket_and_search",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._fix_step_size",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_inner_bisection",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._machine_eps",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._prepare_args",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._to_str",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang._very_close",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_approx_wolfe",
  "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_exact_wolfe",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._IntermediateResult",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._Secant2Result",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._bisect",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._satisfies_wolfe",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner_update",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bisect",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.LineSearchInterval",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.ValueAndGradient",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test._interval",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y",
  "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy",
  "tensorflow_probability.python.optimizer.nelder_mead.NelderMeadOptimizerResults",
  "tensorflow_probability.python.optimizer.nelder_mead._EPSILON",
  "tensorflow_probability.python.optimizer.nelder_mead._accept_reflected_fn",
  "tensorflow_probability.python.optimizer.nelder_mead._check_convergence",
  "tensorflow_probability.python.optimizer.nelder_mead._default_step_sizes",
  "tensorflow_probability.python.optimizer.nelder_mead._evaluate_objective_multiple",
  "tensorflow_probability.python.optimizer.nelder_mead._expansion_fn",
  "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn",
  "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn",
  "tensorflow_probability.python.optimizer.nelder_mead._prepare_args",
  "tensorflow_probability.python.optimizer.nelder_mead._prepare_args_with_initial_simplex",
  "tensorflow_probability.python.optimizer.nelder_mead._prepare_args_with_initial_vertex",
  "tensorflow_probability.python.optimizer.nelder_mead._replace_at_index",
  "tensorflow_probability.python.optimizer.nelder_mead._resolve_parameters",
  "tensorflow_probability.python.optimizer.nelder_mead._shrink_towards_best",
  "tensorflow_probability.python.optimizer.nelder_mead.nelder_mead_one_step",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._add_ignoring_nones",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._get_shape",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_ignoring_nones",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_or_none",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._one_hot_like",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_exiting_on_none",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_ignoring_nones",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse._sparse_or_dense_matmul_onehot",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step",
  "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest",
  "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics",
  "tensorflow_probability.python.optimizer.sgld_test.tfd",
  "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD",
  "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared",
  "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
  "tensorflow_probability.python.positive_semidefinite_kernels.FeatureScaled",
  "tensorflow_probability.python.positive_semidefinite_kernels.FeatureTransformed",
  "tensorflow_probability.python.positive_semidefinite_kernels.KumaraswamyTransformed",
  "tensorflow_probability.python.positive_semidefinite_kernels.SchurComplement",
  "tensorflow_probability.python.positive_semidefinite_kernels._allowed_symbols",
  "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared",
  "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared._validate_arg_if_not_none",
  "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic",
  "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic._validate_arg_if_not_none",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.FeatureScaled",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._FeatureScaledTest",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._numpy_exp_quad",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._numpy_exp_quad_matrix",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad",
  "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad_matrix",
  "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype",
  "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
  "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads",
  "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape",
  "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed",
  "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest",
  "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._kumaraswamy_warp",
  "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad",
  "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad_matrix",
  "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternFiveHalves",
  "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternOneHalf",
  "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternThreeHalves",
  "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin",
  "tensorflow_probability.python.positive_semidefinite_kernels.matern._validate_arg_if_not_none",
  "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase",
  "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Linear",
  "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial",
  "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._maybe_shape_dynamic",
  "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._maybe_shape_static",
  "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._validate_arg_if_not_none",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._flatten_multiplicand_list",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._flatten_summand_list",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.IncompletelyDefinedKernel",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_0",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_1",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_2",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_21",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.tfpk",
  "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic",
  "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic._validate_arg_if_not_none",
  "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement",
  "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement._add_diagonal_shift",
  "tensorflow_probability.python.stats.__all__",
  "tensorflow_probability.python.stats.auto_correlation",
  "tensorflow_probability.python.stats.quantiles._get_best_effort_ndims",
  "tensorflow_probability.python.stats.quantiles._get_static_ndims",
  "tensorflow_probability.python.stats.quantiles._insert_back_keep_dims",
  "tensorflow_probability.python.stats.quantiles._make_static_axis_non_negative_list",
  "tensorflow_probability.python.stats.quantiles._move_dims_to_flat_end",
  "tensorflow_probability.python.stats.quantiles._sort_tensor",
  "tensorflow_probability.python.stats.quantiles.count_integers",
  "tensorflow_probability.python.stats.quantiles.find_bins",
  "tensorflow_probability.python.stats.quantiles.percentile",
  "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation",
  "tensorflow_probability.python.stats.quantiles_test.rng",
  "tensorflow_probability.python.stats.sample_stats._is_list_like",
  "tensorflow_probability.python.stats.sample_stats._make_list_or_1d_tensor",
  "tensorflow_probability.python.stats.sample_stats._make_positive_axis",
  "tensorflow_probability.python.stats.sample_stats._squeeze",
  "tensorflow_probability.python.stats.sample_stats.covariance",
  "tensorflow_probability.python.stats.sample_stats.stddev",
  "tensorflow_probability.python.stats.sample_stats.variance",
  "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest",
  "tensorflow_probability.python.stats.sample_stats_test.rng",
  "tensorflow_probability.python.sts.AdditiveStateSpaceModel",
  "tensorflow_probability.python.sts.Autoregressive",
  "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel",
  "tensorflow_probability.python.sts.ConstrainedSeasonalStateSpaceModel",
  "tensorflow_probability.python.sts.DynamicLinearRegression",
  "tensorflow_probability.python.sts.DynamicLinearRegressionStateSpaceModel",
  "tensorflow_probability.python.sts.LinearRegression",
  "tensorflow_probability.python.sts.LocalLevel",
  "tensorflow_probability.python.sts.LocalLevelStateSpaceModel",
  "tensorflow_probability.python.sts.LocalLinearTrend",
  "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel",
  "tensorflow_probability.python.sts.Seasonal",
  "tensorflow_probability.python.sts.SeasonalStateSpaceModel",
  "tensorflow_probability.python.sts.SemiLocalLinearTrend",
  "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel",
  "tensorflow_probability.python.sts.SparseLinearRegression",
  "tensorflow_probability.python.sts.Sum",
  "tensorflow_probability.python.sts._allowed_symbols",
  "tensorflow_probability.python.sts.autoregressive.Autoregressive",
  "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel",
  "tensorflow_probability.python.sts.autoregressive.make_ar_transition_matrix",
  "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest",
  "tensorflow_probability.python.sts.autoregressive_test.ar_explicit_logp",
  "tensorflow_probability.python.sts.decomposition._decompose_from_posterior_marginals",
  "tensorflow_probability.python.sts.decomposition._split_covariance_into_marginals",
  "tensorflow_probability.python.sts.decomposition_test._DecompositionTest",
  "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression",
  "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel",
  "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest",
  "tensorflow_probability.python.sts.dynamic_regression_test.tfd",
  "tensorflow_probability.python.sts.fitting._build_trainable_posterior",
  "tensorflow_probability.python.sts.fitting._minimize_in_graph",
  "tensorflow_probability.python.sts.fitting.build_factored_variational_loss",
  "tensorflow_probability.python.sts.fitting.sample_uniform_initial_state",
  "tensorflow_probability.python.sts.fitting_test._HMCTests",
  "tensorflow_probability.python.sts.forecast._prefer_static_event_ndims",
  "tensorflow_probability.python.sts.forecast_test._ForecastTest",
  "tensorflow_probability.python.sts.forecast_test.tfd",
  "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries",
  "tensorflow_probability.python.sts.internal.missing_values_util.initial_value_of_masked_time_series",
  "tensorflow_probability.python.sts.internal.missing_values_util.moments_of_masked_time_series",
  "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests",
  "tensorflow_probability.python.sts.internal.util._maybe_expand_trailing_dim",
  "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape",
  "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask",
  "tensorflow_probability.python.sts.internal.util.empirical_statistics",
  "tensorflow_probability.python.sts.internal.util.factored_joint_mvn",
  "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws",
  "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
  "tensorflow_probability.python.sts.internal.util.sum_mvns",
  "tensorflow_probability.python.sts.internal.util.tfl",
  "tensorflow_probability.python.sts.internal.util_test._UtilityTests",
  "tensorflow_probability.python.sts.local_level.LocalLevel",
  "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel",
  "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest",
  "tensorflow_probability.python.sts.local_level_test.tfd",
  "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend",
  "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel",
  "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest",
  "tensorflow_probability.python.sts.local_linear_trend_test.tfd",
  "tensorflow_probability.python.sts.regression.LinearRegression",
  "tensorflow_probability.python.sts.regression.SparseLinearRegression",
  "tensorflow_probability.python.sts.regression._observe_timeseries_fn",
  "tensorflow_probability.python.sts.regression._zero_dimensional_mvndiag",
  "tensorflow_probability.python.sts.regression.tfl",
  "tensorflow_probability.python.sts.regression_test._LinearRegressionTest",
  "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest",
  "tensorflow_probability.python.sts.regression_test.tfd",
  "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel",
  "tensorflow_probability.python.sts.seasonal.Seasonal",
  "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel",
  "tensorflow_probability.python.sts.seasonal.build_constrained_seasonal_transition_noise",
  "tensorflow_probability.python.sts.seasonal.build_effects_to_residuals_matrix",
  "tensorflow_probability.python.sts.seasonal.build_is_last_day_of_season",
  "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_matrix",
  "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_noise",
  "tensorflow_probability.python.sts.seasonal.seasonal_init_args",
  "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest",
  "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest",
  "tensorflow_probability.python.sts.seasonal_test.tfd",
  "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend",
  "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel",
  "tensorflow_probability.python.sts.semilocal_linear_trend.semilocal_linear_trend_transition_matrix",
  "tensorflow_probability.python.sts.semilocal_linear_trend.semilocal_linear_trend_transition_noise",
  "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest",
  "tensorflow_probability.python.sts.semilocal_linear_trend_test.tfd",
  "tensorflow_probability.python.sts.structural_time_series.Parameter",
  "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries",
  "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests",
  "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness",
  "tensorflow_probability.python.sts.structural_time_series_test.tfb",
  "tensorflow_probability.python.sts.structural_time_series_test.tfd",
  "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel",
  "tensorflow_probability.python.sts.sum.Sum",
  "tensorflow_probability.python.sts.sum.tfl",
  "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest",
  "tensorflow_probability.python.trainable_distributions._allowed_symbols",
  "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.softplus_and_shift",
  "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.tril_with_diag_softplus_and_shift",
  "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.tfd",
  "tensorflow_probability.python.util.docstring.expand_docstring",
  "tensorflow_probability.python.version._MAJOR_VERSION",
  "tensorflow_probability.python.version._MINOR_VERSION",
  "tensorflow_probability.python.version._PATCH_VERSION",
  "tensorflow_probability.python.version._VERSION_SUFFIX",
  "tensorflow_probability.python.vi._allowed_symbols",
  "tensorflow_probability.python.vi.csiszar_divergence.amari_alpha",
  "tensorflow_probability.python.vi.csiszar_divergence.csiszar_vimco_helper",
  "tensorflow_probability.python.vi.csiszar_divergence.dual_csiszar_function",
  "tensorflow_probability.python.vi.csiszar_divergence.pearson",
  "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
  "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag",
  "tensorflow_probability.stats.auto_correlation",
  "tensorflow_probability.stats.cholesky_covariance",
  "tensorflow_probability.stats.correlation",
  "tensorflow_probability.stats.count_integers",
  "tensorflow_probability.stats.covariance",
  "tensorflow_probability.stats.find_bins",
  "tensorflow_probability.stats.histogram",
  "tensorflow_probability.stats.percentile",
  "tensorflow_probability.stats.quantiles",
  "tensorflow_probability.stats.stddev",
  "tensorflow_probability.stats.variance",
  "tensorflow_probability.sts.LocalLevel",
  "tensorflow_probability.sts.LocalLinearTrend",
  "tensorflow_probability.sts.MaskedTimeSeries",
  "tensorflow_probability.sts.Seasonal",
  "tensorflow_probability.sts.Sum",
  "tensorflow_probability.sts.build_factored_variational_loss",
  "tensorflow_probability.sts.decompose_by_component",
  "tensorflow_probability.sts.decompose_forecast_by_component",
  "tensorflow_probability.sts.fit_with_hmc",
  "tensorflow_probability.sts.forecast",
  "tensorflow_probability.sts.one_step_predictive",
  "tensorflow_probability.trainable_distributions.bernoulli",
  "tensorflow_probability.trainable_distributions.multivariate_normal_tril",
  "tensorflow_probability.trainable_distributions.normal",
  "tensorflow_probability.trainable_distributions.poisson",
  "tensorflow_probability.trainable_distributions.softplus_and_shift",
  "tensorflow_probability.trainable_distributions.tril_with_diag_softplus_and_shift",
  "tensorflow_probability.vi.amari_alpha",
  "tensorflow_probability.vi.arithmetic_geometric",
  "tensorflow_probability.vi.chi_square",
  "tensorflow_probability.vi.csiszar_vimco",
  "tensorflow_probability.vi.csiszar_vimco_helper",
  "tensorflow_probability.vi.dual_csiszar_function",
  "tensorflow_probability.vi.jeffreys",
  "tensorflow_probability.vi.jensen_shannon",
  "tensorflow_probability.vi.kl_forward",
  "tensorflow_probability.vi.kl_reverse",
  "tensorflow_probability.vi.log1p_abs",
  "tensorflow_probability.vi.modified_gan",
  "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence",
  "tensorflow_probability.vi.pearson",
  "tensorflow_probability.vi.squared_hellinger",
  "tensorflow_probability.vi.symmetrized_csiszar_function",
  "tensorflow_probability.vi.t_power",
  "tensorflow_probability.vi.total_variation",
  "tensorflow_probability.vi.triangular",
  "test_points_fn",
  "tfp_f",
  "threading.local",
  "time.time",
  "trace_fn",
  "traceback.format_exc",
  "true_log_joint",
  "true_mvndiag_sample",
  "true_normal_sample",
  "types.FunctionType",
  "types.LambdaType",
  "types.ModuleType",
  "types.ModuleType.__init__",
  "unnormalized_posterior_log_prob",
  "unsupported_fn",
  "update_factorization",
  "vae_model",
  "vae_model.compile",
  "vae_model.fit",
  "validate_equal_last_dim",
  "value_and_gradients_function",
  "var",
  "variance_entry",
  "warnings.catch_warnings",
  "warnings.filterwarnings",
  "warnings.simplefilter",
  "warnings.warn",
  "weakref.ref",
  "which_clip",
  "which_softmax",
  "wrap",
  "wrapped_init",
  "y_func"
 ],
 "deps": {
  "Decoder": [],
  "Encoder": [],
  "ExpForwardOnly": [],
  "ExpInverseOnly": [],
  "FeatureNdimsKernel": [],
  "HasFields": [],
  "IndepBern1d": [],
  "IndepBern1dSliceable": [],
  "InnerResults": [],
  "KernelFn": [],
  "Model": [],
  "MyDist": [],
  "MyDistException": [],
  "NoFields": [],
  "Results": [],
  "Sub1": [],
  "Sub11": [],
  "Sub2": [],
  "TerribleDistribution": [],
  "_BareBonesBijector": [],
  "_add": [],
  "_assert_shape": [],
  "_batch_of_zeros_with_rightmost_singletons": [],
  "_batch_univariate_softmax": [],
  "_bootstrap_results": [],
  "_broadcast": [],
  "_check": [],
  "_check2d": [],
  "_check2d_rows": [],
  "_compute": [],
  "_compute_quantiles": [],
  "_convert_to_tensor": [],
  "_create_polynomial": [],
  "_do_update": [],
  "_expand_is_accepted_like": [],
  "_expand_scalar": [],
  "_expand_tensor": [],
  "_expand_x_fn": [],
  "_expected_cdf": [],
  "_expected_pdf": [],
  "_explore": [],
  "_get_batch_ndims": [],
  "_get_final_shape": [],
  "_get_indices": [],
  "_get_ndims": [],
  "_get_rank": [],
  "_hessian_diag_elt_with_l2": [],
  "_impl": [],
  "_importance_sampler_positive_f": [],
  "_joint_log_prob": [],
  "_kernel_fn": [],
  "_lbeta": [],
  "_make": [],
  "_make_convex_combined_log_prob_fn": [],
  "_mask_if_invalid": [],
  "_maybe_append": [],
  "_maybe_attach_assertion": [],
  "_maybe_make_callable": [],
  "_maybe_make_callable_from_linop": [],
  "_maybe_make_linop": [],
  "_maybe_seed": [],
  "_mutant_part": [],
  "_neg_log_likelihood": [],
  "_pad": [],
  "_powerset": [],
  "_recreate_kernel": [],
  "_scalar_univariate_softmax": [],
  "_set_event_shape": [],
  "_sliced_maker": [],
  "_static_event_size": [],
  "_std_samples_with_gradients": [],
  "_step_along_direction": [],
  "_strip": [],
  "_swap": [],
  "_where": [],
  "_zeros_like": [],
  "abc": [],
  "absl": [],
  "actual_hypersphere_volume": [],
  "actual_mvn_log_prob": [],
  "additional_check": [],
  "assert_catches_mistake": [],
  "assert_ops": [],
  "attr": [],
  "bar": [],
  "base_template": [],
  "batch_gather": [],
  "bijector_class": [],
  "bootstrap_fn": [],
  "broadcast_fn": [],
  "build_assign_op": [],
  "build_loss": [],
  "build_loss_fn": [],
  "build_variational_loss": [],
  "call_fldj": [],
  "camel_to_snake": [],
  "cast": [],
  "cauchy_function": [],
  "cauchy_new_state_fn": [],
  "cdf_op": [],
  "chain": [],
  "check": [],
  "check_catches_mistake": [],
  "check_consistency": [],
  "check_is_scalar": [],
  "cloudpickle": [],
  "cls": [],
  "codecs": [],
  "collections": [],
  "computation": [],
  "constraint": [],
  "constraint_fn": [],
  "construct_monte_carlo_csiszar_f_divergence": [],
  "contextlib": [],
  "control": [],
  "convergence_criteria_fn": [],
  "convert_to_tensor_fn": [],
  "convolution_op": [],
  "copy": [],
  "cos": [],
  "coshe": [],
  "cov_step": [],
  "covariance_entry": [],
  "create_component": [],
  "ctt": [],
  "d": [],
  "d0": [],
  "d0_": [],
  "d1": [],
  "d1_": [],
  "decoder": [],
  "decoder_model": [],
  "decorator": [],
  "default_init": [],
  "delta": [],
  "dist": [],
  "dist_cls": [],
  "dist_fn": [],
  "distribution_b": [],
  "distribution_cls": [],
  "do_padding": [],
  "dt": [],
  "dtype": [],
  "encoder": [],
  "entropy_alt": [],
  "eval_secant2": [],
  "eval_update": [],
  "event": [],
  "event_shape": [],
  "events": [],
  "exchange_proposed_fn": [],
  "expand_x_fn": [],
  "expected_log_prob": [],
  "expected_lp": [],
  "f": [],
  "fake_distribution": [],
  "fdf": [],
  "filter_step": [],
  "fn": [],
  "fn1": [],
  "fn2": [],
  "fn_broadcast": [],
  "fn_slice": [],
  "foo": [],
  "fun": [],
  "func": [],
  "func1": [],
  "func2": [],
  "func_estimate": [],
  "functools": [],
  "g": [],
  "generate_one": [],
  "get_dim_size": [],
  "get_fn": [],
  "get_half_cauchy_func": [],
  "get_name": [],
  "get_observation_matrix_for_timestep": [],
  "get_observation_noise_for_timestep": [],
  "get_results": [],
  "get_shape_tensor": [],
  "get_tensor_shape": [],
  "get_transition_matrix_for_timestep": [],
  "get_transition_noise_for_timestep": [],
  "get_val_and_grad_fn": [],
  "getter": [],
  "grad_and_hessian_loss_fn": [],
  "gradp": [],
  "gradq": [],
  "h": [],
  "half_normal_function": [],
  "halfway": [],
  "hashlib": [],
  "histograms": [],
  "hypothesis": [],
  "importlib": [],
  "increase_rank": [],
  "init": [],
  "init_clone": [],
  "initializer": [],
  "input": [],
  "inspect": [],
  "int": [],
  "integrator": [],
  "interceptor": [],
  "io": [],
  "is_diagonal": [],
  "is_last_day_of_season": [],
  "itertools": [],
  "jacobian_fn": [],
  "jacobian_fn_mat": [],
  "jitter": [],
  "k": [],
  "kernel_initializer": [],
  "kernel_results_cls": [],
  "kl_divergence_fn": [],
  "kl_fn": [],
  "layer": [],
  "layer_one": [],
  "layer_two": [],
  "loc": [],
  "loc_scale_fn": [],
  "log_gamma_log_prob": [],
  "log_joint": [],
  "log_joint_builtin": [],
  "log_joint_fn": [],
  "log_joint_scoped": [],
  "log_joint_transformed": [],
  "log_joint_wrapped": [],
  "log_prob_fn": [],
  "logging": [],
  "logits": [],
  "loop_body": [],
  "loop_fn": [],
  "m": [],
  "made": [],
  "make_bijector": [],
  "make_distribution": [],
  "make_distribution_fn": [],
  "make_fn": [],
  "make_kernel_fn": [],
  "make_loop_body": [],
  "make_ph": [],
  "make_shape_tensor": [],
  "make_trick_fun": [],
  "make_variational": [],
  "mask_if_invalid": [],
  "math": [],
  "maybe_flatten": [],
  "maybe_stop": [],
  "mcem_iter": [],
  "mean_fn": [],
  "mean_step": [],
  "merge_doc": [],
  "method": [],
  "mixture_func": [],
  "mk_ind_norm": [],
  "model": [],
  "model_copy": [],
  "monte_carlo_hypersphere_volume": [],
  "ndims_fn": [],
  "net": [],
  "new_fn": [],
  "noncentered_horseshoe_prior": [],
  "normal": [],
  "normal_differential_entropy": [],
  "normal_with_unknown_mean": [],
  "np_f": [],
  "np_softmax": [],
  "npdt": [],
  "numpy": [],
  "objective_fn": [],
  "objective_function": [],
  "observation_fn": [],
  "observed_log_joint_fn": [],
  "ode_fn": [],
  "ode_fn_vec": [],
  "one_step_fn": [],
  "operator": [],
  "original_fn": [],
  "os": [],
  "part_converged": [],
  "pickle": [],
  "pprint": [],
  "prior_model": [],
  "probs": [],
  "proposal_log_prob_fn": [],
  "psd": [],
  "pushforward_latents_step": [],
  "pushforward_step": [],
  "quantized_log_prob": [],
  "random_orthogonal_matrix": [],
  "random_with_shape": [],
  "rastrigin": [],
  "re": [],
  "ref": [],
  "rejection_sample_with_gradient": [],
  "reshape_output": [],
  "rosenbrock": [],
  "run": [],
  "run_one": [],
  "s": [],
  "sample": [],
  "sample_chain": [],
  "scale": [],
  "scale_tril": [],
  "scaled_identity": [],
  "scipy": [],
  "scipy_f": [],
  "seed": [],
  "seed_gen": [],
  "seed_hi": [],
  "seed_lo": [],
  "seed_stream": [],
  "setter": [],
  "shape_fn": [],
  "shape_tensor_fn": [],
  "sin": [],
  "sinhe": [],
  "six": [],
  "slicer": [],
  "smooth_step": [],
  "sp_func": [],
  "square": [],
  "squared_frobenius_norm": [],
  "static_fn": [],
  "stop": [],
  "stopping_condition": [],
  "stopping_policy_fn": [],
  "stream": [],
  "strm": [],
  "strm1": [],
  "strm2": [],
  "strm3": [],
  "sys": [],
  "t": [],
  "target_fn": [],
  "target_log_prob": [],
  "target_log_prob_fn": [],
  "tensorflow": [],
  "tensorflow_probability": [],
  "test_points_fn": [],
  "tfp_f": [],
  "threading": [],
  "time": [],
  "trace_fn": [],
  "traceback": [],
  "true_log_joint": [],
  "true_mvndiag_sample": [],
  "true_normal_sample": [],
  "types": [],
  "unnormalized_posterior_log_prob": [],
  "unsupported_fn": [],
  "update_factorization": [],
  "vae_model": [],
  "validate_equal_last_dim": [],
  "value_and_gradients_function": [],
  "var": [],
  "variance_entry": [],
  "warnings": [],
  "weakref": [],
  "which_clip": [],
  "which_softmax": [],
  "wrap": [],
  "wrapped_init": [],
  "y_func": []
 }
}