{
 "bad": [
  "AssertionError",
  "AttributeError",
  "Exception",
  "FeatureNdimsKernel",
  "HasFields",
  "ImportError",
  "InnerResults",
  "KeyError",
  "LookupError",
  "MyDist",
  "MyDistException",
  "NoFields",
  "NotImplementedError",
  "Results",
  "Sub1",
  "Sub11",
  "Sub2",
  "TypeError",
  "ValueError",
  "_BareBonesBijector",
  "__name__",
  "_assert_shape",
  "_batch_univariate_softmax",
  "_bootstrap_results",
  "_broadcast",
  "_check",
  "_check2d",
  "_check2d_rows",
  "_compute",
  "_compute_quantiles",
  "_convert_to_tensor",
  "_create_polynomial",
  "_do_update",
  "_expand_is_accepted_like",
  "_expected_cdf",
  "_expected_pdf",
  "_get_rank",
  "_hessian_diag_elt_with_l2",
  "_joint_log_prob",
  "_kernel_fn",
  "_lbeta",
  "_leapfrog_one_step",
  "_make_bypassing_custom_getter_fn",
  "_make_convex_combined_log_prob_fn",
  "_mask_if_invalid",
  "_maybe_append",
  "_neg_log_likelihood",
  "_powerset",
  "_scalar_univariate_softmax",
  "_std_samples_with_gradients",
  "_step_along_direction",
  "_swap",
  "_where",
  "abs",
  "absl.app.run",
  "absl.testing.parameterized.TestCase",
  "absl.testing.parameterized.named_parameters",
  "absl.testing.parameterized.parameters",
  "actual_hypersphere_volume",
  "actual_mvn_log_prob",
  "add_variable_fn",
  "aliases",
  "all",
  "analytical_pdf",
  "any",
  "approx_kl",
  "approx_kl_score_trick",
  "approx_kl_self_normalized",
  "approx_kl_self_normalized_score_trick",
  "assertion",
  "bar",
  "base_distribution_class",
  "body_fn",
  "bool",
  "bootstrap_fn",
  "broadcast_fn",
  "build_assign_op",
  "callable",
  "camel_to_snake",
  "cast",
  "cauchy_function",
  "cauchy_new_state_fn",
  "check",
  "class0",
  "class1",
  "classmethod",
  "cls",
  "computation",
  "construct_monte_carlo_csiszar_f_divergence",
  "contextlib.contextmanager",
  "convolution_op",
  "cos",
  "coshe",
  "cov_step",
  "covariance_entry",
  "create_component",
  "create_distribution",
  "csiszar_function",
  "ctt",
  "d2f",
  "delattr",
  "df",
  "df_factor_fn",
  "dict",
  "distribution_cls",
  "distribution_cls.__init__.__doc__",
  "distribution_cls.__name__",
  "distribution_fn",
  "divergence_fn",
  "dtype",
  "dynamic_shape_fn",
  "entropy_alt",
  "enumerate",
  "eval_func",
  "exact_kl",
  "expected_log_prob",
  "f",
  "fake_distribution",
  "fdf",
  "fdf.num_calls",
  "filter_step",
  "float",
  "fn",
  "fn1",
  "fn2",
  "foo",
  "fun",
  "func",
  "func_estimate",
  "g",
  "generate_one",
  "get_dim_size",
  "get_fn",
  "get_half_cauchy_func",
  "get_results",
  "get_val_and_grad_fn",
  "getattr",
  "getter",
  "grad_and_hessian_loss_fn",
  "grad_fn",
  "grad_sum",
  "gradp",
  "gradq",
  "h",
  "half_normal_function",
  "hasattr",
  "hash",
  "id",
  "int",
  "interceptor",
  "is_diagonal",
  "is_last_day_of_season",
  "isinstance",
  "issubclass",
  "jacobian",
  "k",
  "kernel_initializer",
  "kernel_results_cls",
  "kl_fn",
  "layer",
  "layer.bias_posterior_tensor",
  "layer.get_losses_for",
  "layer.kernel_posterior_tensor",
  "layer.losses",
  "layer.losses.shape",
  "layer.seed",
  "layer_class",
  "layer_fn",
  "layer_one",
  "layer_two",
  "len",
  "list",
  "loc_fn",
  "loc_scale_fn",
  "locals",
  "log_gamma_log_prob",
  "log_joint",
  "log_joint_builtin",
  "log_joint_fn",
  "log_joint_scoped",
  "log_joint_transformed",
  "log_joint_wrapped",
  "log_prob",
  "log_rate_fn",
  "make_fn_slice",
  "make_kernel_fn",
  "make_trick_fun",
  "map",
  "max",
  "maybe_flatten",
  "maybe_stop",
  "mean_fn",
  "mean_step",
  "method",
  "min",
  "model",
  "model.log_prob",
  "monte_carlo_hypersphere_volume",
  "net",
  "np_f",
  "np_softmax",
  "numpy.abs",
  "numpy.all",
  "numpy.amax",
  "numpy.amin",
  "numpy.any",
  "numpy.arange",
  "numpy.arcsinh",
  "numpy.array",
  "numpy.array_equal",
  "numpy.asarray",
  "numpy.asscalar",
  "numpy.ceil",
  "numpy.complex64",
  "numpy.concatenate",
  "numpy.conj",
  "numpy.cos",
  "numpy.cosh",
  "numpy.count_nonzero",
  "numpy.cov",
  "numpy.cumsum",
  "numpy.diag",
  "numpy.diagonal",
  "numpy.diff",
  "numpy.divide",
  "numpy.dot",
  "numpy.e",
  "numpy.errstate",
  "numpy.euler_gamma",
  "numpy.exp",
  "numpy.expand_dims",
  "numpy.expm1",
  "numpy.eye",
  "numpy.fabs",
  "numpy.fill_diagonal",
  "numpy.finfo",
  "numpy.float128",
  "numpy.float16",
  "numpy.float16.get",
  "numpy.float32",
  "numpy.float32.get",
  "numpy.float64",
  "numpy.float64.get",
  "numpy.floor",
  "numpy.full",
  "numpy.generic",
  "numpy.histogram",
  "numpy.hstack",
  "numpy.iinfo",
  "numpy.inf",
  "numpy.int32",
  "numpy.int64",
  "numpy.isclose",
  "numpy.isfinite",
  "numpy.isinf",
  "numpy.isnan",
  "numpy.isneginf",
  "numpy.isposinf",
  "numpy.linalg.cholesky",
  "numpy.linalg.det",
  "numpy.linalg.inv",
  "numpy.linalg.norm",
  "numpy.linalg.qr",
  "numpy.linalg.solve",
  "numpy.linspace",
  "numpy.log",
  "numpy.log1p",
  "numpy.logaddexp",
  "numpy.logical_not",
  "numpy.logical_or",
  "numpy.logspace",
  "numpy.matmul",
  "numpy.matrix",
  "numpy.max",
  "numpy.maximum",
  "numpy.mean",
  "numpy.median",
  "numpy.meshgrid",
  "numpy.min",
  "numpy.minimum",
  "numpy.multiply",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.ndenumerate",
  "numpy.ndindex",
  "numpy.newaxis",
  "numpy.nextafter",
  "numpy.nonzero",
  "numpy.ones",
  "numpy.ones_like",
  "numpy.percentile",
  "numpy.pi",
  "numpy.power",
  "numpy.prod",
  "numpy.r_",
  "numpy.random.RandomState",
  "numpy.random.beta",
  "numpy.random.choice",
  "numpy.random.dirichlet",
  "numpy.random.gamma",
  "numpy.random.geometric",
  "numpy.random.normal",
  "numpy.random.rand",
  "numpy.random.randint",
  "numpy.random.randn",
  "numpy.random.random",
  "numpy.random.seed",
  "numpy.random.standard_normal",
  "numpy.random.uniform",
  "numpy.reshape",
  "numpy.roll",
  "numpy.rollaxis",
  "numpy.round",
  "numpy.sign",
  "numpy.sin",
  "numpy.sinh",
  "numpy.size",
  "numpy.sort",
  "numpy.sqrt",
  "numpy.square",
  "numpy.squeeze",
  "numpy.stack",
  "numpy.std",
  "numpy.sum",
  "numpy.swapaxes",
  "numpy.take",
  "numpy.tanh",
  "numpy.testing.assert_allclose",
  "numpy.testing.assert_array_less",
  "numpy.tile",
  "numpy.trace",
  "numpy.transpose",
  "numpy.tril",
  "numpy.triu",
  "numpy.triu_indices",
  "numpy.unique",
  "numpy.var",
  "numpy.vectorize",
  "numpy.where",
  "numpy.zeros",
  "numpy.zeros_like",
  "object",
  "one_step_fn",
  "op",
  "p_log_prob",
  "print",
  "property",
  "proposal_log_prob_fn",
  "psd",
  "quadrature_fn",
  "quantized_log_prob",
  "random_orthogonal_matrix",
  "random_with_shape",
  "range",
  "rastrigin",
  "raw_fn",
  "rejection_sample_with_gradient",
  "repr",
  "reversed",
  "rosenbrock",
  "rv_constructor",
  "sample_chain",
  "scale_fn",
  "scipy.fftpack.dct",
  "scipy.linalg.cholesky",
  "scipy.linalg.circulant",
  "scipy.linalg.solve_triangular",
  "scipy.special.expit",
  "scipy.special.gamma",
  "scipy.special.gammaln",
  "scipy.special.i0",
  "scipy.special.i1",
  "scipy.special.ive",
  "scipy.stats.binom.cdf",
  "scipy.stats.binom.mean",
  "scipy.stats.binom.pmf",
  "scipy.stats.binom.var",
  "scipy.stats.chi2.cdf",
  "scipy.stats.chi2.entropy",
  "scipy.stats.chi2.logpdf",
  "scipy.stats.chi2.mean",
  "scipy.stats.chi2.var",
  "scipy.stats.frechet_r",
  "scipy.stats.geom.cdf",
  "scipy.stats.geom.entropy",
  "scipy.stats.geom.logcdf",
  "scipy.stats.geom.logpmf",
  "scipy.stats.geom.mean",
  "scipy.stats.geom.std",
  "scipy.stats.geom.var",
  "scipy.stats.gumbel_r",
  "scipy.stats.gumbel_r.cdf",
  "scipy.stats.gumbel_r.logcdf",
  "scipy.stats.gumbel_r.logpdf",
  "scipy.stats.gumbel_r.mean",
  "scipy.stats.gumbel_r.pdf",
  "scipy.stats.gumbel_r.std",
  "scipy.stats.gumbel_r.var",
  "scipy.stats.halfcauchy.cdf",
  "scipy.stats.halfcauchy.entropy",
  "scipy.stats.halfcauchy.logcdf",
  "scipy.stats.halfcauchy.logpdf",
  "scipy.stats.halfcauchy.median",
  "scipy.stats.halfcauchy.pdf",
  "scipy.stats.halfcauchy.ppf",
  "scipy.stats.invgamma",
  "scipy.stats.invgamma.cdf",
  "scipy.stats.invgamma.entropy",
  "scipy.stats.invgamma.logpdf",
  "scipy.stats.invgamma.mean",
  "scipy.stats.invgamma.var",
  "scipy.stats.invgauss",
  "scipy.stats.ks_2samp",
  "scipy.stats.kstest",
  "scipy.stats.logistic.cdf",
  "scipy.stats.logistic.entropy",
  "scipy.stats.logistic.logcdf",
  "scipy.stats.logistic.logpdf",
  "scipy.stats.logistic.logsf",
  "scipy.stats.logistic.mean",
  "scipy.stats.logistic.sf",
  "scipy.stats.logistic.var",
  "scipy.stats.lognorm",
  "scipy.stats.lognorm.logpdf",
  "scipy.stats.multivariate_normal",
  "scipy.stats.nbinom.logcdf",
  "scipy.stats.nbinom.logpmf",
  "scipy.stats.nbinom.mean",
  "scipy.stats.nbinom.std",
  "scipy.stats.nbinom.var",
  "scipy.stats.norm",
  "scipy.stats.norm.cdf",
  "scipy.stats.norm.logpdf",
  "scipy.stats.pareto",
  "scipy.stats.poisson.cdf",
  "scipy.stats.poisson.logcdf",
  "scipy.stats.poisson.logpmf",
  "scipy.stats.poisson.mean",
  "scipy.stats.poisson.pmf",
  "scipy.stats.poisson.std",
  "scipy.stats.poisson.var",
  "scipy.stats.special_ortho_group.rvs",
  "scipy.stats.triang",
  "scipy.stats.uniform.cdf",
  "scipy.stats.vonmises.cdf",
  "scipy.stats.vonmises.entropy",
  "scipy.stats.vonmises.logpdf",
  "scipy.stats.vonmises.pdf",
  "scipy.stats.zipf.cdf",
  "scipy.stats.zipf.logcdf",
  "scipy.stats.zipf.logpmf",
  "scipy.stats.zipf.mean",
  "scipy.stats.zipf.pmf",
  "scipy.stats.zipf.std",
  "scipy.stats.zipf.var",
  "scipy_f",
  "seed",
  "seed_gen",
  "seed_stream",
  "sess_run_fn",
  "set",
  "sin",
  "sinhe",
  "slice",
  "sorted",
  "squared_frobenius_norm",
  "staticmethod",
  "stop",
  "str",
  "stream",
  "strm",
  "strm1",
  "strm2",
  "strm3",
  "sum",
  "super",
  "sys.modules",
  "t",
  "target_fn",
  "target_log_prob",
  "target_log_prob_fn",
  "tensorflow.GraphKeys.GLOBAL_VARIABLES",
  "tensorflow.GraphKeys.TRAINABLE_RESOURCE_VARIABLES",
  "tensorflow.contrib.eager.Variable",
  "tensorflow.contrib.eager.defun",
  "tensorflow.contrib.eager.enable_eager_execution",
  "tensorflow.contrib.eager.executing_eagerly",
  "tensorflow.contrib.eager.gradients_function",
  "tensorflow.contrib.eager.run_all_tests_in_graph_and_eager_modes",
  "tensorflow.contrib.eager.value_and_gradients_function",
  "tensorflow.contrib.framework.argsort",
  "tensorflow.contrib.framework.is_tensor",
  "tensorflow.contrib.framework.sort",
  "tensorflow.int64.max",
  "tensorflow.math.xlogy",
  "tensorflow.python.framework.ops.control_dependencies",
  "tensorflow.python.framework.ops.name_scope",
  "tensorflow.python.framework.tensor_shape.scalar",
  "tensorflow.python.framework.test_util.DiscreteScalarDistributionTestHelpers",
  "tensorflow.python.framework.test_util.VectorDistributionTestHelpers",
  "tensorflow.python.ops.array_ops.identity",
  "tensorflow.python.ops.array_ops.matrix_set_diag",
  "tensorflow.python.ops.array_ops.matrix_transpose",
  "tensorflow.python.ops.array_ops.ones",
  "tensorflow.python.ops.check_ops.assert_less",
  "tensorflow.python.ops.control_flow_ops.Assert",
  "tensorflow.python.ops.control_flow_ops.assert_equal",
  "tensorflow.python.ops.control_flow_ops.assert_has_rank",
  "tensorflow.python.ops.control_flow_ops.while_loop",
  "tensorflow.python.ops.control_flow_ops.with_dependencies",
  "tensorflow.python.ops.linalg_ops.matrix_determinant",
  "tensorflow.python.ops.nn_ops.Convolution",
  "tensorflow.python.platform.tf_logging.vlog",
  "tensorflow.python.platform.tf_logging.warning",
  "tensorflow.python.training.training_ops.apply_gradient_descent",
  "tensorflow.qint16.as_numpy_dtype",
  "tensorflow_probability.bijectors",
  "tensorflow_probability.bijectors.ConditionalBijector",
  "tensorflow_probability.bijectors.Softplus",
  "tensorflow_probability.distributions",
  "tensorflow_probability.distributions.Bernoulli",
  "tensorflow_probability.distributions.Bernoulli.__init__.__doc__",
  "tensorflow_probability.distributions.LinearGaussianStateSpaceModel",
  "tensorflow_probability.distributions.MultivariateNormalDiag",
  "tensorflow_probability.distributions.MultivariateNormalFullCovariance",
  "tensorflow_probability.distributions.Normal",
  "tensorflow_probability.distributions.TruncatedNormal",
  "tensorflow_probability.distributions.VonMisesFisher",
  "tensorflow_probability.distributions.Wishart",
  "tensorflow_probability.edward2.Bernoulli",
  "tensorflow_probability.edward2.Bernoulli.__doc__",
  "tensorflow_probability.edward2.Bernoulli.__name__",
  "tensorflow_probability.edward2.Dirichlet",
  "tensorflow_probability.edward2.Normal",
  "tensorflow_probability.edward2.Poisson",
  "tensorflow_probability.edward2.RandomVariable",
  "tensorflow_probability.edward2.as_random_variable",
  "tensorflow_probability.edward2.get_next_interceptor",
  "tensorflow_probability.edward2.interceptable",
  "tensorflow_probability.edward2.interception",
  "tensorflow_probability.edward2.make_log_joint_fn",
  "tensorflow_probability.edward2.tape",
  "tensorflow_probability.glm.Bernoulli",
  "tensorflow_probability.glm.BernoulliNormalCDF",
  "tensorflow_probability.glm.CustomExponentialFamily",
  "tensorflow_probability.glm.GammaExp",
  "tensorflow_probability.glm.GammaSoftplus",
  "tensorflow_probability.glm.LogNormal",
  "tensorflow_probability.glm.LogNormalSoftplus",
  "tensorflow_probability.glm.Normal",
  "tensorflow_probability.glm.NormalReciprocal",
  "tensorflow_probability.glm.Poisson",
  "tensorflow_probability.glm.PoissonSoftplus",
  "tensorflow_probability.glm.fit",
  "tensorflow_probability.glm.fit_sparse",
  "tensorflow_probability.glm.fit_sparse_one_step",
  "tensorflow_probability.layers.Convolution1DFlipout",
  "tensorflow_probability.layers.Convolution1DReparameterization",
  "tensorflow_probability.layers.Convolution2DFlipout",
  "tensorflow_probability.layers.Convolution2DReparameterization",
  "tensorflow_probability.layers.Convolution3DFlipout",
  "tensorflow_probability.layers.Convolution3DReparameterization",
  "tensorflow_probability.layers.DenseFlipout",
  "tensorflow_probability.layers.DenseLocalReparameterization",
  "tensorflow_probability.layers.DenseReparameterization",
  "tensorflow_probability.layers.default_mean_field_normal_fn",
  "tensorflow_probability.layers.default_multivariate_normal_fn",
  "tensorflow_probability.math.custom_gradient",
  "tensorflow_probability.math.diag_jacobian",
  "tensorflow_probability.math.random_rademacher",
  "tensorflow_probability.math.random_rayleigh",
  "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
  "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
  "tensorflow_probability.mcmc.MetropolisHastings",
  "tensorflow_probability.mcmc.RandomWalkMetropolis",
  "tensorflow_probability.mcmc.ReplicaExchangeMC",
  "tensorflow_probability.mcmc.SliceSampler",
  "tensorflow_probability.mcmc.TransformedTransitionKernel",
  "tensorflow_probability.mcmc.TransitionKernel",
  "tensorflow_probability.mcmc.UncalibratedHamiltonianMonteCarlo",
  "tensorflow_probability.mcmc.default_exchange_proposed_fn",
  "tensorflow_probability.mcmc.effective_sample_size",
  "tensorflow_probability.mcmc.make_simple_step_size_update_policy",
  "tensorflow_probability.mcmc.potential_scale_reduction",
  "tensorflow_probability.mcmc.random_walk_uniform_fn",
  "tensorflow_probability.mcmc.sample_annealed_importance_chain",
  "tensorflow_probability.mcmc.sample_chain",
  "tensorflow_probability.mcmc.sample_halton_sequence",
  "tensorflow_probability.monte_carlo.expectation",
  "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
  "tensorflow_probability.optimizer.VariationalSGD",
  "tensorflow_probability.optimizer.bfgs_minimize",
  "tensorflow_probability.optimizer.linesearch.hager_zhang",
  "tensorflow_probability.optimizer.nelder_mead_minimize",
  "tensorflow_probability.positive_semidefinite_kernels",
  "tensorflow_probability.positive_semidefinite_kernels.ExpSinSquared",
  "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
  "tensorflow_probability.positive_semidefinite_kernels.MaternFiveHalves",
  "tensorflow_probability.positive_semidefinite_kernels.MaternOneHalf",
  "tensorflow_probability.positive_semidefinite_kernels.MaternThreeHalves",
  "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic",
  "tensorflow_probability.python.bijectors.bijector._is_injective",
  "tensorflow_probability.python.bijectors.bijector.dtype",
  "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
  "tensorflow_probability.python.bijectors.bijector.graph_parents",
  "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims",
  "tensorflow_probability.python.bijectors.bijector.is_constant_jacobian",
  "tensorflow_probability.python.bijectors.bijector.name",
  "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
  "tensorflow_probability.python.distributions.batch_shape",
  "tensorflow_probability.python.distributions.batch_shape_tensor",
  "tensorflow_probability.python.distributions.beta.sample",
  "tensorflow_probability.python.distributions.chi2.sample",
  "tensorflow_probability.python.distributions.dirichlet.covariance",
  "tensorflow_probability.python.distributions.dirichlet.entropy",
  "tensorflow_probability.python.distributions.dirichlet.mean",
  "tensorflow_probability.python.distributions.dirichlet.mode",
  "tensorflow_probability.python.distributions.dirichlet.sample",
  "tensorflow_probability.python.distributions.distribution._graph_parents",
  "tensorflow_probability.python.distributions.distribution.batch_shape.ndims",
  "tensorflow_probability.python.distributions.distribution.batch_shape.num_elements",
  "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
  "tensorflow_probability.python.distributions.distribution.dtype",
  "tensorflow_probability.python.distributions.distribution.is_scalar_batch",
  "tensorflow_probability.python.distributions.distribution.is_scalar_event",
  "tensorflow_probability.python.distributions.distribution.name",
  "tensorflow_probability.python.distributions.distribution.parameters.values",
  "tensorflow_probability.python.distributions.distribution.reparameterization_type",
  "tensorflow_probability.python.distributions.exponential.cdf",
  "tensorflow_probability.python.distributions.exponential.entropy",
  "tensorflow_probability.python.distributions.exponential.log_prob",
  "tensorflow_probability.python.distributions.exponential.log_survival_function",
  "tensorflow_probability.python.distributions.exponential.mean",
  "tensorflow_probability.python.distributions.exponential.prob",
  "tensorflow_probability.python.distributions.exponential.sample",
  "tensorflow_probability.python.distributions.exponential.variance",
  "tensorflow_probability.python.distributions.gamma.batch_shape",
  "tensorflow_probability.python.distributions.gamma.batch_shape_tensor",
  "tensorflow_probability.python.distributions.gamma.cdf",
  "tensorflow_probability.python.distributions.gamma.entropy",
  "tensorflow_probability.python.distributions.gamma.event_shape",
  "tensorflow_probability.python.distributions.gamma.event_shape_tensor",
  "tensorflow_probability.python.distributions.gamma.log_prob",
  "tensorflow_probability.python.distributions.gamma.mean",
  "tensorflow_probability.python.distributions.gamma.mode",
  "tensorflow_probability.python.distributions.gamma.prob",
  "tensorflow_probability.python.distributions.gamma.sample",
  "tensorflow_probability.python.distributions.gamma.stddev",
  "tensorflow_probability.python.distributions.gamma.variance",
  "tensorflow_probability.python.distributions.laplace.batch_shape",
  "tensorflow_probability.python.distributions.laplace.batch_shape_tensor",
  "tensorflow_probability.python.distributions.laplace.cdf",
  "tensorflow_probability.python.distributions.laplace.entropy",
  "tensorflow_probability.python.distributions.laplace.event_shape",
  "tensorflow_probability.python.distributions.laplace.event_shape_tensor",
  "tensorflow_probability.python.distributions.laplace.log_cdf",
  "tensorflow_probability.python.distributions.laplace.log_prob",
  "tensorflow_probability.python.distributions.laplace.log_survival_function",
  "tensorflow_probability.python.distributions.laplace.mean",
  "tensorflow_probability.python.distributions.laplace.mode",
  "tensorflow_probability.python.distributions.laplace.prob",
  "tensorflow_probability.python.distributions.laplace.sample",
  "tensorflow_probability.python.distributions.laplace.stddev",
  "tensorflow_probability.python.distributions.laplace.variance",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.KalmanFilterState",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.kalman_transition",
  "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update",
  "tensorflow_probability.python.distributions.normal.Normal.param_shapes",
  "tensorflow_probability.python.distributions.normal.Normal.param_static_shapes",
  "tensorflow_probability.python.distributions.normal.batch_shape",
  "tensorflow_probability.python.distributions.normal.batch_shape_tensor",
  "tensorflow_probability.python.distributions.normal.cdf",
  "tensorflow_probability.python.distributions.normal.entropy",
  "tensorflow_probability.python.distributions.normal.event_shape",
  "tensorflow_probability.python.distributions.normal.event_shape_tensor",
  "tensorflow_probability.python.distributions.normal.log_cdf",
  "tensorflow_probability.python.distributions.normal.log_prob",
  "tensorflow_probability.python.distributions.normal.log_survival_function",
  "tensorflow_probability.python.distributions.normal.mean",
  "tensorflow_probability.python.distributions.normal.mode",
  "tensorflow_probability.python.distributions.normal.prob",
  "tensorflow_probability.python.distributions.normal.quantile",
  "tensorflow_probability.python.distributions.normal.sample",
  "tensorflow_probability.python.distributions.normal.stddev",
  "tensorflow_probability.python.distributions.normal.survival_function",
  "tensorflow_probability.python.distributions.normal.variance",
  "tensorflow_probability.python.distributions.uniform.batch_shape",
  "tensorflow_probability.python.distributions.uniform.batch_shape_tensor",
  "tensorflow_probability.python.distributions.uniform.cdf",
  "tensorflow_probability.python.distributions.uniform.entropy",
  "tensorflow_probability.python.distributions.uniform.event_shape",
  "tensorflow_probability.python.distributions.uniform.event_shape_tensor",
  "tensorflow_probability.python.distributions.uniform.high",
  "tensorflow_probability.python.distributions.uniform.log_cdf",
  "tensorflow_probability.python.distributions.uniform.log_prob",
  "tensorflow_probability.python.distributions.uniform.low",
  "tensorflow_probability.python.distributions.uniform.mean",
  "tensorflow_probability.python.distributions.uniform.prob",
  "tensorflow_probability.python.distributions.uniform.range",
  "tensorflow_probability.python.distributions.uniform.sample",
  "tensorflow_probability.python.distributions.uniform.stddev",
  "tensorflow_probability.python.distributions.uniform.variance",
  "tensorflow_probability.python.edward2.random_variable.RandomVariable",
  "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
  "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
  "tensorflow_probability.python.internal.distribution_util.assert_symmetric",
  "tensorflow_probability.python.internal.distribution_util.dimension_size",
  "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape",
  "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
  "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
  "tensorflow_probability.python.internal.distribution_util.fill_triangular",
  "tensorflow_probability.python.internal.distribution_util.fill_triangular_inverse",
  "tensorflow_probability.python.internal.distribution_util.gen_new_seed",
  "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
  "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
  "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale",
  "tensorflow_probability.python.internal.distribution_util.log_combinations",
  "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
  "tensorflow_probability.python.internal.distribution_util.make_tril_scale",
  "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
  "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
  "tensorflow_probability.python.internal.distribution_util.mixture_stddev",
  "tensorflow_probability.python.internal.distribution_util.move_dimension",
  "tensorflow_probability.python.internal.distribution_util.pad",
  "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
  "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments",
  "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition",
  "tensorflow_probability.python.internal.distribution_util.pick_vector",
  "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
  "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
  "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
  "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp",
  "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
  "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape",
  "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
  "tensorflow_probability.python.internal.distribution_util.softplus_inverse",
  "tensorflow_probability.python.internal.distribution_util.static_value",
  "tensorflow_probability.python.internal.distribution_util.tridiag",
  "tensorflow_probability.python.mcmc.diagnostic._reduce_variance",
  "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings",
  "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel",
  "tensorflow_probability.python.positive_semidefinite_kernels.util.pad_shape_right_with_ones",
  "tensorflow_probability.python.positive_semidefinite_kernels.util.sum_rightmost_ndims_preserving_shape",
  "tensorflow_probability.sts.Seasonal",
  "tensorflow_probability.sts.Sum",
  "tensorflow_probability.trainable_distributions.bernoulli",
  "tensorflow_probability.trainable_distributions.multivariate_normal_tril",
  "tensorflow_probability.trainable_distributions.normal",
  "tensorflow_probability.trainable_distributions.poisson",
  "tensorflow_probability.trainable_distributions.softplus_and_shift",
  "tensorflow_probability.trainable_distributions.tril_with_diag_softplus_and_shift",
  "tensorflow_probability.util.externalize_variables_as_args",
  "tensorflow_probability.vi.amari_alpha",
  "tensorflow_probability.vi.arithmetic_geometric",
  "tensorflow_probability.vi.chi_square",
  "tensorflow_probability.vi.csiszar_vimco",
  "tensorflow_probability.vi.csiszar_vimco_helper",
  "tensorflow_probability.vi.dual_csiszar_function",
  "tensorflow_probability.vi.jeffreys",
  "tensorflow_probability.vi.jensen_shannon",
  "tensorflow_probability.vi.kl_forward",
  "tensorflow_probability.vi.kl_reverse",
  "tensorflow_probability.vi.log1p_abs",
  "tensorflow_probability.vi.modified_gan",
  "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence",
  "tensorflow_probability.vi.pearson",
  "tensorflow_probability.vi.squared_hellinger",
  "tensorflow_probability.vi.symmetrized_csiszar_function",
  "tensorflow_probability.vi.t_power",
  "tensorflow_probability.vi.total_variation",
  "tensorflow_probability.vi.triangular",
  "tfp_f",
  "true_log_joint",
  "true_mvndiag_call_sample_n",
  "true_normal_call_sample_n",
  "tuple",
  "type",
  "unsupported_fn",
  "value_and_grad_fn",
  "var",
  "variance_entry",
  "which_clip",
  "which_maximum",
  "which_softmax",
  "wrap",
  "wrapped_fn",
  "zip"
 ],
 "deps": [
  [
   "absl-py-0.1.10-py_0",
   "absl-py-0.10.0-py36hc560c46_1",
   "absl-py-0.10.0-py37hc8dfbb8_1",
   "absl-py-0.10.0-pyhd8ed1ab_1",
   "absl-py-0.11.0-pyhd8ed1ab_0",
   "absl-py-0.2.2-py_0",
   "absl-py-0.3.0-py_0",
   "absl-py-0.4.0-py_0",
   "absl-py-0.4.1-py_0",
   "absl-py-0.5.0-py_0",
   "absl-py-0.6.1-py36_0",
   "absl-py-0.7.0-py36_1000",
   "absl-py-0.7.0-py37_1000",
   "absl-py-0.8.0-py27_0",
   "absl-py-0.9.0-py27h8c360ce_1"
  ],
  [
   "delta-0.4.2-py_0"
  ],
  [
   "events-0.3-py_0",
   "events-0.4-pyhd8ed1ab_0"
  ],
  [
   "numpy-1.10.4-py27_blas_openblas_200",
   "numpy-1.10.4-py27_blas_openblas_204",
   "numpy-1.10.4-py35_blas_openblas_203",
   "numpy-1.11.1-py27_blas_openblas_201",
   "numpy-1.11.2-py27_blas_openblas_201",
   "numpy-1.11.2-py35_blas_openblas_202",
   "numpy-1.11.3-py27_blas_openblas_201",
   "numpy-1.11.3-py27_blas_openblashd3ea46f_205",
   "numpy-1.11.3-py34_blas_openblas_200",
   "numpy-1.11.3-py35_blas_openblas_202",
   "numpy-1.11.3-py36h8b7e671_1206",
   "numpy-1.11.3-py36he5ce36f_1207",
   "numpy-1.12.1-py35_blas_openblas_201",
   "numpy-1.13.0-py34_blas_openblas_200",
   "numpy-1.13.2-py36_blas_openblas_200",
   "numpy-1.13.3-py27_blas_openblas_200",
   "numpy-1.13.3-py27_blas_openblash1522bff_1201",
   "numpy-1.13.3-py35_blas_openblas_200",
   "numpy-1.13.3-py35_blas_openblas_201",
   "numpy-1.13.3-py36_blas_openblash1522bff_1201",
   "numpy-1.13.3-py36_blas_openblashb06ca3d_201",
   "numpy-1.14.2-py27_blas_openblas_200",
   "numpy-1.14.5-py27_blas_openblashd3ea46f_200",
   "numpy-1.14.5-py35_blas_openblashd3ea46f_202",
   "numpy-1.14.5-py36_blas_openblashd3ea46f_202",
   "numpy-1.14.6-py27_blas_openblashb06ca3d_200",
   "numpy-1.14.6-py27he5ce36f_1201",
   "numpy-1.14.6-py37h95a1406_1201",
   "numpy-1.15.2-py27_blas_openblashb06ca3d_201",
   "numpy-1.15.2-py27_blas_openblashd3ea46f_1",
   "numpy-1.15.2-py35_blas_openblashd3ea46f_0",
   "numpy-1.15.2-py36_blas_openblashb06ca3d_201",
   "numpy-1.15.2-py36_blas_openblashd3ea46f_0",
   "numpy-1.15.2-py36_blas_openblashd3ea46f_1",
   "numpy-1.15.4-py27_blas_openblash1522bff_1000",
   "numpy-1.15.4-py27_blas_openblashb06ca3d_0",
   "numpy-1.15.4-py27h8b7e671_1001",
   "numpy-1.15.4-py27h8b7e671_1002",
   "numpy-1.15.4-py37_blas_openblashb06ca3d_0",
   "numpy-1.16.1-py37_blas_openblash1522bff_0",
   "numpy-1.16.2-py36h8b7e671_1",
   "numpy-1.16.4-py27h95a1406_0",
   "numpy-1.16.5-py27h95a1406_0",
   "numpy-1.16.6-py38h18fd61f_0",
   "numpy-1.17.1-py36h95a1406_0",
   "numpy-1.17.3-py37h95a1406_0",
   "numpy-1.17.5-py37h95a1406_0",
   "numpy-1.17.5-py38h18fd61f_1",
   "numpy-1.18.1-py37h8960a57_1",
   "numpy-1.18.4-py36h7314795_0",
   "numpy-1.18.4-py36he0f5f23_0",
   "numpy-1.19.0-py36he0f5f23_0",
   "numpy-1.19.1-py36h3849536_2",
   "numpy-1.19.1-py37h7ea13bd_2",
   "numpy-1.19.1-py37h8960a57_0",
   "numpy-1.19.2-py36h68c22af_1",
   "numpy-1.19.2-py37h7008fea_1",
   "numpy-1.19.2-py38hf89b668_1",
   "numpy-1.19.4-py37haa41c4c_2",
   "numpy-1.19.4-py38h18fd61f_2",
   "numpy-1.19.5-py36h2aa4a07_1",
   "numpy-1.19.5-py39hdbf815f_1",
   "numpy-1.8.2-py34_blas_openblas_201",
   "numpy-1.8.2-py35_blas_openblas_200",
   "numpy-1.8.2-py36_blas_openblas_201",
   "numpy-1.9.3-py27_blas_openblas_203",
   "numpy-1.9.3-py27_blas_openblash1522bff_1207",
   "numpy-1.9.3-py27_blas_openblashb06ca3d_207",
   "numpy-1.9.3-py27_blas_openblashb06ca3d_6",
   "numpy-1.9.3-py27_blas_openblashb06ca3d_7",
   "numpy-1.9.3-py27_blas_openblashd3ea46f_206",
   "numpy-1.9.3-py34_blas_openblas_200",
   "numpy-1.9.3-py36_blas_openblas_200",
   "numpy-1.9.3-py36_blas_openblash1522bff_1007",
   "numpy-1.9.3-py36_blas_openblashb06ca3d_6",
   "numpy-1.9.3-py36_blas_openblashb06ca3d_7",
   "numpy-1.9.3-py37_blas_openblash1522bff_1007",
   "numpy-1.9.3-py37_blas_openblashb06ca3d_207",
   "numpy-1.9.3-py37_blas_openblashb06ca3d_7"
  ],
  [
   "win-unicode-console-0.5-py27_0",
   "win_unicode_console-0.5-py37hc8dfbb8_1001"
  ],
  [
   "scipy-0.17.1-np110py27_blas_openblas_202",
   "scipy-0.17.1-np110py27_blas_openblas_203",
   "scipy-0.17.1-np110py34_blas_openblas_201",
   "scipy-0.17.1-np110py34_blas_openblas_204",
   "scipy-0.17.1-np110py34_blas_openblas_205",
   "scipy-0.17.1-np110py35_blas_openblas_200",
   "scipy-0.17.1-np111py34_blas_openblas_200",
   "scipy-0.17.1-np111py35_blas_openblas_202",
   "scipy-0.17.1-np111py35_blas_openblas_203",
   "scipy-0.18.0-np110py27_blas_openblas_200",
   "scipy-0.18.0-np110py34_blas_openblas_202",
   "scipy-0.18.0-np110py35_blas_openblas_201",
   "scipy-0.18.1-np110py27_blas_openblas_200",
   "scipy-0.18.1-np110py27_blas_openblas_201",
   "scipy-0.18.1-np111py34_blas_openblas_200",
   "scipy-0.19.0-np111py35_blas_openblas_200",
   "scipy-0.19.0-np112py36_blas_openblas_200",
   "scipy-0.19.0-np113py27_blas_openblas_202",
   "scipy-0.19.0-np113py35_blas_openblas_202",
   "scipy-0.19.1-np111py27_blas_openblas_200",
   "scipy-0.19.1-np113py27_blas_openblas_200",
   "scipy-0.19.1-py35_blas_openblas_201",
   "scipy-0.19.1-py36_blas_openblas_202",
   "scipy-1.0.1-py27_blas_openblas_200",
   "scipy-1.0.1-py36_blas_openblas_200",
   "scipy-1.1.0-py27_blas_openblas_200",
   "scipy-1.1.0-py35_blas_openblash7943236_201",
   "scipy-1.1.0-py36_blas_openblas_200",
   "scipy-1.2.0-py37_blas_openblash1522bff_1201",
   "scipy-1.2.1-py27h09a28d5_1",
   "scipy-1.2.1-py37_blas_openblash1522bff_0",
   "scipy-1.2.1-py37h09a28d5_1",
   "scipy-1.4.0-py36h921218d_0",
   "scipy-1.4.0-py37h921218d_0",
   "scipy-1.4.1-py36h832618f_2",
   "scipy-1.4.1-py38h921218d_0"
  ],
  [],
  [
   "tensorflow-probability-0.5.0-py_1"
  ]
 ]
}