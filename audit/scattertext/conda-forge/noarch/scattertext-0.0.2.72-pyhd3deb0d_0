{
 "bad": [
  "__future__.print_function",
  "_asian_tokenization",
  "_get_pos_tag",
  "_phrase_counts",
  "abc.ABC",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "argparse",
  "argparse.ArgumentParser",
  "assert_word_in_doc_cnt",
  "astropy.stats.RipleysKEstimator",
  "better_title",
  "bm25_score",
  "bz2",
  "bz2.decompress",
  "clean",
  "clean_function",
  "collections",
  "collections.Counter",
  "copy.copy",
  "dense_percentile",
  "dist",
  "empath",
  "empath.Empath",
  "find_ngrams",
  "flashtext.KeywordProcessor",
  "functools.partial",
  "functools.reduce",
  "future.utils.with_metaclass",
  "gen",
  "gensim",
  "gensim.models.Phrases",
  "gensim.models.doc2vec.TaggedDocument",
  "gensim.models.word2vec",
  "gensim.models.word2vec.Word2Vec",
  "get_docs_categories",
  "get_hamlet_term_doc_matrix",
  "get_speaker_name",
  "graphviz",
  "graphviz.Source",
  "idf",
  "io",
  "io.BytesIO",
  "io.StringIO",
  "itertools",
  "itertools.chain",
  "jelinek_mercer_smoothing",
  "jieba",
  "jieba.cut",
  "js_bool",
  "js_default_full_data",
  "js_default_string",
  "js_default_value",
  "js_default_value_to_null",
  "js_float",
  "js_int",
  "js_list_or_null",
  "json",
  "json.JSONEncoder",
  "json.dumps",
  "json.load",
  "json.loads",
  "length_adjusted_tf",
  "logging",
  "logging.info",
  "math",
  "matplotlib.pyplot",
  "matplotlib.pyplot.figure",
  "matplotlib.pyplot.gcf",
  "matplotlib.pyplot.show",
  "matplotlib.pyplot.subplots",
  "mock.Mock",
  "mpld3.fig_to_html",
  "mpld3.plugins",
  "mpld3.plugins.PointHTMLTooltip",
  "mpld3.plugins.connect",
  "nlp",
  "normal_apx",
  "numpy",
  "numpy.abs",
  "numpy.all",
  "numpy.apply_along_axis",
  "numpy.arange",
  "numpy.argsort",
  "numpy.argwhere",
  "numpy.array",
  "numpy.array_equal",
  "numpy.asarray",
  "numpy.asscalar",
  "numpy.bool",
  "numpy.ceil",
  "numpy.concatenate",
  "numpy.copy",
  "numpy.double",
  "numpy.float",
  "numpy.float32",
  "numpy.float64",
  "numpy.floating",
  "numpy.floor",
  "numpy.full",
  "numpy.histogram2d",
  "numpy.hstack",
  "numpy.int",
  "numpy.int32",
  "numpy.integer",
  "numpy.isfinite",
  "numpy.isin",
  "numpy.isinf",
  "numpy.isnan",
  "numpy.isneginf",
  "numpy.linalg.norm",
  "numpy.linspace",
  "numpy.log",
  "numpy.log10",
  "numpy.matmul",
  "numpy.matrix",
  "numpy.max",
  "numpy.mean",
  "numpy.min",
  "numpy.nan",
  "numpy.ndarray",
  "numpy.nonzero",
  "numpy.ones",
  "numpy.power",
  "numpy.product",
  "numpy.random.choice",
  "numpy.random.rand",
  "numpy.random.seed",
  "numpy.ravel",
  "numpy.round",
  "numpy.sqrt",
  "numpy.square",
  "numpy.stack",
  "numpy.std",
  "numpy.sum",
  "numpy.testing.assert_allclose",
  "numpy.testing.assert_almost_equal",
  "numpy.testing.assert_array_almost_equal",
  "numpy.testing.assert_array_equal",
  "numpy.testing.assert_equal",
  "numpy.trapz",
  "numpy.tril",
  "numpy.unique",
  "numpy.vstack",
  "numpy.where",
  "numpy.zeros",
  "os",
  "os.path.abspath",
  "os.path.dirname",
  "os.path.join",
  "pandas",
  "pandas.DataFrame",
  "pandas.DataFrame.from_records",
  "pandas.Series",
  "pandas.concat",
  "pandas.core.common.SettingWithCopyWarning",
  "pandas.merge",
  "pandas.np.array",
  "pandas.read_csv",
  "pandas.read_table",
  "pandas.testing.assert_frame_equal",
  "pandas.testing.assert_series_equal",
  "pkgutil",
  "pkgutil.get_data",
  "pos_ecdf",
  "positionify",
  "pprint.pprint",
  "pytextrank",
  "pytextrank.TextRank",
  "random",
  "random.seed",
  "re",
  "re.M",
  "re.MULTILINE",
  "re.compile",
  "re.finditer",
  "re.match",
  "re.split",
  "retopt",
  "ripley",
  "ripley.poisson",
  "ripley_estimator",
  "ripley_estimator.poisson",
  "scale_0_to_1",
  "scattertext.ScatterChart._add_term_freq_to_json_df",
  "scattertext.ScatterChart.to_dict",
  "scattertext.__init__.get_category_names",
  "scattertext.__init__.get_semiotic_square_html",
  "scattertext.__init__.get_term_scorer_scores",
  "scattertext.__init__.pick_color",
  "scattertext.__init__.produce_frequency_explorer",
  "scattertext.__init__.produce_pca_explorer",
  "scattertext.__init__.produce_scattertext_explorer",
  "scattertext.__init__.version",
  "scattertext.indexstore.IndexStoreFromDict.build",
  "scattertext.indexstore.IndexStoreFromList.build",
  "scattertext.termscoring.ScaledFScore.get_scores_for_category",
  "scipy",
  "scipy.sparse",
  "scipy.sparse.csgraph._traversal.connected_components",
  "scipy.sparse.csr_matrix",
  "scipy.sparse.hstack",
  "scipy.sparse.issparse",
  "scipy.sparse.lil_matrix",
  "scipy.sparse.linalg.lsqr",
  "scipy.sparse.vstack",
  "scipy.special.ndtr",
  "scipy.stats",
  "scipy.stats.beta",
  "scipy.stats.fisher_exact",
  "scipy.stats.hmean",
  "scipy.stats.mannwhitneyu",
  "scipy.stats.norm",
  "scipy.stats.norm.cdf",
  "scipy.stats.norm.isf",
  "scipy.stats.norm.ppf",
  "scipy.stats.norm.sf",
  "scipy.stats.pearsonr",
  "scipy.stats.rankdata",
  "scipy.stats.ranksums",
  "scipy.stats.t.sf",
  "sklearn.base.BaseEstimator",
  "sklearn.base.TransformerMixin",
  "sklearn.cross_validation.cross_val_predict",
  "sklearn.datasets.fetch_20newsgroups",
  "sklearn.decomposition.NMF",
  "sklearn.decomposition.PCA",
  "sklearn.decomposition.TruncatedSVD",
  "sklearn.feature_extraction.text.CountVectorizer",
  "sklearn.feature_extraction.text.ENGLISH_STOP_WORDS",
  "sklearn.feature_extraction.text.TfidfTransformer",
  "sklearn.linear_model.ElasticNet",
  "sklearn.linear_model.LassoCV",
  "sklearn.linear_model.LinearRegression",
  "sklearn.linear_model.LogisticRegression",
  "sklearn.linear_model.PassiveAggressiveClassifier",
  "sklearn.linear_model.RidgeClassifierCV",
  "sklearn.metrics.pairwise.cosine_distances",
  "sklearn.metrics.pairwise.cosine_similarity",
  "sklearn.model_selection.cross_val_predict",
  "sklearn.pipeline.Pipeline",
  "sklearn.preprocessing.RobustScaler",
  "sklearn.preprocessing.StandardScaler",
  "spacy",
  "spacy.load",
  "spacy.tokens.doc.Doc",
  "statsmodels.distributions.ECDF",
  "statsmodels.stats.multitest.multipletests",
  "str.lower",
  "string",
  "string.punctuation",
  "stringify",
  "sys",
  "sys.modules",
  "sys.stderr",
  "sys.version_info",
  "sys.version_info.major",
  "tinysegmenter",
  "tinysegmenter.TinySegmenter",
  "tinysegmenter.tinysegmenter.tokenize",
  "umap",
  "umap.UMAP",
  "unicode",
  "unittest.TestCase",
  "unittest.mock.Mock",
  "urllib.request.urlopen",
  "urllib2.urlopen",
  "warnings",
  "warnings.simplefilter",
  "warnings.warn"
 ],
 "deps": {
  "__future__": [],
  "_asian_tokenization": [],
  "_get_pos_tag": [],
  "_phrase_counts": [],
  "abc": [],
  "altair": [
   "altair/conda-forge/noarch/altair-4.1.0-py_1"
  ],
  "argparse": [],
  "assert_word_in_doc_cnt": [],
  "astropy": [],
  "better_title": [],
  "bm25_score": [],
  "bz2": [],
  "clean": [],
  "clean_function": [],
  "collections": [],
  "copy": [],
  "dense_percentile": [],
  "dist": [],
  "empath": [],
  "find_ngrams": [],
  "flashtext": [],
  "functools": [],
  "future": [],
  "gen": [],
  "gensim": [],
  "get_docs_categories": [],
  "get_hamlet_term_doc_matrix": [],
  "get_speaker_name": [],
  "graphviz": [],
  "idf": [],
  "io": [],
  "itertools": [],
  "jelinek_mercer_smoothing": [],
  "jieba": [],
  "js_bool": [],
  "js_default_full_data": [],
  "js_default_string": [],
  "js_default_value": [],
  "js_default_value_to_null": [],
  "js_float": [],
  "js_int": [],
  "js_list_or_null": [],
  "json": [],
  "length_adjusted_tf": [],
  "logging": [],
  "math": [],
  "matplotlib": [],
  "mock": [],
  "mpld3": [],
  "nlp": [],
  "normal_apx": [],
  "numpy": [],
  "os": [],
  "pandas": [],
  "pkgutil": [],
  "pos_ecdf": [],
  "positionify": [],
  "pprint": [],
  "pytextrank": [],
  "random": [],
  "re": [],
  "retopt": [],
  "ripley": [],
  "ripley_estimator": [],
  "scale_0_to_1": [],
  "scattertext": [],
  "scipy": [],
  "six": [
   "google-cloud-bigquery-storage-core/conda-forge/noarch/google-cloud-bigquery-storage-core-2.0.0-pyh9f0ad1d_1"
  ],
  "sklearn": [],
  "spacy": [],
  "statsmodels": [],
  "str": [],
  "string": [],
  "stringify": [],
  "sys": [],
  "tinysegmenter": [],
  "umap": [],
  "unicode": [],
  "unittest": [],
  "urllib": [],
  "urllib2": [],
  "warnings": []
 }
}