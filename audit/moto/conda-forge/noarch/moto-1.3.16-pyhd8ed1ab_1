{
 "bad": [
  "ConditionalOp",
  "OpClass",
  "_adjust",
  "_class",
  "_convert",
  "_convert_to_bytes",
  "_f",
  "_field_match",
  "_orig_get_adapter",
  "_parse_number_parameter",
  "abc.ABCMeta",
  "abc.abstractmethod",
  "account_attributes.AccountAttributes",
  "activity_task.ActivityTask",
  "activity_type.ActivityType",
  "aliases",
  "aliases.remove",
  "amazon_dev_pay.AmazonDevPay",
  "amis.AmisResponse",
  "argparse.ArgumentParser",
  "availability_zones_and_regions.AvailabilityZonesAndRegions",
  "aws_managed_policies.aws_managed_policies_data",
  "aws_xray_sdk.core.context.Context",
  "aws_xray_sdk.core.emitters.udp_emitter.UDPEmitter",
  "backend_app",
  "backend_app.add_url_rule",
  "backend_app.debug",
  "backend_app.service",
  "backend_app.test_client_class",
  "backend_app.url_map",
  "backend_app.url_map.converters",
  "backend_app.view_functions",
  "backports.tempfile.TemporaryDirectory",
  "base64.b64decode",
  "base64.b64encode",
  "base64.decodebytes",
  "base64.decodestring",
  "base64.encodebytes",
  "base64.encodestring",
  "base64.standard_b64decode",
  "binascii.crc32",
  "bisect.insort",
  "bisect.insort_left",
  "boto.cloudformation.stack.Output",
  "boto.ec2.blockdevicemapping.BlockDeviceMapping",
  "boto.ec2.blockdevicemapping.BlockDeviceType",
  "boto.ec2.elb.attributes.AccessLogAttribute",
  "boto.ec2.elb.attributes.ConnectionDrainingAttribute",
  "boto.ec2.elb.attributes.ConnectionSettingAttribute",
  "boto.ec2.elb.attributes.CrossZoneLoadBalancingAttribute",
  "boto.ec2.elb.attributes.LbAttributes",
  "boto.ec2.elb.policies.AppCookieStickinessPolicy",
  "boto.ec2.elb.policies.OtherPolicy",
  "boto.ec2.elb.policies.Policies",
  "boto.ec2.instance.Instance",
  "boto.ec2.instance.Instance.VALID_ATTRIBUTES",
  "boto.ec2.instance.Reservation",
  "boto.ec2.instancetype.InstanceType",
  "boto.ec2.launchspecification.LaunchSpecification",
  "boto.ec2.spotinstancerequest.SpotInstanceRequest",
  "boto.s3.key.Key.base_user_settable_fields",
  "boto3.Session",
  "boto3.client",
  "boto3.resource",
  "boto3.session.Session",
  "botocore.auth.S3SigV4Auth",
  "botocore.auth.SigV4Auth",
  "botocore.awsrequest.AWSPreparedRequest",
  "botocore.awsrequest.AWSRequest",
  "botocore.awsrequest.AWSResponse",
  "botocore.awsrequest.HTTPConnection",
  "botocore.awsrequest.HTTPConnectionPool.ConnectionCls",
  "botocore.awsrequest.HTTPSConnectionPool.ConnectionCls",
  "botocore.awsrequest.VerifiedHTTPSConnection",
  "botocore.client.ClientError",
  "botocore.config.Config",
  "botocore.credentials.Credentials",
  "botocore.exceptions.ClientError",
  "botocore.exceptions.ParamValidationError",
  "botocore.handlers.BUILTIN_HANDLERS.append",
  "builtins.str",
  "calendar.timegm",
  "cfnlint.core.configure_logging",
  "cfnlint.core.get_rules",
  "cfnlint.core.run_checks",
  "cfnlint.decode.decode",
  "cloud_formation.cfn_to_api_encryption",
  "cloud_formation.is_replacement_update",
  "codecs.getdecoder",
  "codecs.open",
  "collections.OrderedDict",
  "collections.defaultdict",
  "collections.deque",
  "collections.namedtuple",
  "comparison_func",
  "comparisons.get_comparison_func",
  "compat.BaseClass",
  "compat.BaseHTTPRequestHandler",
  "compat.ClassTypes",
  "compat.PY3",
  "compat.StringIO",
  "compat.StringIO.close",
  "compat.basestring",
  "compat.byte_type",
  "compat.parse_qs",
  "compat.quote",
  "compat.quote_plus",
  "compat.text_type",
  "compat.unquote_utf8",
  "compat.urlsplit",
  "compat.urlunsplit",
  "constants.DECISIONS_FIELDS.get",
  "contextlib.contextmanager",
  "conv",
  "copy.copy",
  "copy.deepcopy",
  "core.EmptyRequestHeaders",
  "core.httprettified",
  "core.httpretty",
  "core.httpretty.CONNECT",
  "core.httpretty.DELETE",
  "core.httpretty.GET",
  "core.httpretty.HEAD",
  "core.httpretty.OPTIONS",
  "core.httpretty.PATCH",
  "core.httpretty.POST",
  "core.httpretty.PUT",
  "core.httpretty.Response",
  "core.httpretty.disable",
  "core.httpretty.enable",
  "core.httpretty.is_enabled",
  "core.httpretty.last_request",
  "core.httpretty.last_request.headers",
  "core.httpretty.register_uri",
  "core.httpretty.reset",
  "core.models.base_decorator",
  "core.models.deprecated_base_decorator",
  "cryptography.hazmat.backends.default_backend",
  "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key",
  "cryptography.hazmat.primitives.ciphers.Cipher",
  "cryptography.hazmat.primitives.ciphers.algorithms.AES",
  "cryptography.hazmat.primitives.ciphers.modes.GCM",
  "cryptography.hazmat.primitives.hashes.SHA512",
  "cryptography.hazmat.primitives.serialization.Encoding.DER",
  "cryptography.hazmat.primitives.serialization.Encoding.PEM",
  "cryptography.hazmat.primitives.serialization.NoEncryption",
  "cryptography.hazmat.primitives.serialization.PrivateFormat.TraditionalOpenSSL",
  "cryptography.hazmat.primitives.serialization.PublicFormat.SubjectPublicKeyInfo",
  "cryptography.hazmat.primitives.serialization.load_pem_private_key",
  "cryptography.x509.load_pem_x509_certificate",
  "customer_gateways.CustomerGateways",
  "datetime.datetime",
  "datetime.datetime.fromtimestamp",
  "datetime.datetime.min",
  "datetime.datetime.now",
  "datetime.datetime.strftime",
  "datetime.datetime.strptime",
  "datetime.datetime.utcfromtimestamp",
  "datetime.datetime.utcnow",
  "datetime.strftime",
  "datetime.timedelta",
  "dateutil.parser.parse",
  "dateutil.tz.tzutc",
  "decimal.Decimal",
  "decision_task.DecisionTask",
  "decode_hex",
  "decorate_callable",
  "decorate_class",
  "dhcp_options.DHCPOptions",
  "dict.__contains__",
  "dict.__getitem__",
  "do_parse",
  "docker.__version__",
  "docker.errors.APIError",
  "docker.errors.DockerException",
  "docker.from_env",
  "docker.types.LogConfig",
  "docker.types.LogConfig.types.JSON",
  "docker.types.Mount",
  "domain.Domain",
  "elastic_block_store.ElasticBlockStore",
  "elastic_ip_addresses.ElasticIPAddresses",
  "elastic_network_interfaces.ElasticNetworkInterfaces",
  "elb.urls.api_version_elb_backend",
  "email.message_from_string",
  "email.utils.parseaddr",
  "enum.Enum",
  "enum.unique",
  "errno.EAGAIN",
  "errors.HTTPrettyError",
  "errors.UnmockedError",
  "events",
  "events.append",
  "exceptions.AWSError",
  "exceptions.AWSValidationException",
  "exceptions.AccessDeniedException",
  "exceptions.ActionTargetGroupNotFoundError",
  "exceptions.AlreadyExistsException",
  "exceptions.ApiKeyAlreadyExists",
  "exceptions.ApiKeyNotFoundException",
  "exceptions.AuthorizerNotFoundException",
  "exceptions.AutoscalingClientError",
  "exceptions.AwsProxyNotAllowed",
  "exceptions.BadHealthCheckDefinition",
  "exceptions.BadRequestException",
  "exceptions.BadSegmentException",
  "exceptions.BatchEntryIdsNotDistinct",
  "exceptions.BatchRequestTooLong",
  "exceptions.BucketAlreadyExists",
  "exceptions.CertificateStateException",
  "exceptions.CidrLimitExceeded",
  "exceptions.ClientError",
  "exceptions.ClientException",
  "exceptions.ClusterAlreadyExistsFaultError",
  "exceptions.ClusterNotFoundError",
  "exceptions.ClusterNotFoundException",
  "exceptions.ClusterParameterGroupNotFoundError",
  "exceptions.ClusterSecurityGroupNotFoundError",
  "exceptions.ClusterSnapshotAlreadyExistsError",
  "exceptions.ClusterSnapshotNotFoundError",
  "exceptions.ClusterSubnetGroupNotFoundError",
  "exceptions.ConfigurationSetDoesNotExist",
  "exceptions.ConflictException",
  "exceptions.CrossAccountNotAllowed",
  "exceptions.CrossLocationLoggingProhibitted",
  "exceptions.DBInstanceNotFoundError",
  "exceptions.DBParameterGroupNotFoundError",
  "exceptions.DBSecurityGroupNotFoundError",
  "exceptions.DBSnapshotAlreadyExistsError",
  "exceptions.DBSnapshotNotFoundError",
  "exceptions.DBSubnetGroupNotFoundError",
  "exceptions.DatabaseAlreadyExistsException",
  "exceptions.DatabaseNotFoundException",
  "exceptions.DeleteConflictException",
  "exceptions.DependencyViolationError",
  "exceptions.DocumentAlreadyExists",
  "exceptions.DomainNameNotFound",
  "exceptions.DuplicateDocumentContent",
  "exceptions.DuplicateDocumentVersionName",
  "exceptions.DuplicateListenerError",
  "exceptions.DuplicateLoadBalancerName",
  "exceptions.DuplicatePriorityError",
  "exceptions.DuplicateSnsEndpointError",
  "exceptions.DuplicateTagKeys",
  "exceptions.DuplicateTagKeysError",
  "exceptions.DuplicateTags",
  "exceptions.DuplicateTargetGroupName",
  "exceptions.EC2ClientError",
  "exceptions.EmptyBatchRequest",
  "exceptions.EmptyListenersError",
  "exceptions.EmrError",
  "exceptions.EntityAlreadyExists",
  "exceptions.EntityTooSmall",
  "exceptions.EventDestinationAlreadyExists",
  "exceptions.ExecutionAlreadyExists",
  "exceptions.ExecutionDoesNotExist",
  "exceptions.ExportNotFound",
  "exceptions.FilterNotImplementedError",
  "exceptions.GatewayNotAttachedError",
  "exceptions.GroupExistsException",
  "exceptions.IAMConflictException",
  "exceptions.IAMLimitExceededException",
  "exceptions.IAMNotFoundException",
  "exceptions.IAMReportNotPresentException",
  "exceptions.IllegalLocationConstraintException",
  "exceptions.IntegrationMethodNotDefined",
  "exceptions.InternalError",
  "exceptions.InternalFailure",
  "exceptions.InvalidAMIAttributeItemValueError",
  "exceptions.InvalidAMIIdError",
  "exceptions.InvalidActionTypeError",
  "exceptions.InvalidAddressError",
  "exceptions.InvalidAllocationIdError",
  "exceptions.InvalidArgumentError",
  "exceptions.InvalidArn",
  "exceptions.InvalidAssociationIdError",
  "exceptions.InvalidAttributeName",
  "exceptions.InvalidAvailabilityZoneError",
  "exceptions.InvalidBatchEntryId",
  "exceptions.InvalidBucketName",
  "exceptions.InvalidCIDRBlockParameterError",
  "exceptions.InvalidCIDRSubnetError",
  "exceptions.InvalidCiphertextException",
  "exceptions.InvalidConditionFieldError",
  "exceptions.InvalidConditionValueError",
  "exceptions.InvalidCustomerGatewayIdError",
  "exceptions.InvalidDBClusterStateFaultError",
  "exceptions.InvalidDBInstanceStateError",
  "exceptions.InvalidDHCPOptionsIdError",
  "exceptions.InvalidDescribeRulesRequest",
  "exceptions.InvalidDestinationCIDRBlockParameterError",
  "exceptions.InvalidDocument",
  "exceptions.InvalidDocumentContent",
  "exceptions.InvalidDocumentOperation",
  "exceptions.InvalidDocumentVersion",
  "exceptions.InvalidDomainError",
  "exceptions.InvalidDomainName",
  "exceptions.InvalidExecutionInput",
  "exceptions.InvalidFilterKey",
  "exceptions.InvalidFilterOption",
  "exceptions.InvalidFilterValue",
  "exceptions.InvalidHttpEndpoint",
  "exceptions.InvalidID",
  "exceptions.InvalidIndexNameError",
  "exceptions.InvalidInput",
  "exceptions.InvalidInstanceError",
  "exceptions.InvalidInstanceIdError",
  "exceptions.InvalidIntegrationArn",
  "exceptions.InvalidInternetGatewayIdError",
  "exceptions.InvalidKeyPairDuplicateError",
  "exceptions.InvalidKeyPairFormatError",
  "exceptions.InvalidKeyPairNameError",
  "exceptions.InvalidLaunchTemplateNameError",
  "exceptions.InvalidLoadBalancerActionException",
  "exceptions.InvalidModelName",
  "exceptions.InvalidModifyRuleArgumentsError",
  "exceptions.InvalidName",
  "exceptions.InvalidNetworkAclIdError",
  "exceptions.InvalidNetworkAttachmentIdError",
  "exceptions.InvalidNetworkInterfaceIdError",
  "exceptions.InvalidNotificationARN",
  "exceptions.InvalidNotificationDestination",
  "exceptions.InvalidNotificationEvent",
  "exceptions.InvalidParameterException",
  "exceptions.InvalidParameterValue",
  "exceptions.InvalidParameterValueError",
  "exceptions.InvalidParameterValueErrorTagNull",
  "exceptions.InvalidParameterValueErrorUnknownAttribute",
  "exceptions.InvalidParameterValueException",
  "exceptions.InvalidPart",
  "exceptions.InvalidPartOrder",
  "exceptions.InvalidPermissionDuplicateError",
  "exceptions.InvalidPermissionNotFoundError",
  "exceptions.InvalidPublicAccessBlockConfiguration",
  "exceptions.InvalidRepositoryNameException",
  "exceptions.InvalidRequest",
  "exceptions.InvalidRequestException",
  "exceptions.InvalidRequestInput",
  "exceptions.InvalidResourcePathException",
  "exceptions.InvalidRestApiId",
  "exceptions.InvalidRoleFormat",
  "exceptions.InvalidRoleFormat.pattern",
  "exceptions.InvalidRouteError",
  "exceptions.InvalidRouteTableIdError",
  "exceptions.InvalidSecurityGroupDuplicateError",
  "exceptions.InvalidSecurityGroupError",
  "exceptions.InvalidSecurityGroupNotFoundError",
  "exceptions.InvalidSnapshotIdError",
  "exceptions.InvalidStateTransitionException",
  "exceptions.InvalidStatusCodeActionTypeError",
  "exceptions.InvalidStorageClass",
  "exceptions.InvalidSubnetConflictError",
  "exceptions.InvalidSubnetError",
  "exceptions.InvalidSubnetIdError",
  "exceptions.InvalidSubnetRangeError",
  "exceptions.InvalidTagCharacters",
  "exceptions.InvalidTargetBucketForLogging",
  "exceptions.InvalidTargetError",
  "exceptions.InvalidTargetGroupNameError",
  "exceptions.InvalidVPCIdError",
  "exceptions.InvalidVPCPeeringConnectionIdError",
  "exceptions.InvalidVPCPeeringConnectionStateTransitionError",
  "exceptions.InvalidVPCRangeError",
  "exceptions.InvalidVolumeAttachmentError",
  "exceptions.InvalidVolumeDetachmentError",
  "exceptions.InvalidVolumeIdError",
  "exceptions.InvalidVpcCidrBlockAssociationIdError",
  "exceptions.InvalidVpnConnectionIdError",
  "exceptions.InvalidVpnGatewayIdError",
  "exceptions.ItemSizeTooLarge",
  "exceptions.ItemSizeTooLarge.item_size_too_large_msg",
  "exceptions.JsonRESTError",
  "exceptions.LimitExceededException",
  "exceptions.ListenerNotFoundError",
  "exceptions.LoadBalancerNotFoundError",
  "exceptions.MalformedACLError",
  "exceptions.MalformedAMIIdError",
  "exceptions.MalformedCertificate",
  "exceptions.MalformedDHCPOptionsIdError",
  "exceptions.MalformedXML",
  "exceptions.MessageAttributesInvalid",
  "exceptions.MessageNotInflight",
  "exceptions.MessageRejectedError",
  "exceptions.MissingBucket",
  "exceptions.MissingKey",
  "exceptions.MissingModel",
  "exceptions.MissingParameter",
  "exceptions.MissingParameterError",
  "exceptions.MockValidationException",
  "exceptions.ModelNotFound",
  "exceptions.MotoNotImplementedError",
  "exceptions.NetworkAclEntryAlreadyExistsError",
  "exceptions.NoIntegrationDefined",
  "exceptions.NoMethodDefined",
  "exceptions.NoSuchEntity",
  "exceptions.NoSuchPublicAccessBlockConfiguration",
  "exceptions.NoSuchUpload",
  "exceptions.NoSystemTags",
  "exceptions.NotAuthorizedError",
  "exceptions.NotAuthorizedException",
  "exceptions.NotFoundException",
  "exceptions.ObjectNotInActiveTierError",
  "exceptions.OperationNotPermitted",
  "exceptions.OperationNotPermitted2",
  "exceptions.OperationNotPermitted3",
  "exceptions.OptionGroupNotFoundFaultError",
  "exceptions.OverLimit",
  "exceptions.ParameterNotFound",
  "exceptions.ParameterVersionLabelLimitExceeded",
  "exceptions.ParameterVersionNotFound",
  "exceptions.PartitionAlreadyExistsException",
  "exceptions.PartitionNotFoundException",
  "exceptions.PriorityInUseError",
  "exceptions.QueueAlreadyExists",
  "exceptions.QueueDoesNotExist",
  "exceptions.RDSClientError",
  "exceptions.ReceiptHandleIsInvalid",
  "exceptions.RepositoryDoesNotExistException",
  "exceptions.RepositoryNameExistsException",
  "exceptions.ResourceAlreadyAssociatedError",
  "exceptions.ResourceAlreadyExistsException",
  "exceptions.ResourceContentionError",
  "exceptions.ResourceExistsException",
  "exceptions.ResourceInUseError",
  "exceptions.ResourceInUseException",
  "exceptions.ResourceLimitExceededException",
  "exceptions.ResourceNotFoundError",
  "exceptions.ResourceNotFoundException",
  "exceptions.ResourceNotFoundFaultError",
  "exceptions.RestAPINotFound",
  "exceptions.RoleNotSpecified",
  "exceptions.RuleAlreadyExists",
  "exceptions.RuleNotFoundError",
  "exceptions.RuleSetDoesNotExist",
  "exceptions.RuleSetNameAlreadyExists",
  "exceptions.RulesPerSecurityGroupLimitExceededError",
  "exceptions.S3ClientError",
  "exceptions.SNSInvalidParameter",
  "exceptions.SNSNotFoundError",
  "exceptions.STSValidationError",
  "exceptions.SWFDecisionValidationException",
  "exceptions.SWFDefaultUndefinedFault",
  "exceptions.SWFDomainAlreadyExistsFault",
  "exceptions.SWFDomainDeprecatedFault",
  "exceptions.SWFSerializationException",
  "exceptions.SWFTypeAlreadyExistsFault",
  "exceptions.SWFTypeDeprecatedFault",
  "exceptions.SWFUnknownResourceFault",
  "exceptions.SWFValidationException",
  "exceptions.SWFWorkflowExecutionAlreadyStartedFault",
  "exceptions.SWFWorkflowExecutionClosedError",
  "exceptions.SecretHasNoValueException",
  "exceptions.SecretNotFoundException",
  "exceptions.ServiceNotFoundException",
  "exceptions.ShardNotFoundError",
  "exceptions.SnapshotCopyAlreadyDisabledFaultError",
  "exceptions.SnapshotCopyAlreadyEnabledFaultError",
  "exceptions.SnapshotCopyDisabledFaultError",
  "exceptions.SnapshotCopyGrantAlreadyExistsFaultError",
  "exceptions.SnapshotCopyGrantNotFoundFaultError",
  "exceptions.SnapshotQuotaExceededError",
  "exceptions.SnsEndpointDisabled",
  "exceptions.StageNotFoundException",
  "exceptions.StateMachineDoesNotExist",
  "exceptions.StreamNotFoundError",
  "exceptions.SubnetNotFoundError",
  "exceptions.TableAlreadyExistsException",
  "exceptions.TableNotFoundException",
  "exceptions.TagKeyTooBig",
  "exceptions.TagLimitExceeded",
  "exceptions.TagLimitExceededError",
  "exceptions.TagValueTooBig",
  "exceptions.TargetGroupNotFoundError",
  "exceptions.TaskDefinitionNotFoundException",
  "exceptions.TaskSetNotFoundException",
  "exceptions.TemplateDoesNotExist",
  "exceptions.TemplateNameAlreadyExists",
  "exceptions.TooManyEntriesInBatchRequest",
  "exceptions.TooManyTags",
  "exceptions.TooManyTagsError",
  "exceptions.TransactionCanceledException",
  "exceptions.UnformattedGetAttTemplateException",
  "exceptions.UnformattedGetAttTemplateException.description.format",
  "exceptions.UsagePlanNotFoundException",
  "exceptions.UserNotConfirmedException",
  "exceptions.UserNotFoundError",
  "exceptions.UsernameExistsException",
  "exceptions.ValidationError",
  "exceptions.ValidationException",
  "exceptions.VersionConflictException",
  "exceptions.VersionNotFoundException",
  "exceptions.VolumeInUseError",
  "exceptions.WrongPublicAccessBlockAccountIdError",
  "expand",
  "expand_attrs",
  "f",
  "factory",
  "fail_schedule_activity_task",
  "feedback.BOUNCE",
  "feedback.COMMON_MAIL",
  "feedback.COMPLAINT",
  "feedback.DELIVERY",
  "filter_function",
  "flask.Flask",
  "flask.Response",
  "flask.render_template",
  "flask.request",
  "flask.request.headers",
  "flask.request.headers.items",
  "flask.request.method",
  "flask.request.url",
  "flask.testing.FlaskClient",
  "flatten_attrs",
  "fnmatch.fnmatch",
  "fnmatch.translate",
  "func",
  "func_elem_factory",
  "function",
  "functools.partial",
  "functools.update_wrapper",
  "functools.wraps",
  "general.General",
  "generic_type.GenericType",
  "get_ec2_keys",
  "get_ec2_tags",
  "get_ec2_values",
  "get_elbv2_tags",
  "get_index_and_direction_from_token",
  "get_kms_tags",
  "get_resource_types",
  "get_target_group_tags",
  "gzip.GzipFile",
  "handler",
  "hashlib.md5",
  "hashlib.sha256",
  "history_event.HistoryEvent",
  "hmac.new",
  "http.HttpBaseClass",
  "http.STATUSES",
  "http.last_requestline",
  "http.parse_requestline",
  "id.to_dict",
  "importlib.import_module",
  "importlib_resources.read_text",
  "input.encode",
  "inspect.getmembers",
  "inspect.getmro",
  "inspect.isclass",
  "inspect.isfunction",
  "inspect.ismethod",
  "inspect.stack",
  "inst_ref",
  "instances.InstanceResponse",
  "internet_gateways.InternetGateways",
  "io.BytesIO",
  "io.StringIO",
  "io.open",
  "ip_addresses.IPAddresses",
  "ipaddress.IPv4Network",
  "ipaddress.ip_address",
  "ipaddress.ip_network",
  "is_tracked",
  "itertools.chain",
  "itertools.chain.from_iterable",
  "itertools.cycle",
  "itertools.islice",
  "itertools.tee",
  "jinja2.DictLoader",
  "jinja2.Environment",
  "jinja2.Template",
  "jinja2.TemplateNotFound",
  "jose.jws.sign",
  "json.JSONEncoder",
  "json.decoder.JSONDecodeError",
  "json.dumps",
  "json.get",
  "json.load",
  "json.loads",
  "jsondiff.diff",
  "key_pairs.KeyPairs",
  "launch_templates.LaunchTemplates",
  "list_secrets.filters.all",
  "list_secrets.filters.description",
  "list_secrets.filters.name",
  "list_secrets.filters.tag_key",
  "list_secrets.filters.tag_value",
  "logging.debug",
  "logging.getLogger",
  "make_int",
  "method",
  "mock.patch",
  "mock.patch.dict",
  "mocked_backend",
  "models.AWSError",
  "models.AWSValidationException",
  "models.DEFAULT_REGISTRY_ID",
  "models.FakeAcl",
  "models.FakeGrant",
  "models.FakeGrantee",
  "models.FakeKey",
  "models.Policy",
  "models.ScalableDimensionValueSet",
  "models.ServiceNamespaceValueSet",
  "models.User",
  "models.UserStatus",
  "models.acm_backends",
  "models.apigateway_backends",
  "models.applicationautoscaling_backends",
  "models.athena_backends",
  "models.autoscaling_backends",
  "models.batch_backends",
  "models.cloudformation_backends",
  "models.cloudwatch_backends",
  "models.codecommit_backends",
  "models.codepipeline_backends",
  "models.cognitoidentity_backends",
  "models.cognitoidentity_backends.create_identity_pool",
  "models.cognitoidentity_backends.describe_identity_pool",
  "models.cognitoidentity_backends.get_credentials_for_identity",
  "models.cognitoidentity_backends.get_id",
  "models.cognitoidentity_backends.get_open_id_token",
  "models.cognitoidentity_backends.get_open_id_token_for_developer_identity",
  "models.cognitoidp_backends",
  "models.cognitoidp_backends.admin_add_user_to_group",
  "models.cognitoidp_backends.admin_create_user",
  "models.cognitoidp_backends.admin_delete_user",
  "models.cognitoidp_backends.admin_disable_user",
  "models.cognitoidp_backends.admin_enable_user",
  "models.cognitoidp_backends.admin_get_user",
  "models.cognitoidp_backends.admin_initiate_auth",
  "models.cognitoidp_backends.admin_list_groups_for_user",
  "models.cognitoidp_backends.admin_remove_user_from_group",
  "models.cognitoidp_backends.admin_update_user_attributes",
  "models.cognitoidp_backends.associate_software_token",
  "models.cognitoidp_backends.change_password",
  "models.cognitoidp_backends.confirm_forgot_password",
  "models.cognitoidp_backends.confirm_sign_up",
  "models.cognitoidp_backends.create_group",
  "models.cognitoidp_backends.create_identity_provider",
  "models.cognitoidp_backends.create_resource_server",
  "models.cognitoidp_backends.create_user_pool",
  "models.cognitoidp_backends.create_user_pool_client",
  "models.cognitoidp_backends.create_user_pool_domain",
  "models.cognitoidp_backends.delete_group",
  "models.cognitoidp_backends.delete_identity_provider",
  "models.cognitoidp_backends.delete_user_pool",
  "models.cognitoidp_backends.delete_user_pool_client",
  "models.cognitoidp_backends.delete_user_pool_domain",
  "models.cognitoidp_backends.describe_identity_provider",
  "models.cognitoidp_backends.describe_user_pool",
  "models.cognitoidp_backends.describe_user_pool_client",
  "models.cognitoidp_backends.describe_user_pool_domain",
  "models.cognitoidp_backends.get_group",
  "models.cognitoidp_backends.initiate_auth",
  "models.cognitoidp_backends.list_groups",
  "models.cognitoidp_backends.list_identity_providers",
  "models.cognitoidp_backends.list_user_pool_clients",
  "models.cognitoidp_backends.list_user_pools",
  "models.cognitoidp_backends.list_users",
  "models.cognitoidp_backends.list_users_in_group",
  "models.cognitoidp_backends.respond_to_auth_challenge",
  "models.cognitoidp_backends.set_user_mfa_preference",
  "models.cognitoidp_backends.sign_up",
  "models.cognitoidp_backends.update_identity_provider",
  "models.cognitoidp_backends.update_user_pool_client",
  "models.cognitoidp_backends.update_user_pool_domain",
  "models.cognitoidp_backends.verify_software_token",
  "models.config_backends",
  "models.datapipeline_backends",
  "models.datasync_backends",
  "models.dynamo_json_dump",
  "models.dynamodb_backend",
  "models.dynamodb_backend.create_table",
  "models.dynamodb_backend.decorator",
  "models.dynamodb_backend.delete_item",
  "models.dynamodb_backend.delete_table",
  "models.dynamodb_backend.deprecated_decorator",
  "models.dynamodb_backend.get_item",
  "models.dynamodb_backend.put_item",
  "models.dynamodb_backend.query",
  "models.dynamodb_backend.scan",
  "models.dynamodb_backend.tables",
  "models.dynamodb_backend.tables.keys",
  "models.dynamodb_backend.update_table_throughput",
  "models.dynamodbstreams_backends",
  "models.eb_backends",
  "models.ec2_backends",
  "models.ec2instanceconnect_backends",
  "models.ecr_backends",
  "models.ecs_backends",
  "models.elb_backends",
  "models.elbv2_backends",
  "models.emr_backends",
  "models.events_backends",
  "models.filter_keys",
  "models.find_region_by_value",
  "models.get_canned_acl",
  "models.glacier_backends",
  "models.glue_backend",
  "models.glue_backend.decorator",
  "models.iam_backend",
  "models.iam_backend.add_role_to_instance_profile",
  "models.iam_backend.add_user_to_group",
  "models.iam_backend.attach_group_policy",
  "models.iam_backend.attach_role_policy",
  "models.iam_backend.attach_user_policy",
  "models.iam_backend.create_access_key",
  "models.iam_backend.create_account_alias",
  "models.iam_backend.create_group",
  "models.iam_backend.create_instance_profile",
  "models.iam_backend.create_login_profile",
  "models.iam_backend.create_open_id_connect_provider",
  "models.iam_backend.create_policy",
  "models.iam_backend.create_policy_version",
  "models.iam_backend.create_role",
  "models.iam_backend.create_saml_provider",
  "models.iam_backend.create_user",
  "models.iam_backend.create_virtual_mfa_device",
  "models.iam_backend.deactivate_mfa_device",
  "models.iam_backend.decorator",
  "models.iam_backend.delete_access_key",
  "models.iam_backend.delete_account_alias",
  "models.iam_backend.delete_account_password_policy",
  "models.iam_backend.delete_group",
  "models.iam_backend.delete_instance_profile",
  "models.iam_backend.delete_login_profile",
  "models.iam_backend.delete_open_id_connect_provider",
  "models.iam_backend.delete_policy",
  "models.iam_backend.delete_policy_version",
  "models.iam_backend.delete_role",
  "models.iam_backend.delete_role_policy",
  "models.iam_backend.delete_saml_provider",
  "models.iam_backend.delete_server_certificate",
  "models.iam_backend.delete_signing_certificate",
  "models.iam_backend.delete_ssh_public_key",
  "models.iam_backend.delete_user",
  "models.iam_backend.delete_user_policy",
  "models.iam_backend.delete_virtual_mfa_device",
  "models.iam_backend.deprecated_decorator",
  "models.iam_backend.detach_group_policy",
  "models.iam_backend.detach_role_policy",
  "models.iam_backend.detach_user_policy",
  "models.iam_backend.enable_mfa_device",
  "models.iam_backend.generate_report",
  "models.iam_backend.get_access_key_last_used",
  "models.iam_backend.get_account_authorization_details",
  "models.iam_backend.get_account_password_policy",
  "models.iam_backend.get_account_summary",
  "models.iam_backend.get_all_access_keys",
  "models.iam_backend.get_all_server_certs",
  "models.iam_backend.get_all_ssh_public_keys",
  "models.iam_backend.get_credential_report",
  "models.iam_backend.get_group",
  "models.iam_backend.get_group_policy",
  "models.iam_backend.get_groups_for_user",
  "models.iam_backend.get_instance_profile",
  "models.iam_backend.get_instance_profiles",
  "models.iam_backend.get_instance_profiles_for_role",
  "models.iam_backend.get_login_profile",
  "models.iam_backend.get_open_id_connect_provider",
  "models.iam_backend.get_policy",
  "models.iam_backend.get_policy_version",
  "models.iam_backend.get_role",
  "models.iam_backend.get_role_policy",
  "models.iam_backend.get_roles",
  "models.iam_backend.get_saml_provider",
  "models.iam_backend.get_server_certificate",
  "models.iam_backend.get_ssh_public_key",
  "models.iam_backend.get_user",
  "models.iam_backend.get_user_from_access_key_id",
  "models.iam_backend.get_user_policy",
  "models.iam_backend.list_account_aliases",
  "models.iam_backend.list_attached_group_policies",
  "models.iam_backend.list_attached_role_policies",
  "models.iam_backend.list_attached_user_policies",
  "models.iam_backend.list_group_policies",
  "models.iam_backend.list_groups",
  "models.iam_backend.list_mfa_devices",
  "models.iam_backend.list_open_id_connect_providers",
  "models.iam_backend.list_policies",
  "models.iam_backend.list_policy_versions",
  "models.iam_backend.list_role_policies",
  "models.iam_backend.list_role_tags",
  "models.iam_backend.list_roles",
  "models.iam_backend.list_saml_providers",
  "models.iam_backend.list_signing_certificates",
  "models.iam_backend.list_user_policies",
  "models.iam_backend.list_user_tags",
  "models.iam_backend.list_users",
  "models.iam_backend.list_virtual_mfa_devices",
  "models.iam_backend.put_group_policy",
  "models.iam_backend.put_role_policy",
  "models.iam_backend.put_user_policy",
  "models.iam_backend.remove_role_from_instance_profile",
  "models.iam_backend.remove_user_from_group",
  "models.iam_backend.report_generated",
  "models.iam_backend.tag_role",
  "models.iam_backend.untag_role",
  "models.iam_backend.update_access_key",
  "models.iam_backend.update_account_password_policy",
  "models.iam_backend.update_login_profile",
  "models.iam_backend.update_role",
  "models.iam_backend.update_role_description",
  "models.iam_backend.update_saml_provider",
  "models.iam_backend.update_signing_certificate",
  "models.iam_backend.update_ssh_public_key",
  "models.iam_backend.update_user",
  "models.iam_backend.upload_server_certificate",
  "models.iam_backend.upload_signing_certificate",
  "models.iam_backend.upload_ssh_public_key",
  "models.instance_metadata_backend",
  "models.iot_backends",
  "models.iotdata_backends",
  "models.kinesis_backends",
  "models.kinesisvideo_backends",
  "models.kinesisvideoarchivedmedia_backends",
  "models.kms_backends",
  "models.lambda_backends",
  "models.logs_backends",
  "models.managedblockchain_backends",
  "models.moto_api_backend",
  "models.moto_api_backend.reset",
  "models.opsworks_backends",
  "models.organizations_backend",
  "models.polly_backends",
  "models.ram_backends",
  "models.rds2_backends",
  "models.rds_backends",
  "models.redshift_backends",
  "models.resourcegroups_backends",
  "models.resourcegroupstaggingapi_backends",
  "models.route53_backend",
  "models.route53_backend.change_tags_for_resource",
  "models.route53_backend.create_health_check",
  "models.route53_backend.create_hosted_zone",
  "models.route53_backend.decorator",
  "models.route53_backend.delete_health_check",
  "models.route53_backend.delete_hosted_zone",
  "models.route53_backend.deprecated_decorator",
  "models.route53_backend.get_all_hosted_zones",
  "models.route53_backend.get_health_checks",
  "models.route53_backend.get_hosted_zone",
  "models.route53_backend.list_tags_for_resource",
  "models.s3_backend",
  "models.s3_backend.decorator",
  "models.s3_backend.deprecated_decorator",
  "models.sagemaker_backends",
  "models.secretsmanager_backends",
  "models.secretsmanager_backends.create_secret",
  "models.secretsmanager_backends.delete_secret",
  "models.secretsmanager_backends.describe_secret",
  "models.secretsmanager_backends.get_random_password",
  "models.secretsmanager_backends.get_resource_policy",
  "models.secretsmanager_backends.get_secret_value",
  "models.secretsmanager_backends.list_secret_version_ids",
  "models.secretsmanager_backends.list_secrets",
  "models.secretsmanager_backends.put_secret_value",
  "models.secretsmanager_backends.restore_secret",
  "models.secretsmanager_backends.rotate_secret",
  "models.secretsmanager_backends.update_secret",
  "models.ses_backend",
  "models.ses_backend.add_template",
  "models.ses_backend.create_configuration_set",
  "models.ses_backend.create_configuration_set_event_destination",
  "models.ses_backend.create_receipt_rule",
  "models.ses_backend.create_receipt_rule_set",
  "models.ses_backend.decorator",
  "models.ses_backend.delete_identity",
  "models.ses_backend.deprecated_decorator",
  "models.ses_backend.get_send_quota",
  "models.ses_backend.get_send_statistics",
  "models.ses_backend.get_template",
  "models.ses_backend.list_identities",
  "models.ses_backend.list_templates",
  "models.ses_backend.list_verified_email_addresses",
  "models.ses_backend.send_email",
  "models.ses_backend.send_raw_email",
  "models.ses_backend.send_templated_email",
  "models.ses_backend.set_identity_notification_topic",
  "models.ses_backend.verify_domain",
  "models.ses_backend.verify_email_address",
  "models.ses_backend.verify_email_identity",
  "models.sns_backends",
  "models.sqs_backends",
  "models.ssm_backends",
  "models.stepfunction_backends",
  "models.sts_backend",
  "models.sts_backend.assume_role",
  "models.sts_backend.assume_role_with_saml",
  "models.sts_backend.assume_role_with_web_identity",
  "models.sts_backend.decorator",
  "models.sts_backend.deprecated_decorator",
  "models.sts_backend.get_assumed_role_from_access_key",
  "models.sts_backend.get_federation_token",
  "models.sts_backend.get_session_token",
  "models.swf_backends",
  "models.xray_backends",
  "monitoring.Monitoring",
  "moto.acm.models.AWSCertificateManagerBackend",
  "moto.acm.models.AWSError",
  "moto.acm.models.AWSResourceNotFoundException",
  "moto.acm.models.AWSValidationException",
  "moto.acm.models.CertBundle",
  "moto.acm.models.GOOGLE_ROOT_CA",
  "moto.acm.models.acm_backends",
  "moto.acm.models.datetime_to_epoch",
  "moto.apigateway.exceptions.ApiKeyAlreadyExists",
  "moto.apigateway.exceptions.ApiKeyNotFoundException",
  "moto.apigateway.exceptions.AuthorizerNotFoundException",
  "moto.apigateway.exceptions.AwsProxyNotAllowed",
  "moto.apigateway.exceptions.BadRequestException",
  "moto.apigateway.exceptions.CrossAccountNotAllowed",
  "moto.apigateway.exceptions.DomainNameNotFound",
  "moto.apigateway.exceptions.IntegrationMethodNotDefined",
  "moto.apigateway.exceptions.InvalidArn",
  "moto.apigateway.exceptions.InvalidDomainName",
  "moto.apigateway.exceptions.InvalidHttpEndpoint",
  "moto.apigateway.exceptions.InvalidIntegrationArn",
  "moto.apigateway.exceptions.InvalidModelName",
  "moto.apigateway.exceptions.InvalidRequestInput",
  "moto.apigateway.exceptions.InvalidResourcePathException",
  "moto.apigateway.exceptions.InvalidRestApiId",
  "moto.apigateway.exceptions.ModelNotFound",
  "moto.apigateway.exceptions.NoIntegrationDefined",
  "moto.apigateway.exceptions.NoMethodDefined",
  "moto.apigateway.exceptions.RestAPINotFound",
  "moto.apigateway.exceptions.RoleNotSpecified",
  "moto.apigateway.exceptions.StageNotFoundException",
  "moto.apigateway.exceptions.UsagePlanNotFoundException",
  "moto.apigateway.models.APIGatewayBackend",
  "moto.apigateway.models.ApiKey",
  "moto.apigateway.models.Authorizer",
  "moto.apigateway.models.Deployment",
  "moto.apigateway.models.DomainName",
  "moto.apigateway.models.Integration",
  "moto.apigateway.models.IntegrationResponse",
  "moto.apigateway.models.Method",
  "moto.apigateway.models.MethodResponse",
  "moto.apigateway.models.Model",
  "moto.apigateway.models.Resource",
  "moto.apigateway.models.RestAPI",
  "moto.apigateway.models.STAGE_URL",
  "moto.apigateway.models.Stage",
  "moto.apigateway.models.UsagePlan",
  "moto.apigateway.models.UsagePlanKey",
  "moto.apigateway.models.apigateway_backends",
  "moto.apigateway.models.requests",
  "moto.apigateway.responses.API_KEY_SOURCES",
  "moto.apigateway.responses.AUTHORIZER_TYPES",
  "moto.apigateway.responses.ENDPOINT_CONFIGURATION_TYPES",
  "moto.applicationautoscaling.exceptions.AWSError",
  "moto.applicationautoscaling.models.ApplicationAutoscalingBackend",
  "moto.applicationautoscaling.models.FakeScalableTarget",
  "moto.applicationautoscaling.models.ScalableDimensionValueSet",
  "moto.applicationautoscaling.models.ServiceNamespaceValueSet",
  "moto.applicationautoscaling.models._target_params_are_valid",
  "moto.applicationautoscaling.models.applicationautoscaling_backends",
  "moto.applicationautoscaling.responses._build_target",
  "moto.athena.exceptions.AthenaClientError",
  "moto.athena.models.AthenaBackend",
  "moto.athena.models.Execution",
  "moto.athena.models.NamedQuery",
  "moto.athena.models.TaggableResourceMixin",
  "moto.athena.models.WorkGroup",
  "moto.athena.models.athena_backends",
  "moto.autoscaling.autoscaling_backends.notify_terminate_instances",
  "moto.autoscaling.exceptions.AutoscalingClientError",
  "moto.autoscaling.exceptions.InvalidInstanceError",
  "moto.autoscaling.exceptions.ResourceContentionError",
  "moto.autoscaling.exceptions.ValidationError",
  "moto.autoscaling.models.ASG_NAME_TAG",
  "moto.autoscaling.models.AutoScalingBackend",
  "moto.autoscaling.models.DEFAULT_COOLDOWN",
  "moto.autoscaling.models.FakeAutoScalingGroup",
  "moto.autoscaling.models.FakeLaunchConfiguration",
  "moto.autoscaling.models.FakeScalingPolicy",
  "moto.autoscaling.models.InstanceState",
  "moto.autoscaling.models.autoscaling_backends",
  "moto.awslambda.exceptions.CrossAccountNotAllowed",
  "moto.awslambda.exceptions.InvalidParameterValueException",
  "moto.awslambda.exceptions.InvalidRoleFormat",
  "moto.awslambda.exceptions.LambdaClientError",
  "moto.awslambda.exceptions.PreconditionFailedException",
  "moto.awslambda.lambda_backends.get_function",
  "moto.awslambda.lambda_backends.send_dynamodb_items",
  "moto.awslambda.lambda_backends.send_log_event",
  "moto.awslambda.lambda_backends.send_sns_message",
  "moto.awslambda.lambda_backends.send_sqs_batch",
  "moto.awslambda.models.EventSourceMapping",
  "moto.awslambda.models.LambdaBackend",
  "moto.awslambda.models.LambdaFunction",
  "moto.awslambda.models.LambdaStorage",
  "moto.awslambda.models.LambdaVersion",
  "moto.awslambda.models._DockerDataVolumeContext",
  "moto.awslambda.models._VolumeRefCount",
  "moto.awslambda.models._orig_adapter_send",
  "moto.awslambda.models.do_validate_s3",
  "moto.awslambda.models.docker_3",
  "moto.awslambda.models.lambda_backends",
  "moto.awslambda.models.uuid",
  "moto.awslambda.models.zip2tar",
  "moto.awslambda.policy.Policy",
  "moto.awslambda.urls.response",
  "moto.awslambda.utils.ARN",
  "moto.awslambda.utils.make_function_arn",
  "moto.backends.BACKENDS",
  "moto.backends._import_backend",
  "moto.backends.backends",
  "moto.backends.get_backend",
  "moto.backends.named_backends",
  "moto.backends.search_backend",
  "moto.batch.exceptions.AWSError",
  "moto.batch.models.BatchBackend",
  "moto.batch.models.COMPUTE_ENVIRONMENT_NAME_REGEX",
  "moto.batch.models.ComputeEnvironment",
  "moto.batch.models.Job",
  "moto.batch.models.JobDefinition",
  "moto.batch.models.JobQueue",
  "moto.batch.models._orig_adapter_send",
  "moto.batch.models.batch_backends",
  "moto.batch.models.datetime2int",
  "moto.batch.models.logger",
  "moto.cloudformation.cloudformation_backends",
  "moto.cloudformation.exceptions.ExportNotFound",
  "moto.cloudformation.exceptions.MissingParameterError",
  "moto.cloudformation.exceptions.UnformattedGetAttTemplateException",
  "moto.cloudformation.exceptions.ValidationError",
  "moto.cloudformation.models.CloudFormationBackend",
  "moto.cloudformation.models.FakeChange",
  "moto.cloudformation.models.FakeChangeSet",
  "moto.cloudformation.models.FakeEvent",
  "moto.cloudformation.models.FakeStack",
  "moto.cloudformation.models.FakeStackInstances",
  "moto.cloudformation.models.FakeStackSet",
  "moto.cloudformation.models.cloudformation_backends",
  "moto.cloudformation.models.filter_stacks",
  "moto.cloudformation.parsing.DEFAULT_REGION",
  "moto.cloudformation.parsing.Export",
  "moto.cloudformation.parsing.LazyDict",
  "moto.cloudformation.parsing.MODEL_LIST",
  "moto.cloudformation.parsing.MODEL_MAP",
  "moto.cloudformation.parsing.NAME_TYPE_MAP",
  "moto.cloudformation.parsing.NULL_MODELS",
  "moto.cloudformation.parsing.clean_json",
  "moto.cloudformation.parsing.generate_resource_name",
  "moto.cloudformation.parsing.logger",
  "moto.cloudformation.parsing.parse_and_create_resource",
  "moto.cloudformation.parsing.parse_and_delete_resource",
  "moto.cloudformation.parsing.parse_and_update_resource",
  "moto.cloudformation.parsing.parse_condition",
  "moto.cloudformation.parsing.parse_output",
  "moto.cloudformation.parsing.parse_resource",
  "moto.cloudformation.parsing.parse_resource_and_generate_name",
  "moto.cloudformation.parsing.resource_class_from_type",
  "moto.cloudformation.parsing.resource_name_property_from_type",
  "moto.cloudformation.responses.get_template_summary_response_from_template",
  "moto.cloudwatch.models.CloudWatchBackend",
  "moto.cloudwatch.models.Dashboard",
  "moto.cloudwatch.models.Dimension",
  "moto.cloudwatch.models.FakeAlarm",
  "moto.cloudwatch.models.MetricDatum",
  "moto.cloudwatch.models.Statistics",
  "moto.cloudwatch.models._EMPTY_LIST",
  "moto.cloudwatch.models.cloudwatch_backends",
  "moto.cloudwatch.models.daterange",
  "moto.codecommit.exceptions.InvalidRepositoryNameException",
  "moto.codecommit.exceptions.RepositoryDoesNotExistException",
  "moto.codecommit.exceptions.RepositoryNameExistsException",
  "moto.codecommit.models.CodeCommit",
  "moto.codecommit.models.CodeCommitBackend",
  "moto.codecommit.models.codecommit_backends",
  "moto.codecommit.responses._is_repository_name_valid",
  "moto.codepipeline.exceptions.InvalidStructureException",
  "moto.codepipeline.exceptions.InvalidTagsException",
  "moto.codepipeline.exceptions.PipelineNotFoundException",
  "moto.codepipeline.exceptions.ResourceNotFoundException",
  "moto.codepipeline.exceptions.TooManyTagsException",
  "moto.codepipeline.models.CodePipeline",
  "moto.codepipeline.models.CodePipelineBackend",
  "moto.codepipeline.models.codepipeline_backends",
  "moto.cognitoidentity.exceptions.ResourceNotFoundError",
  "moto.cognitoidentity.models.CognitoIdentity",
  "moto.cognitoidentity.models.CognitoIdentityBackend",
  "moto.cognitoidentity.models.cognitoidentity_backends",
  "moto.cognitoidp.exceptions.GroupExistsException",
  "moto.cognitoidp.exceptions.InvalidParameterException",
  "moto.cognitoidp.exceptions.NotAuthorizedError",
  "moto.cognitoidp.exceptions.ResourceNotFoundError",
  "moto.cognitoidp.exceptions.UserNotConfirmedException",
  "moto.cognitoidp.exceptions.UserNotFoundError",
  "moto.cognitoidp.exceptions.UsernameExistsException",
  "moto.cognitoidp.models.CognitoIdpBackend",
  "moto.cognitoidp.models.CognitoIdpGroup",
  "moto.cognitoidp.models.CognitoIdpIdentityProvider",
  "moto.cognitoidp.models.CognitoIdpUser",
  "moto.cognitoidp.models.CognitoIdpUserPool",
  "moto.cognitoidp.models.CognitoIdpUserPoolClient",
  "moto.cognitoidp.models.CognitoIdpUserPoolDomain",
  "moto.cognitoidp.models.CognitoResourceServer",
  "moto.cognitoidp.models.UserStatus",
  "moto.cognitoidp.models.cognitoidp_backends",
  "moto.cognitoidp.models.paginate",
  "moto.compat.OrderedDict",
  "moto.compat.collections_abc.Iterable",
  "moto.compat.collections_abc.Mapping",
  "moto.config.exceptions.DuplicateTags",
  "moto.config.exceptions.InvalidConfigurationRecorderNameException",
  "moto.config.exceptions.InvalidDeliveryChannelNameException",
  "moto.config.exceptions.InvalidDeliveryFrequency",
  "moto.config.exceptions.InvalidLimit",
  "moto.config.exceptions.InvalidNextTokenException",
  "moto.config.exceptions.InvalidParameterValueException",
  "moto.config.exceptions.InvalidRecordingGroupException",
  "moto.config.exceptions.InvalidResourceParameters",
  "moto.config.exceptions.InvalidResourceTypeException",
  "moto.config.exceptions.InvalidResultTokenException",
  "moto.config.exceptions.InvalidS3KeyPrefixException",
  "moto.config.exceptions.InvalidSNSTopicARNException",
  "moto.config.exceptions.InvalidTagCharacters",
  "moto.config.exceptions.LastDeliveryChannelDeleteFailedException",
  "moto.config.exceptions.MaxNumberOfConfigurationRecordersExceededException",
  "moto.config.exceptions.MaxNumberOfDeliveryChannelsExceededException",
  "moto.config.exceptions.NameTooLongException",
  "moto.config.exceptions.NoAvailableConfigurationRecorderException",
  "moto.config.exceptions.NoAvailableDeliveryChannelException",
  "moto.config.exceptions.NoSuchBucketException",
  "moto.config.exceptions.NoSuchConfigurationAggregatorException",
  "moto.config.exceptions.NoSuchConfigurationRecorderException",
  "moto.config.exceptions.NoSuchDeliveryChannelException",
  "moto.config.exceptions.NoSuchOrganizationConformancePackException",
  "moto.config.exceptions.ResourceNotDiscoveredException",
  "moto.config.exceptions.TagKeyTooBig",
  "moto.config.exceptions.TagValueTooBig",
  "moto.config.exceptions.TooManyAccountSources",
  "moto.config.exceptions.TooManyResourceIds",
  "moto.config.exceptions.TooManyResourceKeys",
  "moto.config.exceptions.TooManyTags",
  "moto.config.exceptions.ValidationException",
  "moto.config.models.AccountAggregatorSource",
  "moto.config.models.ConfigAggregationAuthorization",
  "moto.config.models.ConfigAggregator",
  "moto.config.models.ConfigBackend",
  "moto.config.models.ConfigDeliveryChannel",
  "moto.config.models.ConfigDeliverySnapshotProperties",
  "moto.config.models.ConfigEmptyDictable",
  "moto.config.models.ConfigRecorder",
  "moto.config.models.ConfigRecorderStatus",
  "moto.config.models.DEFAULT_PAGE_SIZE",
  "moto.config.models.OrganizationAggregationSource",
  "moto.config.models.OrganizationConformancePack",
  "moto.config.models.POP_STRINGS",
  "moto.config.models.RESOURCE_MAP",
  "moto.config.models.RecordingGroup",
  "moto.config.models.check_tag_duplicate",
  "moto.config.models.config_backends",
  "moto.config.models.datetime2int",
  "moto.config.models.random_string",
  "moto.config.models.snake_to_camels",
  "moto.config.models.validate_tag_key",
  "moto.config.models.validate_tags",
  "moto.core.ACCOUNT_ID",
  "moto.core.BaseBackend",
  "moto.core.BaseModel",
  "moto.core.CloudFormationModel",
  "moto.core.CloudFormationModel.__subclasses__",
  "moto.core.exceptions.AccessDeniedError",
  "moto.core.exceptions.AuthFailureError",
  "moto.core.exceptions.DryRunClientError",
  "moto.core.exceptions.ERROR_JSON_RESPONSE",
  "moto.core.exceptions.ERROR_RESPONSE",
  "moto.core.exceptions.InvalidClientTokenIdError",
  "moto.core.exceptions.InvalidNextTokenException",
  "moto.core.exceptions.JsonRESTError",
  "moto.core.exceptions.RESTError",
  "moto.core.exceptions.SINGLE_ERROR_RESPONSE",
  "moto.core.exceptions.SignatureDoesNotMatchError",
  "moto.core.models.BOTOCORE_HTTP_METHODS",
  "moto.core.models.BaseBackend",
  "moto.core.models.BaseMockAWS",
  "moto.core.models.BaseModel",
  "moto.core.models.BotocoreEventMockAWS",
  "moto.core.models.BotocoreStubber",
  "moto.core.models.CallbackResponse",
  "moto.core.models.CloudFormationModel",
  "moto.core.models.ConfigQueryModel",
  "moto.core.models.HttprettyMockAWS",
  "moto.core.models.InstanceTrackerMeta",
  "moto.core.models.MockAWS",
  "moto.core.models.MockRawResponse",
  "moto.core.models.Model",
  "moto.core.models.Model.prop",
  "moto.core.models.MotoAPIBackend",
  "moto.core.models.RESPONSES_METHODS",
  "moto.core.models.ServerModeMockAWS",
  "moto.core.models._find_first_match",
  "moto.core.models.base_decorator",
  "moto.core.models.botocore_mock",
  "moto.core.models.botocore_stubber",
  "moto.core.models.model_data",
  "moto.core.models.not_implemented_callback",
  "moto.core.models.responses_mock",
  "moto.core.moto_api_backend",
  "moto.core.responses.AWSServiceSpec",
  "moto.core.responses.ActionAuthenticatorMixin",
  "moto.core.responses.BaseResponse",
  "moto.core.responses.DynamicDictLoader",
  "moto.core.responses._RecursiveDictRef",
  "moto.core.responses._TemplateEnvironmentMixin",
  "moto.core.responses._decode_dict",
  "moto.core.responses.flatten_json_request_body",
  "moto.core.responses.from_str",
  "moto.core.responses.log",
  "moto.core.responses.to_str",
  "moto.core.responses.xml_to_json_response",
  "moto.core.urls.response_instance",
  "moto.core.utils.REQUEST_ID_LONG",
  "moto.core.utils.RFC1123",
  "moto.core.utils.amz_crc32",
  "moto.core.utils.amzn_request_id",
  "moto.core.utils.camelcase_to_underscores",
  "moto.core.utils.convert_flask_to_httpretty_response",
  "moto.core.utils.datetime",
  "moto.core.utils.gen_amz_crc32",
  "moto.core.utils.gen_amzn_requestid_long",
  "moto.core.utils.get_random_hex",
  "moto.core.utils.get_random_message_id",
  "moto.core.utils.iso_8601_datetime_with_milliseconds",
  "moto.core.utils.iso_8601_datetime_without_milliseconds",
  "moto.core.utils.iso_8601_datetime_without_milliseconds_s3",
  "moto.core.utils.method_names_from_class",
  "moto.core.utils.path_url",
  "moto.core.utils.py2_strip_unicode_keys",
  "moto.core.utils.rfc_1123_datetime",
  "moto.core.utils.str_to_rfc_1123_datetime",
  "moto.core.utils.tags_from_cloudformation_tags_list",
  "moto.core.utils.tags_from_query_string",
  "moto.core.utils.underscores_to_camelcase",
  "moto.core.utils.unix_time",
  "moto.core.utils.unix_time_millis",
  "moto.datapipeline.models.DataPipelineBackend",
  "moto.datapipeline.models.Pipeline",
  "moto.datapipeline.models.PipelineObject",
  "moto.datapipeline.models.datapipeline_backends",
  "moto.datasync.exceptions.DataSyncClientError",
  "moto.datasync.exceptions.InvalidRequestException",
  "moto.datasync.models.DataSyncBackend",
  "moto.datasync.models.Location",
  "moto.datasync.models.Task",
  "moto.datasync.models.TaskExecution",
  "moto.datasync.models.datasync_backends",
  "moto.dynamodb.comparisons.COMPARISON_FUNCS",
  "moto.dynamodb.models.DynamoDBBackend",
  "moto.dynamodb.models.DynamoJsonEncoder",
  "moto.dynamodb.models.DynamoType",
  "moto.dynamodb.models.Item",
  "moto.dynamodb.models.Table",
  "moto.dynamodb2.comparisons.AttributePath",
  "moto.dynamodb2.comparisons.AttributeValue",
  "moto.dynamodb2.comparisons.COMPARISON_FUNCS",
  "moto.dynamodb2.comparisons.ConditionExpressionParser",
  "moto.dynamodb2.comparisons.EQ_FUNCTION",
  "moto.dynamodb2.comparisons.Func",
  "moto.dynamodb2.comparisons.FuncAttrExists",
  "moto.dynamodb2.comparisons.FuncAttrNotExists",
  "moto.dynamodb2.comparisons.FuncAttrType",
  "moto.dynamodb2.comparisons.FuncBeginsWith",
  "moto.dynamodb2.comparisons.FuncBetween",
  "moto.dynamodb2.comparisons.FuncContains",
  "moto.dynamodb2.comparisons.FuncIn",
  "moto.dynamodb2.comparisons.FuncSize",
  "moto.dynamodb2.comparisons.GE_FUNCTION",
  "moto.dynamodb2.comparisons.GT_FUNCTION",
  "moto.dynamodb2.comparisons.LE_FUNCTION",
  "moto.dynamodb2.comparisons.LT_FUNCTION",
  "moto.dynamodb2.comparisons.NE_FUNCTION",
  "moto.dynamodb2.comparisons.Op",
  "moto.dynamodb2.comparisons.OpAnd",
  "moto.dynamodb2.comparisons.OpDefault",
  "moto.dynamodb2.comparisons.OpEqual",
  "moto.dynamodb2.comparisons.OpGreaterThan",
  "moto.dynamodb2.comparisons.OpGreaterThanOrEqual",
  "moto.dynamodb2.comparisons.OpLessThan",
  "moto.dynamodb2.comparisons.OpLessThanOrEqual",
  "moto.dynamodb2.comparisons.OpNot",
  "moto.dynamodb2.comparisons.OpNotEqual",
  "moto.dynamodb2.comparisons.OpOr",
  "moto.dynamodb2.comparisons.Operand",
  "moto.dynamodb2.comparisons.get_comparison_func",
  "moto.dynamodb2.comparisons.get_expected",
  "moto.dynamodb2.comparisons.get_filter_expression",
  "moto.dynamodb2.dynamodb_backends2.get_table",
  "moto.dynamodb2.exceptions.AttributeDoesNotExist",
  "moto.dynamodb2.exceptions.AttributeIsReservedKeyword",
  "moto.dynamodb2.exceptions.ConditionalCheckFailed",
  "moto.dynamodb2.exceptions.ExpressionAttributeNameNotDefined",
  "moto.dynamodb2.exceptions.ExpressionAttributeValueNotDefined",
  "moto.dynamodb2.exceptions.IncorrectDataType",
  "moto.dynamodb2.exceptions.IncorrectOperandType",
  "moto.dynamodb2.exceptions.InvalidExpressionAttributeNameKey",
  "moto.dynamodb2.exceptions.InvalidIndexNameError",
  "moto.dynamodb2.exceptions.InvalidTokenException",
  "moto.dynamodb2.exceptions.InvalidUpdateExpression",
  "moto.dynamodb2.exceptions.InvalidUpdateExpressionInvalidDocumentPath",
  "moto.dynamodb2.exceptions.ItemSizeToUpdateTooLarge",
  "moto.dynamodb2.exceptions.ItemSizeTooLarge",
  "moto.dynamodb2.exceptions.MockValidationException",
  "moto.dynamodb2.exceptions.ProvidedKeyDoesNotExist",
  "moto.dynamodb2.exceptions.TransactionCanceledException",
  "moto.dynamodb2.exceptions.UpdateExprSyntaxError",
  "moto.dynamodb2.models.DynamoDBBackend",
  "moto.dynamodb2.models.DynamoJsonEncoder",
  "moto.dynamodb2.models.DynamoType",
  "moto.dynamodb2.models.GlobalSecondaryIndex",
  "moto.dynamodb2.models.Item",
  "moto.dynamodb2.models.LimitedSizeDict",
  "moto.dynamodb2.models.LocalSecondaryIndex",
  "moto.dynamodb2.models.SecondaryIndex",
  "moto.dynamodb2.models.StreamRecord",
  "moto.dynamodb2.models.StreamShard",
  "moto.dynamodb2.models.Table",
  "moto.dynamodb2.models.dynamo_json_dump",
  "moto.dynamodb2.models.dynamo_type.DDBType",
  "moto.dynamodb2.models.dynamo_type.DDBType.NUMBER",
  "moto.dynamodb2.models.dynamo_type.DDBTypeConversion.get_human_type",
  "moto.dynamodb2.models.dynamo_type.DynamoType",
  "moto.dynamodb2.models.dynamodb_backends",
  "moto.dynamodb2.models.utilities.attribute_is_list",
  "moto.dynamodb2.models.utilities.bytesize",
  "moto.dynamodb2.parsing.ast_nodes.DDBTypedValue",
  "moto.dynamodb2.parsing.ast_nodes.DepthFirstTraverser",
  "moto.dynamodb2.parsing.ast_nodes.Expression",
  "moto.dynamodb2.parsing.ast_nodes.ExpressionAttribute",
  "moto.dynamodb2.parsing.ast_nodes.ExpressionAttributeName",
  "moto.dynamodb2.parsing.ast_nodes.ExpressionAttributeValue",
  "moto.dynamodb2.parsing.ast_nodes.ExpressionPathDescender",
  "moto.dynamodb2.parsing.ast_nodes.ExpressionSelector",
  "moto.dynamodb2.parsing.ast_nodes.ExpressionValueOperator",
  "moto.dynamodb2.parsing.ast_nodes.LeafNode",
  "moto.dynamodb2.parsing.ast_nodes.Node",
  "moto.dynamodb2.parsing.ast_nodes.NoneExistingPath",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpression",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionAddAction",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionAddActions",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionAddClause",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionClause",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionDeleteAction",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionDeleteActions",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionDeleteClause",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionFunction",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionGroupedValue",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionPath",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionRemoveAction",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionRemoveActions",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionRemoveClause",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionSetAction",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionSetActions",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionSetClause",
  "moto.dynamodb2.parsing.ast_nodes.UpdateExpressionValue",
  "moto.dynamodb2.parsing.executors.AddExecutor",
  "moto.dynamodb2.parsing.executors.DeleteExecutor",
  "moto.dynamodb2.parsing.executors.NodeExecutor",
  "moto.dynamodb2.parsing.executors.RemoveExecutor",
  "moto.dynamodb2.parsing.executors.SetExecutor",
  "moto.dynamodb2.parsing.executors.UpdateExpressionExecutor",
  "moto.dynamodb2.parsing.expressions.ExpressionParser",
  "moto.dynamodb2.parsing.expressions.NestableBinExpressionParser",
  "moto.dynamodb2.parsing.expressions.NestableExpressionParserMixin",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionActionsParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionAddActionsParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionAttributeValueOrPathParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionAttributeValueParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionDeleteActionsParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionGroupedValueParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionOperandParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionParser.make",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionPathParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionPathValueParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionRemoveActionsParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionSetActionsParser",
  "moto.dynamodb2.parsing.expressions.UpdateExpressionValueParser",
  "moto.dynamodb2.parsing.reserved_keywords.ReservedKeywords.get_reserved_keywords",
  "moto.dynamodb2.parsing.tokens.ExpressionTokenizer",
  "moto.dynamodb2.parsing.tokens.ExpressionTokenizer.make_list",
  "moto.dynamodb2.parsing.tokens.Token",
  "moto.dynamodb2.parsing.tokens.Token.ATTRIBUTE",
  "moto.dynamodb2.parsing.tokens.Token.ATTRIBUTE_NAME",
  "moto.dynamodb2.parsing.tokens.Token.ATTRIBUTE_VALUE",
  "moto.dynamodb2.parsing.tokens.Token.CLOSE_ROUND_BRACKET",
  "moto.dynamodb2.parsing.tokens.Token.CLOSE_SQUARE_BRACKET",
  "moto.dynamodb2.parsing.tokens.Token.COMMA",
  "moto.dynamodb2.parsing.tokens.Token.DOT",
  "moto.dynamodb2.parsing.tokens.Token.EQUAL_SIGN",
  "moto.dynamodb2.parsing.tokens.Token.MINUS_SIGN",
  "moto.dynamodb2.parsing.tokens.Token.NUMBER",
  "moto.dynamodb2.parsing.tokens.Token.OPEN_ROUND_BRACKET",
  "moto.dynamodb2.parsing.tokens.Token.OPEN_SQUARE_BRACKET",
  "moto.dynamodb2.parsing.tokens.Token.PLUS_SIGN",
  "moto.dynamodb2.parsing.tokens.Token.WHITESPACE",
  "moto.dynamodb2.parsing.validators.ExecuteOperations",
  "moto.dynamodb2.parsing.validators.ExpressionAttributeResolvingProcessor",
  "moto.dynamodb2.parsing.validators.ExpressionAttributeValueProcessor",
  "moto.dynamodb2.parsing.validators.ExpressionPathResolver",
  "moto.dynamodb2.parsing.validators.NoneExistingPathChecker",
  "moto.dynamodb2.parsing.validators.UpdateExpressionFunctionEvaluator",
  "moto.dynamodb2.parsing.validators.UpdateExpressionValidator",
  "moto.dynamodb2.parsing.validators.Validator",
  "moto.dynamodb2.responses.TRANSACTION_MAX_ITEMS",
  "moto.dynamodb2.responses.get_empty_str_error",
  "moto.dynamodb2.responses.has_empty_keys_or_values",
  "moto.dynamodbstreams.dynamodbstreams_backends.list_streams",
  "moto.dynamodbstreams.models.DynamoDBStreamsBackend",
  "moto.dynamodbstreams.models.ShardIterator",
  "moto.dynamodbstreams.models.dynamodbstreams_backends",
  "moto.ec2.ec2_backends",
  "moto.ec2.ec2_backends.items",
  "moto.ec2.exceptions.CidrLimitExceeded",
  "moto.ec2.exceptions.DependencyViolationError",
  "moto.ec2.exceptions.EC2ClientError",
  "moto.ec2.exceptions.FilterNotImplementedError",
  "moto.ec2.exceptions.GatewayNotAttachedError",
  "moto.ec2.exceptions.InvalidAMIAttributeItemValueError",
  "moto.ec2.exceptions.InvalidAMIIdError",
  "moto.ec2.exceptions.InvalidAddressError",
  "moto.ec2.exceptions.InvalidAllocationIdError",
  "moto.ec2.exceptions.InvalidAssociationIdError",
  "moto.ec2.exceptions.InvalidAvailabilityZoneError",
  "moto.ec2.exceptions.InvalidCIDRBlockParameterError",
  "moto.ec2.exceptions.InvalidCIDRSubnetError",
  "moto.ec2.exceptions.InvalidCustomerGatewayIdError",
  "moto.ec2.exceptions.InvalidDHCPOptionsIdError",
  "moto.ec2.exceptions.InvalidDestinationCIDRBlockParameterError",
  "moto.ec2.exceptions.InvalidDomainError",
  "moto.ec2.exceptions.InvalidID",
  "moto.ec2.exceptions.InvalidInstanceIdError",
  "moto.ec2.exceptions.InvalidInternetGatewayIdError",
  "moto.ec2.exceptions.InvalidKeyPairDuplicateError",
  "moto.ec2.exceptions.InvalidKeyPairFormatError",
  "moto.ec2.exceptions.InvalidKeyPairNameError",
  "moto.ec2.exceptions.InvalidLaunchTemplateNameError",
  "moto.ec2.exceptions.InvalidNetworkAclIdError",
  "moto.ec2.exceptions.InvalidNetworkAttachmentIdError",
  "moto.ec2.exceptions.InvalidNetworkInterfaceIdError",
  "moto.ec2.exceptions.InvalidParameterValueError",
  "moto.ec2.exceptions.InvalidParameterValueErrorTagNull",
  "moto.ec2.exceptions.InvalidParameterValueErrorUnknownAttribute",
  "moto.ec2.exceptions.InvalidPermissionDuplicateError",
  "moto.ec2.exceptions.InvalidPermissionNotFoundError",
  "moto.ec2.exceptions.InvalidRouteError",
  "moto.ec2.exceptions.InvalidRouteTableIdError",
  "moto.ec2.exceptions.InvalidSecurityGroupDuplicateError",
  "moto.ec2.exceptions.InvalidSecurityGroupNotFoundError",
  "moto.ec2.exceptions.InvalidSnapshotIdError",
  "moto.ec2.exceptions.InvalidSubnetConflictError",
  "moto.ec2.exceptions.InvalidSubnetIdError",
  "moto.ec2.exceptions.InvalidSubnetRangeError",
  "moto.ec2.exceptions.InvalidVPCIdError",
  "moto.ec2.exceptions.InvalidVPCPeeringConnectionIdError",
  "moto.ec2.exceptions.InvalidVPCPeeringConnectionStateTransitionError",
  "moto.ec2.exceptions.InvalidVPCRangeError",
  "moto.ec2.exceptions.InvalidVolumeAttachmentError",
  "moto.ec2.exceptions.InvalidVolumeDetachmentError",
  "moto.ec2.exceptions.InvalidVolumeIdError",
  "moto.ec2.exceptions.InvalidVpcCidrBlockAssociationIdError",
  "moto.ec2.exceptions.InvalidVpnConnectionIdError",
  "moto.ec2.exceptions.InvalidVpnGatewayIdError",
  "moto.ec2.exceptions.MalformedAMIIdError",
  "moto.ec2.exceptions.MalformedDHCPOptionsIdError",
  "moto.ec2.exceptions.MissingParameterError",
  "moto.ec2.exceptions.MotoNotImplementedError",
  "moto.ec2.exceptions.NetworkAclEntryAlreadyExistsError",
  "moto.ec2.exceptions.OperationNotPermitted",
  "moto.ec2.exceptions.OperationNotPermitted2",
  "moto.ec2.exceptions.OperationNotPermitted3",
  "moto.ec2.exceptions.ResourceAlreadyAssociatedError",
  "moto.ec2.exceptions.RulesPerSecurityGroupLimitExceededError",
  "moto.ec2.exceptions.TagLimitExceeded",
  "moto.ec2.exceptions.VolumeInUseError",
  "moto.ec2.models.AMIS",
  "moto.ec2.models.Ami",
  "moto.ec2.models.AmiBackend",
  "moto.ec2.models.CustomerGateway",
  "moto.ec2.models.CustomerGatewayBackend",
  "moto.ec2.models.DHCPOptionsSet",
  "moto.ec2.models.DHCPOptionsSetBackend",
  "moto.ec2.models.EBSBackend",
  "moto.ec2.models.EC2Backend",
  "moto.ec2.models.ElasticAddress",
  "moto.ec2.models.ElasticAddressBackend",
  "moto.ec2.models.INSTANCE_TYPES",
  "moto.ec2.models.InstanceBackend",
  "moto.ec2.models.InstanceState",
  "moto.ec2.models.InternetGateway",
  "moto.ec2.models.InternetGatewayBackend",
  "moto.ec2.models.KeyPair",
  "moto.ec2.models.KeyPairBackend",
  "moto.ec2.models.LaunchTemplate",
  "moto.ec2.models.LaunchTemplateBackend",
  "moto.ec2.models.LaunchTemplateVersion",
  "moto.ec2.models.NatGateway",
  "moto.ec2.models.NatGatewayBackend",
  "moto.ec2.models.NetworkAcl",
  "moto.ec2.models.NetworkAclAssociation",
  "moto.ec2.models.NetworkAclBackend",
  "moto.ec2.models.NetworkAclEntry",
  "moto.ec2.models.NetworkInterface",
  "moto.ec2.models.NetworkInterfaceBackend",
  "moto.ec2.models.OWNER_ID",
  "moto.ec2.models.Region",
  "moto.ec2.models.RegionsAndZonesBackend",
  "moto.ec2.models.Route",
  "moto.ec2.models.RouteBackend",
  "moto.ec2.models.RouteTable",
  "moto.ec2.models.RouteTableBackend",
  "moto.ec2.models.SecurityGroup",
  "moto.ec2.models.SecurityGroupBackend",
  "moto.ec2.models.SecurityRule",
  "moto.ec2.models.Snapshot",
  "moto.ec2.models.SpotFleetBackend",
  "moto.ec2.models.SpotFleetLaunchSpec",
  "moto.ec2.models.SpotFleetRequest",
  "moto.ec2.models.SpotRequestBackend",
  "moto.ec2.models.StateReason",
  "moto.ec2.models.Subnet",
  "moto.ec2.models.SubnetBackend",
  "moto.ec2.models.SubnetRouteTableAssociation",
  "moto.ec2.models.SubnetRouteTableAssociationBackend",
  "moto.ec2.models.TagBackend",
  "moto.ec2.models.TaggedEC2Resource",
  "moto.ec2.models.VPC",
  "moto.ec2.models.VPCBackend",
  "moto.ec2.models.VPCEndPoint",
  "moto.ec2.models.VPCGatewayAttachment",
  "moto.ec2.models.VPCGatewayAttachmentBackend",
  "moto.ec2.models.VPCPeeringConnection",
  "moto.ec2.models.VPCPeeringConnectionBackend",
  "moto.ec2.models.VPCPeeringConnectionStatus",
  "moto.ec2.models.VPNConnection",
  "moto.ec2.models.VPNConnectionBackend",
  "moto.ec2.models.Volume",
  "moto.ec2.models.VolumeAttachment",
  "moto.ec2.models.VpnGateway",
  "moto.ec2.models.VpnGatewayAttachment",
  "moto.ec2.models.VpnGatewayBackend",
  "moto.ec2.models.Zone",
  "moto.ec2.models._load_resource",
  "moto.ec2.models.ec2_backends",
  "moto.ec2.models.ec2_backends.create_tags",
  "moto.ec2.models.ec2_backends.get_subnet",
  "moto.ec2.models.ec2_backends.keys",
  "moto.ec2.models.utc_date_and_time",
  "moto.ec2.models.validate_resource_ids",
  "moto.ec2.responses.launch_templates.parse_lists",
  "moto.ec2.responses.launch_templates.parse_object",
  "moto.ec2.responses.launch_templates.pretty_xml",
  "moto.ec2.responses.launch_templates.xml_root",
  "moto.ec2.responses.launch_templates.xml_serialize",
  "moto.ec2.responses.security_groups.parse_sg_attributes_from_dict",
  "moto.ec2.responses.security_groups.try_parse_int",
  "moto.ec2.utils.EC2_RESOURCE_TO_PREFIX",
  "moto.ec2.utils.dhcp_configuration_from_querystring",
  "moto.ec2.utils.dict_from_querystring",
  "moto.ec2.utils.filter_dict_attribute_mapping",
  "moto.ec2.utils.filter_dict_igw_mapping",
  "moto.ec2.utils.filters_from_querystring",
  "moto.ec2.utils.get_obj_tag",
  "moto.ec2.utils.get_obj_tag_names",
  "moto.ec2.utils.get_obj_tag_values",
  "moto.ec2.utils.get_object_value",
  "moto.ec2.utils.get_prefix",
  "moto.ec2.utils.instance_value_in_filter_values",
  "moto.ec2.utils.is_filter_matching",
  "moto.ec2.utils.is_tag_filter",
  "moto.ec2.utils.passes_filter_dict",
  "moto.ec2.utils.passes_igw_filter_dict",
  "moto.ec2.utils.random_id",
  "moto.ec2.utils.random_resource_id",
  "moto.ec2.utils.rsa_public_key_fingerprint",
  "moto.ec2.utils.simple_aws_filter_to_re",
  "moto.ec2.utils.tag_filter_matches",
  "moto.ec2instanceconnect.models.Ec2InstanceConnectBackend",
  "moto.ec2instanceconnect.models.ec2instanceconnect_backends",
  "moto.ecr.exceptions.ImageNotFoundException",
  "moto.ecr.exceptions.RepositoryNotFoundException",
  "moto.ecr.models.BaseObject",
  "moto.ecr.models.DEFAULT_REGISTRY_ID",
  "moto.ecr.models.ECRBackend",
  "moto.ecr.models.Image",
  "moto.ecr.models.Repository",
  "moto.ecr.models.ecr_backends",
  "moto.ecs.ecs_backends",
  "moto.ecs.ecs_backends.items",
  "moto.ecs.exceptions.ClusterNotFoundException",
  "moto.ecs.exceptions.ServiceNotFoundException",
  "moto.ecs.exceptions.TaskDefinitionNotFoundException",
  "moto.ecs.exceptions.TaskSetNotFoundException",
  "moto.ecs.models.BaseObject",
  "moto.ecs.models.Cluster",
  "moto.ecs.models.ClusterFailure",
  "moto.ecs.models.ContainerInstance",
  "moto.ecs.models.ContainerInstanceFailure",
  "moto.ecs.models.EC2ContainerServiceBackend",
  "moto.ecs.models.Service",
  "moto.ecs.models.Task",
  "moto.ecs.models.TaskDefinition",
  "moto.ecs.models.TaskSet",
  "moto.ecs.models.ecs_backends",
  "moto.elasticbeanstalk.exceptions.InvalidParameterValueError",
  "moto.elasticbeanstalk.exceptions.ResourceNotFoundException",
  "moto.elasticbeanstalk.models.EBBackend",
  "moto.elasticbeanstalk.models.FakeApplication",
  "moto.elasticbeanstalk.models.FakeEnvironment",
  "moto.elasticbeanstalk.models.eb_backends",
  "moto.elb.elb_backends",
  "moto.elb.exceptions.BadHealthCheckDefinition",
  "moto.elb.exceptions.DuplicateListenerError",
  "moto.elb.exceptions.DuplicateLoadBalancerName",
  "moto.elb.exceptions.DuplicateTagKeysError",
  "moto.elb.exceptions.ELBClientError",
  "moto.elb.exceptions.EmptyListenersError",
  "moto.elb.exceptions.InvalidSecurityGroupError",
  "moto.elb.exceptions.LoadBalancerNotFoundError",
  "moto.elb.exceptions.TooManyTagsError",
  "moto.elb.models.ELBBackend",
  "moto.elb.models.FakeBackend",
  "moto.elb.models.FakeHealthCheck",
  "moto.elb.models.FakeListener",
  "moto.elb.models.FakeLoadBalancer",
  "moto.elb.models.elb_backends",
  "moto.elb.responses.ELBResponse.dispatch",
  "moto.elb.urls.api_version_elb_backend",
  "moto.elbv2.elbv2_backends",
  "moto.elbv2.elbv2_backends.notify_terminate_instances",
  "moto.elbv2.exceptions.ActionTargetGroupNotFoundError",
  "moto.elbv2.exceptions.BadHealthCheckDefinition",
  "moto.elbv2.exceptions.DuplicateListenerError",
  "moto.elbv2.exceptions.DuplicateLoadBalancerName",
  "moto.elbv2.exceptions.DuplicatePriorityError",
  "moto.elbv2.exceptions.DuplicateTagKeysError",
  "moto.elbv2.exceptions.DuplicateTargetGroupName",
  "moto.elbv2.exceptions.ELBClientError",
  "moto.elbv2.exceptions.EmptyListenersError",
  "moto.elbv2.exceptions.InvalidActionTypeError",
  "moto.elbv2.exceptions.InvalidConditionFieldError",
  "moto.elbv2.exceptions.InvalidConditionValueError",
  "moto.elbv2.exceptions.InvalidDescribeRulesRequest",
  "moto.elbv2.exceptions.InvalidLoadBalancerActionException",
  "moto.elbv2.exceptions.InvalidModifyRuleArgumentsError",
  "moto.elbv2.exceptions.InvalidStatusCodeActionTypeError",
  "moto.elbv2.exceptions.InvalidTargetError",
  "moto.elbv2.exceptions.InvalidTargetGroupNameError",
  "moto.elbv2.exceptions.ListenerNotFoundError",
  "moto.elbv2.exceptions.LoadBalancerNotFoundError",
  "moto.elbv2.exceptions.PriorityInUseError",
  "moto.elbv2.exceptions.ResourceInUseError",
  "moto.elbv2.exceptions.RuleNotFoundError",
  "moto.elbv2.exceptions.SubnetNotFoundError",
  "moto.elbv2.exceptions.TargetGroupNotFoundError",
  "moto.elbv2.exceptions.TooManyTagsError",
  "moto.elbv2.models.ELBv2Backend",
  "moto.elbv2.models.FakeAction",
  "moto.elbv2.models.FakeHealthStatus",
  "moto.elbv2.models.FakeListener",
  "moto.elbv2.models.FakeLoadBalancer",
  "moto.elbv2.models.FakeRule",
  "moto.elbv2.models.FakeTargetGroup",
  "moto.elbv2.models.elbv2_backends",
  "moto.elbv2.responses.ELBV2Response.dispatch",
  "moto.elbv2.responses.SSL_POLICIES",
  "moto.emr.emr_backends",
  "moto.emr.exceptions.EmrError",
  "moto.emr.models.ElasticMapReduceBackend",
  "moto.emr.models.FakeApplication",
  "moto.emr.models.FakeBootstrapAction",
  "moto.emr.models.FakeCluster",
  "moto.emr.models.FakeInstanceGroup",
  "moto.emr.models.FakeStep",
  "moto.emr.models.emr_backends",
  "moto.emr.responses.generate_boto3_response",
  "moto.emr.utils.random_id",
  "moto.events.events_backends",
  "moto.events.models.EventBus",
  "moto.events.models.EventsBackend",
  "moto.events.models.Rule",
  "moto.events.models.events_backends",
  "moto.glacier.glacier_backends",
  "moto.glacier.models.ArchiveJob",
  "moto.glacier.models.GlacierBackend",
  "moto.glacier.models.InventoryJob",
  "moto.glacier.models.Job",
  "moto.glacier.models.Vault",
  "moto.glacier.models.glacier_backends",
  "moto.glacier.responses.GlacierResponse",
  "moto.glue.exceptions.AlreadyExistsException",
  "moto.glue.exceptions.DatabaseAlreadyExistsException",
  "moto.glue.exceptions.DatabaseNotFoundException",
  "moto.glue.exceptions.EntityNotFoundException",
  "moto.glue.exceptions.GlueClientError",
  "moto.glue.exceptions.PartitionAlreadyExistsException",
  "moto.glue.exceptions.PartitionNotFoundException",
  "moto.glue.exceptions.TableAlreadyExistsException",
  "moto.glue.exceptions.TableNotFoundException",
  "moto.glue.exceptions.VersionNotFoundException",
  "moto.glue.models.FakeDatabase",
  "moto.glue.models.FakePartition",
  "moto.glue.models.FakeTable",
  "moto.glue.models.GlueBackend",
  "moto.iam.access_control.AssumedRoleAccessKey",
  "moto.iam.access_control.CreateAccessKeyFailure",
  "moto.iam.access_control.IAMPolicy",
  "moto.iam.access_control.IAMPolicyStatement",
  "moto.iam.access_control.IAMRequest",
  "moto.iam.access_control.IAMRequestBase",
  "moto.iam.access_control.IAMUserAccessKey",
  "moto.iam.access_control.S3IAMRequest",
  "moto.iam.access_control.create_access_key",
  "moto.iam.access_control.log",
  "moto.iam.exceptions.DuplicateTags",
  "moto.iam.exceptions.EntityAlreadyExists",
  "moto.iam.exceptions.IAMConflictException",
  "moto.iam.exceptions.IAMLimitExceededException",
  "moto.iam.exceptions.IAMNotFoundException",
  "moto.iam.exceptions.IAMReportNotPresentException",
  "moto.iam.exceptions.InvalidInput",
  "moto.iam.exceptions.InvalidTagCharacters",
  "moto.iam.exceptions.MalformedCertificate",
  "moto.iam.exceptions.MalformedPolicyDocument",
  "moto.iam.exceptions.NoSuchEntity",
  "moto.iam.exceptions.TagKeyTooBig",
  "moto.iam.exceptions.TagValueTooBig",
  "moto.iam.exceptions.TooManyTags",
  "moto.iam.exceptions.ValidationError",
  "moto.iam.iam_backend.get_user_from_access_key_id",
  "moto.iam.iam_backends",
  "moto.iam.models.ACCOUNT_ID",
  "moto.iam.models.AWSManagedPolicy",
  "moto.iam.models.AccessKey",
  "moto.iam.models.AccountPasswordPolicy",
  "moto.iam.models.AccountSummary",
  "moto.iam.models.Certificate",
  "moto.iam.models.Group",
  "moto.iam.models.IAMBackend",
  "moto.iam.models.InlinePolicy",
  "moto.iam.models.InstanceProfile",
  "moto.iam.models.MFADevice",
  "moto.iam.models.ManagedPolicy",
  "moto.iam.models.OpenIDConnectProvider",
  "moto.iam.models.Policy",
  "moto.iam.models.PolicyVersion",
  "moto.iam.models.Role",
  "moto.iam.models.SAMLProvider",
  "moto.iam.models.SigningCertificate",
  "moto.iam.models.SshPublicKey",
  "moto.iam.models.User",
  "moto.iam.models.VirtualMfaDevice",
  "moto.iam.models.aws_managed_policies",
  "moto.iam.models.filter_items_with_path_prefix",
  "moto.iam.models.iam_backend.get_role_by_arn",
  "moto.iam.policy_validation.IAMPolicyDocumentValidator",
  "moto.iam.policy_validation.SERVICE_TYPE_REGION_INFORMATION_ERROR_ASSOCIATIONS",
  "moto.iam.policy_validation.VALID_CONDITIONS",
  "moto.iam.policy_validation.VALID_CONDITION_POSTFIXES",
  "moto.iam.policy_validation.VALID_CONDITION_PREFIXES",
  "moto.iam.policy_validation.VALID_EFFECTS",
  "moto.iam.policy_validation.VALID_RESOURCE_PATH_STARTING_VALUES",
  "moto.iam.policy_validation.VALID_STATEMENT_ELEMENTS",
  "moto.iam.policy_validation.VALID_TOP_ELEMENTS",
  "moto.iam.policy_validation.VALID_VERSIONS",
  "moto.instance_metadata.instance_metadata_backend",
  "moto.instance_metadata.models.InstanceMetadataBackend",
  "moto.instance_metadata.urls.instance_metadata",
  "moto.iot.exceptions.CertificateStateException",
  "moto.iot.exceptions.DeleteConflictException",
  "moto.iot.exceptions.InvalidRequestException",
  "moto.iot.exceptions.InvalidStateTransitionException",
  "moto.iot.exceptions.IoTClientError",
  "moto.iot.exceptions.ResourceNotFoundException",
  "moto.iot.exceptions.VersionConflictException",
  "moto.iot.iot_backends.describe_thing",
  "moto.iot.models.FakeCertificate",
  "moto.iot.models.FakeEndpoint",
  "moto.iot.models.FakeJob",
  "moto.iot.models.FakeJobExecution",
  "moto.iot.models.FakePolicy",
  "moto.iot.models.FakePolicyVersion",
  "moto.iot.models.FakeThing",
  "moto.iot.models.FakeThingGroup",
  "moto.iot.models.FakeThingType",
  "moto.iot.models.IoTBackend",
  "moto.iot.models.iot_backends",
  "moto.iot.urls.response",
  "moto.iotdata.exceptions.ConflictException",
  "moto.iotdata.exceptions.InvalidRequestException",
  "moto.iotdata.exceptions.IoTDataPlaneClientError",
  "moto.iotdata.exceptions.ResourceNotFoundException",
  "moto.iotdata.models.FakeShadow",
  "moto.iotdata.models.IoTDataPlaneBackend",
  "moto.iotdata.models.iotdata_backends",
  "moto.iotdata.urls.response",
  "moto.kinesis.exceptions.InvalidArgumentError",
  "moto.kinesis.exceptions.ResourceInUseError",
  "moto.kinesis.exceptions.ResourceNotFoundError",
  "moto.kinesis.exceptions.ShardNotFoundError",
  "moto.kinesis.exceptions.StreamNotFoundError",
  "moto.kinesis.kinesis_backends",
  "moto.kinesis.models.DeliveryStream",
  "moto.kinesis.models.FirehoseRecord",
  "moto.kinesis.models.KinesisBackend",
  "moto.kinesis.models.Record",
  "moto.kinesis.models.Shard",
  "moto.kinesis.models.Stream",
  "moto.kinesis.models.kinesis_backends",
  "moto.kinesis.utils.compose_shard_iterator",
  "moto.kinesis.utils.decode_method",
  "moto.kinesis.utils.encode_method",
  "moto.kinesisvideo.exceptions.KinesisvideoClientError",
  "moto.kinesisvideo.exceptions.ResourceInUseException",
  "moto.kinesisvideo.exceptions.ResourceNotFoundException",
  "moto.kinesisvideo.kinesisvideo_backends._get_stream",
  "moto.kinesisvideo.models.KinesisVideoBackend",
  "moto.kinesisvideo.models.Stream",
  "moto.kinesisvideo.models.kinesisvideo_backends",
  "moto.kinesisvideo.urls.response",
  "moto.kinesisvideoarchivedmedia.models.KinesisVideoArchivedMediaBackend",
  "moto.kinesisvideoarchivedmedia.models.kinesisvideoarchivedmedia_backends",
  "moto.kinesisvideoarchivedmedia.urls.response",
  "moto.kms.exceptions.AccessDeniedException",
  "moto.kms.exceptions.AlreadyExistsException",
  "moto.kms.exceptions.InvalidCiphertextException",
  "moto.kms.exceptions.NotAuthorizedException",
  "moto.kms.exceptions.NotFoundException",
  "moto.kms.exceptions.ValidationException",
  "moto.kms.kms_backends",
  "moto.kms.models.Key",
  "moto.kms.models.KmsBackend",
  "moto.kms.models.kms_backends",
  "moto.kms.responses.ACCOUNT_ID",
  "moto.kms.responses._assert_default_policy",
  "moto.kms.responses.reserved_aliases",
  "moto.kms.utils.CIPHERTEXT_HEADER_FORMAT",
  "moto.kms.utils.Ciphertext",
  "moto.kms.utils.HEADER_LEN",
  "moto.kms.utils.IV_LEN",
  "moto.kms.utils.KEY_ID_LEN",
  "moto.kms.utils.MASTER_KEY_LEN",
  "moto.kms.utils.TAG_LEN",
  "moto.kms.utils._deserialize_ciphertext_blob",
  "moto.kms.utils._serialize_ciphertext_blob",
  "moto.kms.utils._serialize_encryption_context",
  "moto.kms.utils.generate_data_key",
  "moto.lazy_load",
  "moto.logs.exceptions.InvalidParameterException",
  "moto.logs.exceptions.LimitExceededException",
  "moto.logs.exceptions.LogsClientError",
  "moto.logs.exceptions.ResourceAlreadyExistsException",
  "moto.logs.exceptions.ResourceNotFoundException",
  "moto.logs.logs_backends",
  "moto.logs.logs_backends.create_log_group",
  "moto.logs.models.LogEvent",
  "moto.logs.models.LogGroup",
  "moto.logs.models.LogStream",
  "moto.logs.models.LogsBackend",
  "moto.logs.models.logs_backends",
  "moto.managedblockchain.exceptions.BadRequestException",
  "moto.managedblockchain.exceptions.InvalidRequestException",
  "moto.managedblockchain.exceptions.ManagedBlockchainClientError",
  "moto.managedblockchain.exceptions.ResourceAlreadyExistsException",
  "moto.managedblockchain.exceptions.ResourceLimitExceededException",
  "moto.managedblockchain.exceptions.ResourceNotFoundException",
  "moto.managedblockchain.models.EDITIONS",
  "moto.managedblockchain.models.FRAMEWORKS",
  "moto.managedblockchain.models.FRAMEWORKVERSIONS",
  "moto.managedblockchain.models.ManagedBlockchainBackend",
  "moto.managedblockchain.models.ManagedBlockchainInvitation",
  "moto.managedblockchain.models.ManagedBlockchainMember",
  "moto.managedblockchain.models.ManagedBlockchainNetwork",
  "moto.managedblockchain.models.ManagedBlockchainNode",
  "moto.managedblockchain.models.ManagedBlockchainProposal",
  "moto.managedblockchain.models.VOTEVALUES",
  "moto.managedblockchain.models.managedblockchain_backends",
  "moto.managedblockchain.responses.ManagedBlockchainResponse",
  "moto.opsworks.exceptions.ResourceNotFoundException",
  "moto.opsworks.exceptions.ValidationException",
  "moto.opsworks.models.App",
  "moto.opsworks.models.Layer",
  "moto.opsworks.models.OpsWorksBackend",
  "moto.opsworks.models.OpsworkInstance",
  "moto.opsworks.models.Stack",
  "moto.opsworks.models.opsworks_backends",
  "moto.organizations.exceptions.AWSOrganizationsNotInUseException",
  "moto.organizations.exceptions.AccountAlreadyRegisteredException",
  "moto.organizations.exceptions.AccountNotFoundException",
  "moto.organizations.exceptions.AccountNotRegisteredException",
  "moto.organizations.exceptions.ConstraintViolationException",
  "moto.organizations.exceptions.DuplicateOrganizationalUnitException",
  "moto.organizations.exceptions.DuplicatePolicyException",
  "moto.organizations.exceptions.InvalidInputException",
  "moto.organizations.exceptions.PolicyTypeAlreadyEnabledException",
  "moto.organizations.exceptions.PolicyTypeNotEnabledException",
  "moto.organizations.exceptions.RootNotFoundException",
  "moto.organizations.exceptions.TargetNotFoundException",
  "moto.organizations.models.FakeAccount",
  "moto.organizations.models.FakeDelegatedAdministrator",
  "moto.organizations.models.FakeOrganization",
  "moto.organizations.models.FakeOrganizationalUnit",
  "moto.organizations.models.FakePolicy",
  "moto.organizations.models.FakeRoot",
  "moto.organizations.models.FakeServiceAccess",
  "moto.organizations.models.OrganizationsBackend",
  "moto.organizations.organizations_backends",
  "moto.organizations.utils.ACCOUNT_ARN_FORMAT.format",
  "moto.organizations.utils.ACCOUNT_ID_REGEX",
  "moto.organizations.utils.ACCOUNT_ID_SIZE",
  "moto.organizations.utils.AI_POLICY_ARN_FORMAT",
  "moto.organizations.utils.CHARSET",
  "moto.organizations.utils.CREATE_ACCOUNT_STATUS_ID_SIZE",
  "moto.organizations.utils.DEFAULT_POLICY_ID",
  "moto.organizations.utils.MASTER_ACCOUNT_ARN_FORMAT.format",
  "moto.organizations.utils.MASTER_ACCOUNT_EMAIL",
  "moto.organizations.utils.MASTER_ACCOUNT_ID",
  "moto.organizations.utils.ORGANIZATION_ARN_FORMAT.format",
  "moto.organizations.utils.ORG_ID_SIZE",
  "moto.organizations.utils.OU_ARN_FORMAT",
  "moto.organizations.utils.OU_ID_REGEX",
  "moto.organizations.utils.OU_ID_SUFFIX_SIZE",
  "moto.organizations.utils.POLICY_ID_REGEX",
  "moto.organizations.utils.POLICY_ID_SIZE",
  "moto.organizations.utils.ROOT_ARN_FORMAT",
  "moto.organizations.utils.ROOT_ID_REGEX",
  "moto.organizations.utils.ROOT_ID_SIZE",
  "moto.organizations.utils.SCP_ARN_FORMAT",
  "moto.organizations.utils.make_random_account_id",
  "moto.organizations.utils.make_random_create_account_status_id",
  "moto.organizations.utils.make_random_org_id",
  "moto.organizations.utils.make_random_ou_id",
  "moto.organizations.utils.make_random_policy_id",
  "moto.organizations.utils.make_random_root_id",
  "moto.packages.httpretty.HTTPretty.METHODS",
  "moto.packages.httpretty.HTTPretty.disable",
  "moto.packages.httpretty.HTTPretty.enable",
  "moto.packages.httpretty.HTTPretty.is_enabled",
  "moto.packages.httpretty.HTTPretty.register_uri",
  "moto.packages.httpretty.HTTPretty.reset",
  "moto.packages.httpretty.compat.PY3",
  "moto.packages.httpretty.compat.byte_type",
  "moto.packages.httpretty.compat.text_type",
  "moto.packages.httpretty.core.BAD_SOCKET_SHADOW",
  "moto.packages.httpretty.core.DEFAULT_HTTPS_PORTS",
  "moto.packages.httpretty.core.DEFAULT_HTTP_PORTS",
  "moto.packages.httpretty.core.EmptyRequestHeaders",
  "moto.packages.httpretty.core.Entry",
  "moto.packages.httpretty.core.FakeSSLSocket",
  "moto.packages.httpretty.core.FakeSockFile",
  "moto.packages.httpretty.core.HTTPrettyRequest",
  "moto.packages.httpretty.core.HTTPrettyRequestEmpty",
  "moto.packages.httpretty.core.POTENTIAL_HTTPS_PORTS",
  "moto.packages.httpretty.core.POTENTIAL_HTTP_PORTS",
  "moto.packages.httpretty.core.URIInfo",
  "moto.packages.httpretty.core.URIMatcher",
  "moto.packages.httpretty.core.create_fake_connection",
  "moto.packages.httpretty.core.fake_getaddrinfo",
  "moto.packages.httpretty.core.fake_gethostbyname",
  "moto.packages.httpretty.core.fake_gethostname",
  "moto.packages.httpretty.core.fake_wrap_socket",
  "moto.packages.httpretty.core.fakesock",
  "moto.packages.httpretty.core.httpretty",
  "moto.packages.httpretty.core.old_create_connection",
  "moto.packages.httpretty.core.old_getaddrinfo",
  "moto.packages.httpretty.core.old_gethostbyname",
  "moto.packages.httpretty.core.old_gethostname",
  "moto.packages.httpretty.core.old_socket",
  "moto.packages.httpretty.core.old_socksocket",
  "moto.packages.httpretty.core.old_ssl_wrap_socket",
  "moto.packages.httpretty.core.old_sslcontext_wrap_socket",
  "moto.packages.httpretty.core.old_sslsocket",
  "moto.packages.httpretty.core.old_sslwrap_simple",
  "moto.packages.httpretty.core.pyopenssl_override",
  "moto.packages.httpretty.core.socks",
  "moto.packages.httpretty.core.ssl",
  "moto.packages.httpretty.core.url_fix",
  "moto.packages.httpretty.errors.HTTPrettyError",
  "moto.packages.httpretty.errors.UnmockedError",
  "moto.packages.httpretty.http.HttpBaseClass",
  "moto.packages.httpretty.http.parse_requestline",
  "moto.polly.models.Lexicon",
  "moto.polly.models.PollyBackend",
  "moto.polly.models.polly_backends",
  "moto.polly.responses.LEXICON_NAME_REGEX",
  "moto.ram.exceptions.InvalidParameterException",
  "moto.ram.exceptions.MalformedArnException",
  "moto.ram.exceptions.OperationNotPermittedException",
  "moto.ram.exceptions.UnknownResourceException",
  "moto.ram.models.ResourceAccessManagerBackend",
  "moto.ram.models.ResourceShare",
  "moto.ram.models.ram_backends",
  "moto.rds.exceptions.DBInstanceNotFoundError",
  "moto.rds.exceptions.DBSecurityGroupNotFoundError",
  "moto.rds.exceptions.DBSubnetGroupNotFoundError",
  "moto.rds.exceptions.RDSClientError",
  "moto.rds.exceptions.UnformattedGetAttTemplateException",
  "moto.rds.models.RDSBackend",
  "moto.rds2.exceptions.DBInstanceNotFoundError",
  "moto.rds2.exceptions.DBParameterGroupNotFoundError",
  "moto.rds2.exceptions.DBSecurityGroupNotFoundError",
  "moto.rds2.exceptions.DBSnapshotAlreadyExistsError",
  "moto.rds2.exceptions.DBSnapshotNotFoundError",
  "moto.rds2.exceptions.DBSubnetGroupNotFoundError",
  "moto.rds2.exceptions.InvalidDBClusterStateFaultError",
  "moto.rds2.exceptions.InvalidDBInstanceStateError",
  "moto.rds2.exceptions.OptionGroupNotFoundFaultError",
  "moto.rds2.exceptions.RDSClientError",
  "moto.rds2.exceptions.SnapshotQuotaExceededError",
  "moto.rds2.models.DBParameterGroup",
  "moto.rds2.models.Database",
  "moto.rds2.models.OptionGroup",
  "moto.rds2.models.OptionGroupOptionSetting",
  "moto.rds2.models.RDS2Backend",
  "moto.rds2.models.SecurityGroup",
  "moto.rds2.models.Snapshot",
  "moto.rds2.models.SubnetGroup",
  "moto.rds2.models.rds2_backends",
  "moto.rds2.rds2_backends",
  "moto.redshift.exceptions.ClusterAlreadyExistsFaultError",
  "moto.redshift.exceptions.ClusterNotFoundError",
  "moto.redshift.exceptions.ClusterParameterGroupNotFoundError",
  "moto.redshift.exceptions.ClusterSecurityGroupNotFoundError",
  "moto.redshift.exceptions.ClusterSnapshotAlreadyExistsError",
  "moto.redshift.exceptions.ClusterSnapshotNotFoundError",
  "moto.redshift.exceptions.ClusterSubnetGroupNotFoundError",
  "moto.redshift.exceptions.InvalidParameterValueError",
  "moto.redshift.exceptions.InvalidSubnetError",
  "moto.redshift.exceptions.RedshiftClientError",
  "moto.redshift.exceptions.ResourceNotFoundFaultError",
  "moto.redshift.exceptions.SnapshotCopyAlreadyDisabledFaultError",
  "moto.redshift.exceptions.SnapshotCopyAlreadyEnabledFaultError",
  "moto.redshift.exceptions.SnapshotCopyDisabledFaultError",
  "moto.redshift.exceptions.SnapshotCopyGrantAlreadyExistsFaultError",
  "moto.redshift.exceptions.SnapshotCopyGrantNotFoundFaultError",
  "moto.redshift.models.Cluster",
  "moto.redshift.models.ParameterGroup",
  "moto.redshift.models.RedshiftBackend",
  "moto.redshift.models.SecurityGroup",
  "moto.redshift.models.Snapshot",
  "moto.redshift.models.SnapshotCopyGrant",
  "moto.redshift.models.SubnetGroup",
  "moto.redshift.models.TaggableResourceMixin",
  "moto.redshift.models.redshift_backends",
  "moto.redshift.redshift_backends",
  "moto.redshift.responses.RedshiftResponse",
  "moto.redshift.responses.convert_json_error_to_xml",
  "moto.redshift.responses.itemize",
  "moto.resourcegroups.exceptions.BadRequestException",
  "moto.resourcegroups.models.FakeResourceGroup",
  "moto.resourcegroups.models.ResourceGroups",
  "moto.resourcegroups.models.ResourceGroupsBackend",
  "moto.resourcegroups.models.resourcegroups_backends",
  "moto.resourcegroupstaggingapi.models.ResourceGroupsTaggingAPIBackend",
  "moto.resourcegroupstaggingapi.models.resourcegroupstaggingapi_backends",
  "moto.route53.models.FakeZone",
  "moto.route53.models.HealthCheck",
  "moto.route53.models.ROUTE53_ID_CHOICE",
  "moto.route53.models.RecordSet",
  "moto.route53.models.RecordSetGroup",
  "moto.route53.models.Route53Backend",
  "moto.route53.models.create_route53_zone_id",
  "moto.route53.models.reverse_domain_name",
  "moto.route53.urls.tag_response1",
  "moto.route53.urls.tag_response2",
  "moto.s3.config.S3AccountPublicAccessBlockConfigQuery",
  "moto.s3.config.S3ConfigQuery",
  "moto.s3.config.s3_account_public_access_block_query",
  "moto.s3.config.s3_config_query",
  "moto.s3.exceptions.BucketAccessDeniedError",
  "moto.s3.exceptions.BucketAlreadyExists",
  "moto.s3.exceptions.BucketError",
  "moto.s3.exceptions.BucketInvalidAccessKeyIdError",
  "moto.s3.exceptions.BucketInvalidTokenError",
  "moto.s3.exceptions.BucketSignatureDoesNotMatchError",
  "moto.s3.exceptions.CrossLocationLoggingProhibitted",
  "moto.s3.exceptions.DuplicateTagKeys",
  "moto.s3.exceptions.ERROR_WITH_BUCKET_NAME",
  "moto.s3.exceptions.EntityTooSmall",
  "moto.s3.exceptions.IllegalLocationConstraintException",
  "moto.s3.exceptions.InvalidBucketName",
  "moto.s3.exceptions.InvalidNotificationARN",
  "moto.s3.exceptions.InvalidNotificationDestination",
  "moto.s3.exceptions.InvalidNotificationEvent",
  "moto.s3.exceptions.InvalidPart",
  "moto.s3.exceptions.InvalidPartOrder",
  "moto.s3.exceptions.InvalidPublicAccessBlockConfiguration",
  "moto.s3.exceptions.InvalidRequest",
  "moto.s3.exceptions.InvalidStorageClass",
  "moto.s3.exceptions.InvalidTargetBucketForLogging",
  "moto.s3.exceptions.MalformedACLError",
  "moto.s3.exceptions.MalformedXML",
  "moto.s3.exceptions.MissingBucket",
  "moto.s3.exceptions.MissingKey",
  "moto.s3.exceptions.NoSuchPublicAccessBlockConfiguration",
  "moto.s3.exceptions.NoSuchUpload",
  "moto.s3.exceptions.NoSystemTags",
  "moto.s3.exceptions.ObjectNotInActiveTierError",
  "moto.s3.exceptions.S3AccessDeniedError",
  "moto.s3.exceptions.S3ClientError",
  "moto.s3.exceptions.S3InvalidAccessKeyIdError",
  "moto.s3.exceptions.S3InvalidTokenError",
  "moto.s3.exceptions.S3SignatureDoesNotMatchError",
  "moto.s3.exceptions.WrongPublicAccessBlockAccountIdError",
  "moto.s3.models.ALL_USERS_GRANTEE",
  "moto.s3.models.AUTHENTICATED_USERS_GRANTEE",
  "moto.s3.models.CAMEL_CASED_PERMISSIONS",
  "moto.s3.models.CorsRule",
  "moto.s3.models.DEFAULT_KEY_BUFFER_SIZE",
  "moto.s3.models.DEFAULT_TEXT_ENCODING",
  "moto.s3.models.FakeAcl",
  "moto.s3.models.FakeBucket",
  "moto.s3.models.FakeDeleteMarker",
  "moto.s3.models.FakeGrant",
  "moto.s3.models.FakeGrantee",
  "moto.s3.models.FakeKey",
  "moto.s3.models.FakeMultipart",
  "moto.s3.models.LOG_DELIVERY_GRANTEE",
  "moto.s3.models.LifecycleAndFilter",
  "moto.s3.models.LifecycleFilter",
  "moto.s3.models.LifecycleRule",
  "moto.s3.models.MAX_BUCKET_NAME_LENGTH",
  "moto.s3.models.MIN_BUCKET_NAME_LENGTH",
  "moto.s3.models.Notification",
  "moto.s3.models.NotificationConfiguration",
  "moto.s3.models.OWNER",
  "moto.s3.models.PERMISSION_FULL_CONTROL",
  "moto.s3.models.PERMISSION_READ",
  "moto.s3.models.PERMISSION_READ_ACP",
  "moto.s3.models.PERMISSION_WRITE",
  "moto.s3.models.PublicAccessBlock",
  "moto.s3.models.S3Backend",
  "moto.s3.models.STORAGE_CLASS",
  "moto.s3.models.UPLOAD_ID_BYTES",
  "moto.s3.models.UPLOAD_PART_MIN_SIZE",
  "moto.s3.models.convert_str_to_bool",
  "moto.s3.models.get_canned_acl",
  "moto.s3.models.get_moto_s3_account_id",
  "moto.s3.models.s3_backend.get_object",
  "moto.s3.responses.ACTION_MAP",
  "moto.s3.responses.DEFAULT_REGION_NAME",
  "moto.s3.responses.ResponseObject",
  "moto.s3.s3_backend.get_object",
  "moto.s3.s3_backends",
  "moto.s3.utils.REGION_URL_REGEX",
  "moto.s3.utils._VersionedKeyStore",
  "moto.s3.utils.bucket_and_name_from_url",
  "moto.s3.utils.bucket_name_regex",
  "moto.s3bucket_path.utils.bucket_name_from_url",
  "moto.s3bucket_path.utils.is_delete_keys",
  "moto.s3bucket_path.utils.parse_key_name",
  "moto.sagemaker.exceptions.ERROR_WITH_MODEL_NAME",
  "moto.sagemaker.exceptions.MissingModel",
  "moto.sagemaker.exceptions.ModelError",
  "moto.sagemaker.exceptions.SagemakerClientError",
  "moto.sagemaker.models.BaseObject",
  "moto.sagemaker.models.FakeEndpoint",
  "moto.sagemaker.models.FakeEndpointConfig",
  "moto.sagemaker.models.FakeSagemakerNotebookInstance",
  "moto.sagemaker.models.FakeTrainingJob",
  "moto.sagemaker.models.Model",
  "moto.sagemaker.models.SageMakerModelBackend",
  "moto.sagemaker.models.sagemaker_backends",
  "moto.sagemaker.sagemaker_backend",
  "moto.sagemaker.validators.is_integer_between",
  "moto.sagemaker.validators.is_one_of",
  "moto.secretsmanager.exceptions.ClientError",
  "moto.secretsmanager.exceptions.InvalidParameterException",
  "moto.secretsmanager.exceptions.InvalidRequestException",
  "moto.secretsmanager.exceptions.ResourceExistsException",
  "moto.secretsmanager.exceptions.ResourceNotFoundException",
  "moto.secretsmanager.exceptions.SecretHasNoValueException",
  "moto.secretsmanager.exceptions.SecretNotFoundException",
  "moto.secretsmanager.exceptions.SecretsManagerClientError",
  "moto.secretsmanager.exceptions.ValidationException",
  "moto.secretsmanager.list_secrets.filters._matcher",
  "moto.secretsmanager.list_secrets.filters.description",
  "moto.secretsmanager.list_secrets.filters.name",
  "moto.secretsmanager.list_secrets.filters.tag_key",
  "moto.secretsmanager.list_secrets.filters.tag_value",
  "moto.secretsmanager.models.SecretsManagerBackend",
  "moto.secretsmanager.models.SecretsStore",
  "moto.secretsmanager.models._filter_functions",
  "moto.secretsmanager.models._matches",
  "moto.secretsmanager.models.secretsmanager_backends",
  "moto.secretsmanager.responses._validate_filters",
  "moto.secretsmanager.utils._add_password_require_each_included_type",
  "moto.secretsmanager.utils._exclude_characters",
  "moto.server.AWSTestHelper",
  "moto.server.DEFAULT_SERVICE_REGION",
  "moto.server.DomainDispatcherApplication",
  "moto.server.HTTP_METHODS",
  "moto.server.RegexConverter",
  "moto.server.UNSIGNED_ACTIONS",
  "moto.server.UNSIGNED_REQUESTS",
  "moto.server.create_backend_app",
  "moto.server.main",
  "moto.ses.exceptions.ConfigurationSetDoesNotExist",
  "moto.ses.exceptions.EventDestinationAlreadyExists",
  "moto.ses.exceptions.MessageRejectedError",
  "moto.ses.exceptions.RuleAlreadyExists",
  "moto.ses.exceptions.RuleSetDoesNotExist",
  "moto.ses.exceptions.RuleSetNameAlreadyExists",
  "moto.ses.exceptions.TemplateDoesNotExist",
  "moto.ses.exceptions.TemplateNameAlreadyExists",
  "moto.ses.models.Message",
  "moto.ses.models.RECIPIENT_LIMIT",
  "moto.ses.models.RawMessage",
  "moto.ses.models.SESBackend",
  "moto.ses.models.SESFeedback",
  "moto.ses.models.SESQuota",
  "moto.ses.models.TemplateMessage",
  "moto.ses.utils.random_hex",
  "moto.settings.INITIAL_NO_AUTH_ACTION_COUNT",
  "moto.settings.TEST_SERVER_MODE",
  "moto.sns.exceptions.DuplicateSnsEndpointError",
  "moto.sns.exceptions.InternalError",
  "moto.sns.exceptions.InvalidParameterValue",
  "moto.sns.exceptions.ResourceNotFoundError",
  "moto.sns.exceptions.SNSInvalidParameter",
  "moto.sns.exceptions.SNSNotFoundError",
  "moto.sns.exceptions.SnsEndpointDisabled",
  "moto.sns.exceptions.TagLimitExceededError",
  "moto.sns.models.DEFAULT_PAGE_SIZE",
  "moto.sns.models.MAXIMUM_MESSAGE_LENGTH",
  "moto.sns.models.MAXIMUM_SMS_MESSAGE_BYTES",
  "moto.sns.models.PlatformApplication",
  "moto.sns.models.PlatformEndpoint",
  "moto.sns.models.SNSBackend",
  "moto.sns.models.Subscription",
  "moto.sns.models.Topic",
  "moto.sns.models.sns_backends",
  "moto.sns.models.sns_backends.publish",
  "moto.sns.utils.E164_REGEX",
  "moto.sqs.exceptions.BatchEntryIdsNotDistinct",
  "moto.sqs.exceptions.BatchRequestTooLong",
  "moto.sqs.exceptions.EmptyBatchRequest",
  "moto.sqs.exceptions.InvalidAttributeName",
  "moto.sqs.exceptions.InvalidBatchEntryId",
  "moto.sqs.exceptions.InvalidParameterValue",
  "moto.sqs.exceptions.MessageAttributesInvalid",
  "moto.sqs.exceptions.MissingParameter",
  "moto.sqs.exceptions.OverLimit",
  "moto.sqs.exceptions.QueueAlreadyExists",
  "moto.sqs.exceptions.QueueDoesNotExist",
  "moto.sqs.exceptions.ReceiptHandleIsInvalid",
  "moto.sqs.exceptions.TooManyEntriesInBatchRequest",
  "moto.sqs.models.DEFAULT_SENDER_ID",
  "moto.sqs.models.MAXIMUM_MESSAGE_LENGTH",
  "moto.sqs.models.Message",
  "moto.sqs.models.Queue",
  "moto.sqs.models.SQSBackend",
  "moto.sqs.models.TRANSPORT_TYPE_ENCODINGS",
  "moto.sqs.models.sqs_backends",
  "moto.sqs.responses.DEFAULT_RECEIVED_MESSAGES",
  "moto.sqs.responses.MAXIMUM_MESSAGE_LENGTH",
  "moto.sqs.responses.MAXIMUM_VISIBILTY_TIMEOUT",
  "moto.sqs.responses.SQSResponse",
  "moto.sqs.sqs_backends.queues.values",
  "moto.sqs.sqs_backends.send_message",
  "moto.sqs.urls.dispatch",
  "moto.ssm.exceptions.AccessDeniedException",
  "moto.ssm.exceptions.DocumentAlreadyExists",
  "moto.ssm.exceptions.DuplicateDocumentContent",
  "moto.ssm.exceptions.DuplicateDocumentVersionName",
  "moto.ssm.exceptions.InvalidDocument",
  "moto.ssm.exceptions.InvalidDocumentContent",
  "moto.ssm.exceptions.InvalidDocumentOperation",
  "moto.ssm.exceptions.InvalidDocumentVersion",
  "moto.ssm.exceptions.InvalidFilterKey",
  "moto.ssm.exceptions.InvalidFilterOption",
  "moto.ssm.exceptions.InvalidFilterValue",
  "moto.ssm.exceptions.ParameterNotFound",
  "moto.ssm.exceptions.ParameterVersionLabelLimitExceeded",
  "moto.ssm.exceptions.ParameterVersionNotFound",
  "moto.ssm.exceptions.ValidationException",
  "moto.ssm.models.Command",
  "moto.ssm.models.Document",
  "moto.ssm.models.MAX_TIMEOUT_SECONDS",
  "moto.ssm.models.Parameter",
  "moto.ssm.models.SimpleSystemManagerBackend",
  "moto.ssm.models._document_filter_equal_comparator",
  "moto.ssm.models._document_filter_list_includes_comparator",
  "moto.ssm.models._document_filter_match",
  "moto.ssm.models._validate_document_format",
  "moto.ssm.models._validate_document_info",
  "moto.ssm.models.generate_ssm_doc_param_list",
  "moto.ssm.models.ssm_backends",
  "moto.ssm.utils.ACCOUNT_ID",
  "moto.stepfunctions.exceptions.AWSError",
  "moto.stepfunctions.models.Execution",
  "moto.stepfunctions.models.StateMachine",
  "moto.stepfunctions.models.StepFunctionBackend",
  "moto.stepfunctions.models.stepfunction_backends",
  "moto.sts.exceptions.STSClientError",
  "moto.sts.exceptions.STSValidationError",
  "moto.sts.models.ACCOUNT_ID",
  "moto.sts.models.AssumedRole",
  "moto.sts.models.STSBackend",
  "moto.sts.models.Token",
  "moto.sts.responses.MAX_FEDERATION_TOKEN_POLICY_LENGTH",
  "moto.sts.sts_backend.assumed_roles",
  "moto.sts.utils.ACCOUNT_SPECIFIC_ACCESS_KEY_PREFIX",
  "moto.sts.utils.ACCOUNT_SPECIFIC_ASSUMED_ROLE_ID_PREFIX",
  "moto.sts.utils.SESSION_TOKEN_PREFIX",
  "moto.sts.utils._random_uppercase_or_digit_sequence",
  "moto.sts.utils.random_access_key_id",
  "moto.sts.utils.random_assumed_role_id",
  "moto.sts.utils.random_secret_access_key",
  "moto.sts.utils.random_session_token",
  "moto.swf.exceptions.SWFClientError",
  "moto.swf.exceptions.SWFDecisionValidationException",
  "moto.swf.exceptions.SWFDefaultUndefinedFault",
  "moto.swf.exceptions.SWFDomainAlreadyExistsFault",
  "moto.swf.exceptions.SWFDomainDeprecatedFault",
  "moto.swf.exceptions.SWFSerializationException",
  "moto.swf.exceptions.SWFTypeAlreadyExistsFault",
  "moto.swf.exceptions.SWFTypeDeprecatedFault",
  "moto.swf.exceptions.SWFUnknownResourceFault",
  "moto.swf.exceptions.SWFValidationException",
  "moto.swf.exceptions.SWFWorkflowExecutionAlreadyStartedFault",
  "moto.swf.models.KNOWN_SWF_TYPES",
  "moto.swf.models.SWFBackend",
  "moto.swf.models.history_event.SUPPORTED_HISTORY_EVENT_TYPES",
  "moto.swf.models.swf_backends",
  "moto.swf.models.workflow_execution.WorkflowExecution",
  "moto.utilities.tagging_service.TaggingService",
  "moto.utilities.utils.random_string",
  "moto.xray.exceptions.AWSError",
  "moto.xray.mock_client.MockEmitter",
  "moto.xray.models.SegmentCollection",
  "moto.xray.models.TelemetryRecords",
  "moto.xray.models.TraceSegment",
  "moto.xray.models.XRayBackend",
  "moto.xray.models.json",
  "moto.xray.models.xray_backends",
  "moto.xray.xray_backends",
  "nat_gateways.NatGateways",
  "network_acls.NetworkACLs",
  "node_executor",
  "operator.attrgetter",
  "os.SEEK_END",
  "os.environ",
  "os.environ.get",
  "os.getenv",
  "os.linesep.join",
  "os.path.abspath",
  "os.path.dirname",
  "os.path.join",
  "os.urandom",
  "parsing.OutputMap",
  "parsing.ResourceMap",
  "pkg_resources.resource_filename",
  "pkg_resources.resource_string",
  "placement_groups.PlacementGroups",
  "processor",
  "pytz.utc",
  "random.choice",
  "random.randint",
  "random.random",
  "random.sample",
  "re.I",
  "re.IGNORECASE",
  "re.M",
  "re.UNICODE",
  "re.compile",
  "re.findall",
  "re.match",
  "re.search",
  "re.split",
  "re.sub",
  "recursively_get_dependencies",
  "requests.packages.urllib3.contrib.pyopenssl.extract_from_urllib3",
  "requests.packages.urllib3.contrib.pyopenssl.inject_into_urllib3",
  "requests.post",
  "requests.structures.CaseInsensitiveDict",
  "requests_func",
  "reserved_instances.ReservedInstances",
  "resources.LANGUAGE_CODES",
  "resources.VOICE_DATA",
  "resources.VOICE_IDS",
  "response_callback",
  "responses.APIGatewayResponse",
  "responses.AWSCertificateManagerResponse.dispatch",
  "responses.ActionAuthenticatorMixin.set_initial_no_auth_action_count",
  "responses.ApplicationAutoScalingResponse.dispatch",
  "responses.AthenaResponse.dispatch",
  "responses.AutoScalingResponse.dispatch",
  "responses.BatchResponse.dispatch",
  "responses.CallbackResponse",
  "responses.CloudFormationResponse.dispatch",
  "responses.CloudWatchResponse.dispatch",
  "responses.CodeCommitResponse.dispatch",
  "responses.CodePipelineResponse.dispatch",
  "responses.CognitoIdentityResponse.dispatch",
  "responses.CognitoIdpJsonWebKeyResponse",
  "responses.CognitoIdpResponse.dispatch",
  "responses.ConfigResponse.dispatch",
  "responses.DELETE",
  "responses.DataPipelineResponse.dispatch",
  "responses.DataSyncResponse.dispatch",
  "responses.DynamoDBStreamsHandler.dispatch",
  "responses.DynamoHandler.dispatch",
  "responses.EBResponse.dispatch",
  "responses.EC2ContainerServiceResponse.dispatch",
  "responses.EC2Response.dispatch",
  "responses.ECRResponse.dispatch",
  "responses.Ec2InstanceConnectResponse.dispatch",
  "responses.ElasticMapReduceResponse.dispatch",
  "responses.EmailResponse.dispatch",
  "responses.EventsHandler.dispatch",
  "responses.GET",
  "responses.GlacierResponse.all_vault_response",
  "responses.GlacierResponse.vault_archive_individual_response",
  "responses.GlacierResponse.vault_archive_response",
  "responses.GlacierResponse.vault_jobs_individual_response",
  "responses.GlacierResponse.vault_jobs_output_response",
  "responses.GlacierResponse.vault_jobs_response",
  "responses.GlacierResponse.vault_response",
  "responses.GlueResponse.dispatch",
  "responses.HEAD",
  "responses.HTTPResponse",
  "responses.IamResponse.dispatch",
  "responses.InstanceMetadataResponse",
  "responses.IoTDataPlaneResponse",
  "responses.IoTResponse",
  "responses.KinesisResponse.dispatch",
  "responses.KinesisVideoArchivedMediaResponse",
  "responses.KinesisVideoResponse",
  "responses.KmsResponse.dispatch",
  "responses.LambdaResponse",
  "responses.LogsResponse.dispatch",
  "responses.ManagedBlockchainResponse.invitation_response",
  "responses.ManagedBlockchainResponse.invitationid_response",
  "responses.ManagedBlockchainResponse.member_response",
  "responses.ManagedBlockchainResponse.memberid_response",
  "responses.ManagedBlockchainResponse.network_response",
  "responses.ManagedBlockchainResponse.networkid_response",
  "responses.ManagedBlockchainResponse.node_response",
  "responses.ManagedBlockchainResponse.nodeid_response",
  "responses.ManagedBlockchainResponse.proposal_response",
  "responses.ManagedBlockchainResponse.proposal_votes_response",
  "responses.ManagedBlockchainResponse.proposalid_response",
  "responses.MotoAPIResponse",
  "responses.OPTIONS",
  "responses.OpsWorksResponse.dispatch",
  "responses.OrganizationsResponse.dispatch",
  "responses.PATCH",
  "responses.POST",
  "responses.PUT",
  "responses.Pattern",
  "responses.PollyResponse.dispatch",
  "responses.RDS2Response.dispatch",
  "responses.RDSResponse.dispatch",
  "responses.RedshiftResponse.dispatch",
  "responses.RequestsMock",
  "responses.ResourceAccessManagerResponse.dispatch",
  "responses.ResourceGroupsResponse.dispatch",
  "responses.ResourceGroupsTaggingAPIResponse.dispatch",
  "responses.Route53",
  "responses.S3ResponseInstance.ambiguous_response",
  "responses.S3ResponseInstance.bucket_response",
  "responses.S3ResponseInstance.key_or_control_response",
  "responses.SNSResponse.dispatch",
  "responses.SQSResponse",
  "responses.SWFResponse.dispatch",
  "responses.SageMakerResponse.dispatch",
  "responses.SecretsManagerResponse.dispatch",
  "responses.SimpleSystemManagerResponse.dispatch",
  "responses.StepFunctionResponse.dispatch",
  "responses.TokenResponse.dispatch",
  "responses.XRayResponse.dispatch",
  "responses._clean_unicode",
  "responses._default_mock",
  "responses._default_mock._matches.insert",
  "responses._handle_body",
  "responses._has_unicode",
  "responses._is_string",
  "route_tables.RouteTables",
  "security_groups.SecurityGroups",
  "six.BytesIO",
  "six.PY2",
  "six.PY3",
  "six.add_metaclass",
  "six.b",
  "six.binary_type",
  "six.integer_types",
  "six.iteritems",
  "six.itervalues",
  "six.moves.http_client.responses.get",
  "six.moves.range",
  "six.moves.urllib.parse.parse_qs",
  "six.moves.urllib.parse.parse_qsl",
  "six.moves.urllib.parse.quote",
  "six.moves.urllib.parse.unquote",
  "six.moves.urllib.parse.urlencode",
  "six.moves.urllib.parse.urlparse",
  "six.moves.urllib.parse.urlsplit",
  "six.next",
  "six.string_types",
  "six.text_type",
  "six.u",
  "socket.AF_INET",
  "socket.IPPROTO_TCP",
  "socket.SOCK_STREAM",
  "socket.SocketType",
  "socket._GLOBAL_DEFAULT_TIMEOUT",
  "socket.__dict__",
  "socket._socketobject",
  "socket.create_connection",
  "socket.error",
  "socket.getaddrinfo",
  "socket.gethostbyname",
  "socket.gethostname",
  "socket.socket",
  "socks.socksocket",
  "spot_fleets.SpotFleets",
  "spot_instances.SpotInstances",
  "sshpubkeys.keys.SSHKey",
  "ssl.SSLContext.wrap_socket",
  "ssl.SSLSocket",
  "ssl.sslwrap_simple",
  "ssl.wrap_socket",
  "str.encode",
  "string.ascii_letters",
  "string.ascii_lowercase",
  "string.ascii_uppercase",
  "string.digits",
  "string.punctuation",
  "struct.pack",
  "struct.unpack",
  "subnets.Subnets",
  "sys.argv",
  "sys.getdefaultencoding",
  "sys.getsizeof",
  "sys.version_info",
  "tag_filter",
  "tags.TagResponse",
  "tarfile.TarFile",
  "tarfile.TarInfo",
  "tempfile.SpooledTemporaryFile",
  "test",
  "threading.Lock",
  "threading.Thread",
  "threading.Thread.__init__",
  "time.mktime",
  "time.sleep",
  "time.time",
  "timeout.Timeout",
  "to_attr",
  "traceback.format_stack",
  "traceback.print_exc",
  "transform",
  "type.lower",
  "types.ClassType",
  "types.MethodType",
  "urllib.parse.unquote",
  "urllib.parse.urlparse",
  "urllib3.PoolManager",
  "urlparse.unquote",
  "utf8",
  "utils.EC2_PREFIX_TO_RESOURCE",
  "utils.EC2_RESOURCE_TO_PREFIX",
  "utils._VersionedKeyStore",
  "utils.admin_password_ok",
  "utils.bucket_name_from_url",
  "utils.check_secret_hash",
  "utils.clean_key_name",
  "utils.compose_new_shard_iterator",
  "utils.compose_shard_iterator",
  "utils.convert_flask_to_responses_response",
  "utils.convert_httpretty_response",
  "utils.convert_regex_to_flask_path",
  "utils.create_dns_entries",
  "utils.create_id",
  "utils.decapitalize",
  "utils.decode_utf8",
  "utils.decompose_shard_iterator",
  "utils.decrypt",
  "utils.encrypt",
  "utils.filter_internet_gateways",
  "utils.filter_reservations",
  "utils.generate_changeset_id",
  "utils.generate_key_id",
  "utils.generate_master_key",
  "utils.generate_receipt_handle",
  "utils.generate_route_id",
  "utils.generate_stack_id",
  "utils.generate_stackset_arn",
  "utils.generate_stackset_id",
  "utils.generate_vpc_end_point_id",
  "utils.generic_filter",
  "utils.get_invitation_id",
  "utils.get_job_id",
  "utils.get_member_id",
  "utils.get_network_id",
  "utils.get_node_id",
  "utils.get_prefix",
  "utils.get_proposal_id",
  "utils.get_random_identity_id",
  "utils.get_random_message_id",
  "utils.get_random_pipeline_id",
  "utils.get_secret_name_from_arn",
  "utils.invitationid_from_managedblockchain_url",
  "utils.is_e164",
  "utils.is_tag_filter",
  "utils.is_valid_cidr",
  "utils.is_valid_resource_id",
  "utils.lowercase_first_key",
  "utils.make_arn_for_certificate",
  "utils.make_arn_for_compute_env",
  "utils.make_arn_for_dashboard",
  "utils.make_arn_for_job_queue",
  "utils.make_arn_for_lexicon",
  "utils.make_arn_for_load_balancer",
  "utils.make_arn_for_subscription",
  "utils.make_arn_for_target_group",
  "utils.make_arn_for_task_def",
  "utils.make_arn_for_topic",
  "utils.make_function_arn",
  "utils.make_function_ver_arn",
  "utils.member_name_exist_in_network",
  "utils.memberid_from_managedblockchain_url",
  "utils.metadata_from_headers",
  "utils.networkid_from_managedblockchain_url",
  "utils.nodeid_from_managedblockchain_url",
  "utils.nodes_in_member",
  "utils.number_of_members_in_network",
  "utils.number_of_nodes_in_member",
  "utils.parameter_arn",
  "utils.parse_message_attributes",
  "utils.parse_region_from_url",
  "utils.proposalid_from_managedblockchain_url",
  "utils.random_access_key",
  "utils.random_alphanumeric",
  "utils.random_ami_id",
  "utils.random_cluster_id",
  "utils.random_customer_gateway_id",
  "utils.random_dhcp_option_id",
  "utils.random_eip_allocation_id",
  "utils.random_eip_association_id",
  "utils.random_eni_attach_id",
  "utils.random_eni_id",
  "utils.random_instance_group_id",
  "utils.random_instance_id",
  "utils.random_internet_gateway_id",
  "utils.random_ip",
  "utils.random_ipv6_cidr",
  "utils.random_key_pair",
  "utils.random_launch_template_id",
  "utils.random_nat_gateway_id",
  "utils.random_network_acl_id",
  "utils.random_network_acl_subnet_association_id",
  "utils.random_password",
  "utils.random_policy_id",
  "utils.random_private_ip",
  "utils.random_public_ip",
  "utils.random_reservation_id",
  "utils.random_resource_id",
  "utils.random_route_table_id",
  "utils.random_security_group_id",
  "utils.random_snapshot_id",
  "utils.random_spot_fleet_request_id",
  "utils.random_spot_request_id",
  "utils.random_step_id",
  "utils.random_subnet_association_id",
  "utils.random_subnet_id",
  "utils.random_suffix",
  "utils.random_volume_id",
  "utils.random_vpc_cidr_association_id",
  "utils.random_vpc_id",
  "utils.random_vpc_peering_connection_id",
  "utils.random_vpn_connection_id",
  "utils.random_vpn_gateway_id",
  "utils.randor_ipv4_cidr",
  "utils.region_from_glacier_url",
  "utils.region_from_managedblckchain_url",
  "utils.remove_capitalization_of_dict_keys",
  "utils.rsa_public_key_fingerprint",
  "utils.rsa_public_key_parse",
  "utils.secret_arn",
  "utils.simple_aws_filter_to_re",
  "utils.split_route_id",
  "utils.steps_from_query_string",
  "utils.tag_filter_matches",
  "utils.undo_clean_key_name",
  "utils.utf8",
  "utils.validate_template_cfn_lint",
  "utils.vault_from_glacier_url",
  "utils.yaml_tag_constructor",
  "uuid.uuid4",
  "val",
  "virtual_private_gateways.VirtualPrivateGateways",
  "vm_export.VMExport",
  "vm_import.VMImport",
  "vpc_peering_connections.VPCPeeringConnections",
  "vpcs.VPCs",
  "vpn_connections.VPNConnections",
  "warnings.warn",
  "weakref.WeakValueDictionary",
  "weakref.proxy",
  "weakref.ref",
  "werkzeug.exceptions.BadRequest",
  "werkzeug.exceptions.HTTPException",
  "werkzeug.routing.BaseConverter",
  "werkzeug.routing.Map",
  "werkzeug.serving.run_simple",
  "werkzeug.wrappers.Request",
  "werkzeug.wrappers.Request.from_values",
  "windows.Windows",
  "workflow_execution.WorkflowExecution",
  "workflow_type.WorkflowType",
  "xml.dom.minidom.parseString",
  "xml.etree.ElementTree.Element",
  "xml.etree.ElementTree.SubElement",
  "xml.etree.ElementTree.fromstring",
  "xml.etree.ElementTree.tostring",
  "xml.sax.saxutils.escape",
  "xmltodict.parse",
  "xmltodict.unparse",
  "yaml.Loader",
  "yaml.SequenceNode",
  "yaml.YAMLError",
  "yaml.add_multi_constructor",
  "yaml.dump",
  "yaml.load",
  "yaml.parser.ParserError",
  "yaml.safe_load",
  "yaml.scanner.ScannerError",
  "zipfile.ZIP_DEFLATED",
  "zipfile.ZipFile"
 ],
 "deps": {
  "ConditionalOp": [],
  "OpClass": [],
  "_adjust": [],
  "_class": [],
  "_convert": [],
  "_convert_to_bytes": [],
  "_f": [],
  "_field_match": [],
  "_orig_get_adapter": [],
  "_parse_number_parameter": [],
  "abc": [],
  "account_attributes": [],
  "activity_task": [],
  "activity_type": [],
  "aliases": [],
  "amazon_dev_pay": [],
  "amis": [],
  "argparse": [],
  "availability_zones_and_regions": [],
  "aws_managed_policies": [],
  "aws_xray_sdk": [],
  "backend_app": [],
  "backports": [],
  "base64": [],
  "binascii": [],
  "bisect": [],
  "boto": [],
  "boto3": [],
  "botocore": [],
  "builtins": [],
  "calendar": [],
  "cfnlint": [],
  "cloud_formation": [],
  "codecs": [],
  "collections": [],
  "comparison_func": [],
  "comparisons": [],
  "compat": [],
  "constants": [],
  "contextlib": [],
  "conv": [],
  "copy": [],
  "core": [],
  "cryptography": [],
  "customer_gateways": [],
  "datetime": [],
  "dateutil": [],
  "decimal": [],
  "decision_task": [],
  "decode_hex": [],
  "decorate_callable": [],
  "decorate_class": [],
  "dhcp_options": [],
  "dict": [],
  "do_parse": [],
  "docker": [],
  "domain": [],
  "elastic_block_store": [],
  "elastic_ip_addresses": [],
  "elastic_network_interfaces": [],
  "elb": [],
  "email": [],
  "enum": [],
  "errno": [],
  "errors": [],
  "events": [],
  "exceptions": [],
  "expand": [],
  "expand_attrs": [],
  "f": [],
  "factory": [],
  "fail_schedule_activity_task": [],
  "feedback": [],
  "filter_function": [],
  "flask": [],
  "flatten_attrs": [],
  "fnmatch": [],
  "func": [],
  "func_elem_factory": [],
  "function": [],
  "functools": [],
  "general": [],
  "generic_type": [],
  "get_ec2_keys": [],
  "get_ec2_tags": [],
  "get_ec2_values": [],
  "get_elbv2_tags": [],
  "get_index_and_direction_from_token": [],
  "get_kms_tags": [],
  "get_resource_types": [],
  "get_target_group_tags": [],
  "gzip": [],
  "handler": [],
  "hashlib": [],
  "history_event": [],
  "hmac": [],
  "http": [],
  "id": [],
  "importlib": [],
  "importlib_resources": [],
  "input": [],
  "inspect": [],
  "inst_ref": [],
  "instances": [],
  "internet_gateways": [],
  "io": [],
  "ip_addresses": [],
  "ipaddress": [],
  "is_tracked": [],
  "itertools": [],
  "jinja2": [],
  "jose": [],
  "json": [],
  "jsondiff": [],
  "key_pairs": [],
  "launch_templates": [],
  "list_secrets": [],
  "logging": [],
  "make_int": [],
  "method": [],
  "mock": [],
  "mocked_backend": [],
  "models": [],
  "monitoring": [],
  "moto": [],
  "nat_gateways": [],
  "network_acls": [],
  "node_executor": [],
  "operator": [],
  "os": [],
  "parsing": [],
  "pkg_resources": [],
  "placement_groups": [],
  "processor": [],
  "pytz": [],
  "random": [],
  "re": [],
  "recursively_get_dependencies": [],
  "requests": [],
  "requests_func": [],
  "reserved_instances": [],
  "resources": [],
  "response_callback": [],
  "responses": [],
  "route_tables": [],
  "security_groups": [],
  "six": [],
  "socket": [],
  "socks": [],
  "spot_fleets": [],
  "spot_instances": [],
  "sshpubkeys": [],
  "ssl": [],
  "str": [],
  "string": [],
  "struct": [],
  "subnets": [],
  "sys": [],
  "tag_filter": [],
  "tags": [],
  "tarfile": [],
  "tempfile": [],
  "test": [],
  "threading": [],
  "time": [],
  "timeout": [],
  "to_attr": [],
  "traceback": [],
  "transform": [],
  "type": [],
  "types": [],
  "urllib": [],
  "urllib3": [],
  "urlparse": [],
  "utf8": [],
  "utils": [],
  "uuid": [],
  "val": [],
  "virtual_private_gateways": [],
  "vm_export": [],
  "vm_import": [],
  "vpc_peering_connections": [],
  "vpcs": [],
  "vpn_connections": [],
  "warnings": [],
  "weakref": [],
  "werkzeug": [],
  "windows": [],
  "workflow_execution": [],
  "workflow_type": [],
  "xml": [],
  "xmltodict": [],
  "yaml": [],
  "zipfile": []
 }
}