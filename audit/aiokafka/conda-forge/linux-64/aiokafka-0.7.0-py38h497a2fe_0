{
 "bad": [
  "Subscription",
  "aiokafka.client.ConnectionGroup.COORDINATION",
  "aiokafka.client.ConnectionGroup.DEFAULT",
  "aiokafka.client.CoordinationType.GROUP",
  "aiokafka.client.CoordinationType.TRANSACTION",
  "aiokafka.conn.CloseReason.CONNECTION_BROKEN",
  "aiokafka.conn.CloseReason.CONNECTION_TIMEOUT",
  "aiokafka.conn.CloseReason.SHUTDOWN",
  "aiokafka.conn.create_conn",
  "aiokafka.record.legacy_records.LegacyRecordBatchBuilder.CODEC_GZIP",
  "aiokafka.record.legacy_records.LegacyRecordBatchBuilder.CODEC_LZ4",
  "aiokafka.record.legacy_records.LegacyRecordBatchBuilder.CODEC_SNAPPY",
  "aiokafka.record.legacy_records.LegacyRecordBatchBuilder.record_overhead",
  "array.array",
  "auth_klass",
  "collections.defaultdict",
  "collections.deque",
  "dataclasses.dataclass",
  "error",
  "error.retriable",
  "error_type",
  "error_type.__name__",
  "fetcher.OffsetResetStrategy.EARLIEST",
  "fetcher.OffsetResetStrategy.LATEST",
  "functools.partial",
  "get_running_loop",
  "gssapi",
  "handshake_klass",
  "hashlib",
  "hashlib.pbkdf2_hmac",
  "hashlib.sha256",
  "hashlib.sha512",
  "hmac",
  "hmac.new",
  "inspect",
  "inspect.getmembers",
  "inspect.isclass",
  "kafka.ConsumerRebalanceListener",
  "kafka.cluster.ClusterMetadata",
  "kafka.codec.gzip_decode",
  "kafka.codec.gzip_encode",
  "kafka.codec.has_gzip",
  "kafka.codec.has_lz4",
  "kafka.codec.has_snappy",
  "kafka.codec.lz4_decode",
  "kafka.codec.lz4_decode_old_kafka",
  "kafka.codec.lz4_encode",
  "kafka.codec.lz4_encode_old_kafka",
  "kafka.codec.snappy_decode",
  "kafka.codec.snappy_encode",
  "kafka.conn.collect_hosts",
  "kafka.coordinator.assignors.roundrobin.RoundRobinPartitionAssignor",
  "kafka.coordinator.protocol.ConsumerProtocol",
  "kafka.coordinator.protocol.ConsumerProtocol.ASSIGNMENT.decode",
  "kafka.coordinator.protocol.ConsumerProtocol.METADATA.decode",
  "kafka.coordinator.protocol.ConsumerProtocol.PROTOCOL_TYPE",
  "kafka.errors.AuthenticationFailedError",
  "kafka.errors.AuthenticationMethodNotSupported",
  "kafka.errors.BrokerNotAvailableError",
  "kafka.errors.BrokerResponseError",
  "kafka.errors.Cancelled",
  "kafka.errors.ClusterAuthorizationFailedError",
  "kafka.errors.CommitFailedError",
  "kafka.errors.CorrelationIdError",
  "kafka.errors.CorruptRecordException",
  "kafka.errors.GroupAuthorizationFailedError",
  "kafka.errors.GroupCoordinatorNotAvailableError",
  "kafka.errors.GroupLoadInProgressError",
  "kafka.errors.IllegalArgumentError",
  "kafka.errors.IllegalGenerationError",
  "kafka.errors.IllegalSaslStateError",
  "kafka.errors.IllegalStateError",
  "kafka.errors.InconsistentGroupProtocolError",
  "kafka.errors.InvalidCommitOffsetSizeError",
  "kafka.errors.InvalidConfigurationError",
  "kafka.errors.InvalidFetchRequestError",
  "kafka.errors.InvalidGroupIdError",
  "kafka.errors.InvalidPartitionsError",
  "kafka.errors.InvalidReplicationAssignmentError",
  "kafka.errors.InvalidReplicationFactorError",
  "kafka.errors.InvalidRequestError",
  "kafka.errors.InvalidRequiredAcksError",
  "kafka.errors.InvalidSessionTimeoutError",
  "kafka.errors.InvalidTimestampError",
  "kafka.errors.InvalidTopicError",
  "kafka.errors.KafkaConnectionError",
  "kafka.errors.KafkaError",
  "kafka.errors.KafkaProtocolError",
  "kafka.errors.KafkaTimeoutError",
  "kafka.errors.KafkaUnavailableError",
  "kafka.errors.LeaderNotAvailableError",
  "kafka.errors.MessageSizeTooLargeError",
  "kafka.errors.NoBrokersAvailable",
  "kafka.errors.NoError",
  "kafka.errors.NodeNotReadyError",
  "kafka.errors.NotControllerError",
  "kafka.errors.NotCoordinatorForGroupError",
  "kafka.errors.NotEnoughReplicasAfterAppendError",
  "kafka.errors.NotEnoughReplicasError",
  "kafka.errors.NotLeaderForPartitionError",
  "kafka.errors.OffsetMetadataTooLargeError",
  "kafka.errors.OffsetOutOfRangeError",
  "kafka.errors.PolicyViolationError",
  "kafka.errors.RebalanceInProgressError",
  "kafka.errors.RecordListTooLargeError",
  "kafka.errors.ReplicaNotAvailableError",
  "kafka.errors.RequestTimedOutError",
  "kafka.errors.StaleControllerEpochError",
  "kafka.errors.StaleLeaderEpochCodeError",
  "kafka.errors.StaleMetadata",
  "kafka.errors.TooManyInFlightRequests",
  "kafka.errors.TopicAlreadyExistsError",
  "kafka.errors.TopicAuthorizationFailedError",
  "kafka.errors.UnknownError",
  "kafka.errors.UnknownMemberIdError",
  "kafka.errors.UnknownTopicOrPartitionError",
  "kafka.errors.UnrecognizedBrokerVersion",
  "kafka.errors.UnsupportedForMessageFormatError",
  "kafka.errors.UnsupportedSaslMechanismError",
  "kafka.errors.UnsupportedVersionError",
  "kafka.partitioner.default.DefaultPartitioner",
  "kafka.protocol.admin.ApiVersionRequest",
  "kafka.protocol.admin.ApiVersionRequest_v0",
  "kafka.protocol.admin.ListGroupsRequest_v0",
  "kafka.protocol.admin.SaslAuthenticateRequest",
  "kafka.protocol.admin.SaslHandShakeRequest",
  "kafka.protocol.api.Request",
  "kafka.protocol.api.RequestHeader",
  "kafka.protocol.api.Response",
  "kafka.protocol.commit.GroupCoordinatorRequest_v0",
  "kafka.protocol.commit.GroupCoordinatorResponse_v0",
  "kafka.protocol.commit.OffsetCommitRequest_v2",
  "kafka.protocol.commit.OffsetCommitRequest_v2.DEFAULT_GENERATION_ID",
  "kafka.protocol.commit.OffsetCommitRequest_v2.DEFAULT_RETENTION_TIME",
  "kafka.protocol.commit.OffsetFetchRequest",
  "kafka.protocol.commit.OffsetFetchRequest.API_KEY",
  "kafka.protocol.commit.OffsetFetchRequest_v0",
  "kafka.protocol.commit.OffsetFetchRequest_v1",
  "kafka.protocol.fetch.FetchRequest",
  "kafka.protocol.fetch.FetchRequest.API_KEY",
  "kafka.protocol.group.HeartbeatRequest",
  "kafka.protocol.group.JoinGroupRequest",
  "kafka.protocol.group.JoinGroupRequest.UNKNOWN_MEMBER_ID",
  "kafka.protocol.group.LeaveGroupRequest",
  "kafka.protocol.group.SyncGroupRequest",
  "kafka.protocol.metadata.MetadataRequest",
  "kafka.protocol.metadata.MetadataRequest.API_KEY",
  "kafka.protocol.metadata.MetadataRequest_v0",
  "kafka.protocol.offset.OffsetRequest",
  "kafka.protocol.types.Array",
  "kafka.protocol.types.Boolean",
  "kafka.protocol.types.Bytes",
  "kafka.protocol.types.Int16",
  "kafka.protocol.types.Int32",
  "kafka.protocol.types.Int64",
  "kafka.protocol.types.Int8",
  "kafka.protocol.types.Schema",
  "kafka.protocol.types.String",
  "kafka.structs.BrokerMetadata",
  "kafka.structs.OffsetAndMetadata",
  "kafka.structs.PartitionMetadata",
  "kafka.structs.TopicPartition",
  "klass",
  "klass.API_VERSION",
  "legacy_records.LegacyRecordBatch.RECORD_OVERHEAD_V0",
  "listener",
  "os.environ.get",
  "random",
  "random.choice",
  "random.shuffle",
  "self_ref",
  "ssl.Purpose",
  "ssl.Purpose.SERVER_AUTH",
  "ssl.create_default_context",
  "start_pending_task",
  "struct",
  "struct.Struct",
  "struct.calcsize",
  "struct.error",
  "struct.pack",
  "struct.pack_into",
  "struct.unpack",
  "struct.unpack_from",
  "sys",
  "sys.stdin.read",
  "time",
  "traceback",
  "uuid",
  "warnings",
  "weakref",
  "weakref.ref",
  "write",
  "write_byte"
 ],
 "deps": {
  "__future__": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "_asyncio": [
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "abc": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "array": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "asyncio": [],
  "base64": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "binascii": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "collections": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "contextlib": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "copy": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "distutils": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "enum": [
   "privy/conda-forge/noarch/privy-6.0.0-py_0",
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "functools": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "logging": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "os": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "re": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ],
  "typing": [
   "python/conda-forge/linux-64/python-3.6.10-he5300dc_1011_cpython",
   "python/conda-forge/linux-64/python-3.8.5-h1103e12_6_cpython"
  ]
 }
}